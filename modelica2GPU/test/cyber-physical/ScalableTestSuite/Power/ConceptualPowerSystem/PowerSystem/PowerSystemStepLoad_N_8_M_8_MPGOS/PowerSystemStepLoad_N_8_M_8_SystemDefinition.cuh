
#ifndef POWERSYSTEMSTEPLOAD_N_8_M_8_PERTHREAD_SYSTEMDEFINITION_H
#define POWERSYSTEMSTEPLOAD_N_8_M_8_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[71]=0.0;
    ACC[135]=0.0;
    ACC[62]=0.0;
    ACC[126]=0.0;
    ACC[53]=0.0;
    ACC[117]=0.0;
    ACC[44]=0.0;
    ACC[108]=0.0;
    ACC[35]=0.0;
    ACC[99]=0.0;
    ACC[26]=0.0;
    ACC[90]=0.0;
    ACC[17]=0.0;
    ACC[81]=0.0;
    ACC[8]=0.0;
    ACC[72]=0.0;
    ACC[289]=1.0;
    ACC[177]=500000000.0;
    ACC[305]=1.0;
    ACC[288]=1.0;
    ACC[176]=500000000.0;
    ACC[304]=1.0;
    ACC[287]=1.0;
    ACC[175]=500000000.0;
    ACC[303]=1.0;
    ACC[286]=1.0;
    ACC[174]=500000000.0;
    ACC[302]=1.0;
    ACC[285]=1.0;
    ACC[173]=500000000.0;
    ACC[301]=1.0;
    ACC[284]=1.0;
    ACC[172]=500000000.0;
    ACC[300]=1.0;
    ACC[283]=1.0;
    ACC[171]=500000000.0;
    ACC[299]=1.0;
    ACC[282]=1.0;
    ACC[170]=500000000.0;
    ACC[298]=1.0;
    ACC[136]=500000000.0;
    ACC[144]=500000000.0;
    ACC[143]=500000000.0;
    ACC[142]=500000000.0;
    ACC[141]=500000000.0;
    ACC[140]=500000000.0;
    ACC[139]=500000000.0;
    ACC[138]=500000000.0;
    ACC[137]=0.0;
    ACC[178]=X[89];
    ACC[179]=X[1];
    ACC[180]=X[2];
    ACC[181]=X[3];
    ACC[182]=X[4];
    ACC[183]=X[5];
    ACC[184]=X[6];
    ACC[185]=X[7];
    ACC[186]=X[8];
    ACC[187]=X[90];
    ACC[188]=X[9];
    ACC[189]=X[10];
    ACC[190]=X[11];
    ACC[191]=X[12];
    ACC[192]=X[13];
    ACC[193]=X[14];
    ACC[194]=X[15];
    ACC[195]=X[16];
    ACC[196]=X[91];
    ACC[197]=X[17];
    ACC[198]=X[18];
    ACC[199]=X[19];
    ACC[200]=X[20];
    ACC[201]=X[21];
    ACC[202]=X[22];
    ACC[203]=X[23];
    ACC[204]=X[24];
    ACC[205]=X[92];
    ACC[206]=X[25];
    ACC[207]=X[26];
    ACC[208]=X[27];
    ACC[209]=X[28];
    ACC[210]=X[29];
    ACC[211]=X[30];
    ACC[212]=X[31];
    ACC[213]=X[32];
    ACC[214]=X[93];
    ACC[215]=X[33];
    ACC[216]=X[34];
    ACC[217]=X[35];
    ACC[218]=X[36];
    ACC[219]=X[37];
    ACC[220]=X[38];
    ACC[221]=X[39];
    ACC[222]=X[40];
    ACC[223]=X[94];
    ACC[224]=X[41];
    ACC[225]=X[42];
    ACC[226]=X[43];
    ACC[227]=X[44];
    ACC[228]=X[45];
    ACC[229]=X[46];
    ACC[230]=X[47];
    ACC[231]=X[48];
    ACC[232]=X[95];
    ACC[233]=X[49];
    ACC[234]=X[50];
    ACC[235]=X[51];
    ACC[236]=X[52];
    ACC[237]=X[53];
    ACC[238]=X[54];
    ACC[239]=X[55];
    ACC[240]=X[56];
    ACC[241]=X[96];
    ACC[242]=X[57];
    ACC[243]=X[58];
    ACC[244]=X[59];
    ACC[245]=X[60];
    ACC[246]=X[61];
    ACC[247]=X[62];
    ACC[248]=X[63];
    ACC[249]=X[64];
    ACC[134]=(500000000.0 * sin((X[120] - X[119])));
    ACC[133]=(250000000.0 * sin((X[120] - X[118])));
    ACC[132]=(166666666.6666667 * sin((X[120] - X[117])));
    ACC[131]=(125000000.0 * sin((X[120] - X[116])));
    ACC[130]=(100000000.0 * sin((X[120] - X[115])));
    ACC[129]=(83333333.33333333 * sin((X[120] - X[114])));
    ACC[128]=(71428571.42857142 * sin((X[120] - X[113])));
    ACC[127]=(500000000.0 * sin((X[119] - X[120])));
    ACC[125]=(500000000.0 * sin((X[119] - X[118])));
    ACC[124]=(250000000.0 * sin((X[119] - X[117])));
    ACC[123]=(166666666.6666667 * sin((X[119] - X[116])));
    ACC[122]=(125000000.0 * sin((X[119] - X[115])));
    ACC[121]=(100000000.0 * sin((X[119] - X[114])));
    ACC[120]=(83333333.33333333 * sin((X[119] - X[113])));
    ACC[119]=(250000000.0 * sin((X[118] - X[120])));
    ACC[118]=(500000000.0 * sin((X[118] - X[119])));
    ACC[116]=(500000000.0 * sin((X[118] - X[117])));
    ACC[115]=(250000000.0 * sin((X[118] - X[116])));
    ACC[114]=(166666666.6666667 * sin((X[118] - X[115])));
    ACC[113]=(125000000.0 * sin((X[118] - X[114])));
    ACC[112]=(100000000.0 * sin((X[118] - X[113])));
    ACC[111]=(166666666.6666667 * sin((X[117] - X[120])));
    ACC[110]=(250000000.0 * sin((X[117] - X[119])));
    ACC[109]=(500000000.0 * sin((X[117] - X[118])));
    ACC[107]=(500000000.0 * sin((X[117] - X[116])));
    ACC[106]=(250000000.0 * sin((X[117] - X[115])));
    ACC[105]=(166666666.6666667 * sin((X[117] - X[114])));
    ACC[104]=(125000000.0 * sin((X[117] - X[113])));
    ACC[103]=(125000000.0 * sin((X[116] - X[120])));
    ACC[102]=(166666666.6666667 * sin((X[116] - X[119])));
    ACC[101]=(250000000.0 * sin((X[116] - X[118])));
    ACC[100]=(500000000.0 * sin((X[116] - X[117])));
    ACC[98]=(500000000.0 * sin((X[116] - X[115])));
    ACC[97]=(250000000.0 * sin((X[116] - X[114])));
    ACC[96]=(166666666.6666667 * sin((X[116] - X[113])));
    ACC[95]=(100000000.0 * sin((X[115] - X[120])));
    ACC[94]=(125000000.0 * sin((X[115] - X[119])));
    ACC[93]=(166666666.6666667 * sin((X[115] - X[118])));
    ACC[92]=(250000000.0 * sin((X[115] - X[117])));
    ACC[91]=(500000000.0 * sin((X[115] - X[116])));
    ACC[89]=(500000000.0 * sin((X[115] - X[114])));
    ACC[88]=(250000000.0 * sin((X[115] - X[113])));
    ACC[87]=(83333333.33333333 * sin((X[114] - X[120])));
    ACC[86]=(100000000.0 * sin((X[114] - X[119])));
    ACC[85]=(125000000.0 * sin((X[114] - X[118])));
    ACC[84]=(166666666.6666667 * sin((X[114] - X[117])));
    ACC[83]=(250000000.0 * sin((X[114] - X[116])));
    ACC[82]=(500000000.0 * sin((X[114] - X[115])));
    ACC[80]=(500000000.0 * sin((X[114] - X[113])));
    ACC[79]=(71428571.42857142 * sin((X[113] - X[120])));
    ACC[78]=(83333333.33333333 * sin((X[113] - X[119])));
    ACC[77]=(100000000.0 * sin((X[113] - X[118])));
    ACC[76]=(125000000.0 * sin((X[113] - X[117])));
    ACC[75]=(166666666.6666667 * sin((X[113] - X[116])));
    ACC[74]=(250000000.0 * sin((X[113] - X[115])));
    ACC[73]=(500000000.0 * sin((X[113] - X[114])));
    ACC[161]=(0.125 * X[0]);
    ACC[154]=ACC[161];
    ACC[155]=ACC[161];
    ACC[156]=ACC[161];
    ACC[157]=ACC[161];
    ACC[158]=ACC[161];
    ACC[159]=ACC[161];
    ACC[160]=ACC[161];
    ACC[258]=(1.0 - X[89]);
    ACC[322]=(X[121] * X[89]);
    ACC[290]=((sPAR[77] * ACC[322]) + X[97]);
    ACC[162]=(500000000.0 * ACC[290]);
    ACC[145]=(0.1591549430918953 * X[81]);
    ACC[250]=(-1.0 + (0.02 * ACC[145]));
    ACC[306]=(1.0 + ((2e-09 * ACC[161]) - (ACC[250] / sPAR[85])));
    ACC[266]=(ACC[306] - ACC[290]);
    ACC[314]=(ACC[306] + (sPAR[13] * (ACC[258] + (X[65] / sPAR[61]))));
    ACC[330]=(ACC[306] + (sPAR[21] * (ACC[266] + (X[73] / sPAR[69]))));
    ACC[274]=ACC[145];
    ACC[259]=(1.0 - X[90]);
    ACC[323]=(X[122] * X[90]);
    ACC[291]=((sPAR[78] * ACC[323]) + X[98]);
    ACC[163]=(500000000.0 * ACC[291]);
    ACC[275]=(0.1591549430918953 * X[82]);
    ACC[251]=(-1.0 + (0.02 * ACC[275]));
    ACC[307]=(1.0 + ((2e-09 * ACC[161]) - (ACC[251] / sPAR[86])));
    ACC[267]=(ACC[307] - ACC[291]);
    ACC[315]=(ACC[307] + (sPAR[14] * (ACC[259] + (X[66] / sPAR[62]))));
    ACC[331]=(ACC[307] + (sPAR[22] * (ACC[267] + (X[74] / sPAR[70]))));
    ACC[260]=(1.0 - X[91]);
    ACC[324]=(X[123] * X[91]);
    ACC[292]=((sPAR[79] * ACC[324]) + X[99]);
    ACC[164]=(500000000.0 * ACC[292]);
    ACC[276]=(0.1591549430918953 * X[83]);
    ACC[252]=(-1.0 + (0.02 * ACC[276]));
    ACC[308]=(1.0 + ((2e-09 * ACC[161]) - (ACC[252] / sPAR[87])));
    ACC[268]=(ACC[308] - ACC[292]);
    ACC[316]=(ACC[308] + (sPAR[15] * (ACC[260] + (X[67] / sPAR[63]))));
    ACC[332]=(ACC[308] + (sPAR[23] * (ACC[268] + (X[75] / sPAR[71]))));
    ACC[261]=(1.0 - X[92]);
    ACC[325]=(X[124] * X[92]);
    ACC[293]=((sPAR[80] * ACC[325]) + X[100]);
    ACC[165]=(500000000.0 * ACC[293]);
    ACC[277]=(0.1591549430918953 * X[84]);
    ACC[253]=(-1.0 + (0.02 * ACC[277]));
    ACC[309]=(1.0 + ((2e-09 * ACC[161]) - (ACC[253] / sPAR[88])));
    ACC[269]=(ACC[309] - ACC[293]);
    ACC[317]=(ACC[309] + (sPAR[16] * (ACC[261] + (X[68] / sPAR[64]))));
    ACC[333]=(ACC[309] + (sPAR[24] * (ACC[269] + (X[76] / sPAR[72]))));
    ACC[262]=(1.0 - X[93]);
    ACC[326]=(X[125] * X[93]);
    ACC[294]=((sPAR[81] * ACC[326]) + X[101]);
    ACC[166]=(500000000.0 * ACC[294]);
    ACC[278]=(0.1591549430918953 * X[85]);
    ACC[254]=(-1.0 + (0.02 * ACC[278]));
    ACC[310]=(1.0 + ((2e-09 * ACC[161]) - (ACC[254] / sPAR[89])));
    ACC[270]=(ACC[310] - ACC[294]);
    ACC[318]=(ACC[310] + (sPAR[17] * (ACC[262] + (X[69] / sPAR[65]))));
    ACC[334]=(ACC[310] + (sPAR[25] * (ACC[270] + (X[77] / sPAR[73]))));
    ACC[263]=(1.0 - X[94]);
    ACC[327]=(X[126] * X[94]);
    ACC[295]=((sPAR[82] * ACC[327]) + X[102]);
    ACC[167]=(500000000.0 * ACC[295]);
    ACC[279]=(0.1591549430918953 * X[86]);
    ACC[255]=(-1.0 + (0.02 * ACC[279]));
    ACC[311]=(1.0 + ((2e-09 * ACC[161]) - (ACC[255] / sPAR[90])));
    ACC[271]=(ACC[311] - ACC[295]);
    ACC[319]=(ACC[311] + (sPAR[18] * (ACC[263] + (X[70] / sPAR[66]))));
    ACC[335]=(ACC[311] + (sPAR[26] * (ACC[271] + (X[78] / sPAR[74]))));
    ACC[264]=(1.0 - X[95]);
    ACC[328]=(X[127] * X[95]);
    ACC[296]=((sPAR[83] * ACC[328]) + X[103]);
    ACC[168]=(500000000.0 * ACC[296]);
    ACC[280]=(0.1591549430918953 * X[87]);
    ACC[256]=(-1.0 + (0.02 * ACC[280]));
    ACC[312]=(1.0 + ((2e-09 * ACC[161]) - (ACC[256] / sPAR[91])));
    ACC[272]=(ACC[312] - ACC[296]);
    ACC[320]=(ACC[312] + (sPAR[19] * (ACC[264] + (X[71] / sPAR[67]))));
    ACC[336]=(ACC[312] + (sPAR[27] * (ACC[272] + (X[79] / sPAR[75]))));
    ACC[265]=(1.0 - X[96]);
    ACC[329]=(X[128] * X[96]);
    ACC[297]=((sPAR[84] * ACC[329]) + X[104]);
    ACC[169]=(500000000.0 * ACC[297]);
    ACC[281]=(0.1591549430918953 * X[88]);
    ACC[257]=(-1.0 + (0.02 * ACC[281]));
    ACC[313]=(1.0 + ((2e-09 * ACC[161]) - (ACC[257] / sPAR[92])));
    ACC[273]=(ACC[313] - ACC[297]);
    ACC[321]=(ACC[313] + (sPAR[20] * (ACC[265] + (X[72] / sPAR[68]))));
    ACC[337]=(ACC[313] + (sPAR[28] * (ACC[273] + (X[80] / sPAR[76]))));
    ACC[9]=(sPAR[0] * (X[81] - X[82]));
    ACC[10]=(sPAR[0] * (X[81] - X[83]));
    ACC[11]=(sPAR[0] * (X[81] - X[84]));
    ACC[12]=(sPAR[0] * (X[81] - X[85]));
    ACC[13]=(sPAR[0] * (X[81] - X[86]));
    ACC[14]=(sPAR[0] * (X[81] - X[87]));
    ACC[15]=(sPAR[0] * (X[81] - X[88]));
    ACC[0]=(ACC[73] + (ACC[74] + (ACC[75] + (ACC[76] + (ACC[77] + (ACC[78] + (ACC[79] + (ACC[9] + (ACC[10] + (ACC[11] + (ACC[12] + (ACC[13] + (ACC[14] + ACC[15])))))))))))));
    ACC[146]=ACC[0];
    ACC[16]=(sPAR[0] * (X[82] - X[81]));
    ACC[18]=(sPAR[0] * (X[82] - X[83]));
    ACC[19]=(sPAR[0] * (X[82] - X[84]));
    ACC[20]=(sPAR[0] * (X[82] - X[85]));
    ACC[21]=(sPAR[0] * (X[82] - X[86]));
    ACC[22]=(sPAR[0] * (X[82] - X[87]));
    ACC[23]=(sPAR[0] * (X[82] - X[88]));
    ACC[1]=(500000000.0 + (ACC[80] + (ACC[82] + (ACC[83] + (ACC[84] + (ACC[85] + (ACC[86] + (ACC[87] + (ACC[16] + (ACC[18] + (ACC[19] + (ACC[20] + (ACC[21] + (ACC[22] + ACC[23]))))))))))))));
    ACC[147]=ACC[1];
    ACC[24]=(sPAR[0] * (X[83] - X[81]));
    ACC[25]=(sPAR[0] * (X[83] - X[82]));
    ACC[27]=(sPAR[0] * (X[83] - X[84]));
    ACC[28]=(sPAR[0] * (X[83] - X[85]));
    ACC[29]=(sPAR[0] * (X[83] - X[86]));
    ACC[30]=(sPAR[0] * (X[83] - X[87]));
    ACC[31]=(sPAR[0] * (X[83] - X[88]));
    ACC[2]=(500000000.0 + (ACC[88] + (ACC[89] + (ACC[91] + (ACC[92] + (ACC[93] + (ACC[94] + (ACC[95] + (ACC[24] + (ACC[25] + (ACC[27] + (ACC[28] + (ACC[29] + (ACC[30] + ACC[31]))))))))))))));
    ACC[148]=ACC[2];
    ACC[32]=(sPAR[0] * (X[84] - X[81]));
    ACC[33]=(sPAR[0] * (X[84] - X[82]));
    ACC[34]=(sPAR[0] * (X[84] - X[83]));
    ACC[36]=(sPAR[0] * (X[84] - X[85]));
    ACC[37]=(sPAR[0] * (X[84] - X[86]));
    ACC[38]=(sPAR[0] * (X[84] - X[87]));
    ACC[39]=(sPAR[0] * (X[84] - X[88]));
    ACC[3]=(500000000.0 + (ACC[96] + (ACC[97] + (ACC[98] + (ACC[100] + (ACC[101] + (ACC[102] + (ACC[103] + (ACC[32] + (ACC[33] + (ACC[34] + (ACC[36] + (ACC[37] + (ACC[38] + ACC[39]))))))))))))));
    ACC[149]=ACC[3];
    ACC[40]=(sPAR[0] * (X[85] - X[81]));
    ACC[41]=(sPAR[0] * (X[85] - X[82]));
    ACC[42]=(sPAR[0] * (X[85] - X[83]));
    ACC[43]=(sPAR[0] * (X[85] - X[84]));
    ACC[45]=(sPAR[0] * (X[85] - X[86]));
    ACC[46]=(sPAR[0] * (X[85] - X[87]));
    ACC[47]=(sPAR[0] * (X[85] - X[88]));
    ACC[4]=(500000000.0 + (ACC[104] + (ACC[105] + (ACC[106] + (ACC[107] + (ACC[109] + (ACC[110] + (ACC[111] + (ACC[40] + (ACC[41] + (ACC[42] + (ACC[43] + (ACC[45] + (ACC[46] + ACC[47]))))))))))))));
    ACC[150]=ACC[4];
    ACC[48]=(sPAR[0] * (X[86] - X[81]));
    ACC[49]=(sPAR[0] * (X[86] - X[82]));
    ACC[50]=(sPAR[0] * (X[86] - X[83]));
    ACC[51]=(sPAR[0] * (X[86] - X[84]));
    ACC[52]=(sPAR[0] * (X[86] - X[85]));
    ACC[54]=(sPAR[0] * (X[86] - X[87]));
    ACC[55]=(sPAR[0] * (X[86] - X[88]));
    ACC[5]=(500000000.0 + (ACC[112] + (ACC[113] + (ACC[114] + (ACC[115] + (ACC[116] + (ACC[118] + (ACC[119] + (ACC[48] + (ACC[49] + (ACC[50] + (ACC[51] + (ACC[52] + (ACC[54] + ACC[55]))))))))))))));
    ACC[151]=ACC[5];
    ACC[56]=(sPAR[0] * (X[87] - X[81]));
    ACC[57]=(sPAR[0] * (X[87] - X[82]));
    ACC[58]=(sPAR[0] * (X[87] - X[83]));
    ACC[59]=(sPAR[0] * (X[87] - X[84]));
    ACC[60]=(sPAR[0] * (X[87] - X[85]));
    ACC[61]=(sPAR[0] * (X[87] - X[86]));
    ACC[63]=(sPAR[0] * (X[87] - X[88]));
    ACC[6]=(500000000.0 + (ACC[120] + (ACC[121] + (ACC[122] + (ACC[123] + (ACC[124] + (ACC[125] + (ACC[127] + (ACC[56] + (ACC[57] + (ACC[58] + (ACC[59] + (ACC[60] + (ACC[61] + ACC[63]))))))))))))));
    ACC[152]=ACC[6];
    ACC[64]=(sPAR[0] * (X[88] - X[81]));
    ACC[65]=(sPAR[0] * (X[88] - X[82]));
    ACC[66]=(sPAR[0] * (X[88] - X[83]));
    ACC[67]=(sPAR[0] * (X[88] - X[84]));
    ACC[68]=(sPAR[0] * (X[88] - X[85]));
    ACC[69]=(sPAR[0] * (X[88] - X[86]));
    ACC[70]=(sPAR[0] * (X[88] - X[87]));
    ACC[7]=(500000000.0 + (ACC[128] + (ACC[129] + (ACC[130] + (ACC[131] + (ACC[132] + (ACC[133] + (ACC[134] + (ACC[64] + (ACC[65] + (ACC[66] + (ACC[67] + (ACC[68] + (ACC[69] + ACC[70]))))))))))))));
    ACC[153]=ACC[7];
    F[65]=ACC[258];
    F[113]=(-314.1592653589793 + X[81]);
    F[97]=((((1.0 - sPAR[77]) * ACC[322]) - X[97]) / sPAR[133]);
    F[1]=((8.0 * ((ACC[322] * (X[89] - X[1])) + (0.125 * (sPAR[29] * (sPAR[53] - X[1]))))) / sPAR[125]);
    F[2]=((8.0 * ((ACC[322] * (X[1] - X[2])) + (0.125 * (sPAR[29] * (sPAR[53] - X[2]))))) / sPAR[125]);
    F[3]=((8.0 * ((ACC[322] * (X[2] - X[3])) + (0.125 * (sPAR[29] * (sPAR[53] - X[3]))))) / sPAR[125]);
    F[4]=((8.0 * ((ACC[322] * (X[3] - X[4])) + (0.125 * (sPAR[29] * (sPAR[53] - X[4]))))) / sPAR[125]);
    F[5]=((8.0 * ((ACC[322] * (X[4] - X[5])) + (0.125 * (sPAR[29] * (sPAR[53] - X[5]))))) / sPAR[125]);
    F[6]=((8.0 * ((ACC[322] * (X[5] - X[6])) + (0.125 * (sPAR[29] * (sPAR[53] - X[6]))))) / sPAR[125]);
    F[7]=((8.0 * ((ACC[322] * (X[6] - X[7])) + (0.125 * (sPAR[29] * (sPAR[53] - X[7]))))) / sPAR[125]);
    F[8]=((8.0 * ((ACC[322] * (X[7] - X[8])) + (0.125 * (sPAR[29] * (sPAR[53] - X[8]))))) / sPAR[125]);
    F[89]=((X[105] - ACC[322]) / sPAR[109]);
    F[73]=ACC[266];
    F[105]=((ACC[314] - X[105]) / sPAR[117]);
    F[121]=((ACC[330] - X[121]) / sPAR[141]);
    F[0]=((4000000000.0 * ((sPAR[4] - ACC[145]) / (sPAR[4] * sPAR[3]))) / sPAR[2]);
    F[66]=ACC[259];
    F[114]=(-314.1592653589793 + X[82]);
    F[98]=((((1.0 - sPAR[78]) * ACC[323]) - X[98]) / sPAR[134]);
    F[9]=((8.0 * ((ACC[323] * (X[90] - X[9])) + (0.125 * (sPAR[30] * (sPAR[54] - X[9]))))) / sPAR[126]);
    F[10]=((8.0 * ((ACC[323] * (X[9] - X[10])) + (0.125 * (sPAR[30] * (sPAR[54] - X[10]))))) / sPAR[126]);
    F[11]=((8.0 * ((ACC[323] * (X[10] - X[11])) + (0.125 * (sPAR[30] * (sPAR[54] - X[11]))))) / sPAR[126]);
    F[12]=((8.0 * ((ACC[323] * (X[11] - X[12])) + (0.125 * (sPAR[30] * (sPAR[54] - X[12]))))) / sPAR[126]);
    F[13]=((8.0 * ((ACC[323] * (X[12] - X[13])) + (0.125 * (sPAR[30] * (sPAR[54] - X[13]))))) / sPAR[126]);
    F[14]=((8.0 * ((ACC[323] * (X[13] - X[14])) + (0.125 * (sPAR[30] * (sPAR[54] - X[14]))))) / sPAR[126]);
    F[15]=((8.0 * ((ACC[323] * (X[14] - X[15])) + (0.125 * (sPAR[30] * (sPAR[54] - X[15]))))) / sPAR[126]);
    F[16]=((8.0 * ((ACC[323] * (X[15] - X[16])) + (0.125 * (sPAR[30] * (sPAR[54] - X[16]))))) / sPAR[126]);
    F[90]=((X[106] - ACC[323]) / sPAR[110]);
    F[74]=ACC[267];
    F[106]=((ACC[315] - X[106]) / sPAR[118]);
    F[122]=((ACC[331] - X[122]) / sPAR[142]);
    F[67]=ACC[260];
    F[115]=(-314.1592653589793 + X[83]);
    F[99]=((((1.0 - sPAR[79]) * ACC[324]) - X[99]) / sPAR[135]);
    F[17]=((8.0 * ((ACC[324] * (X[91] - X[17])) + (0.125 * (sPAR[31] * (sPAR[55] - X[17]))))) / sPAR[127]);
    F[18]=((8.0 * ((ACC[324] * (X[17] - X[18])) + (0.125 * (sPAR[31] * (sPAR[55] - X[18]))))) / sPAR[127]);
    F[19]=((8.0 * ((ACC[324] * (X[18] - X[19])) + (0.125 * (sPAR[31] * (sPAR[55] - X[19]))))) / sPAR[127]);
    F[20]=((8.0 * ((ACC[324] * (X[19] - X[20])) + (0.125 * (sPAR[31] * (sPAR[55] - X[20]))))) / sPAR[127]);
    F[21]=((8.0 * ((ACC[324] * (X[20] - X[21])) + (0.125 * (sPAR[31] * (sPAR[55] - X[21]))))) / sPAR[127]);
    F[22]=((8.0 * ((ACC[324] * (X[21] - X[22])) + (0.125 * (sPAR[31] * (sPAR[55] - X[22]))))) / sPAR[127]);
    F[23]=((8.0 * ((ACC[324] * (X[22] - X[23])) + (0.125 * (sPAR[31] * (sPAR[55] - X[23]))))) / sPAR[127]);
    F[24]=((8.0 * ((ACC[324] * (X[23] - X[24])) + (0.125 * (sPAR[31] * (sPAR[55] - X[24]))))) / sPAR[127]);
    F[91]=((X[107] - ACC[324]) / sPAR[111]);
    F[75]=ACC[268];
    F[107]=((ACC[316] - X[107]) / sPAR[119]);
    F[123]=((ACC[332] - X[123]) / sPAR[143]);
    F[68]=ACC[261];
    F[116]=(-314.1592653589793 + X[84]);
    F[100]=((((1.0 - sPAR[80]) * ACC[325]) - X[100]) / sPAR[136]);
    F[25]=((8.0 * ((ACC[325] * (X[92] - X[25])) + (0.125 * (sPAR[32] * (sPAR[56] - X[25]))))) / sPAR[128]);
    F[26]=((8.0 * ((ACC[325] * (X[25] - X[26])) + (0.125 * (sPAR[32] * (sPAR[56] - X[26]))))) / sPAR[128]);
    F[27]=((8.0 * ((ACC[325] * (X[26] - X[27])) + (0.125 * (sPAR[32] * (sPAR[56] - X[27]))))) / sPAR[128]);
    F[28]=((8.0 * ((ACC[325] * (X[27] - X[28])) + (0.125 * (sPAR[32] * (sPAR[56] - X[28]))))) / sPAR[128]);
    F[29]=((8.0 * ((ACC[325] * (X[28] - X[29])) + (0.125 * (sPAR[32] * (sPAR[56] - X[29]))))) / sPAR[128]);
    F[30]=((8.0 * ((ACC[325] * (X[29] - X[30])) + (0.125 * (sPAR[32] * (sPAR[56] - X[30]))))) / sPAR[128]);
    F[31]=((8.0 * ((ACC[325] * (X[30] - X[31])) + (0.125 * (sPAR[32] * (sPAR[56] - X[31]))))) / sPAR[128]);
    F[32]=((8.0 * ((ACC[325] * (X[31] - X[32])) + (0.125 * (sPAR[32] * (sPAR[56] - X[32]))))) / sPAR[128]);
    F[92]=((X[108] - ACC[325]) / sPAR[112]);
    F[76]=ACC[269];
    F[108]=((ACC[317] - X[108]) / sPAR[120]);
    F[124]=((ACC[333] - X[124]) / sPAR[144]);
    F[69]=ACC[262];
    F[117]=(-314.1592653589793 + X[85]);
    F[101]=((((1.0 - sPAR[81]) * ACC[326]) - X[101]) / sPAR[137]);
    F[33]=((8.0 * ((ACC[326] * (X[93] - X[33])) + (0.125 * (sPAR[33] * (sPAR[57] - X[33]))))) / sPAR[129]);
    F[34]=((8.0 * ((ACC[326] * (X[33] - X[34])) + (0.125 * (sPAR[33] * (sPAR[57] - X[34]))))) / sPAR[129]);
    F[35]=((8.0 * ((ACC[326] * (X[34] - X[35])) + (0.125 * (sPAR[33] * (sPAR[57] - X[35]))))) / sPAR[129]);
    F[36]=((8.0 * ((ACC[326] * (X[35] - X[36])) + (0.125 * (sPAR[33] * (sPAR[57] - X[36]))))) / sPAR[129]);
    F[37]=((8.0 * ((ACC[326] * (X[36] - X[37])) + (0.125 * (sPAR[33] * (sPAR[57] - X[37]))))) / sPAR[129]);
    F[38]=((8.0 * ((ACC[326] * (X[37] - X[38])) + (0.125 * (sPAR[33] * (sPAR[57] - X[38]))))) / sPAR[129]);
    F[39]=((8.0 * ((ACC[326] * (X[38] - X[39])) + (0.125 * (sPAR[33] * (sPAR[57] - X[39]))))) / sPAR[129]);
    F[40]=((8.0 * ((ACC[326] * (X[39] - X[40])) + (0.125 * (sPAR[33] * (sPAR[57] - X[40]))))) / sPAR[129]);
    F[93]=((X[109] - ACC[326]) / sPAR[113]);
    F[77]=ACC[270];
    F[109]=((ACC[318] - X[109]) / sPAR[121]);
    F[125]=((ACC[334] - X[125]) / sPAR[145]);
    F[70]=ACC[263];
    F[118]=(-314.1592653589793 + X[86]);
    F[102]=((((1.0 - sPAR[82]) * ACC[327]) - X[102]) / sPAR[138]);
    F[41]=((8.0 * ((ACC[327] * (X[94] - X[41])) + (0.125 * (sPAR[34] * (sPAR[58] - X[41]))))) / sPAR[130]);
    F[42]=((8.0 * ((ACC[327] * (X[41] - X[42])) + (0.125 * (sPAR[34] * (sPAR[58] - X[42]))))) / sPAR[130]);
    F[43]=((8.0 * ((ACC[327] * (X[42] - X[43])) + (0.125 * (sPAR[34] * (sPAR[58] - X[43]))))) / sPAR[130]);
    F[44]=((8.0 * ((ACC[327] * (X[43] - X[44])) + (0.125 * (sPAR[34] * (sPAR[58] - X[44]))))) / sPAR[130]);
    F[45]=((8.0 * ((ACC[327] * (X[44] - X[45])) + (0.125 * (sPAR[34] * (sPAR[58] - X[45]))))) / sPAR[130]);
    F[46]=((8.0 * ((ACC[327] * (X[45] - X[46])) + (0.125 * (sPAR[34] * (sPAR[58] - X[46]))))) / sPAR[130]);
    F[47]=((8.0 * ((ACC[327] * (X[46] - X[47])) + (0.125 * (sPAR[34] * (sPAR[58] - X[47]))))) / sPAR[130]);
    F[48]=((8.0 * ((ACC[327] * (X[47] - X[48])) + (0.125 * (sPAR[34] * (sPAR[58] - X[48]))))) / sPAR[130]);
    F[94]=((X[110] - ACC[327]) / sPAR[114]);
    F[78]=ACC[271];
    F[110]=((ACC[319] - X[110]) / sPAR[122]);
    F[126]=((ACC[335] - X[126]) / sPAR[146]);
    F[71]=ACC[264];
    F[119]=(-314.1592653589793 + X[87]);
    F[103]=((((1.0 - sPAR[83]) * ACC[328]) - X[103]) / sPAR[139]);
    F[49]=((8.0 * ((ACC[328] * (X[95] - X[49])) + (0.125 * (sPAR[35] * (sPAR[59] - X[49]))))) / sPAR[131]);
    F[50]=((8.0 * ((ACC[328] * (X[49] - X[50])) + (0.125 * (sPAR[35] * (sPAR[59] - X[50]))))) / sPAR[131]);
    F[51]=((8.0 * ((ACC[328] * (X[50] - X[51])) + (0.125 * (sPAR[35] * (sPAR[59] - X[51]))))) / sPAR[131]);
    F[52]=((8.0 * ((ACC[328] * (X[51] - X[52])) + (0.125 * (sPAR[35] * (sPAR[59] - X[52]))))) / sPAR[131]);
    F[53]=((8.0 * ((ACC[328] * (X[52] - X[53])) + (0.125 * (sPAR[35] * (sPAR[59] - X[53]))))) / sPAR[131]);
    F[54]=((8.0 * ((ACC[328] * (X[53] - X[54])) + (0.125 * (sPAR[35] * (sPAR[59] - X[54]))))) / sPAR[131]);
    F[55]=((8.0 * ((ACC[328] * (X[54] - X[55])) + (0.125 * (sPAR[35] * (sPAR[59] - X[55]))))) / sPAR[131]);
    F[56]=((8.0 * ((ACC[328] * (X[55] - X[56])) + (0.125 * (sPAR[35] * (sPAR[59] - X[56]))))) / sPAR[131]);
    F[95]=((X[111] - ACC[328]) / sPAR[115]);
    F[79]=ACC[272];
    F[111]=((ACC[320] - X[111]) / sPAR[123]);
    F[127]=((ACC[336] - X[127]) / sPAR[147]);
    F[72]=ACC[265];
    F[120]=(-314.1592653589793 + X[88]);
    F[104]=((((1.0 - sPAR[84]) * ACC[329]) - X[104]) / sPAR[140]);
    F[57]=((8.0 * ((ACC[329] * (X[96] - X[57])) + (0.125 * (sPAR[36] * (sPAR[60] - X[57]))))) / sPAR[132]);
    F[58]=((8.0 * ((ACC[329] * (X[57] - X[58])) + (0.125 * (sPAR[36] * (sPAR[60] - X[58]))))) / sPAR[132]);
    F[59]=((8.0 * ((ACC[329] * (X[58] - X[59])) + (0.125 * (sPAR[36] * (sPAR[60] - X[59]))))) / sPAR[132]);
    F[60]=((8.0 * ((ACC[329] * (X[59] - X[60])) + (0.125 * (sPAR[36] * (sPAR[60] - X[60]))))) / sPAR[132]);
    F[61]=((8.0 * ((ACC[329] * (X[60] - X[61])) + (0.125 * (sPAR[36] * (sPAR[60] - X[61]))))) / sPAR[132]);
    F[62]=((8.0 * ((ACC[329] * (X[61] - X[62])) + (0.125 * (sPAR[36] * (sPAR[60] - X[62]))))) / sPAR[132]);
    F[63]=((8.0 * ((ACC[329] * (X[62] - X[63])) + (0.125 * (sPAR[36] * (sPAR[60] - X[63]))))) / sPAR[132]);
    F[64]=((8.0 * ((ACC[329] * (X[63] - X[64])) + (0.125 * (sPAR[36] * (sPAR[60] - X[64]))))) / sPAR[132]);
    F[96]=((X[112] - ACC[329]) / sPAR[116]);
    F[80]=ACC[273];
    F[112]=((ACC[321] - X[112]) / sPAR[124]);
    F[128]=((ACC[337] - X[128]) / sPAR[148]);
    F[81]=((ACC[162] - ACC[0]) / (25330.29591058444 * X[81]));
    F[82]=((ACC[163] - ACC[1]) / (25330.29591058444 * X[82]));
    F[83]=((ACC[164] - ACC[2]) / (25330.29591058444 * X[83]));
    F[84]=((ACC[165] - ACC[3]) / (25330.29591058444 * X[84]));
    F[85]=((ACC[166] - ACC[4]) / (25330.29591058444 * X[85]));
    F[86]=((ACC[167] - ACC[5]) / (25330.29591058444 * X[86]));
    F[87]=((ACC[168] - ACC[6]) / (25330.29591058444 * X[87]));
    F[88]=((ACC[169] - ACC[7]) / (25330.29591058444 * X[88]));

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[72]=0.0; //P_ex[1,1]
    ACC[136]=500000000.0; //P_f
    X[113]=0.0; //generator[1].theta
    X[114]=0.0; //generator[2].theta
    ACC[73]=(ACC[136] * sin((X[113] - X[114]))); //P_ex[1,2]
    X[115]=0.0; //generator[3].theta
    ACC[74]=(0.5 * (ACC[136] * sin((X[113] - X[115])))); //P_ex[1,3]
    X[116]=0.0; //generator[4].theta
    ACC[75]=(0.3333333333333333 * (ACC[136] * sin((X[113] - X[116])))); //P_ex[1,4]
    X[117]=0.0; //generator[5].theta
    ACC[76]=(0.25 * (ACC[136] * sin((X[113] - X[117])))); //P_ex[1,5]
    X[118]=0.0; //generator[6].theta
    ACC[77]=(0.2 * (ACC[136] * sin((X[113] - X[118])))); //P_ex[1,6]
    X[119]=0.0; //generator[7].theta
    ACC[78]=(0.1666666666666667 * (ACC[136] * sin((X[113] - X[119])))); //P_ex[1,7]
    X[120]=0.0; //generator[8].theta
    ACC[79]=(0.1428571428571428 * (ACC[136] * sin((X[113] - X[120])))); //P_ex[1,8]
    ACC[8]=0.0; //P_diss[1,1]
    ACC[9]=0.0; //P_diss[1,2]
    ACC[10]=0.0; //P_diss[1,3]
    ACC[11]=0.0; //P_diss[1,4]
    ACC[12]=0.0; //P_diss[1,5]
    ACC[13]=0.0; //P_diss[1,6]
    ACC[14]=0.0; //P_diss[1,7]
    ACC[15]=0.0; //P_diss[1,8]
    ACC[137]=0.0; //P_load[1]
    ACC[0]=(ACC[72] + (ACC[73] + (ACC[74] + (ACC[75] + (ACC[76] + (ACC[77] + (ACC[78] + (ACC[79] + (ACC[8] + (ACC[9] + (ACC[10] + (ACC[11] + (ACC[12] + (ACC[13] + (ACC[14] + (ACC[15] + ACC[137])))))))))))))))); //P_a[1]
    ACC[80]=(ACC[136] * sin((X[114] - X[113]))); //P_ex[2,1]
    ACC[81]=0.0; //P_ex[2,2]
    ACC[82]=(ACC[136] * sin((X[114] - X[115]))); //P_ex[2,3]
    ACC[83]=(0.5 * (ACC[136] * sin((X[114] - X[116])))); //P_ex[2,4]
    ACC[84]=(0.3333333333333333 * (ACC[136] * sin((X[114] - X[117])))); //P_ex[2,5]
    ACC[85]=(0.25 * (ACC[136] * sin((X[114] - X[118])))); //P_ex[2,6]
    ACC[86]=(0.2 * (ACC[136] * sin((X[114] - X[119])))); //P_ex[2,7]
    ACC[87]=(0.1666666666666667 * (ACC[136] * sin((X[114] - X[120])))); //P_ex[2,8]
    ACC[16]=0.0; //P_diss[2,1]
    ACC[17]=0.0; //P_diss[2,2]
    ACC[18]=0.0; //P_diss[2,3]
    ACC[19]=0.0; //P_diss[2,4]
    ACC[20]=0.0; //P_diss[2,5]
    ACC[21]=0.0; //P_diss[2,6]
    ACC[22]=0.0; //P_diss[2,7]
    ACC[23]=0.0; //P_diss[2,8]
    ACC[138]=500000000.0; //P_load[2]
    ACC[1]=(ACC[80] + (ACC[81] + (ACC[82] + (ACC[83] + (ACC[84] + (ACC[85] + (ACC[86] + (ACC[87] + (ACC[16] + (ACC[17] + (ACC[18] + (ACC[19] + (ACC[20] + (ACC[21] + (ACC[22] + (ACC[23] + ACC[138])))))))))))))))); //P_a[2]
    ACC[88]=(0.5 * (ACC[136] * sin((X[115] - X[113])))); //P_ex[3,1]
    ACC[89]=(ACC[136] * sin((X[115] - X[114]))); //P_ex[3,2]
    ACC[90]=0.0; //P_ex[3,3]
    ACC[91]=(ACC[136] * sin((X[115] - X[116]))); //P_ex[3,4]
    ACC[92]=(0.5 * (ACC[136] * sin((X[115] - X[117])))); //P_ex[3,5]
    ACC[93]=(0.3333333333333333 * (ACC[136] * sin((X[115] - X[118])))); //P_ex[3,6]
    ACC[94]=(0.25 * (ACC[136] * sin((X[115] - X[119])))); //P_ex[3,7]
    ACC[95]=(0.2 * (ACC[136] * sin((X[115] - X[120])))); //P_ex[3,8]
    ACC[24]=0.0; //P_diss[3,1]
    ACC[25]=0.0; //P_diss[3,2]
    ACC[26]=0.0; //P_diss[3,3]
    ACC[27]=0.0; //P_diss[3,4]
    ACC[28]=0.0; //P_diss[3,5]
    ACC[29]=0.0; //P_diss[3,6]
    ACC[30]=0.0; //P_diss[3,7]
    ACC[31]=0.0; //P_diss[3,8]
    ACC[139]=500000000.0; //P_load[3]
    ACC[2]=(ACC[88] + (ACC[89] + (ACC[90] + (ACC[91] + (ACC[92] + (ACC[93] + (ACC[94] + (ACC[95] + (ACC[24] + (ACC[25] + (ACC[26] + (ACC[27] + (ACC[28] + (ACC[29] + (ACC[30] + (ACC[31] + ACC[139])))))))))))))))); //P_a[3]
    ACC[96]=(0.3333333333333333 * (ACC[136] * sin((X[116] - X[113])))); //P_ex[4,1]
    ACC[97]=(0.5 * (ACC[136] * sin((X[116] - X[114])))); //P_ex[4,2]
    ACC[98]=(ACC[136] * sin((X[116] - X[115]))); //P_ex[4,3]
    ACC[99]=0.0; //P_ex[4,4]
    ACC[100]=(ACC[136] * sin((X[116] - X[117]))); //P_ex[4,5]
    ACC[101]=(0.5 * (ACC[136] * sin((X[116] - X[118])))); //P_ex[4,6]
    ACC[102]=(0.3333333333333333 * (ACC[136] * sin((X[116] - X[119])))); //P_ex[4,7]
    ACC[103]=(0.25 * (ACC[136] * sin((X[116] - X[120])))); //P_ex[4,8]
    ACC[32]=0.0; //P_diss[4,1]
    ACC[33]=0.0; //P_diss[4,2]
    ACC[34]=0.0; //P_diss[4,3]
    ACC[35]=0.0; //P_diss[4,4]
    ACC[36]=0.0; //P_diss[4,5]
    ACC[37]=0.0; //P_diss[4,6]
    ACC[38]=0.0; //P_diss[4,7]
    ACC[39]=0.0; //P_diss[4,8]
    ACC[140]=500000000.0; //P_load[4]
    ACC[3]=(ACC[96] + (ACC[97] + (ACC[98] + (ACC[99] + (ACC[100] + (ACC[101] + (ACC[102] + (ACC[103] + (ACC[32] + (ACC[33] + (ACC[34] + (ACC[35] + (ACC[36] + (ACC[37] + (ACC[38] + (ACC[39] + ACC[140])))))))))))))))); //P_a[4]
    ACC[104]=(0.25 * (ACC[136] * sin((X[117] - X[113])))); //P_ex[5,1]
    ACC[105]=(0.3333333333333333 * (ACC[136] * sin((X[117] - X[114])))); //P_ex[5,2]
    ACC[106]=(0.5 * (ACC[136] * sin((X[117] - X[115])))); //P_ex[5,3]
    ACC[107]=(ACC[136] * sin((X[117] - X[116]))); //P_ex[5,4]
    ACC[108]=0.0; //P_ex[5,5]
    ACC[109]=(ACC[136] * sin((X[117] - X[118]))); //P_ex[5,6]
    ACC[110]=(0.5 * (ACC[136] * sin((X[117] - X[119])))); //P_ex[5,7]
    ACC[111]=(0.3333333333333333 * (ACC[136] * sin((X[117] - X[120])))); //P_ex[5,8]
    ACC[40]=0.0; //P_diss[5,1]
    ACC[41]=0.0; //P_diss[5,2]
    ACC[42]=0.0; //P_diss[5,3]
    ACC[43]=0.0; //P_diss[5,4]
    ACC[44]=0.0; //P_diss[5,5]
    ACC[45]=0.0; //P_diss[5,6]
    ACC[46]=0.0; //P_diss[5,7]
    ACC[47]=0.0; //P_diss[5,8]
    ACC[141]=500000000.0; //P_load[5]
    ACC[4]=(ACC[104] + (ACC[105] + (ACC[106] + (ACC[107] + (ACC[108] + (ACC[109] + (ACC[110] + (ACC[111] + (ACC[40] + (ACC[41] + (ACC[42] + (ACC[43] + (ACC[44] + (ACC[45] + (ACC[46] + (ACC[47] + ACC[141])))))))))))))))); //P_a[5]
    ACC[112]=(0.2 * (ACC[136] * sin((X[118] - X[113])))); //P_ex[6,1]
    ACC[113]=(0.25 * (ACC[136] * sin((X[118] - X[114])))); //P_ex[6,2]
    ACC[114]=(0.3333333333333333 * (ACC[136] * sin((X[118] - X[115])))); //P_ex[6,3]
    ACC[115]=(0.5 * (ACC[136] * sin((X[118] - X[116])))); //P_ex[6,4]
    ACC[116]=(ACC[136] * sin((X[118] - X[117]))); //P_ex[6,5]
    ACC[117]=0.0; //P_ex[6,6]
    ACC[118]=(ACC[136] * sin((X[118] - X[119]))); //P_ex[6,7]
    ACC[119]=(0.5 * (ACC[136] * sin((X[118] - X[120])))); //P_ex[6,8]
    ACC[48]=0.0; //P_diss[6,1]
    ACC[49]=0.0; //P_diss[6,2]
    ACC[50]=0.0; //P_diss[6,3]
    ACC[51]=0.0; //P_diss[6,4]
    ACC[52]=0.0; //P_diss[6,5]
    ACC[53]=0.0; //P_diss[6,6]
    ACC[54]=0.0; //P_diss[6,7]
    ACC[55]=0.0; //P_diss[6,8]
    ACC[142]=500000000.0; //P_load[6]
    ACC[5]=(ACC[112] + (ACC[113] + (ACC[114] + (ACC[115] + (ACC[116] + (ACC[117] + (ACC[118] + (ACC[119] + (ACC[48] + (ACC[49] + (ACC[50] + (ACC[51] + (ACC[52] + (ACC[53] + (ACC[54] + (ACC[55] + ACC[142])))))))))))))))); //P_a[6]
    ACC[120]=(0.1666666666666667 * (ACC[136] * sin((X[119] - X[113])))); //P_ex[7,1]
    ACC[121]=(0.2 * (ACC[136] * sin((X[119] - X[114])))); //P_ex[7,2]
    ACC[122]=(0.25 * (ACC[136] * sin((X[119] - X[115])))); //P_ex[7,3]
    ACC[123]=(0.3333333333333333 * (ACC[136] * sin((X[119] - X[116])))); //P_ex[7,4]
    ACC[124]=(0.5 * (ACC[136] * sin((X[119] - X[117])))); //P_ex[7,5]
    ACC[125]=(ACC[136] * sin((X[119] - X[118]))); //P_ex[7,6]
    ACC[126]=0.0; //P_ex[7,7]
    ACC[127]=(ACC[136] * sin((X[119] - X[120]))); //P_ex[7,8]
    ACC[56]=0.0; //P_diss[7,1]
    ACC[57]=0.0; //P_diss[7,2]
    ACC[58]=0.0; //P_diss[7,3]
    ACC[59]=0.0; //P_diss[7,4]
    ACC[60]=0.0; //P_diss[7,5]
    ACC[61]=0.0; //P_diss[7,6]
    ACC[62]=0.0; //P_diss[7,7]
    ACC[63]=0.0; //P_diss[7,8]
    ACC[143]=500000000.0; //P_load[7]
    ACC[6]=(ACC[120] + (ACC[121] + (ACC[122] + (ACC[123] + (ACC[124] + (ACC[125] + (ACC[126] + (ACC[127] + (ACC[56] + (ACC[57] + (ACC[58] + (ACC[59] + (ACC[60] + (ACC[61] + (ACC[62] + (ACC[63] + ACC[143])))))))))))))))); //P_a[7]
    ACC[128]=(0.1428571428571428 * (ACC[136] * sin((X[120] - X[113])))); //P_ex[8,1]
    ACC[129]=(0.1666666666666667 * (ACC[136] * sin((X[120] - X[114])))); //P_ex[8,2]
    ACC[130]=(0.2 * (ACC[136] * sin((X[120] - X[115])))); //P_ex[8,3]
    ACC[131]=(0.25 * (ACC[136] * sin((X[120] - X[116])))); //P_ex[8,4]
    ACC[132]=(0.3333333333333333 * (ACC[136] * sin((X[120] - X[117])))); //P_ex[8,5]
    ACC[133]=(0.5 * (ACC[136] * sin((X[120] - X[118])))); //P_ex[8,6]
    ACC[134]=(ACC[136] * sin((X[120] - X[119]))); //P_ex[8,7]
    ACC[135]=0.0; //P_ex[8,8]
    ACC[64]=0.0; //P_diss[8,1]
    ACC[65]=0.0; //P_diss[8,2]
    ACC[66]=0.0; //P_diss[8,3]
    ACC[67]=0.0; //P_diss[8,4]
    ACC[68]=0.0; //P_diss[8,5]
    ACC[69]=0.0; //P_diss[8,6]
    ACC[70]=0.0; //P_diss[8,7]
    ACC[71]=0.0; //P_diss[8,8]
    ACC[144]=500000000.0; //P_load[8]
    ACC[7]=(ACC[128] + (ACC[129] + (ACC[130] + (ACC[131] + (ACC[132] + (ACC[133] + (ACC[134] + (ACC[135] + (ACC[64] + (ACC[65] + (ACC[66] + (ACC[67] + (ACC[68] + (ACC[69] + (ACC[70] + (ACC[71] + ACC[144])))))))))))))))); //P_a[8]
    X[81]=314.1592653589793; //generator[1].omega
    ACC[274]=(0.1591549430918953 * X[81]); //generator[1].f
    ACC[145]=ACC[274]; //f
    ACC[146]=0.0; //generator[1].P_a
    ACC[147]=0.0; //generator[2].P_a
    ACC[148]=0.0; //generator[3].P_a
    ACC[149]=0.0; //generator[4].P_a
    ACC[150]=0.0; //generator[5].P_a
    ACC[151]=0.0; //generator[6].P_a
    ACC[152]=0.0; //generator[7].P_a
    ACC[153]=0.0; //generator[8].P_a
    X[0]=0.0; //P_sfc
    ACC[154]=(0.125 * X[0]); //generator[1].P_sfc
    ACC[155]=ACC[154]; //generator[2].P_sfc
    ACC[156]=ACC[154]; //generator[3].P_sfc
    ACC[157]=ACC[154]; //generator[4].P_sfc
    ACC[158]=ACC[154]; //generator[5].P_sfc
    ACC[159]=ACC[154]; //generator[6].P_sfc
    ACC[160]=ACC[154]; //generator[7].P_sfc
    ACC[161]=ACC[154]; //generator[8].P_sfc
    ACC[162]=0.0; //generator[1].P_t
    ACC[163]=0.0; //generator[2].P_t
    ACC[164]=0.0; //generator[3].P_t
    ACC[165]=0.0; //generator[4].P_t
    ACC[166]=0.0; //generator[5].P_t
    ACC[167]=0.0; //generator[6].P_t
    ACC[168]=0.0; //generator[7].P_t
    ACC[169]=0.0; //generator[8].P_t
    ACC[170]=500000000.0; //generator[1].P_t_0
    ACC[171]=500000000.0; //generator[2].P_t_0
    ACC[172]=500000000.0; //generator[3].P_t_0
    ACC[173]=500000000.0; //generator[4].P_t_0
    ACC[174]=500000000.0; //generator[5].P_t_0
    ACC[175]=500000000.0; //generator[6].P_t_0
    ACC[176]=500000000.0; //generator[7].P_t_0
    ACC[177]=500000000.0; //generator[8].P_t_0
    ACC[178]=0.0; //generator[1].T_s_b[1]
    ACC[179]=0.0; //generator[1].T_s_b[2]
    ACC[180]=0.0; //generator[1].T_s_b[3]
    ACC[181]=0.0; //generator[1].T_s_b[4]
    ACC[182]=0.0; //generator[1].T_s_b[5]
    ACC[183]=0.0; //generator[1].T_s_b[6]
    ACC[184]=0.0; //generator[1].T_s_b[7]
    ACC[185]=0.0; //generator[1].T_s_b[8]
    ACC[186]=0.0; //generator[1].T_s_b[9]
    ACC[187]=0.0; //generator[2].T_s_b[1]
    ACC[188]=0.0; //generator[2].T_s_b[2]
    ACC[189]=0.0; //generator[2].T_s_b[3]
    ACC[190]=0.0; //generator[2].T_s_b[4]
    ACC[191]=0.0; //generator[2].T_s_b[5]
    ACC[192]=0.0; //generator[2].T_s_b[6]
    ACC[193]=0.0; //generator[2].T_s_b[7]
    ACC[194]=0.0; //generator[2].T_s_b[8]
    ACC[195]=0.0; //generator[2].T_s_b[9]
    ACC[196]=0.0; //generator[3].T_s_b[1]
    ACC[197]=0.0; //generator[3].T_s_b[2]
    ACC[198]=0.0; //generator[3].T_s_b[3]
    ACC[199]=0.0; //generator[3].T_s_b[4]
    ACC[200]=0.0; //generator[3].T_s_b[5]
    ACC[201]=0.0; //generator[3].T_s_b[6]
    ACC[202]=0.0; //generator[3].T_s_b[7]
    ACC[203]=0.0; //generator[3].T_s_b[8]
    ACC[204]=0.0; //generator[3].T_s_b[9]
    ACC[205]=0.0; //generator[4].T_s_b[1]
    ACC[206]=0.0; //generator[4].T_s_b[2]
    ACC[207]=0.0; //generator[4].T_s_b[3]
    ACC[208]=0.0; //generator[4].T_s_b[4]
    ACC[209]=0.0; //generator[4].T_s_b[5]
    ACC[210]=0.0; //generator[4].T_s_b[6]
    ACC[211]=0.0; //generator[4].T_s_b[7]
    ACC[212]=0.0; //generator[4].T_s_b[8]
    ACC[213]=0.0; //generator[4].T_s_b[9]
    ACC[214]=0.0; //generator[5].T_s_b[1]
    ACC[215]=0.0; //generator[5].T_s_b[2]
    ACC[216]=0.0; //generator[5].T_s_b[3]
    ACC[217]=0.0; //generator[5].T_s_b[4]
    ACC[218]=0.0; //generator[5].T_s_b[5]
    ACC[219]=0.0; //generator[5].T_s_b[6]
    ACC[220]=0.0; //generator[5].T_s_b[7]
    ACC[221]=0.0; //generator[5].T_s_b[8]
    ACC[222]=0.0; //generator[5].T_s_b[9]
    ACC[223]=0.0; //generator[6].T_s_b[1]
    ACC[224]=0.0; //generator[6].T_s_b[2]
    ACC[225]=0.0; //generator[6].T_s_b[3]
    ACC[226]=0.0; //generator[6].T_s_b[4]
    ACC[227]=0.0; //generator[6].T_s_b[5]
    ACC[228]=0.0; //generator[6].T_s_b[6]
    ACC[229]=0.0; //generator[6].T_s_b[7]
    ACC[230]=0.0; //generator[6].T_s_b[8]
    ACC[231]=0.0; //generator[6].T_s_b[9]
    ACC[232]=0.0; //generator[7].T_s_b[1]
    ACC[233]=0.0; //generator[7].T_s_b[2]
    ACC[234]=0.0; //generator[7].T_s_b[3]
    ACC[235]=0.0; //generator[7].T_s_b[4]
    ACC[236]=0.0; //generator[7].T_s_b[5]
    ACC[237]=0.0; //generator[7].T_s_b[6]
    ACC[238]=0.0; //generator[7].T_s_b[7]
    ACC[239]=0.0; //generator[7].T_s_b[8]
    ACC[240]=0.0; //generator[7].T_s_b[9]
    ACC[241]=0.0; //generator[8].T_s_b[1]
    ACC[242]=0.0; //generator[8].T_s_b[2]
    ACC[243]=0.0; //generator[8].T_s_b[3]
    ACC[244]=0.0; //generator[8].T_s_b[4]
    ACC[245]=0.0; //generator[8].T_s_b[5]
    ACC[246]=0.0; //generator[8].T_s_b[6]
    ACC[247]=0.0; //generator[8].T_s_b[7]
    ACC[248]=0.0; //generator[8].T_s_b[8]
    ACC[249]=0.0; //generator[8].T_s_b[9]
    ACC[250]=(-1.0 + (0.02 * ACC[274])); //generator[1].delta_f
    ACC[251]=0.0; //generator[2].delta_f
    ACC[252]=0.0; //generator[3].delta_f
    ACC[253]=0.0; //generator[4].delta_f
    ACC[254]=0.0; //generator[5].delta_f
    ACC[255]=0.0; //generator[6].delta_f
    ACC[256]=0.0; //generator[7].delta_f
    ACC[257]=0.0; //generator[8].delta_f
    ACC[282]=1.0; //generator[1].p_0
    X[89]=1.0; //generator[1].p
    ACC[258]=(ACC[282] - X[89]); //generator[1].err_p
    ACC[283]=1.0; //generator[2].p_0
    X[90]=1.0; //generator[2].p
    ACC[259]=(ACC[283] - X[90]); //generator[2].err_p
    ACC[284]=1.0; //generator[3].p_0
    X[91]=1.0; //generator[3].p
    ACC[260]=(ACC[284] - X[91]); //generator[3].err_p
    ACC[285]=1.0; //generator[4].p_0
    X[92]=1.0; //generator[4].p
    ACC[261]=(ACC[285] - X[92]); //generator[4].err_p
    ACC[286]=1.0; //generator[5].p_0
    X[93]=1.0; //generator[5].p
    ACC[262]=(ACC[286] - X[93]); //generator[5].err_p
    ACC[287]=1.0; //generator[6].p_0
    X[94]=1.0; //generator[6].p
    ACC[263]=(ACC[287] - X[94]); //generator[6].err_p
    ACC[288]=1.0; //generator[7].p_0
    X[95]=1.0; //generator[7].p
    ACC[264]=(ACC[288] - X[95]); //generator[7].err_p
    ACC[289]=1.0; //generator[8].p_0
    X[96]=1.0; //generator[8].p
    ACC[265]=(ACC[289] - X[96]); //generator[8].err_p
    ACC[266]=0.0; //generator[1].err_p_t
    ACC[267]=0.0; //generator[2].err_p_t
    ACC[268]=0.0; //generator[3].err_p_t
    ACC[269]=0.0; //generator[4].err_p_t
    ACC[270]=0.0; //generator[5].err_p_t
    ACC[271]=0.0; //generator[6].err_p_t
    ACC[272]=0.0; //generator[7].err_p_t
    ACC[273]=0.0; //generator[8].err_p_t
    ACC[275]=0.0; //generator[2].f
    ACC[276]=0.0; //generator[3].f
    ACC[277]=0.0; //generator[4].f
    ACC[278]=0.0; //generator[5].f
    ACC[279]=0.0; //generator[6].f
    ACC[280]=0.0; //generator[7].f
    ACC[281]=0.0; //generator[8].f
    ACC[290]=0.0; //generator[1].p_t
    ACC[291]=0.0; //generator[2].p_t
    ACC[292]=0.0; //generator[3].p_t
    ACC[293]=0.0; //generator[4].p_t
    ACC[294]=0.0; //generator[5].p_t
    ACC[295]=0.0; //generator[6].p_t
    ACC[296]=0.0; //generator[7].p_t
    ACC[297]=0.0; //generator[8].p_t
    ACC[298]=1.0; //generator[1].p_t_0
    ACC[299]=1.0; //generator[2].p_t_0
    ACC[300]=1.0; //generator[3].p_t_0
    ACC[301]=1.0; //generator[4].p_t_0
    ACC[302]=1.0; //generator[5].p_t_0
    ACC[303]=1.0; //generator[6].p_t_0
    ACC[304]=1.0; //generator[7].p_t_0
    ACC[305]=1.0; //generator[8].p_t_0
    sPAR[85]=0.1; //generator[1].droop
    ACC[306]=(ACC[298] + ((2e-09 * ACC[154]) - (ACC[250] / sPAR[85]))); //generator[1].p_t_0_fc
    sPAR[86]=0.1; //generator[2].droop
    ACC[307]=(ACC[299] + ((2e-09 * ACC[155]) - (ACC[251] / sPAR[86]))); //generator[2].p_t_0_fc
    sPAR[87]=0.1; //generator[3].droop
    ACC[308]=(ACC[300] + ((2e-09 * ACC[156]) - (ACC[252] / sPAR[87]))); //generator[3].p_t_0_fc
    sPAR[88]=0.1; //generator[4].droop
    ACC[309]=(ACC[301] + ((2e-09 * ACC[157]) - (ACC[253] / sPAR[88]))); //generator[4].p_t_0_fc
    sPAR[89]=0.1; //generator[5].droop
    ACC[310]=(ACC[302] + ((2e-09 * ACC[158]) - (ACC[254] / sPAR[89]))); //generator[5].p_t_0_fc
    sPAR[90]=0.1; //generator[6].droop
    ACC[311]=(ACC[303] + ((2e-09 * ACC[159]) - (ACC[255] / sPAR[90]))); //generator[6].p_t_0_fc
    sPAR[91]=0.1; //generator[7].droop
    ACC[312]=(ACC[304] + ((2e-09 * ACC[160]) - (ACC[256] / sPAR[91]))); //generator[7].p_t_0_fc
    sPAR[92]=0.1; //generator[8].droop
    ACC[313]=(ACC[305] + ((2e-09 * ACC[161]) - (ACC[257] / sPAR[92]))); //generator[8].p_t_0_fc
    ACC[314]=0.0; //generator[1].q_ev_0
    ACC[315]=0.0; //generator[2].q_ev_0
    ACC[316]=0.0; //generator[3].q_ev_0
    ACC[317]=0.0; //generator[4].q_ev_0
    ACC[318]=0.0; //generator[5].q_ev_0
    ACC[319]=0.0; //generator[6].q_ev_0
    ACC[320]=0.0; //generator[7].q_ev_0
    ACC[321]=0.0; //generator[8].q_ev_0
    ACC[322]=0.0; //generator[1].w_s
    ACC[323]=0.0; //generator[2].w_s
    ACC[324]=0.0; //generator[3].w_s
    ACC[325]=0.0; //generator[4].w_s
    ACC[326]=0.0; //generator[5].w_s
    ACC[327]=0.0; //generator[6].w_s
    ACC[328]=0.0; //generator[7].w_s
    ACC[329]=0.0; //generator[8].w_s
    ACC[330]=0.0; //generator[1].y_t_0
    ACC[331]=0.0; //generator[2].y_t_0
    ACC[332]=0.0; //generator[3].y_t_0
    ACC[333]=0.0; //generator[4].y_t_0
    ACC[334]=0.0; //generator[5].y_t_0
    ACC[335]=0.0; //generator[6].y_t_0
    ACC[336]=0.0; //generator[7].y_t_0
    ACC[337]=0.0; //generator[8].y_t_0
    sPAR[0]=0.0; //P_d
    sPAR[1]=500000000.0; //P_nom
    sPAR[2]=20.0; //T_sfc
    sPAR[3]=0.1; //droop
    sPAR[4]=50.0; //f_ref
    sPAR[5]=25330.29591058444; //generator[1].J
    sPAR[6]=25330.29591058444; //generator[2].J
    sPAR[7]=25330.29591058444; //generator[3].J
    sPAR[8]=25330.29591058444; //generator[4].J
    sPAR[9]=25330.29591058444; //generator[5].J
    sPAR[10]=25330.29591058444; //generator[6].J
    sPAR[11]=25330.29591058444; //generator[7].J
    sPAR[12]=25330.29591058444; //generator[8].J
    sPAR[13]=10.0; //generator[1].Kp_p
    sPAR[14]=10.0; //generator[2].Kp_p
    sPAR[15]=10.0; //generator[3].Kp_p
    sPAR[16]=10.0; //generator[4].Kp_p
    sPAR[17]=10.0; //generator[5].Kp_p
    sPAR[18]=10.0; //generator[6].Kp_p
    sPAR[19]=10.0; //generator[7].Kp_p
    sPAR[20]=10.0; //generator[8].Kp_p
    sPAR[21]=2.0; //generator[1].Kp_t
    sPAR[22]=2.0; //generator[2].Kp_t
    sPAR[23]=2.0; //generator[3].Kp_t
    sPAR[24]=2.0; //generator[4].Kp_t
    sPAR[25]=2.0; //generator[5].Kp_t
    sPAR[26]=2.0; //generator[6].Kp_t
    sPAR[27]=2.0; //generator[7].Kp_t
    sPAR[28]=2.0; //generator[8].Kp_t
    sPAR[29]=2.0; //generator[1].NTU
    sPAR[30]=2.0; //generator[2].NTU
    sPAR[31]=2.0; //generator[3].NTU
    sPAR[32]=2.0; //generator[4].NTU
    sPAR[33]=2.0; //generator[5].NTU
    sPAR[34]=2.0; //generator[6].NTU
    sPAR[35]=2.0; //generator[7].NTU
    sPAR[36]=2.0; //generator[8].NTU
    sPAR[37]=500000000.0; //generator[1].P_nom
    sPAR[38]=500000000.0; //generator[2].P_nom
    sPAR[39]=500000000.0; //generator[3].P_nom
    sPAR[40]=500000000.0; //generator[4].P_nom
    sPAR[41]=500000000.0; //generator[5].P_nom
    sPAR[42]=500000000.0; //generator[6].P_nom
    sPAR[43]=500000000.0; //generator[7].P_nom
    sPAR[44]=500000000.0; //generator[8].P_nom
    sPAR[45]=5.0; //generator[1].T_a
    sPAR[46]=5.0; //generator[2].T_a
    sPAR[47]=5.0; //generator[3].T_a
    sPAR[48]=5.0; //generator[4].T_a
    sPAR[49]=5.0; //generator[5].T_a
    sPAR[50]=5.0; //generator[6].T_a
    sPAR[51]=5.0; //generator[7].T_a
    sPAR[52]=5.0; //generator[8].T_a
    sPAR[53]=1.5; //generator[1].T_source
    sPAR[54]=1.5; //generator[2].T_source
    sPAR[55]=1.5; //generator[3].T_source
    sPAR[56]=1.5; //generator[4].T_source
    sPAR[57]=1.5; //generator[5].T_source
    sPAR[58]=1.5; //generator[6].T_source
    sPAR[59]=1.5; //generator[7].T_source
    sPAR[60]=1.5; //generator[8].T_source
    sPAR[61]=70.0; //generator[1].Ti_p
    sPAR[62]=70.0; //generator[2].Ti_p
    sPAR[63]=70.0; //generator[3].Ti_p
    sPAR[64]=70.0; //generator[4].Ti_p
    sPAR[65]=70.0; //generator[5].Ti_p
    sPAR[66]=70.0; //generator[6].Ti_p
    sPAR[67]=70.0; //generator[7].Ti_p
    sPAR[68]=70.0; //generator[8].Ti_p
    sPAR[69]=0.3; //generator[1].Ti_t
    sPAR[70]=0.3; //generator[2].Ti_t
    sPAR[71]=0.3; //generator[3].Ti_t
    sPAR[72]=0.3; //generator[4].Ti_t
    sPAR[73]=0.3; //generator[5].Ti_t
    sPAR[74]=0.3; //generator[6].Ti_t
    sPAR[75]=0.3; //generator[7].Ti_t
    sPAR[76]=0.3; //generator[8].Ti_t
    sPAR[77]=0.3; //generator[1].alpha
    sPAR[78]=0.3; //generator[2].alpha
    sPAR[79]=0.3; //generator[3].alpha
    sPAR[80]=0.3; //generator[4].alpha
    sPAR[81]=0.3; //generator[5].alpha
    sPAR[82]=0.3; //generator[6].alpha
    sPAR[83]=0.3; //generator[7].alpha
    sPAR[84]=0.3; //generator[8].alpha
    sPAR[93]=50.0; //generator[1].f_ref
    sPAR[94]=50.0; //generator[2].f_ref
    sPAR[95]=50.0; //generator[3].f_ref
    sPAR[96]=50.0; //generator[4].f_ref
    sPAR[97]=50.0; //generator[5].f_ref
    sPAR[98]=50.0; //generator[6].f_ref
    sPAR[99]=50.0; //generator[7].f_ref
    sPAR[100]=50.0; //generator[8].f_ref
    sPAR[101]=314.1592653589793; //generator[1].omega_ref
    sPAR[102]=314.1592653589793; //generator[2].omega_ref
    sPAR[103]=314.1592653589793; //generator[3].omega_ref
    sPAR[104]=314.1592653589793; //generator[4].omega_ref
    sPAR[105]=314.1592653589793; //generator[5].omega_ref
    sPAR[106]=314.1592653589793; //generator[6].omega_ref
    sPAR[107]=314.1592653589793; //generator[7].omega_ref
    sPAR[108]=314.1592653589793; //generator[8].omega_ref
    sPAR[109]=200.0; //generator[1].tau_b
    sPAR[110]=200.0; //generator[2].tau_b
    sPAR[111]=200.0; //generator[3].tau_b
    sPAR[112]=200.0; //generator[4].tau_b
    sPAR[113]=200.0; //generator[5].tau_b
    sPAR[114]=200.0; //generator[6].tau_b
    sPAR[115]=200.0; //generator[7].tau_b
    sPAR[116]=200.0; //generator[8].tau_b
    sPAR[117]=3.0; //generator[1].tau_q
    sPAR[118]=3.0; //generator[2].tau_q
    sPAR[119]=3.0; //generator[3].tau_q
    sPAR[120]=3.0; //generator[4].tau_q
    sPAR[121]=3.0; //generator[5].tau_q
    sPAR[122]=3.0; //generator[6].tau_q
    sPAR[123]=3.0; //generator[7].tau_q
    sPAR[124]=3.0; //generator[8].tau_q
    sPAR[125]=100.0; //generator[1].tau_sh
    sPAR[126]=100.0; //generator[2].tau_sh
    sPAR[127]=100.0; //generator[3].tau_sh
    sPAR[128]=100.0; //generator[4].tau_sh
    sPAR[129]=100.0; //generator[5].tau_sh
    sPAR[130]=100.0; //generator[6].tau_sh
    sPAR[131]=100.0; //generator[7].tau_sh
    sPAR[132]=100.0; //generator[8].tau_sh
    sPAR[133]=8.0; //generator[1].tau_t
    sPAR[134]=8.0; //generator[2].tau_t
    sPAR[135]=8.0; //generator[3].tau_t
    sPAR[136]=8.0; //generator[4].tau_t
    sPAR[137]=8.0; //generator[5].tau_t
    sPAR[138]=8.0; //generator[6].tau_t
    sPAR[139]=8.0; //generator[7].tau_t
    sPAR[140]=8.0; //generator[8].tau_t
    sPAR[141]=0.3; //generator[1].tau_y
    sPAR[142]=0.3; //generator[2].tau_y
    sPAR[143]=0.3; //generator[3].tau_y
    sPAR[144]=0.3; //generator[4].tau_y
    sPAR[145]=0.3; //generator[5].tau_y
    sPAR[146]=0.3; //generator[6].tau_y
    sPAR[147]=0.3; //generator[7].tau_y
    sPAR[148]=0.3; //generator[8].tau_y
    sPAR[149]=0.0; //omega_ref
    sPAR[150]=0.0; //generator[1].pi
    sPAR[151]=0.0; //generator[2].pi
    sPAR[152]=0.0; //generator[3].pi
    sPAR[153]=0.0; //generator[4].pi
    sPAR[154]=0.0; //generator[5].pi
    sPAR[155]=0.0; //generator[6].pi
    sPAR[156]=0.0; //generator[7].pi
    sPAR[157]=0.0; //generator[8].pi
    sPAR[158]=0.0; //pi
    sPARi[0]=8; //M
    sPARi[1]=8; //N
    sPARi[2]=8; //generator[1].N
    sPARi[3]=8; //generator[2].N
    sPARi[4]=8; //generator[3].N
    sPARi[5]=8; //generator[4].N
    sPARi[6]=8; //generator[5].N
    sPARi[7]=8; //generator[6].N
    sPARi[8]=8; //generator[7].N
    sPARi[9]=8; //generator[8].N
    X[1]=((X[89] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[1]
    X[2]=((X[1] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[2]
    X[3]=((X[2] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[3]
    X[4]=((X[3] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[4]
    X[5]=((X[4] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[5]
    X[6]=((X[5] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[6]
    X[7]=((X[6] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[7]
    X[8]=((X[7] + (0.125 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.125 * sPAR[29]))); //generator[1].T_s[8]
    X[9]=((X[90] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[1]
    X[10]=((X[9] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[2]
    X[11]=((X[10] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[3]
    X[12]=((X[11] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[4]
    X[13]=((X[12] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[5]
    X[14]=((X[13] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[6]
    X[15]=((X[14] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[7]
    X[16]=((X[15] + (0.125 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.125 * sPAR[30]))); //generator[2].T_s[8]
    X[17]=((X[91] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[1]
    X[18]=((X[17] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[2]
    X[19]=((X[18] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[3]
    X[20]=((X[19] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[4]
    X[21]=((X[20] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[5]
    X[22]=((X[21] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[6]
    X[23]=((X[22] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[7]
    X[24]=((X[23] + (0.125 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.125 * sPAR[31]))); //generator[3].T_s[8]
    X[25]=((X[92] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[1]
    X[26]=((X[25] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[2]
    X[27]=((X[26] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[3]
    X[28]=((X[27] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[4]
    X[29]=((X[28] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[5]
    X[30]=((X[29] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[6]
    X[31]=((X[30] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[7]
    X[32]=((X[31] + (0.125 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.125 * sPAR[32]))); //generator[4].T_s[8]
    X[33]=((X[93] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[1]
    X[34]=((X[33] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[2]
    X[35]=((X[34] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[3]
    X[36]=((X[35] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[4]
    X[37]=((X[36] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[5]
    X[38]=((X[37] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[6]
    X[39]=((X[38] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[7]
    X[40]=((X[39] + (0.125 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.125 * sPAR[33]))); //generator[5].T_s[8]
    X[41]=((X[94] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[1]
    X[42]=((X[41] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[2]
    X[43]=((X[42] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[3]
    X[44]=((X[43] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[4]
    X[45]=((X[44] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[5]
    X[46]=((X[45] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[6]
    X[47]=((X[46] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[7]
    X[48]=((X[47] + (0.125 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.125 * sPAR[34]))); //generator[6].T_s[8]
    X[49]=((X[95] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[1]
    X[50]=((X[49] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[2]
    X[51]=((X[50] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[3]
    X[52]=((X[51] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[4]
    X[53]=((X[52] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[5]
    X[54]=((X[53] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[6]
    X[55]=((X[54] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[7]
    X[56]=((X[55] + (0.125 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.125 * sPAR[35]))); //generator[7].T_s[8]
    X[57]=((X[96] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[1]
    X[58]=((X[57] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[2]
    X[59]=((X[58] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[3]
    X[60]=((X[59] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[4]
    X[61]=((X[60] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[5]
    X[62]=((X[61] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[6]
    X[63]=((X[62] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[7]
    X[64]=((X[63] + (0.125 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.125 * sPAR[36]))); //generator[8].T_s[8]
    X[65]=0.0; //generator[1].err_p_int
    X[66]=0.0; //generator[2].err_p_int
    X[67]=0.0; //generator[3].err_p_int
    X[68]=0.0; //generator[4].err_p_int
    X[69]=0.0; //generator[5].err_p_int
    X[70]=0.0; //generator[6].err_p_int
    X[71]=0.0; //generator[7].err_p_int
    X[72]=0.0; //generator[8].err_p_int
    X[73]=0.0; //generator[1].err_p_t_int
    X[74]=0.0; //generator[2].err_p_t_int
    X[75]=0.0; //generator[3].err_p_t_int
    X[76]=0.0; //generator[4].err_p_t_int
    X[77]=0.0; //generator[5].err_p_t_int
    X[78]=0.0; //generator[6].err_p_t_int
    X[79]=0.0; //generator[7].err_p_t_int
    X[80]=0.0; //generator[8].err_p_t_int
    X[82]=314.1592653589793; //generator[2].omega
    X[83]=314.1592653589793; //generator[3].omega
    X[84]=314.1592653589793; //generator[4].omega
    X[85]=314.1592653589793; //generator[5].omega
    X[86]=314.1592653589793; //generator[6].omega
    X[87]=314.1592653589793; //generator[7].omega
    X[88]=314.1592653589793; //generator[8].omega
    X[97]=(1.0 - sPAR[77]); //generator[1].p_t_lp
    X[98]=(1.0 - sPAR[78]); //generator[2].p_t_lp
    X[99]=(1.0 - sPAR[79]); //generator[3].p_t_lp
    X[100]=(1.0 - sPAR[80]); //generator[4].p_t_lp
    X[101]=(1.0 - sPAR[81]); //generator[5].p_t_lp
    X[102]=(1.0 - sPAR[82]); //generator[6].p_t_lp
    X[103]=(1.0 - sPAR[83]); //generator[7].p_t_lp
    X[104]=(1.0 - sPAR[84]); //generator[8].p_t_lp
    X[105]=1.0; //generator[1].q_ev
    X[106]=1.0; //generator[2].q_ev
    X[107]=1.0; //generator[3].q_ev
    X[108]=1.0; //generator[4].q_ev
    X[109]=1.0; //generator[5].q_ev
    X[110]=1.0; //generator[6].q_ev
    X[111]=1.0; //generator[7].q_ev
    X[112]=1.0; //generator[8].q_ev
    X[121]=1.0; //generator[1].y_t
    X[122]=1.0; //generator[2].y_t
    X[123]=1.0; //generator[3].y_t
    X[124]=1.0; //generator[4].y_t
    X[125]=1.0; //generator[5].y_t
    X[126]=1.0; //generator[6].y_t
    X[127]=1.0; //generator[7].y_t
    X[128]=1.0; //generator[8].y_t

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
