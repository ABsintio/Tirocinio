
#ifndef POWERSYSTEMSTEPLOAD_N_8_M_4_PERTHREAD_SYSTEMDEFINITION_H
#define POWERSYSTEMSTEPLOAD_N_8_M_4_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[71]=0.0;
    ACC[135]=0.0;
    ACC[62]=0.0;
    ACC[126]=0.0;
    ACC[53]=0.0;
    ACC[117]=0.0;
    ACC[44]=0.0;
    ACC[108]=0.0;
    ACC[35]=0.0;
    ACC[99]=0.0;
    ACC[26]=0.0;
    ACC[90]=0.0;
    ACC[17]=0.0;
    ACC[81]=0.0;
    ACC[8]=0.0;
    ACC[72]=0.0;
    ACC[257]=1.0;
    ACC[177]=500000000.0;
    ACC[273]=1.0;
    ACC[256]=1.0;
    ACC[176]=500000000.0;
    ACC[272]=1.0;
    ACC[255]=1.0;
    ACC[175]=500000000.0;
    ACC[271]=1.0;
    ACC[254]=1.0;
    ACC[174]=500000000.0;
    ACC[270]=1.0;
    ACC[253]=1.0;
    ACC[173]=500000000.0;
    ACC[269]=1.0;
    ACC[252]=1.0;
    ACC[172]=500000000.0;
    ACC[268]=1.0;
    ACC[251]=1.0;
    ACC[171]=500000000.0;
    ACC[267]=1.0;
    ACC[250]=1.0;
    ACC[170]=500000000.0;
    ACC[266]=1.0;
    ACC[136]=500000000.0;
    ACC[144]=500000000.0;
    ACC[143]=500000000.0;
    ACC[142]=500000000.0;
    ACC[141]=500000000.0;
    ACC[140]=500000000.0;
    ACC[139]=500000000.0;
    ACC[138]=500000000.0;
    ACC[137]=0.0;
    ACC[178]=X[57];
    ACC[179]=X[1];
    ACC[180]=X[2];
    ACC[181]=X[3];
    ACC[182]=X[4];
    ACC[183]=X[58];
    ACC[184]=X[5];
    ACC[185]=X[6];
    ACC[186]=X[7];
    ACC[187]=X[8];
    ACC[188]=X[59];
    ACC[189]=X[9];
    ACC[190]=X[10];
    ACC[191]=X[11];
    ACC[192]=X[12];
    ACC[193]=X[60];
    ACC[194]=X[13];
    ACC[195]=X[14];
    ACC[196]=X[15];
    ACC[197]=X[16];
    ACC[198]=X[61];
    ACC[199]=X[17];
    ACC[200]=X[18];
    ACC[201]=X[19];
    ACC[202]=X[20];
    ACC[203]=X[62];
    ACC[204]=X[21];
    ACC[205]=X[22];
    ACC[206]=X[23];
    ACC[207]=X[24];
    ACC[208]=X[63];
    ACC[209]=X[25];
    ACC[210]=X[26];
    ACC[211]=X[27];
    ACC[212]=X[28];
    ACC[213]=X[64];
    ACC[214]=X[29];
    ACC[215]=X[30];
    ACC[216]=X[31];
    ACC[217]=X[32];
    ACC[134]=(500000000.0 * sin((X[88] - X[87])));
    ACC[133]=(250000000.0 * sin((X[88] - X[86])));
    ACC[132]=(166666666.6666667 * sin((X[88] - X[85])));
    ACC[131]=(125000000.0 * sin((X[88] - X[84])));
    ACC[130]=(100000000.0 * sin((X[88] - X[83])));
    ACC[129]=(83333333.33333333 * sin((X[88] - X[82])));
    ACC[128]=(71428571.42857142 * sin((X[88] - X[81])));
    ACC[127]=(500000000.0 * sin((X[87] - X[88])));
    ACC[125]=(500000000.0 * sin((X[87] - X[86])));
    ACC[124]=(250000000.0 * sin((X[87] - X[85])));
    ACC[123]=(166666666.6666667 * sin((X[87] - X[84])));
    ACC[122]=(125000000.0 * sin((X[87] - X[83])));
    ACC[121]=(100000000.0 * sin((X[87] - X[82])));
    ACC[120]=(83333333.33333333 * sin((X[87] - X[81])));
    ACC[119]=(250000000.0 * sin((X[86] - X[88])));
    ACC[118]=(500000000.0 * sin((X[86] - X[87])));
    ACC[116]=(500000000.0 * sin((X[86] - X[85])));
    ACC[115]=(250000000.0 * sin((X[86] - X[84])));
    ACC[114]=(166666666.6666667 * sin((X[86] - X[83])));
    ACC[113]=(125000000.0 * sin((X[86] - X[82])));
    ACC[112]=(100000000.0 * sin((X[86] - X[81])));
    ACC[111]=(166666666.6666667 * sin((X[85] - X[88])));
    ACC[110]=(250000000.0 * sin((X[85] - X[87])));
    ACC[109]=(500000000.0 * sin((X[85] - X[86])));
    ACC[107]=(500000000.0 * sin((X[85] - X[84])));
    ACC[106]=(250000000.0 * sin((X[85] - X[83])));
    ACC[105]=(166666666.6666667 * sin((X[85] - X[82])));
    ACC[104]=(125000000.0 * sin((X[85] - X[81])));
    ACC[103]=(125000000.0 * sin((X[84] - X[88])));
    ACC[102]=(166666666.6666667 * sin((X[84] - X[87])));
    ACC[101]=(250000000.0 * sin((X[84] - X[86])));
    ACC[100]=(500000000.0 * sin((X[84] - X[85])));
    ACC[98]=(500000000.0 * sin((X[84] - X[83])));
    ACC[97]=(250000000.0 * sin((X[84] - X[82])));
    ACC[96]=(166666666.6666667 * sin((X[84] - X[81])));
    ACC[95]=(100000000.0 * sin((X[83] - X[88])));
    ACC[94]=(125000000.0 * sin((X[83] - X[87])));
    ACC[93]=(166666666.6666667 * sin((X[83] - X[86])));
    ACC[92]=(250000000.0 * sin((X[83] - X[85])));
    ACC[91]=(500000000.0 * sin((X[83] - X[84])));
    ACC[89]=(500000000.0 * sin((X[83] - X[82])));
    ACC[88]=(250000000.0 * sin((X[83] - X[81])));
    ACC[87]=(83333333.33333333 * sin((X[82] - X[88])));
    ACC[86]=(100000000.0 * sin((X[82] - X[87])));
    ACC[85]=(125000000.0 * sin((X[82] - X[86])));
    ACC[84]=(166666666.6666667 * sin((X[82] - X[85])));
    ACC[83]=(250000000.0 * sin((X[82] - X[84])));
    ACC[82]=(500000000.0 * sin((X[82] - X[83])));
    ACC[80]=(500000000.0 * sin((X[82] - X[81])));
    ACC[79]=(71428571.42857142 * sin((X[81] - X[88])));
    ACC[78]=(83333333.33333333 * sin((X[81] - X[87])));
    ACC[77]=(100000000.0 * sin((X[81] - X[86])));
    ACC[76]=(125000000.0 * sin((X[81] - X[85])));
    ACC[75]=(166666666.6666667 * sin((X[81] - X[84])));
    ACC[74]=(250000000.0 * sin((X[81] - X[83])));
    ACC[73]=(500000000.0 * sin((X[81] - X[82])));
    ACC[161]=(0.125 * X[0]);
    ACC[154]=ACC[161];
    ACC[155]=ACC[161];
    ACC[156]=ACC[161];
    ACC[157]=ACC[161];
    ACC[158]=ACC[161];
    ACC[159]=ACC[161];
    ACC[160]=ACC[161];
    ACC[226]=(1.0 - X[57]);
    ACC[290]=(X[89] * X[57]);
    ACC[258]=((sPAR[77] * ACC[290]) + X[65]);
    ACC[162]=(500000000.0 * ACC[258]);
    ACC[145]=(0.1591549430918953 * X[49]);
    ACC[218]=(-1.0 + (0.02 * ACC[145]));
    ACC[274]=(1.0 + ((2e-09 * ACC[161]) - (ACC[218] / sPAR[85])));
    ACC[234]=(ACC[274] - ACC[258]);
    ACC[282]=(ACC[274] + (sPAR[13] * (ACC[226] + (X[33] / sPAR[61]))));
    ACC[298]=(ACC[274] + (sPAR[21] * (ACC[234] + (X[41] / sPAR[69]))));
    ACC[242]=ACC[145];
    ACC[227]=(1.0 - X[58]);
    ACC[291]=(X[90] * X[58]);
    ACC[259]=((sPAR[78] * ACC[291]) + X[66]);
    ACC[163]=(500000000.0 * ACC[259]);
    ACC[243]=(0.1591549430918953 * X[50]);
    ACC[219]=(-1.0 + (0.02 * ACC[243]));
    ACC[275]=(1.0 + ((2e-09 * ACC[161]) - (ACC[219] / sPAR[86])));
    ACC[235]=(ACC[275] - ACC[259]);
    ACC[283]=(ACC[275] + (sPAR[14] * (ACC[227] + (X[34] / sPAR[62]))));
    ACC[299]=(ACC[275] + (sPAR[22] * (ACC[235] + (X[42] / sPAR[70]))));
    ACC[228]=(1.0 - X[59]);
    ACC[292]=(X[91] * X[59]);
    ACC[260]=((sPAR[79] * ACC[292]) + X[67]);
    ACC[164]=(500000000.0 * ACC[260]);
    ACC[244]=(0.1591549430918953 * X[51]);
    ACC[220]=(-1.0 + (0.02 * ACC[244]));
    ACC[276]=(1.0 + ((2e-09 * ACC[161]) - (ACC[220] / sPAR[87])));
    ACC[236]=(ACC[276] - ACC[260]);
    ACC[284]=(ACC[276] + (sPAR[15] * (ACC[228] + (X[35] / sPAR[63]))));
    ACC[300]=(ACC[276] + (sPAR[23] * (ACC[236] + (X[43] / sPAR[71]))));
    ACC[229]=(1.0 - X[60]);
    ACC[293]=(X[92] * X[60]);
    ACC[261]=((sPAR[80] * ACC[293]) + X[68]);
    ACC[165]=(500000000.0 * ACC[261]);
    ACC[245]=(0.1591549430918953 * X[52]);
    ACC[221]=(-1.0 + (0.02 * ACC[245]));
    ACC[277]=(1.0 + ((2e-09 * ACC[161]) - (ACC[221] / sPAR[88])));
    ACC[237]=(ACC[277] - ACC[261]);
    ACC[285]=(ACC[277] + (sPAR[16] * (ACC[229] + (X[36] / sPAR[64]))));
    ACC[301]=(ACC[277] + (sPAR[24] * (ACC[237] + (X[44] / sPAR[72]))));
    ACC[230]=(1.0 - X[61]);
    ACC[294]=(X[93] * X[61]);
    ACC[262]=((sPAR[81] * ACC[294]) + X[69]);
    ACC[166]=(500000000.0 * ACC[262]);
    ACC[246]=(0.1591549430918953 * X[53]);
    ACC[222]=(-1.0 + (0.02 * ACC[246]));
    ACC[278]=(1.0 + ((2e-09 * ACC[161]) - (ACC[222] / sPAR[89])));
    ACC[238]=(ACC[278] - ACC[262]);
    ACC[286]=(ACC[278] + (sPAR[17] * (ACC[230] + (X[37] / sPAR[65]))));
    ACC[302]=(ACC[278] + (sPAR[25] * (ACC[238] + (X[45] / sPAR[73]))));
    ACC[231]=(1.0 - X[62]);
    ACC[295]=(X[94] * X[62]);
    ACC[263]=((sPAR[82] * ACC[295]) + X[70]);
    ACC[167]=(500000000.0 * ACC[263]);
    ACC[247]=(0.1591549430918953 * X[54]);
    ACC[223]=(-1.0 + (0.02 * ACC[247]));
    ACC[279]=(1.0 + ((2e-09 * ACC[161]) - (ACC[223] / sPAR[90])));
    ACC[239]=(ACC[279] - ACC[263]);
    ACC[287]=(ACC[279] + (sPAR[18] * (ACC[231] + (X[38] / sPAR[66]))));
    ACC[303]=(ACC[279] + (sPAR[26] * (ACC[239] + (X[46] / sPAR[74]))));
    ACC[232]=(1.0 - X[63]);
    ACC[296]=(X[95] * X[63]);
    ACC[264]=((sPAR[83] * ACC[296]) + X[71]);
    ACC[168]=(500000000.0 * ACC[264]);
    ACC[248]=(0.1591549430918953 * X[55]);
    ACC[224]=(-1.0 + (0.02 * ACC[248]));
    ACC[280]=(1.0 + ((2e-09 * ACC[161]) - (ACC[224] / sPAR[91])));
    ACC[240]=(ACC[280] - ACC[264]);
    ACC[288]=(ACC[280] + (sPAR[19] * (ACC[232] + (X[39] / sPAR[67]))));
    ACC[304]=(ACC[280] + (sPAR[27] * (ACC[240] + (X[47] / sPAR[75]))));
    ACC[233]=(1.0 - X[64]);
    ACC[297]=(X[96] * X[64]);
    ACC[265]=((sPAR[84] * ACC[297]) + X[72]);
    ACC[169]=(500000000.0 * ACC[265]);
    ACC[249]=(0.1591549430918953 * X[56]);
    ACC[225]=(-1.0 + (0.02 * ACC[249]));
    ACC[281]=(1.0 + ((2e-09 * ACC[161]) - (ACC[225] / sPAR[92])));
    ACC[241]=(ACC[281] - ACC[265]);
    ACC[289]=(ACC[281] + (sPAR[20] * (ACC[233] + (X[40] / sPAR[68]))));
    ACC[305]=(ACC[281] + (sPAR[28] * (ACC[241] + (X[48] / sPAR[76]))));
    ACC[9]=(sPAR[0] * (X[49] - X[50]));
    ACC[10]=(sPAR[0] * (X[49] - X[51]));
    ACC[11]=(sPAR[0] * (X[49] - X[52]));
    ACC[12]=(sPAR[0] * (X[49] - X[53]));
    ACC[13]=(sPAR[0] * (X[49] - X[54]));
    ACC[14]=(sPAR[0] * (X[49] - X[55]));
    ACC[15]=(sPAR[0] * (X[49] - X[56]));
    ACC[0]=(ACC[73] + (ACC[74] + (ACC[75] + (ACC[76] + (ACC[77] + (ACC[78] + (ACC[79] + (ACC[9] + (ACC[10] + (ACC[11] + (ACC[12] + (ACC[13] + (ACC[14] + ACC[15])))))))))))));
    ACC[146]=ACC[0];
    ACC[16]=(sPAR[0] * (X[50] - X[49]));
    ACC[18]=(sPAR[0] * (X[50] - X[51]));
    ACC[19]=(sPAR[0] * (X[50] - X[52]));
    ACC[20]=(sPAR[0] * (X[50] - X[53]));
    ACC[21]=(sPAR[0] * (X[50] - X[54]));
    ACC[22]=(sPAR[0] * (X[50] - X[55]));
    ACC[23]=(sPAR[0] * (X[50] - X[56]));
    ACC[1]=(500000000.0 + (ACC[80] + (ACC[82] + (ACC[83] + (ACC[84] + (ACC[85] + (ACC[86] + (ACC[87] + (ACC[16] + (ACC[18] + (ACC[19] + (ACC[20] + (ACC[21] + (ACC[22] + ACC[23]))))))))))))));
    ACC[147]=ACC[1];
    ACC[24]=(sPAR[0] * (X[51] - X[49]));
    ACC[25]=(sPAR[0] * (X[51] - X[50]));
    ACC[27]=(sPAR[0] * (X[51] - X[52]));
    ACC[28]=(sPAR[0] * (X[51] - X[53]));
    ACC[29]=(sPAR[0] * (X[51] - X[54]));
    ACC[30]=(sPAR[0] * (X[51] - X[55]));
    ACC[31]=(sPAR[0] * (X[51] - X[56]));
    ACC[2]=(500000000.0 + (ACC[88] + (ACC[89] + (ACC[91] + (ACC[92] + (ACC[93] + (ACC[94] + (ACC[95] + (ACC[24] + (ACC[25] + (ACC[27] + (ACC[28] + (ACC[29] + (ACC[30] + ACC[31]))))))))))))));
    ACC[148]=ACC[2];
    ACC[32]=(sPAR[0] * (X[52] - X[49]));
    ACC[33]=(sPAR[0] * (X[52] - X[50]));
    ACC[34]=(sPAR[0] * (X[52] - X[51]));
    ACC[36]=(sPAR[0] * (X[52] - X[53]));
    ACC[37]=(sPAR[0] * (X[52] - X[54]));
    ACC[38]=(sPAR[0] * (X[52] - X[55]));
    ACC[39]=(sPAR[0] * (X[52] - X[56]));
    ACC[3]=(500000000.0 + (ACC[96] + (ACC[97] + (ACC[98] + (ACC[100] + (ACC[101] + (ACC[102] + (ACC[103] + (ACC[32] + (ACC[33] + (ACC[34] + (ACC[36] + (ACC[37] + (ACC[38] + ACC[39]))))))))))))));
    ACC[149]=ACC[3];
    ACC[40]=(sPAR[0] * (X[53] - X[49]));
    ACC[41]=(sPAR[0] * (X[53] - X[50]));
    ACC[42]=(sPAR[0] * (X[53] - X[51]));
    ACC[43]=(sPAR[0] * (X[53] - X[52]));
    ACC[45]=(sPAR[0] * (X[53] - X[54]));
    ACC[46]=(sPAR[0] * (X[53] - X[55]));
    ACC[47]=(sPAR[0] * (X[53] - X[56]));
    ACC[4]=(500000000.0 + (ACC[104] + (ACC[105] + (ACC[106] + (ACC[107] + (ACC[109] + (ACC[110] + (ACC[111] + (ACC[40] + (ACC[41] + (ACC[42] + (ACC[43] + (ACC[45] + (ACC[46] + ACC[47]))))))))))))));
    ACC[150]=ACC[4];
    ACC[48]=(sPAR[0] * (X[54] - X[49]));
    ACC[49]=(sPAR[0] * (X[54] - X[50]));
    ACC[50]=(sPAR[0] * (X[54] - X[51]));
    ACC[51]=(sPAR[0] * (X[54] - X[52]));
    ACC[52]=(sPAR[0] * (X[54] - X[53]));
    ACC[54]=(sPAR[0] * (X[54] - X[55]));
    ACC[55]=(sPAR[0] * (X[54] - X[56]));
    ACC[5]=(500000000.0 + (ACC[112] + (ACC[113] + (ACC[114] + (ACC[115] + (ACC[116] + (ACC[118] + (ACC[119] + (ACC[48] + (ACC[49] + (ACC[50] + (ACC[51] + (ACC[52] + (ACC[54] + ACC[55]))))))))))))));
    ACC[151]=ACC[5];
    ACC[56]=(sPAR[0] * (X[55] - X[49]));
    ACC[57]=(sPAR[0] * (X[55] - X[50]));
    ACC[58]=(sPAR[0] * (X[55] - X[51]));
    ACC[59]=(sPAR[0] * (X[55] - X[52]));
    ACC[60]=(sPAR[0] * (X[55] - X[53]));
    ACC[61]=(sPAR[0] * (X[55] - X[54]));
    ACC[63]=(sPAR[0] * (X[55] - X[56]));
    ACC[6]=(500000000.0 + (ACC[120] + (ACC[121] + (ACC[122] + (ACC[123] + (ACC[124] + (ACC[125] + (ACC[127] + (ACC[56] + (ACC[57] + (ACC[58] + (ACC[59] + (ACC[60] + (ACC[61] + ACC[63]))))))))))))));
    ACC[152]=ACC[6];
    ACC[64]=(sPAR[0] * (X[56] - X[49]));
    ACC[65]=(sPAR[0] * (X[56] - X[50]));
    ACC[66]=(sPAR[0] * (X[56] - X[51]));
    ACC[67]=(sPAR[0] * (X[56] - X[52]));
    ACC[68]=(sPAR[0] * (X[56] - X[53]));
    ACC[69]=(sPAR[0] * (X[56] - X[54]));
    ACC[70]=(sPAR[0] * (X[56] - X[55]));
    ACC[7]=(500000000.0 + (ACC[128] + (ACC[129] + (ACC[130] + (ACC[131] + (ACC[132] + (ACC[133] + (ACC[134] + (ACC[64] + (ACC[65] + (ACC[66] + (ACC[67] + (ACC[68] + (ACC[69] + ACC[70]))))))))))))));
    ACC[153]=ACC[7];
    F[33]=ACC[226];
    F[81]=(-314.1592653589793 + X[49]);
    F[65]=((((1.0 - sPAR[77]) * ACC[290]) - X[65]) / sPAR[133]);
    F[1]=((4.0 * ((ACC[290] * (X[57] - X[1])) + (0.25 * (sPAR[29] * (sPAR[53] - X[1]))))) / sPAR[125]);
    F[2]=((4.0 * ((ACC[290] * (X[1] - X[2])) + (0.25 * (sPAR[29] * (sPAR[53] - X[2]))))) / sPAR[125]);
    F[3]=((4.0 * ((ACC[290] * (X[2] - X[3])) + (0.25 * (sPAR[29] * (sPAR[53] - X[3]))))) / sPAR[125]);
    F[4]=((4.0 * ((ACC[290] * (X[3] - X[4])) + (0.25 * (sPAR[29] * (sPAR[53] - X[4]))))) / sPAR[125]);
    F[57]=((X[73] - ACC[290]) / sPAR[109]);
    F[41]=ACC[234];
    F[73]=((ACC[282] - X[73]) / sPAR[117]);
    F[89]=((ACC[298] - X[89]) / sPAR[141]);
    F[0]=((4000000000.0 * ((sPAR[4] - ACC[145]) / (sPAR[4] * sPAR[3]))) / sPAR[2]);
    F[34]=ACC[227];
    F[82]=(-314.1592653589793 + X[50]);
    F[66]=((((1.0 - sPAR[78]) * ACC[291]) - X[66]) / sPAR[134]);
    F[5]=((4.0 * ((ACC[291] * (X[58] - X[5])) + (0.25 * (sPAR[30] * (sPAR[54] - X[5]))))) / sPAR[126]);
    F[6]=((4.0 * ((ACC[291] * (X[5] - X[6])) + (0.25 * (sPAR[30] * (sPAR[54] - X[6]))))) / sPAR[126]);
    F[7]=((4.0 * ((ACC[291] * (X[6] - X[7])) + (0.25 * (sPAR[30] * (sPAR[54] - X[7]))))) / sPAR[126]);
    F[8]=((4.0 * ((ACC[291] * (X[7] - X[8])) + (0.25 * (sPAR[30] * (sPAR[54] - X[8]))))) / sPAR[126]);
    F[58]=((X[74] - ACC[291]) / sPAR[110]);
    F[42]=ACC[235];
    F[74]=((ACC[283] - X[74]) / sPAR[118]);
    F[90]=((ACC[299] - X[90]) / sPAR[142]);
    F[35]=ACC[228];
    F[83]=(-314.1592653589793 + X[51]);
    F[67]=((((1.0 - sPAR[79]) * ACC[292]) - X[67]) / sPAR[135]);
    F[9]=((4.0 * ((ACC[292] * (X[59] - X[9])) + (0.25 * (sPAR[31] * (sPAR[55] - X[9]))))) / sPAR[127]);
    F[10]=((4.0 * ((ACC[292] * (X[9] - X[10])) + (0.25 * (sPAR[31] * (sPAR[55] - X[10]))))) / sPAR[127]);
    F[11]=((4.0 * ((ACC[292] * (X[10] - X[11])) + (0.25 * (sPAR[31] * (sPAR[55] - X[11]))))) / sPAR[127]);
    F[12]=((4.0 * ((ACC[292] * (X[11] - X[12])) + (0.25 * (sPAR[31] * (sPAR[55] - X[12]))))) / sPAR[127]);
    F[59]=((X[75] - ACC[292]) / sPAR[111]);
    F[43]=ACC[236];
    F[75]=((ACC[284] - X[75]) / sPAR[119]);
    F[91]=((ACC[300] - X[91]) / sPAR[143]);
    F[36]=ACC[229];
    F[84]=(-314.1592653589793 + X[52]);
    F[68]=((((1.0 - sPAR[80]) * ACC[293]) - X[68]) / sPAR[136]);
    F[13]=((4.0 * ((ACC[293] * (X[60] - X[13])) + (0.25 * (sPAR[32] * (sPAR[56] - X[13]))))) / sPAR[128]);
    F[14]=((4.0 * ((ACC[293] * (X[13] - X[14])) + (0.25 * (sPAR[32] * (sPAR[56] - X[14]))))) / sPAR[128]);
    F[15]=((4.0 * ((ACC[293] * (X[14] - X[15])) + (0.25 * (sPAR[32] * (sPAR[56] - X[15]))))) / sPAR[128]);
    F[16]=((4.0 * ((ACC[293] * (X[15] - X[16])) + (0.25 * (sPAR[32] * (sPAR[56] - X[16]))))) / sPAR[128]);
    F[60]=((X[76] - ACC[293]) / sPAR[112]);
    F[44]=ACC[237];
    F[76]=((ACC[285] - X[76]) / sPAR[120]);
    F[92]=((ACC[301] - X[92]) / sPAR[144]);
    F[37]=ACC[230];
    F[85]=(-314.1592653589793 + X[53]);
    F[69]=((((1.0 - sPAR[81]) * ACC[294]) - X[69]) / sPAR[137]);
    F[17]=((4.0 * ((ACC[294] * (X[61] - X[17])) + (0.25 * (sPAR[33] * (sPAR[57] - X[17]))))) / sPAR[129]);
    F[18]=((4.0 * ((ACC[294] * (X[17] - X[18])) + (0.25 * (sPAR[33] * (sPAR[57] - X[18]))))) / sPAR[129]);
    F[19]=((4.0 * ((ACC[294] * (X[18] - X[19])) + (0.25 * (sPAR[33] * (sPAR[57] - X[19]))))) / sPAR[129]);
    F[20]=((4.0 * ((ACC[294] * (X[19] - X[20])) + (0.25 * (sPAR[33] * (sPAR[57] - X[20]))))) / sPAR[129]);
    F[61]=((X[77] - ACC[294]) / sPAR[113]);
    F[45]=ACC[238];
    F[77]=((ACC[286] - X[77]) / sPAR[121]);
    F[93]=((ACC[302] - X[93]) / sPAR[145]);
    F[38]=ACC[231];
    F[86]=(-314.1592653589793 + X[54]);
    F[70]=((((1.0 - sPAR[82]) * ACC[295]) - X[70]) / sPAR[138]);
    F[21]=((4.0 * ((ACC[295] * (X[62] - X[21])) + (0.25 * (sPAR[34] * (sPAR[58] - X[21]))))) / sPAR[130]);
    F[22]=((4.0 * ((ACC[295] * (X[21] - X[22])) + (0.25 * (sPAR[34] * (sPAR[58] - X[22]))))) / sPAR[130]);
    F[23]=((4.0 * ((ACC[295] * (X[22] - X[23])) + (0.25 * (sPAR[34] * (sPAR[58] - X[23]))))) / sPAR[130]);
    F[24]=((4.0 * ((ACC[295] * (X[23] - X[24])) + (0.25 * (sPAR[34] * (sPAR[58] - X[24]))))) / sPAR[130]);
    F[62]=((X[78] - ACC[295]) / sPAR[114]);
    F[46]=ACC[239];
    F[78]=((ACC[287] - X[78]) / sPAR[122]);
    F[94]=((ACC[303] - X[94]) / sPAR[146]);
    F[39]=ACC[232];
    F[87]=(-314.1592653589793 + X[55]);
    F[71]=((((1.0 - sPAR[83]) * ACC[296]) - X[71]) / sPAR[139]);
    F[25]=((4.0 * ((ACC[296] * (X[63] - X[25])) + (0.25 * (sPAR[35] * (sPAR[59] - X[25]))))) / sPAR[131]);
    F[26]=((4.0 * ((ACC[296] * (X[25] - X[26])) + (0.25 * (sPAR[35] * (sPAR[59] - X[26]))))) / sPAR[131]);
    F[27]=((4.0 * ((ACC[296] * (X[26] - X[27])) + (0.25 * (sPAR[35] * (sPAR[59] - X[27]))))) / sPAR[131]);
    F[28]=((4.0 * ((ACC[296] * (X[27] - X[28])) + (0.25 * (sPAR[35] * (sPAR[59] - X[28]))))) / sPAR[131]);
    F[63]=((X[79] - ACC[296]) / sPAR[115]);
    F[47]=ACC[240];
    F[79]=((ACC[288] - X[79]) / sPAR[123]);
    F[95]=((ACC[304] - X[95]) / sPAR[147]);
    F[40]=ACC[233];
    F[88]=(-314.1592653589793 + X[56]);
    F[72]=((((1.0 - sPAR[84]) * ACC[297]) - X[72]) / sPAR[140]);
    F[29]=((4.0 * ((ACC[297] * (X[64] - X[29])) + (0.25 * (sPAR[36] * (sPAR[60] - X[29]))))) / sPAR[132]);
    F[30]=((4.0 * ((ACC[297] * (X[29] - X[30])) + (0.25 * (sPAR[36] * (sPAR[60] - X[30]))))) / sPAR[132]);
    F[31]=((4.0 * ((ACC[297] * (X[30] - X[31])) + (0.25 * (sPAR[36] * (sPAR[60] - X[31]))))) / sPAR[132]);
    F[32]=((4.0 * ((ACC[297] * (X[31] - X[32])) + (0.25 * (sPAR[36] * (sPAR[60] - X[32]))))) / sPAR[132]);
    F[64]=((X[80] - ACC[297]) / sPAR[116]);
    F[48]=ACC[241];
    F[80]=((ACC[289] - X[80]) / sPAR[124]);
    F[96]=((ACC[305] - X[96]) / sPAR[148]);
    F[49]=((ACC[162] - ACC[0]) / (25330.29591058444 * X[49]));
    F[50]=((ACC[163] - ACC[1]) / (25330.29591058444 * X[50]));
    F[51]=((ACC[164] - ACC[2]) / (25330.29591058444 * X[51]));
    F[52]=((ACC[165] - ACC[3]) / (25330.29591058444 * X[52]));
    F[53]=((ACC[166] - ACC[4]) / (25330.29591058444 * X[53]));
    F[54]=((ACC[167] - ACC[5]) / (25330.29591058444 * X[54]));
    F[55]=((ACC[168] - ACC[6]) / (25330.29591058444 * X[55]));
    F[56]=((ACC[169] - ACC[7]) / (25330.29591058444 * X[56]));

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[72]=0.0; //P_ex[1,1]
    ACC[136]=500000000.0; //P_f
    X[81]=0.0; //generator[1].theta
    X[82]=0.0; //generator[2].theta
    ACC[73]=(ACC[136] * sin((X[81] - X[82]))); //P_ex[1,2]
    X[83]=0.0; //generator[3].theta
    ACC[74]=(0.5 * (ACC[136] * sin((X[81] - X[83])))); //P_ex[1,3]
    X[84]=0.0; //generator[4].theta
    ACC[75]=(0.3333333333333333 * (ACC[136] * sin((X[81] - X[84])))); //P_ex[1,4]
    X[85]=0.0; //generator[5].theta
    ACC[76]=(0.25 * (ACC[136] * sin((X[81] - X[85])))); //P_ex[1,5]
    X[86]=0.0; //generator[6].theta
    ACC[77]=(0.2 * (ACC[136] * sin((X[81] - X[86])))); //P_ex[1,6]
    X[87]=0.0; //generator[7].theta
    ACC[78]=(0.1666666666666667 * (ACC[136] * sin((X[81] - X[87])))); //P_ex[1,7]
    X[88]=0.0; //generator[8].theta
    ACC[79]=(0.1428571428571428 * (ACC[136] * sin((X[81] - X[88])))); //P_ex[1,8]
    ACC[8]=0.0; //P_diss[1,1]
    ACC[9]=0.0; //P_diss[1,2]
    ACC[10]=0.0; //P_diss[1,3]
    ACC[11]=0.0; //P_diss[1,4]
    ACC[12]=0.0; //P_diss[1,5]
    ACC[13]=0.0; //P_diss[1,6]
    ACC[14]=0.0; //P_diss[1,7]
    ACC[15]=0.0; //P_diss[1,8]
    ACC[137]=0.0; //P_load[1]
    ACC[0]=(ACC[72] + (ACC[73] + (ACC[74] + (ACC[75] + (ACC[76] + (ACC[77] + (ACC[78] + (ACC[79] + (ACC[8] + (ACC[9] + (ACC[10] + (ACC[11] + (ACC[12] + (ACC[13] + (ACC[14] + (ACC[15] + ACC[137])))))))))))))))); //P_a[1]
    ACC[80]=(ACC[136] * sin((X[82] - X[81]))); //P_ex[2,1]
    ACC[81]=0.0; //P_ex[2,2]
    ACC[82]=(ACC[136] * sin((X[82] - X[83]))); //P_ex[2,3]
    ACC[83]=(0.5 * (ACC[136] * sin((X[82] - X[84])))); //P_ex[2,4]
    ACC[84]=(0.3333333333333333 * (ACC[136] * sin((X[82] - X[85])))); //P_ex[2,5]
    ACC[85]=(0.25 * (ACC[136] * sin((X[82] - X[86])))); //P_ex[2,6]
    ACC[86]=(0.2 * (ACC[136] * sin((X[82] - X[87])))); //P_ex[2,7]
    ACC[87]=(0.1666666666666667 * (ACC[136] * sin((X[82] - X[88])))); //P_ex[2,8]
    ACC[16]=0.0; //P_diss[2,1]
    ACC[17]=0.0; //P_diss[2,2]
    ACC[18]=0.0; //P_diss[2,3]
    ACC[19]=0.0; //P_diss[2,4]
    ACC[20]=0.0; //P_diss[2,5]
    ACC[21]=0.0; //P_diss[2,6]
    ACC[22]=0.0; //P_diss[2,7]
    ACC[23]=0.0; //P_diss[2,8]
    ACC[138]=500000000.0; //P_load[2]
    ACC[1]=(ACC[80] + (ACC[81] + (ACC[82] + (ACC[83] + (ACC[84] + (ACC[85] + (ACC[86] + (ACC[87] + (ACC[16] + (ACC[17] + (ACC[18] + (ACC[19] + (ACC[20] + (ACC[21] + (ACC[22] + (ACC[23] + ACC[138])))))))))))))))); //P_a[2]
    ACC[88]=(0.5 * (ACC[136] * sin((X[83] - X[81])))); //P_ex[3,1]
    ACC[89]=(ACC[136] * sin((X[83] - X[82]))); //P_ex[3,2]
    ACC[90]=0.0; //P_ex[3,3]
    ACC[91]=(ACC[136] * sin((X[83] - X[84]))); //P_ex[3,4]
    ACC[92]=(0.5 * (ACC[136] * sin((X[83] - X[85])))); //P_ex[3,5]
    ACC[93]=(0.3333333333333333 * (ACC[136] * sin((X[83] - X[86])))); //P_ex[3,6]
    ACC[94]=(0.25 * (ACC[136] * sin((X[83] - X[87])))); //P_ex[3,7]
    ACC[95]=(0.2 * (ACC[136] * sin((X[83] - X[88])))); //P_ex[3,8]
    ACC[24]=0.0; //P_diss[3,1]
    ACC[25]=0.0; //P_diss[3,2]
    ACC[26]=0.0; //P_diss[3,3]
    ACC[27]=0.0; //P_diss[3,4]
    ACC[28]=0.0; //P_diss[3,5]
    ACC[29]=0.0; //P_diss[3,6]
    ACC[30]=0.0; //P_diss[3,7]
    ACC[31]=0.0; //P_diss[3,8]
    ACC[139]=500000000.0; //P_load[3]
    ACC[2]=(ACC[88] + (ACC[89] + (ACC[90] + (ACC[91] + (ACC[92] + (ACC[93] + (ACC[94] + (ACC[95] + (ACC[24] + (ACC[25] + (ACC[26] + (ACC[27] + (ACC[28] + (ACC[29] + (ACC[30] + (ACC[31] + ACC[139])))))))))))))))); //P_a[3]
    ACC[96]=(0.3333333333333333 * (ACC[136] * sin((X[84] - X[81])))); //P_ex[4,1]
    ACC[97]=(0.5 * (ACC[136] * sin((X[84] - X[82])))); //P_ex[4,2]
    ACC[98]=(ACC[136] * sin((X[84] - X[83]))); //P_ex[4,3]
    ACC[99]=0.0; //P_ex[4,4]
    ACC[100]=(ACC[136] * sin((X[84] - X[85]))); //P_ex[4,5]
    ACC[101]=(0.5 * (ACC[136] * sin((X[84] - X[86])))); //P_ex[4,6]
    ACC[102]=(0.3333333333333333 * (ACC[136] * sin((X[84] - X[87])))); //P_ex[4,7]
    ACC[103]=(0.25 * (ACC[136] * sin((X[84] - X[88])))); //P_ex[4,8]
    ACC[32]=0.0; //P_diss[4,1]
    ACC[33]=0.0; //P_diss[4,2]
    ACC[34]=0.0; //P_diss[4,3]
    ACC[35]=0.0; //P_diss[4,4]
    ACC[36]=0.0; //P_diss[4,5]
    ACC[37]=0.0; //P_diss[4,6]
    ACC[38]=0.0; //P_diss[4,7]
    ACC[39]=0.0; //P_diss[4,8]
    ACC[140]=500000000.0; //P_load[4]
    ACC[3]=(ACC[96] + (ACC[97] + (ACC[98] + (ACC[99] + (ACC[100] + (ACC[101] + (ACC[102] + (ACC[103] + (ACC[32] + (ACC[33] + (ACC[34] + (ACC[35] + (ACC[36] + (ACC[37] + (ACC[38] + (ACC[39] + ACC[140])))))))))))))))); //P_a[4]
    ACC[104]=(0.25 * (ACC[136] * sin((X[85] - X[81])))); //P_ex[5,1]
    ACC[105]=(0.3333333333333333 * (ACC[136] * sin((X[85] - X[82])))); //P_ex[5,2]
    ACC[106]=(0.5 * (ACC[136] * sin((X[85] - X[83])))); //P_ex[5,3]
    ACC[107]=(ACC[136] * sin((X[85] - X[84]))); //P_ex[5,4]
    ACC[108]=0.0; //P_ex[5,5]
    ACC[109]=(ACC[136] * sin((X[85] - X[86]))); //P_ex[5,6]
    ACC[110]=(0.5 * (ACC[136] * sin((X[85] - X[87])))); //P_ex[5,7]
    ACC[111]=(0.3333333333333333 * (ACC[136] * sin((X[85] - X[88])))); //P_ex[5,8]
    ACC[40]=0.0; //P_diss[5,1]
    ACC[41]=0.0; //P_diss[5,2]
    ACC[42]=0.0; //P_diss[5,3]
    ACC[43]=0.0; //P_diss[5,4]
    ACC[44]=0.0; //P_diss[5,5]
    ACC[45]=0.0; //P_diss[5,6]
    ACC[46]=0.0; //P_diss[5,7]
    ACC[47]=0.0; //P_diss[5,8]
    ACC[141]=500000000.0; //P_load[5]
    ACC[4]=(ACC[104] + (ACC[105] + (ACC[106] + (ACC[107] + (ACC[108] + (ACC[109] + (ACC[110] + (ACC[111] + (ACC[40] + (ACC[41] + (ACC[42] + (ACC[43] + (ACC[44] + (ACC[45] + (ACC[46] + (ACC[47] + ACC[141])))))))))))))))); //P_a[5]
    ACC[112]=(0.2 * (ACC[136] * sin((X[86] - X[81])))); //P_ex[6,1]
    ACC[113]=(0.25 * (ACC[136] * sin((X[86] - X[82])))); //P_ex[6,2]
    ACC[114]=(0.3333333333333333 * (ACC[136] * sin((X[86] - X[83])))); //P_ex[6,3]
    ACC[115]=(0.5 * (ACC[136] * sin((X[86] - X[84])))); //P_ex[6,4]
    ACC[116]=(ACC[136] * sin((X[86] - X[85]))); //P_ex[6,5]
    ACC[117]=0.0; //P_ex[6,6]
    ACC[118]=(ACC[136] * sin((X[86] - X[87]))); //P_ex[6,7]
    ACC[119]=(0.5 * (ACC[136] * sin((X[86] - X[88])))); //P_ex[6,8]
    ACC[48]=0.0; //P_diss[6,1]
    ACC[49]=0.0; //P_diss[6,2]
    ACC[50]=0.0; //P_diss[6,3]
    ACC[51]=0.0; //P_diss[6,4]
    ACC[52]=0.0; //P_diss[6,5]
    ACC[53]=0.0; //P_diss[6,6]
    ACC[54]=0.0; //P_diss[6,7]
    ACC[55]=0.0; //P_diss[6,8]
    ACC[142]=500000000.0; //P_load[6]
    ACC[5]=(ACC[112] + (ACC[113] + (ACC[114] + (ACC[115] + (ACC[116] + (ACC[117] + (ACC[118] + (ACC[119] + (ACC[48] + (ACC[49] + (ACC[50] + (ACC[51] + (ACC[52] + (ACC[53] + (ACC[54] + (ACC[55] + ACC[142])))))))))))))))); //P_a[6]
    ACC[120]=(0.1666666666666667 * (ACC[136] * sin((X[87] - X[81])))); //P_ex[7,1]
    ACC[121]=(0.2 * (ACC[136] * sin((X[87] - X[82])))); //P_ex[7,2]
    ACC[122]=(0.25 * (ACC[136] * sin((X[87] - X[83])))); //P_ex[7,3]
    ACC[123]=(0.3333333333333333 * (ACC[136] * sin((X[87] - X[84])))); //P_ex[7,4]
    ACC[124]=(0.5 * (ACC[136] * sin((X[87] - X[85])))); //P_ex[7,5]
    ACC[125]=(ACC[136] * sin((X[87] - X[86]))); //P_ex[7,6]
    ACC[126]=0.0; //P_ex[7,7]
    ACC[127]=(ACC[136] * sin((X[87] - X[88]))); //P_ex[7,8]
    ACC[56]=0.0; //P_diss[7,1]
    ACC[57]=0.0; //P_diss[7,2]
    ACC[58]=0.0; //P_diss[7,3]
    ACC[59]=0.0; //P_diss[7,4]
    ACC[60]=0.0; //P_diss[7,5]
    ACC[61]=0.0; //P_diss[7,6]
    ACC[62]=0.0; //P_diss[7,7]
    ACC[63]=0.0; //P_diss[7,8]
    ACC[143]=500000000.0; //P_load[7]
    ACC[6]=(ACC[120] + (ACC[121] + (ACC[122] + (ACC[123] + (ACC[124] + (ACC[125] + (ACC[126] + (ACC[127] + (ACC[56] + (ACC[57] + (ACC[58] + (ACC[59] + (ACC[60] + (ACC[61] + (ACC[62] + (ACC[63] + ACC[143])))))))))))))))); //P_a[7]
    ACC[128]=(0.1428571428571428 * (ACC[136] * sin((X[88] - X[81])))); //P_ex[8,1]
    ACC[129]=(0.1666666666666667 * (ACC[136] * sin((X[88] - X[82])))); //P_ex[8,2]
    ACC[130]=(0.2 * (ACC[136] * sin((X[88] - X[83])))); //P_ex[8,3]
    ACC[131]=(0.25 * (ACC[136] * sin((X[88] - X[84])))); //P_ex[8,4]
    ACC[132]=(0.3333333333333333 * (ACC[136] * sin((X[88] - X[85])))); //P_ex[8,5]
    ACC[133]=(0.5 * (ACC[136] * sin((X[88] - X[86])))); //P_ex[8,6]
    ACC[134]=(ACC[136] * sin((X[88] - X[87]))); //P_ex[8,7]
    ACC[135]=0.0; //P_ex[8,8]
    ACC[64]=0.0; //P_diss[8,1]
    ACC[65]=0.0; //P_diss[8,2]
    ACC[66]=0.0; //P_diss[8,3]
    ACC[67]=0.0; //P_diss[8,4]
    ACC[68]=0.0; //P_diss[8,5]
    ACC[69]=0.0; //P_diss[8,6]
    ACC[70]=0.0; //P_diss[8,7]
    ACC[71]=0.0; //P_diss[8,8]
    ACC[144]=500000000.0; //P_load[8]
    ACC[7]=(ACC[128] + (ACC[129] + (ACC[130] + (ACC[131] + (ACC[132] + (ACC[133] + (ACC[134] + (ACC[135] + (ACC[64] + (ACC[65] + (ACC[66] + (ACC[67] + (ACC[68] + (ACC[69] + (ACC[70] + (ACC[71] + ACC[144])))))))))))))))); //P_a[8]
    X[49]=314.1592653589793; //generator[1].omega
    ACC[242]=(0.1591549430918953 * X[49]); //generator[1].f
    ACC[145]=ACC[242]; //f
    ACC[146]=0.0; //generator[1].P_a
    ACC[147]=0.0; //generator[2].P_a
    ACC[148]=0.0; //generator[3].P_a
    ACC[149]=0.0; //generator[4].P_a
    ACC[150]=0.0; //generator[5].P_a
    ACC[151]=0.0; //generator[6].P_a
    ACC[152]=0.0; //generator[7].P_a
    ACC[153]=0.0; //generator[8].P_a
    X[0]=0.0; //P_sfc
    ACC[154]=(0.125 * X[0]); //generator[1].P_sfc
    ACC[155]=ACC[154]; //generator[2].P_sfc
    ACC[156]=ACC[154]; //generator[3].P_sfc
    ACC[157]=ACC[154]; //generator[4].P_sfc
    ACC[158]=ACC[154]; //generator[5].P_sfc
    ACC[159]=ACC[154]; //generator[6].P_sfc
    ACC[160]=ACC[154]; //generator[7].P_sfc
    ACC[161]=ACC[154]; //generator[8].P_sfc
    ACC[162]=0.0; //generator[1].P_t
    ACC[163]=0.0; //generator[2].P_t
    ACC[164]=0.0; //generator[3].P_t
    ACC[165]=0.0; //generator[4].P_t
    ACC[166]=0.0; //generator[5].P_t
    ACC[167]=0.0; //generator[6].P_t
    ACC[168]=0.0; //generator[7].P_t
    ACC[169]=0.0; //generator[8].P_t
    ACC[170]=500000000.0; //generator[1].P_t_0
    ACC[171]=500000000.0; //generator[2].P_t_0
    ACC[172]=500000000.0; //generator[3].P_t_0
    ACC[173]=500000000.0; //generator[4].P_t_0
    ACC[174]=500000000.0; //generator[5].P_t_0
    ACC[175]=500000000.0; //generator[6].P_t_0
    ACC[176]=500000000.0; //generator[7].P_t_0
    ACC[177]=500000000.0; //generator[8].P_t_0
    ACC[178]=0.0; //generator[1].T_s_b[1]
    ACC[179]=0.0; //generator[1].T_s_b[2]
    ACC[180]=0.0; //generator[1].T_s_b[3]
    ACC[181]=0.0; //generator[1].T_s_b[4]
    ACC[182]=0.0; //generator[1].T_s_b[5]
    ACC[183]=0.0; //generator[2].T_s_b[1]
    ACC[184]=0.0; //generator[2].T_s_b[2]
    ACC[185]=0.0; //generator[2].T_s_b[3]
    ACC[186]=0.0; //generator[2].T_s_b[4]
    ACC[187]=0.0; //generator[2].T_s_b[5]
    ACC[188]=0.0; //generator[3].T_s_b[1]
    ACC[189]=0.0; //generator[3].T_s_b[2]
    ACC[190]=0.0; //generator[3].T_s_b[3]
    ACC[191]=0.0; //generator[3].T_s_b[4]
    ACC[192]=0.0; //generator[3].T_s_b[5]
    ACC[193]=0.0; //generator[4].T_s_b[1]
    ACC[194]=0.0; //generator[4].T_s_b[2]
    ACC[195]=0.0; //generator[4].T_s_b[3]
    ACC[196]=0.0; //generator[4].T_s_b[4]
    ACC[197]=0.0; //generator[4].T_s_b[5]
    ACC[198]=0.0; //generator[5].T_s_b[1]
    ACC[199]=0.0; //generator[5].T_s_b[2]
    ACC[200]=0.0; //generator[5].T_s_b[3]
    ACC[201]=0.0; //generator[5].T_s_b[4]
    ACC[202]=0.0; //generator[5].T_s_b[5]
    ACC[203]=0.0; //generator[6].T_s_b[1]
    ACC[204]=0.0; //generator[6].T_s_b[2]
    ACC[205]=0.0; //generator[6].T_s_b[3]
    ACC[206]=0.0; //generator[6].T_s_b[4]
    ACC[207]=0.0; //generator[6].T_s_b[5]
    ACC[208]=0.0; //generator[7].T_s_b[1]
    ACC[209]=0.0; //generator[7].T_s_b[2]
    ACC[210]=0.0; //generator[7].T_s_b[3]
    ACC[211]=0.0; //generator[7].T_s_b[4]
    ACC[212]=0.0; //generator[7].T_s_b[5]
    ACC[213]=0.0; //generator[8].T_s_b[1]
    ACC[214]=0.0; //generator[8].T_s_b[2]
    ACC[215]=0.0; //generator[8].T_s_b[3]
    ACC[216]=0.0; //generator[8].T_s_b[4]
    ACC[217]=0.0; //generator[8].T_s_b[5]
    ACC[218]=(-1.0 + (0.02 * ACC[242])); //generator[1].delta_f
    ACC[219]=0.0; //generator[2].delta_f
    ACC[220]=0.0; //generator[3].delta_f
    ACC[221]=0.0; //generator[4].delta_f
    ACC[222]=0.0; //generator[5].delta_f
    ACC[223]=0.0; //generator[6].delta_f
    ACC[224]=0.0; //generator[7].delta_f
    ACC[225]=0.0; //generator[8].delta_f
    ACC[250]=1.0; //generator[1].p_0
    X[57]=1.0; //generator[1].p
    ACC[226]=(ACC[250] - X[57]); //generator[1].err_p
    ACC[251]=1.0; //generator[2].p_0
    X[58]=1.0; //generator[2].p
    ACC[227]=(ACC[251] - X[58]); //generator[2].err_p
    ACC[252]=1.0; //generator[3].p_0
    X[59]=1.0; //generator[3].p
    ACC[228]=(ACC[252] - X[59]); //generator[3].err_p
    ACC[253]=1.0; //generator[4].p_0
    X[60]=1.0; //generator[4].p
    ACC[229]=(ACC[253] - X[60]); //generator[4].err_p
    ACC[254]=1.0; //generator[5].p_0
    X[61]=1.0; //generator[5].p
    ACC[230]=(ACC[254] - X[61]); //generator[5].err_p
    ACC[255]=1.0; //generator[6].p_0
    X[62]=1.0; //generator[6].p
    ACC[231]=(ACC[255] - X[62]); //generator[6].err_p
    ACC[256]=1.0; //generator[7].p_0
    X[63]=1.0; //generator[7].p
    ACC[232]=(ACC[256] - X[63]); //generator[7].err_p
    ACC[257]=1.0; //generator[8].p_0
    X[64]=1.0; //generator[8].p
    ACC[233]=(ACC[257] - X[64]); //generator[8].err_p
    ACC[234]=0.0; //generator[1].err_p_t
    ACC[235]=0.0; //generator[2].err_p_t
    ACC[236]=0.0; //generator[3].err_p_t
    ACC[237]=0.0; //generator[4].err_p_t
    ACC[238]=0.0; //generator[5].err_p_t
    ACC[239]=0.0; //generator[6].err_p_t
    ACC[240]=0.0; //generator[7].err_p_t
    ACC[241]=0.0; //generator[8].err_p_t
    ACC[243]=0.0; //generator[2].f
    ACC[244]=0.0; //generator[3].f
    ACC[245]=0.0; //generator[4].f
    ACC[246]=0.0; //generator[5].f
    ACC[247]=0.0; //generator[6].f
    ACC[248]=0.0; //generator[7].f
    ACC[249]=0.0; //generator[8].f
    ACC[258]=0.0; //generator[1].p_t
    ACC[259]=0.0; //generator[2].p_t
    ACC[260]=0.0; //generator[3].p_t
    ACC[261]=0.0; //generator[4].p_t
    ACC[262]=0.0; //generator[5].p_t
    ACC[263]=0.0; //generator[6].p_t
    ACC[264]=0.0; //generator[7].p_t
    ACC[265]=0.0; //generator[8].p_t
    ACC[266]=1.0; //generator[1].p_t_0
    ACC[267]=1.0; //generator[2].p_t_0
    ACC[268]=1.0; //generator[3].p_t_0
    ACC[269]=1.0; //generator[4].p_t_0
    ACC[270]=1.0; //generator[5].p_t_0
    ACC[271]=1.0; //generator[6].p_t_0
    ACC[272]=1.0; //generator[7].p_t_0
    ACC[273]=1.0; //generator[8].p_t_0
    sPAR[85]=0.1; //generator[1].droop
    ACC[274]=(ACC[266] + ((2e-09 * ACC[154]) - (ACC[218] / sPAR[85]))); //generator[1].p_t_0_fc
    sPAR[86]=0.1; //generator[2].droop
    ACC[275]=(ACC[267] + ((2e-09 * ACC[155]) - (ACC[219] / sPAR[86]))); //generator[2].p_t_0_fc
    sPAR[87]=0.1; //generator[3].droop
    ACC[276]=(ACC[268] + ((2e-09 * ACC[156]) - (ACC[220] / sPAR[87]))); //generator[3].p_t_0_fc
    sPAR[88]=0.1; //generator[4].droop
    ACC[277]=(ACC[269] + ((2e-09 * ACC[157]) - (ACC[221] / sPAR[88]))); //generator[4].p_t_0_fc
    sPAR[89]=0.1; //generator[5].droop
    ACC[278]=(ACC[270] + ((2e-09 * ACC[158]) - (ACC[222] / sPAR[89]))); //generator[5].p_t_0_fc
    sPAR[90]=0.1; //generator[6].droop
    ACC[279]=(ACC[271] + ((2e-09 * ACC[159]) - (ACC[223] / sPAR[90]))); //generator[6].p_t_0_fc
    sPAR[91]=0.1; //generator[7].droop
    ACC[280]=(ACC[272] + ((2e-09 * ACC[160]) - (ACC[224] / sPAR[91]))); //generator[7].p_t_0_fc
    sPAR[92]=0.1; //generator[8].droop
    ACC[281]=(ACC[273] + ((2e-09 * ACC[161]) - (ACC[225] / sPAR[92]))); //generator[8].p_t_0_fc
    ACC[282]=0.0; //generator[1].q_ev_0
    ACC[283]=0.0; //generator[2].q_ev_0
    ACC[284]=0.0; //generator[3].q_ev_0
    ACC[285]=0.0; //generator[4].q_ev_0
    ACC[286]=0.0; //generator[5].q_ev_0
    ACC[287]=0.0; //generator[6].q_ev_0
    ACC[288]=0.0; //generator[7].q_ev_0
    ACC[289]=0.0; //generator[8].q_ev_0
    ACC[290]=0.0; //generator[1].w_s
    ACC[291]=0.0; //generator[2].w_s
    ACC[292]=0.0; //generator[3].w_s
    ACC[293]=0.0; //generator[4].w_s
    ACC[294]=0.0; //generator[5].w_s
    ACC[295]=0.0; //generator[6].w_s
    ACC[296]=0.0; //generator[7].w_s
    ACC[297]=0.0; //generator[8].w_s
    ACC[298]=0.0; //generator[1].y_t_0
    ACC[299]=0.0; //generator[2].y_t_0
    ACC[300]=0.0; //generator[3].y_t_0
    ACC[301]=0.0; //generator[4].y_t_0
    ACC[302]=0.0; //generator[5].y_t_0
    ACC[303]=0.0; //generator[6].y_t_0
    ACC[304]=0.0; //generator[7].y_t_0
    ACC[305]=0.0; //generator[8].y_t_0
    sPAR[0]=0.0; //P_d
    sPAR[1]=500000000.0; //P_nom
    sPAR[2]=20.0; //T_sfc
    sPAR[3]=0.1; //droop
    sPAR[4]=50.0; //f_ref
    sPAR[5]=25330.29591058444; //generator[1].J
    sPAR[6]=25330.29591058444; //generator[2].J
    sPAR[7]=25330.29591058444; //generator[3].J
    sPAR[8]=25330.29591058444; //generator[4].J
    sPAR[9]=25330.29591058444; //generator[5].J
    sPAR[10]=25330.29591058444; //generator[6].J
    sPAR[11]=25330.29591058444; //generator[7].J
    sPAR[12]=25330.29591058444; //generator[8].J
    sPAR[13]=10.0; //generator[1].Kp_p
    sPAR[14]=10.0; //generator[2].Kp_p
    sPAR[15]=10.0; //generator[3].Kp_p
    sPAR[16]=10.0; //generator[4].Kp_p
    sPAR[17]=10.0; //generator[5].Kp_p
    sPAR[18]=10.0; //generator[6].Kp_p
    sPAR[19]=10.0; //generator[7].Kp_p
    sPAR[20]=10.0; //generator[8].Kp_p
    sPAR[21]=2.0; //generator[1].Kp_t
    sPAR[22]=2.0; //generator[2].Kp_t
    sPAR[23]=2.0; //generator[3].Kp_t
    sPAR[24]=2.0; //generator[4].Kp_t
    sPAR[25]=2.0; //generator[5].Kp_t
    sPAR[26]=2.0; //generator[6].Kp_t
    sPAR[27]=2.0; //generator[7].Kp_t
    sPAR[28]=2.0; //generator[8].Kp_t
    sPAR[29]=2.0; //generator[1].NTU
    sPAR[30]=2.0; //generator[2].NTU
    sPAR[31]=2.0; //generator[3].NTU
    sPAR[32]=2.0; //generator[4].NTU
    sPAR[33]=2.0; //generator[5].NTU
    sPAR[34]=2.0; //generator[6].NTU
    sPAR[35]=2.0; //generator[7].NTU
    sPAR[36]=2.0; //generator[8].NTU
    sPAR[37]=500000000.0; //generator[1].P_nom
    sPAR[38]=500000000.0; //generator[2].P_nom
    sPAR[39]=500000000.0; //generator[3].P_nom
    sPAR[40]=500000000.0; //generator[4].P_nom
    sPAR[41]=500000000.0; //generator[5].P_nom
    sPAR[42]=500000000.0; //generator[6].P_nom
    sPAR[43]=500000000.0; //generator[7].P_nom
    sPAR[44]=500000000.0; //generator[8].P_nom
    sPAR[45]=5.0; //generator[1].T_a
    sPAR[46]=5.0; //generator[2].T_a
    sPAR[47]=5.0; //generator[3].T_a
    sPAR[48]=5.0; //generator[4].T_a
    sPAR[49]=5.0; //generator[5].T_a
    sPAR[50]=5.0; //generator[6].T_a
    sPAR[51]=5.0; //generator[7].T_a
    sPAR[52]=5.0; //generator[8].T_a
    sPAR[53]=1.5; //generator[1].T_source
    sPAR[54]=1.5; //generator[2].T_source
    sPAR[55]=1.5; //generator[3].T_source
    sPAR[56]=1.5; //generator[4].T_source
    sPAR[57]=1.5; //generator[5].T_source
    sPAR[58]=1.5; //generator[6].T_source
    sPAR[59]=1.5; //generator[7].T_source
    sPAR[60]=1.5; //generator[8].T_source
    sPAR[61]=70.0; //generator[1].Ti_p
    sPAR[62]=70.0; //generator[2].Ti_p
    sPAR[63]=70.0; //generator[3].Ti_p
    sPAR[64]=70.0; //generator[4].Ti_p
    sPAR[65]=70.0; //generator[5].Ti_p
    sPAR[66]=70.0; //generator[6].Ti_p
    sPAR[67]=70.0; //generator[7].Ti_p
    sPAR[68]=70.0; //generator[8].Ti_p
    sPAR[69]=0.3; //generator[1].Ti_t
    sPAR[70]=0.3; //generator[2].Ti_t
    sPAR[71]=0.3; //generator[3].Ti_t
    sPAR[72]=0.3; //generator[4].Ti_t
    sPAR[73]=0.3; //generator[5].Ti_t
    sPAR[74]=0.3; //generator[6].Ti_t
    sPAR[75]=0.3; //generator[7].Ti_t
    sPAR[76]=0.3; //generator[8].Ti_t
    sPAR[77]=0.3; //generator[1].alpha
    sPAR[78]=0.3; //generator[2].alpha
    sPAR[79]=0.3; //generator[3].alpha
    sPAR[80]=0.3; //generator[4].alpha
    sPAR[81]=0.3; //generator[5].alpha
    sPAR[82]=0.3; //generator[6].alpha
    sPAR[83]=0.3; //generator[7].alpha
    sPAR[84]=0.3; //generator[8].alpha
    sPAR[93]=50.0; //generator[1].f_ref
    sPAR[94]=50.0; //generator[2].f_ref
    sPAR[95]=50.0; //generator[3].f_ref
    sPAR[96]=50.0; //generator[4].f_ref
    sPAR[97]=50.0; //generator[5].f_ref
    sPAR[98]=50.0; //generator[6].f_ref
    sPAR[99]=50.0; //generator[7].f_ref
    sPAR[100]=50.0; //generator[8].f_ref
    sPAR[101]=314.1592653589793; //generator[1].omega_ref
    sPAR[102]=314.1592653589793; //generator[2].omega_ref
    sPAR[103]=314.1592653589793; //generator[3].omega_ref
    sPAR[104]=314.1592653589793; //generator[4].omega_ref
    sPAR[105]=314.1592653589793; //generator[5].omega_ref
    sPAR[106]=314.1592653589793; //generator[6].omega_ref
    sPAR[107]=314.1592653589793; //generator[7].omega_ref
    sPAR[108]=314.1592653589793; //generator[8].omega_ref
    sPAR[109]=200.0; //generator[1].tau_b
    sPAR[110]=200.0; //generator[2].tau_b
    sPAR[111]=200.0; //generator[3].tau_b
    sPAR[112]=200.0; //generator[4].tau_b
    sPAR[113]=200.0; //generator[5].tau_b
    sPAR[114]=200.0; //generator[6].tau_b
    sPAR[115]=200.0; //generator[7].tau_b
    sPAR[116]=200.0; //generator[8].tau_b
    sPAR[117]=3.0; //generator[1].tau_q
    sPAR[118]=3.0; //generator[2].tau_q
    sPAR[119]=3.0; //generator[3].tau_q
    sPAR[120]=3.0; //generator[4].tau_q
    sPAR[121]=3.0; //generator[5].tau_q
    sPAR[122]=3.0; //generator[6].tau_q
    sPAR[123]=3.0; //generator[7].tau_q
    sPAR[124]=3.0; //generator[8].tau_q
    sPAR[125]=100.0; //generator[1].tau_sh
    sPAR[126]=100.0; //generator[2].tau_sh
    sPAR[127]=100.0; //generator[3].tau_sh
    sPAR[128]=100.0; //generator[4].tau_sh
    sPAR[129]=100.0; //generator[5].tau_sh
    sPAR[130]=100.0; //generator[6].tau_sh
    sPAR[131]=100.0; //generator[7].tau_sh
    sPAR[132]=100.0; //generator[8].tau_sh
    sPAR[133]=8.0; //generator[1].tau_t
    sPAR[134]=8.0; //generator[2].tau_t
    sPAR[135]=8.0; //generator[3].tau_t
    sPAR[136]=8.0; //generator[4].tau_t
    sPAR[137]=8.0; //generator[5].tau_t
    sPAR[138]=8.0; //generator[6].tau_t
    sPAR[139]=8.0; //generator[7].tau_t
    sPAR[140]=8.0; //generator[8].tau_t
    sPAR[141]=0.3; //generator[1].tau_y
    sPAR[142]=0.3; //generator[2].tau_y
    sPAR[143]=0.3; //generator[3].tau_y
    sPAR[144]=0.3; //generator[4].tau_y
    sPAR[145]=0.3; //generator[5].tau_y
    sPAR[146]=0.3; //generator[6].tau_y
    sPAR[147]=0.3; //generator[7].tau_y
    sPAR[148]=0.3; //generator[8].tau_y
    sPAR[149]=0.0; //omega_ref
    sPAR[150]=0.0; //generator[1].pi
    sPAR[151]=0.0; //generator[2].pi
    sPAR[152]=0.0; //generator[3].pi
    sPAR[153]=0.0; //generator[4].pi
    sPAR[154]=0.0; //generator[5].pi
    sPAR[155]=0.0; //generator[6].pi
    sPAR[156]=0.0; //generator[7].pi
    sPAR[157]=0.0; //generator[8].pi
    sPAR[158]=0.0; //pi
    sPARi[0]=4; //M
    sPARi[1]=8; //N
    sPARi[2]=4; //generator[1].N
    sPARi[3]=4; //generator[2].N
    sPARi[4]=4; //generator[3].N
    sPARi[5]=4; //generator[4].N
    sPARi[6]=4; //generator[5].N
    sPARi[7]=4; //generator[6].N
    sPARi[8]=4; //generator[7].N
    sPARi[9]=4; //generator[8].N
    X[1]=((X[57] + (0.25 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.25 * sPAR[29]))); //generator[1].T_s[1]
    X[2]=((X[1] + (0.25 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.25 * sPAR[29]))); //generator[1].T_s[2]
    X[3]=((X[2] + (0.25 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.25 * sPAR[29]))); //generator[1].T_s[3]
    X[4]=((X[3] + (0.25 * (sPAR[29] * sPAR[53]))) / (1.0 + (0.25 * sPAR[29]))); //generator[1].T_s[4]
    X[5]=((X[58] + (0.25 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.25 * sPAR[30]))); //generator[2].T_s[1]
    X[6]=((X[5] + (0.25 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.25 * sPAR[30]))); //generator[2].T_s[2]
    X[7]=((X[6] + (0.25 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.25 * sPAR[30]))); //generator[2].T_s[3]
    X[8]=((X[7] + (0.25 * (sPAR[30] * sPAR[54]))) / (1.0 + (0.25 * sPAR[30]))); //generator[2].T_s[4]
    X[9]=((X[59] + (0.25 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.25 * sPAR[31]))); //generator[3].T_s[1]
    X[10]=((X[9] + (0.25 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.25 * sPAR[31]))); //generator[3].T_s[2]
    X[11]=((X[10] + (0.25 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.25 * sPAR[31]))); //generator[3].T_s[3]
    X[12]=((X[11] + (0.25 * (sPAR[31] * sPAR[55]))) / (1.0 + (0.25 * sPAR[31]))); //generator[3].T_s[4]
    X[13]=((X[60] + (0.25 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.25 * sPAR[32]))); //generator[4].T_s[1]
    X[14]=((X[13] + (0.25 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.25 * sPAR[32]))); //generator[4].T_s[2]
    X[15]=((X[14] + (0.25 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.25 * sPAR[32]))); //generator[4].T_s[3]
    X[16]=((X[15] + (0.25 * (sPAR[32] * sPAR[56]))) / (1.0 + (0.25 * sPAR[32]))); //generator[4].T_s[4]
    X[17]=((X[61] + (0.25 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.25 * sPAR[33]))); //generator[5].T_s[1]
    X[18]=((X[17] + (0.25 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.25 * sPAR[33]))); //generator[5].T_s[2]
    X[19]=((X[18] + (0.25 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.25 * sPAR[33]))); //generator[5].T_s[3]
    X[20]=((X[19] + (0.25 * (sPAR[33] * sPAR[57]))) / (1.0 + (0.25 * sPAR[33]))); //generator[5].T_s[4]
    X[21]=((X[62] + (0.25 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.25 * sPAR[34]))); //generator[6].T_s[1]
    X[22]=((X[21] + (0.25 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.25 * sPAR[34]))); //generator[6].T_s[2]
    X[23]=((X[22] + (0.25 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.25 * sPAR[34]))); //generator[6].T_s[3]
    X[24]=((X[23] + (0.25 * (sPAR[34] * sPAR[58]))) / (1.0 + (0.25 * sPAR[34]))); //generator[6].T_s[4]
    X[25]=((X[63] + (0.25 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.25 * sPAR[35]))); //generator[7].T_s[1]
    X[26]=((X[25] + (0.25 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.25 * sPAR[35]))); //generator[7].T_s[2]
    X[27]=((X[26] + (0.25 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.25 * sPAR[35]))); //generator[7].T_s[3]
    X[28]=((X[27] + (0.25 * (sPAR[35] * sPAR[59]))) / (1.0 + (0.25 * sPAR[35]))); //generator[7].T_s[4]
    X[29]=((X[64] + (0.25 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.25 * sPAR[36]))); //generator[8].T_s[1]
    X[30]=((X[29] + (0.25 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.25 * sPAR[36]))); //generator[8].T_s[2]
    X[31]=((X[30] + (0.25 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.25 * sPAR[36]))); //generator[8].T_s[3]
    X[32]=((X[31] + (0.25 * (sPAR[36] * sPAR[60]))) / (1.0 + (0.25 * sPAR[36]))); //generator[8].T_s[4]
    X[33]=0.0; //generator[1].err_p_int
    X[34]=0.0; //generator[2].err_p_int
    X[35]=0.0; //generator[3].err_p_int
    X[36]=0.0; //generator[4].err_p_int
    X[37]=0.0; //generator[5].err_p_int
    X[38]=0.0; //generator[6].err_p_int
    X[39]=0.0; //generator[7].err_p_int
    X[40]=0.0; //generator[8].err_p_int
    X[41]=0.0; //generator[1].err_p_t_int
    X[42]=0.0; //generator[2].err_p_t_int
    X[43]=0.0; //generator[3].err_p_t_int
    X[44]=0.0; //generator[4].err_p_t_int
    X[45]=0.0; //generator[5].err_p_t_int
    X[46]=0.0; //generator[6].err_p_t_int
    X[47]=0.0; //generator[7].err_p_t_int
    X[48]=0.0; //generator[8].err_p_t_int
    X[50]=314.1592653589793; //generator[2].omega
    X[51]=314.1592653589793; //generator[3].omega
    X[52]=314.1592653589793; //generator[4].omega
    X[53]=314.1592653589793; //generator[5].omega
    X[54]=314.1592653589793; //generator[6].omega
    X[55]=314.1592653589793; //generator[7].omega
    X[56]=314.1592653589793; //generator[8].omega
    X[65]=(1.0 - sPAR[77]); //generator[1].p_t_lp
    X[66]=(1.0 - sPAR[78]); //generator[2].p_t_lp
    X[67]=(1.0 - sPAR[79]); //generator[3].p_t_lp
    X[68]=(1.0 - sPAR[80]); //generator[4].p_t_lp
    X[69]=(1.0 - sPAR[81]); //generator[5].p_t_lp
    X[70]=(1.0 - sPAR[82]); //generator[6].p_t_lp
    X[71]=(1.0 - sPAR[83]); //generator[7].p_t_lp
    X[72]=(1.0 - sPAR[84]); //generator[8].p_t_lp
    X[73]=1.0; //generator[1].q_ev
    X[74]=1.0; //generator[2].q_ev
    X[75]=1.0; //generator[3].q_ev
    X[76]=1.0; //generator[4].q_ev
    X[77]=1.0; //generator[5].q_ev
    X[78]=1.0; //generator[6].q_ev
    X[79]=1.0; //generator[7].q_ev
    X[80]=1.0; //generator[8].q_ev
    X[89]=1.0; //generator[1].y_t
    X[90]=1.0; //generator[2].y_t
    X[91]=1.0; //generator[3].y_t
    X[92]=1.0; //generator[4].y_t
    X[93]=1.0; //generator[5].y_t
    X[94]=1.0; //generator[6].y_t
    X[95]=1.0; //generator[7].y_t
    X[96]=1.0; //generator[8].y_t

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
