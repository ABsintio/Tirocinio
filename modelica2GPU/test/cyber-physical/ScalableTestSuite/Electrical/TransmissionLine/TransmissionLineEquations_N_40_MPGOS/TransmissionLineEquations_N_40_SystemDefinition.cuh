
#ifndef TRANSMISSIONLINEEQUATIONS_N_40_PERTHREAD_SYSTEMDEFINITION_H
#define TRANSMISSIONLINEEQUATIONS_N_40_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[1]=((-(X[78])) / -50.04948046732858);
    ACC[0]=(T > 0.0 ? 1.0 : 0.0);
    F[38]=((1581027.66798419 * (X[77] - X[78])) - (3952569.169960474 * (sPAR[6] * X[38])));
    F[37]=((1581027.66798419 * (X[76] - X[77])) - (3952569.169960474 * (sPAR[6] * X[37])));
    F[77]=(3960396039.603961 * (X[37] - X[38]));
    F[36]=((1581027.66798419 * (X[75] - X[76])) - (3952569.169960474 * (sPAR[6] * X[36])));
    F[76]=(3960396039.603961 * (X[36] - X[37]));
    F[35]=((1581027.66798419 * (X[74] - X[75])) - (3952569.169960474 * (sPAR[6] * X[35])));
    F[75]=(3960396039.603961 * (X[35] - X[36]));
    F[34]=((1581027.66798419 * (X[73] - X[74])) - (3952569.169960474 * (sPAR[6] * X[34])));
    F[74]=(3960396039.603961 * (X[34] - X[35]));
    F[33]=((1581027.66798419 * (X[72] - X[73])) - (3952569.169960474 * (sPAR[6] * X[33])));
    F[73]=(3960396039.603961 * (X[33] - X[34]));
    F[32]=((1581027.66798419 * (X[71] - X[72])) - (3952569.169960474 * (sPAR[6] * X[32])));
    F[72]=(3960396039.603961 * (X[32] - X[33]));
    F[31]=((1581027.66798419 * (X[70] - X[71])) - (3952569.169960474 * (sPAR[6] * X[31])));
    F[71]=(3960396039.603961 * (X[31] - X[32]));
    F[30]=((1581027.66798419 * (X[69] - X[70])) - (3952569.169960474 * (sPAR[6] * X[30])));
    F[70]=(3960396039.603961 * (X[30] - X[31]));
    F[29]=((1581027.66798419 * (X[68] - X[69])) - (3952569.169960474 * (sPAR[6] * X[29])));
    F[69]=(3960396039.603961 * (X[29] - X[30]));
    F[28]=((1581027.66798419 * (X[67] - X[68])) - (3952569.169960474 * (sPAR[6] * X[28])));
    F[68]=(3960396039.603961 * (X[28] - X[29]));
    F[27]=((1581027.66798419 * (X[66] - X[67])) - (3952569.169960474 * (sPAR[6] * X[27])));
    F[67]=(3960396039.603961 * (X[27] - X[28]));
    F[26]=((1581027.66798419 * (X[65] - X[66])) - (3952569.169960474 * (sPAR[6] * X[26])));
    F[66]=(3960396039.603961 * (X[26] - X[27]));
    F[25]=((1581027.66798419 * (X[64] - X[65])) - (3952569.169960474 * (sPAR[6] * X[25])));
    F[65]=(3960396039.603961 * (X[25] - X[26]));
    F[24]=((1581027.66798419 * (X[63] - X[64])) - (3952569.169960474 * (sPAR[6] * X[24])));
    F[64]=(3960396039.603961 * (X[24] - X[25]));
    F[23]=((1581027.66798419 * (X[62] - X[63])) - (3952569.169960474 * (sPAR[6] * X[23])));
    F[63]=(3960396039.603961 * (X[23] - X[24]));
    F[22]=((1581027.66798419 * (X[61] - X[62])) - (3952569.169960474 * (sPAR[6] * X[22])));
    F[62]=(3960396039.603961 * (X[22] - X[23]));
    F[21]=((1581027.66798419 * (X[60] - X[61])) - (3952569.169960474 * (sPAR[6] * X[21])));
    F[61]=(3960396039.603961 * (X[21] - X[22]));
    F[20]=((1581027.66798419 * (X[59] - X[60])) - (3952569.169960474 * (sPAR[6] * X[20])));
    F[60]=(3960396039.603961 * (X[20] - X[21]));
    F[19]=((1581027.66798419 * (X[58] - X[59])) - (3952569.169960474 * (sPAR[6] * X[19])));
    F[59]=(3960396039.603961 * (X[19] - X[20]));
    F[18]=((1581027.66798419 * (X[57] - X[58])) - (3952569.169960474 * (sPAR[6] * X[18])));
    F[58]=(3960396039.603961 * (X[18] - X[19]));
    F[17]=((1581027.66798419 * (X[56] - X[57])) - (3952569.169960474 * (sPAR[6] * X[17])));
    F[57]=(3960396039.603961 * (X[17] - X[18]));
    F[16]=((1581027.66798419 * (X[55] - X[56])) - (3952569.169960474 * (sPAR[6] * X[16])));
    F[56]=(3960396039.603961 * (X[16] - X[17]));
    F[15]=((1581027.66798419 * (X[54] - X[55])) - (3952569.169960474 * (sPAR[6] * X[15])));
    F[55]=(3960396039.603961 * (X[15] - X[16]));
    F[14]=((1581027.66798419 * (X[53] - X[54])) - (3952569.169960474 * (sPAR[6] * X[14])));
    F[54]=(3960396039.603961 * (X[14] - X[15]));
    F[13]=((1581027.66798419 * (X[52] - X[53])) - (3952569.169960474 * (sPAR[6] * X[13])));
    F[53]=(3960396039.603961 * (X[13] - X[14]));
    F[12]=((1581027.66798419 * (X[51] - X[52])) - (3952569.169960474 * (sPAR[6] * X[12])));
    F[52]=(3960396039.603961 * (X[12] - X[13]));
    F[11]=((1581027.66798419 * (X[50] - X[51])) - (3952569.169960474 * (sPAR[6] * X[11])));
    F[51]=(3960396039.603961 * (X[11] - X[12]));
    F[10]=((1581027.66798419 * (X[49] - X[50])) - (3952569.169960474 * (sPAR[6] * X[10])));
    F[50]=(3960396039.603961 * (X[10] - X[11]));
    F[9]=((1581027.66798419 * (X[48] - X[49])) - (3952569.169960474 * (sPAR[6] * X[9])));
    F[49]=(3960396039.603961 * (X[9] - X[10]));
    F[8]=((1581027.66798419 * (X[47] - X[48])) - (3952569.169960474 * (sPAR[6] * X[8])));
    F[48]=(3960396039.603961 * (X[8] - X[9]));
    F[7]=((1581027.66798419 * (X[46] - X[47])) - (3952569.169960474 * (sPAR[6] * X[7])));
    F[47]=(3960396039.603961 * (X[7] - X[8]));
    F[6]=((1581027.66798419 * (X[45] - X[46])) - (3952569.169960474 * (sPAR[6] * X[6])));
    F[46]=(3960396039.603961 * (X[6] - X[7]));
    F[5]=((1581027.66798419 * (X[44] - X[45])) - (3952569.169960474 * (sPAR[6] * X[5])));
    F[45]=(3960396039.603961 * (X[5] - X[6]));
    F[4]=((1581027.66798419 * (X[43] - X[44])) - (3952569.169960474 * (sPAR[6] * X[4])));
    F[44]=(3960396039.603961 * (X[4] - X[5]));
    F[3]=((1581027.66798419 * (X[42] - X[43])) - (3952569.169960474 * (sPAR[6] * X[3])));
    F[43]=(3960396039.603961 * (X[3] - X[4]));
    F[2]=((1581027.66798419 * (X[41] - X[42])) - (3952569.169960474 * (sPAR[6] * X[2])));
    F[42]=(3960396039.603961 * (X[2] - X[3]));
    F[1]=((1581027.66798419 * (X[40] - X[41])) - (3952569.169960474 * (sPAR[6] * X[1])));
    F[41]=(3960396039.603961 * (X[1] - X[2]));
    F[0]=((1581027.66798419 * (X[39] - X[40])) - (3952569.169960474 * (sPAR[6] * X[0])));
    F[40]=(3960396039.603961 * (X[0] - X[1]));
    F[78]=(3960396039.603961 * (X[38] - ACC[1]));
    F[39]=X[79];
    F[79]=((ACC[0] - (X[39] + (2.0 * (X[79] / sPAR[8])))) * pow(sPAR[8],2.0));

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[0]=0.0; //Vstep
    ACC[1]=0.0; //cur[40]
    sPAR[0]=100.0; //L
    sPAR[1]=50.04948046732858; //RL
    sPAR[2]=5.054997527200187e-07; //TD
    sPAR[3]=1.01e-10; //cap
    sPAR[4]=2.53e-07; //ind
    sPAR[5]=2.5; //l
    sPAR[6]=4.8e-05; //res
    sPAR[7]=197824033.4677019; //v
    sPAR[8]=5000000.0; //w
    sPARi[0]=40; //N
    X[0]=0.0; //cur[1]
    X[1]=0.0; //cur[2]
    X[2]=0.0; //cur[3]
    X[3]=0.0; //cur[4]
    X[4]=0.0; //cur[5]
    X[5]=0.0; //cur[6]
    X[6]=0.0; //cur[7]
    X[7]=0.0; //cur[8]
    X[8]=0.0; //cur[9]
    X[9]=0.0; //cur[10]
    X[10]=0.0; //cur[11]
    X[11]=0.0; //cur[12]
    X[12]=0.0; //cur[13]
    X[13]=0.0; //cur[14]
    X[14]=0.0; //cur[15]
    X[15]=0.0; //cur[16]
    X[16]=0.0; //cur[17]
    X[17]=0.0; //cur[18]
    X[18]=0.0; //cur[19]
    X[19]=0.0; //cur[20]
    X[20]=0.0; //cur[21]
    X[21]=0.0; //cur[22]
    X[22]=0.0; //cur[23]
    X[23]=0.0; //cur[24]
    X[24]=0.0; //cur[25]
    X[25]=0.0; //cur[26]
    X[26]=0.0; //cur[27]
    X[27]=0.0; //cur[28]
    X[28]=0.0; //cur[29]
    X[29]=0.0; //cur[30]
    X[30]=0.0; //cur[31]
    X[31]=0.0; //cur[32]
    X[32]=0.0; //cur[33]
    X[33]=0.0; //cur[34]
    X[34]=0.0; //cur[35]
    X[35]=0.0; //cur[36]
    X[36]=0.0; //cur[37]
    X[37]=0.0; //cur[38]
    X[38]=0.0; //cur[39]
    X[39]=0.0; //vol[1]
    X[40]=0.0; //vol[2]
    X[41]=0.0; //vol[3]
    X[42]=0.0; //vol[4]
    X[43]=0.0; //vol[5]
    X[44]=0.0; //vol[6]
    X[45]=0.0; //vol[7]
    X[46]=0.0; //vol[8]
    X[47]=0.0; //vol[9]
    X[48]=0.0; //vol[10]
    X[49]=0.0; //vol[11]
    X[50]=0.0; //vol[12]
    X[51]=0.0; //vol[13]
    X[52]=0.0; //vol[14]
    X[53]=0.0; //vol[15]
    X[54]=0.0; //vol[16]
    X[55]=0.0; //vol[17]
    X[56]=0.0; //vol[18]
    X[57]=0.0; //vol[19]
    X[58]=0.0; //vol[20]
    X[59]=0.0; //vol[21]
    X[60]=0.0; //vol[22]
    X[61]=0.0; //vol[23]
    X[62]=0.0; //vol[24]
    X[63]=0.0; //vol[25]
    X[64]=0.0; //vol[26]
    X[65]=0.0; //vol[27]
    X[66]=0.0; //vol[28]
    X[67]=0.0; //vol[29]
    X[68]=0.0; //vol[30]
    X[69]=0.0; //vol[31]
    X[70]=0.0; //vol[32]
    X[71]=0.0; //vol[33]
    X[72]=0.0; //vol[34]
    X[73]=0.0; //vol[35]
    X[74]=0.0; //vol[36]
    X[75]=0.0; //vol[37]
    X[76]=0.0; //vol[38]
    X[77]=0.0; //vol[39]
    X[78]=0.0; //vol[40]
    X[79]=0.0; //vvol

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
