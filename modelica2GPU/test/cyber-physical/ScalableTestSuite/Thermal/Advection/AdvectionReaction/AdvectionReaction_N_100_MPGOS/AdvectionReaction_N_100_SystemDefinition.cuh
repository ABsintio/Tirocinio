
#ifndef ADVECTIONREACTION_N_100_PERTHREAD_SYSTEMDEFINITION_H
#define ADVECTIONREACTION_N_100_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[0]=1.0;
    F[99]=((100.0 * (X[98] - X[99])) - (sPAR[0] * (X[99] * ((-0.5 + X[99]) * (-1.0 + X[99])))));
    F[98]=((100.0 * (X[97] - X[98])) - (sPAR[0] * (X[98] * ((-0.5 + X[98]) * (-1.0 + X[98])))));
    F[97]=((100.0 * (X[96] - X[97])) - (sPAR[0] * (X[97] * ((-0.5 + X[97]) * (-1.0 + X[97])))));
    F[96]=((100.0 * (X[95] - X[96])) - (sPAR[0] * (X[96] * ((-0.5 + X[96]) * (-1.0 + X[96])))));
    F[95]=((100.0 * (X[94] - X[95])) - (sPAR[0] * (X[95] * ((-0.5 + X[95]) * (-1.0 + X[95])))));
    F[94]=((100.0 * (X[93] - X[94])) - (sPAR[0] * (X[94] * ((-0.5 + X[94]) * (-1.0 + X[94])))));
    F[93]=((100.0 * (X[92] - X[93])) - (sPAR[0] * (X[93] * ((-0.5 + X[93]) * (-1.0 + X[93])))));
    F[92]=((100.0 * (X[91] - X[92])) - (sPAR[0] * (X[92] * ((-0.5 + X[92]) * (-1.0 + X[92])))));
    F[91]=((100.0 * (X[90] - X[91])) - (sPAR[0] * (X[91] * ((-0.5 + X[91]) * (-1.0 + X[91])))));
    F[90]=((100.0 * (X[89] - X[90])) - (sPAR[0] * (X[90] * ((-0.5 + X[90]) * (-1.0 + X[90])))));
    F[89]=((100.0 * (X[88] - X[89])) - (sPAR[0] * (X[89] * ((-0.5 + X[89]) * (-1.0 + X[89])))));
    F[88]=((100.0 * (X[87] - X[88])) - (sPAR[0] * (X[88] * ((-0.5 + X[88]) * (-1.0 + X[88])))));
    F[87]=((100.0 * (X[86] - X[87])) - (sPAR[0] * (X[87] * ((-0.5 + X[87]) * (-1.0 + X[87])))));
    F[86]=((100.0 * (X[85] - X[86])) - (sPAR[0] * (X[86] * ((-0.5 + X[86]) * (-1.0 + X[86])))));
    F[85]=((100.0 * (X[84] - X[85])) - (sPAR[0] * (X[85] * ((-0.5 + X[85]) * (-1.0 + X[85])))));
    F[84]=((100.0 * (X[83] - X[84])) - (sPAR[0] * (X[84] * ((-0.5 + X[84]) * (-1.0 + X[84])))));
    F[83]=((100.0 * (X[82] - X[83])) - (sPAR[0] * (X[83] * ((-0.5 + X[83]) * (-1.0 + X[83])))));
    F[82]=((100.0 * (X[81] - X[82])) - (sPAR[0] * (X[82] * ((-0.5 + X[82]) * (-1.0 + X[82])))));
    F[81]=((100.0 * (X[80] - X[81])) - (sPAR[0] * (X[81] * ((-0.5 + X[81]) * (-1.0 + X[81])))));
    F[80]=((100.0 * (X[79] - X[80])) - (sPAR[0] * (X[80] * ((-0.5 + X[80]) * (-1.0 + X[80])))));
    F[79]=((100.0 * (X[78] - X[79])) - (sPAR[0] * (X[79] * ((-0.5 + X[79]) * (-1.0 + X[79])))));
    F[78]=((100.0 * (X[77] - X[78])) - (sPAR[0] * (X[78] * ((-0.5 + X[78]) * (-1.0 + X[78])))));
    F[77]=((100.0 * (X[76] - X[77])) - (sPAR[0] * (X[77] * ((-0.5 + X[77]) * (-1.0 + X[77])))));
    F[76]=((100.0 * (X[75] - X[76])) - (sPAR[0] * (X[76] * ((-0.5 + X[76]) * (-1.0 + X[76])))));
    F[75]=((100.0 * (X[74] - X[75])) - (sPAR[0] * (X[75] * ((-0.5 + X[75]) * (-1.0 + X[75])))));
    F[74]=((100.0 * (X[73] - X[74])) - (sPAR[0] * (X[74] * ((-0.5 + X[74]) * (-1.0 + X[74])))));
    F[73]=((100.0 * (X[72] - X[73])) - (sPAR[0] * (X[73] * ((-0.5 + X[73]) * (-1.0 + X[73])))));
    F[72]=((100.0 * (X[71] - X[72])) - (sPAR[0] * (X[72] * ((-0.5 + X[72]) * (-1.0 + X[72])))));
    F[71]=((100.0 * (X[70] - X[71])) - (sPAR[0] * (X[71] * ((-0.5 + X[71]) * (-1.0 + X[71])))));
    F[70]=((100.0 * (X[69] - X[70])) - (sPAR[0] * (X[70] * ((-0.5 + X[70]) * (-1.0 + X[70])))));
    F[69]=((100.0 * (X[68] - X[69])) - (sPAR[0] * (X[69] * ((-0.5 + X[69]) * (-1.0 + X[69])))));
    F[68]=((100.0 * (X[67] - X[68])) - (sPAR[0] * (X[68] * ((-0.5 + X[68]) * (-1.0 + X[68])))));
    F[67]=((100.0 * (X[66] - X[67])) - (sPAR[0] * (X[67] * ((-0.5 + X[67]) * (-1.0 + X[67])))));
    F[66]=((100.0 * (X[65] - X[66])) - (sPAR[0] * (X[66] * ((-0.5 + X[66]) * (-1.0 + X[66])))));
    F[65]=((100.0 * (X[64] - X[65])) - (sPAR[0] * (X[65] * ((-0.5 + X[65]) * (-1.0 + X[65])))));
    F[64]=((100.0 * (X[63] - X[64])) - (sPAR[0] * (X[64] * ((-0.5 + X[64]) * (-1.0 + X[64])))));
    F[63]=((100.0 * (X[62] - X[63])) - (sPAR[0] * (X[63] * ((-0.5 + X[63]) * (-1.0 + X[63])))));
    F[62]=((100.0 * (X[61] - X[62])) - (sPAR[0] * (X[62] * ((-0.5 + X[62]) * (-1.0 + X[62])))));
    F[61]=((100.0 * (X[60] - X[61])) - (sPAR[0] * (X[61] * ((-0.5 + X[61]) * (-1.0 + X[61])))));
    F[60]=((100.0 * (X[59] - X[60])) - (sPAR[0] * (X[60] * ((-0.5 + X[60]) * (-1.0 + X[60])))));
    F[59]=((100.0 * (X[58] - X[59])) - (sPAR[0] * (X[59] * ((-0.5 + X[59]) * (-1.0 + X[59])))));
    F[58]=((100.0 * (X[57] - X[58])) - (sPAR[0] * (X[58] * ((-0.5 + X[58]) * (-1.0 + X[58])))));
    F[57]=((100.0 * (X[56] - X[57])) - (sPAR[0] * (X[57] * ((-0.5 + X[57]) * (-1.0 + X[57])))));
    F[56]=((100.0 * (X[55] - X[56])) - (sPAR[0] * (X[56] * ((-0.5 + X[56]) * (-1.0 + X[56])))));
    F[55]=((100.0 * (X[54] - X[55])) - (sPAR[0] * (X[55] * ((-0.5 + X[55]) * (-1.0 + X[55])))));
    F[54]=((100.0 * (X[53] - X[54])) - (sPAR[0] * (X[54] * ((-0.5 + X[54]) * (-1.0 + X[54])))));
    F[53]=((100.0 * (X[52] - X[53])) - (sPAR[0] * (X[53] * ((-0.5 + X[53]) * (-1.0 + X[53])))));
    F[52]=((100.0 * (X[51] - X[52])) - (sPAR[0] * (X[52] * ((-0.5 + X[52]) * (-1.0 + X[52])))));
    F[51]=((100.0 * (X[50] - X[51])) - (sPAR[0] * (X[51] * ((-0.5 + X[51]) * (-1.0 + X[51])))));
    F[50]=((100.0 * (X[49] - X[50])) - (sPAR[0] * (X[50] * ((-0.5 + X[50]) * (-1.0 + X[50])))));
    F[49]=((100.0 * (X[48] - X[49])) - (sPAR[0] * (X[49] * ((-0.5 + X[49]) * (-1.0 + X[49])))));
    F[48]=((100.0 * (X[47] - X[48])) - (sPAR[0] * (X[48] * ((-0.5 + X[48]) * (-1.0 + X[48])))));
    F[47]=((100.0 * (X[46] - X[47])) - (sPAR[0] * (X[47] * ((-0.5 + X[47]) * (-1.0 + X[47])))));
    F[46]=((100.0 * (X[45] - X[46])) - (sPAR[0] * (X[46] * ((-0.5 + X[46]) * (-1.0 + X[46])))));
    F[45]=((100.0 * (X[44] - X[45])) - (sPAR[0] * (X[45] * ((-0.5 + X[45]) * (-1.0 + X[45])))));
    F[44]=((100.0 * (X[43] - X[44])) - (sPAR[0] * (X[44] * ((-0.5 + X[44]) * (-1.0 + X[44])))));
    F[43]=((100.0 * (X[42] - X[43])) - (sPAR[0] * (X[43] * ((-0.5 + X[43]) * (-1.0 + X[43])))));
    F[42]=((100.0 * (X[41] - X[42])) - (sPAR[0] * (X[42] * ((-0.5 + X[42]) * (-1.0 + X[42])))));
    F[41]=((100.0 * (X[40] - X[41])) - (sPAR[0] * (X[41] * ((-0.5 + X[41]) * (-1.0 + X[41])))));
    F[40]=((100.0 * (X[39] - X[40])) - (sPAR[0] * (X[40] * ((-0.5 + X[40]) * (-1.0 + X[40])))));
    F[39]=((100.0 * (X[38] - X[39])) - (sPAR[0] * (X[39] * ((-0.5 + X[39]) * (-1.0 + X[39])))));
    F[38]=((100.0 * (X[37] - X[38])) - (sPAR[0] * (X[38] * ((-0.5 + X[38]) * (-1.0 + X[38])))));
    F[37]=((100.0 * (X[36] - X[37])) - (sPAR[0] * (X[37] * ((-0.5 + X[37]) * (-1.0 + X[37])))));
    F[36]=((100.0 * (X[35] - X[36])) - (sPAR[0] * (X[36] * ((-0.5 + X[36]) * (-1.0 + X[36])))));
    F[35]=((100.0 * (X[34] - X[35])) - (sPAR[0] * (X[35] * ((-0.5 + X[35]) * (-1.0 + X[35])))));
    F[34]=((100.0 * (X[33] - X[34])) - (sPAR[0] * (X[34] * ((-0.5 + X[34]) * (-1.0 + X[34])))));
    F[33]=((100.0 * (X[32] - X[33])) - (sPAR[0] * (X[33] * ((-0.5 + X[33]) * (-1.0 + X[33])))));
    F[32]=((100.0 * (X[31] - X[32])) - (sPAR[0] * (X[32] * ((-0.5 + X[32]) * (-1.0 + X[32])))));
    F[31]=((100.0 * (X[30] - X[31])) - (sPAR[0] * (X[31] * ((-0.5 + X[31]) * (-1.0 + X[31])))));
    F[30]=((100.0 * (X[29] - X[30])) - (sPAR[0] * (X[30] * ((-0.5 + X[30]) * (-1.0 + X[30])))));
    F[29]=((100.0 * (X[28] - X[29])) - (sPAR[0] * (X[29] * ((-0.5 + X[29]) * (-1.0 + X[29])))));
    F[28]=((100.0 * (X[27] - X[28])) - (sPAR[0] * (X[28] * ((-0.5 + X[28]) * (-1.0 + X[28])))));
    F[27]=((100.0 * (X[26] - X[27])) - (sPAR[0] * (X[27] * ((-0.5 + X[27]) * (-1.0 + X[27])))));
    F[26]=((100.0 * (X[25] - X[26])) - (sPAR[0] * (X[26] * ((-0.5 + X[26]) * (-1.0 + X[26])))));
    F[25]=((100.0 * (X[24] - X[25])) - (sPAR[0] * (X[25] * ((-0.5 + X[25]) * (-1.0 + X[25])))));
    F[24]=((100.0 * (X[23] - X[24])) - (sPAR[0] * (X[24] * ((-0.5 + X[24]) * (-1.0 + X[24])))));
    F[23]=((100.0 * (X[22] - X[23])) - (sPAR[0] * (X[23] * ((-0.5 + X[23]) * (-1.0 + X[23])))));
    F[22]=((100.0 * (X[21] - X[22])) - (sPAR[0] * (X[22] * ((-0.5 + X[22]) * (-1.0 + X[22])))));
    F[21]=((100.0 * (X[20] - X[21])) - (sPAR[0] * (X[21] * ((-0.5 + X[21]) * (-1.0 + X[21])))));
    F[20]=((100.0 * (X[19] - X[20])) - (sPAR[0] * (X[20] * ((-0.5 + X[20]) * (-1.0 + X[20])))));
    F[19]=((100.0 * (X[18] - X[19])) - (sPAR[0] * (X[19] * ((-0.5 + X[19]) * (-1.0 + X[19])))));
    F[18]=((100.0 * (X[17] - X[18])) - (sPAR[0] * (X[18] * ((-0.5 + X[18]) * (-1.0 + X[18])))));
    F[17]=((100.0 * (X[16] - X[17])) - (sPAR[0] * (X[17] * ((-0.5 + X[17]) * (-1.0 + X[17])))));
    F[16]=((100.0 * (X[15] - X[16])) - (sPAR[0] * (X[16] * ((-0.5 + X[16]) * (-1.0 + X[16])))));
    F[15]=((100.0 * (X[14] - X[15])) - (sPAR[0] * (X[15] * ((-0.5 + X[15]) * (-1.0 + X[15])))));
    F[14]=((100.0 * (X[13] - X[14])) - (sPAR[0] * (X[14] * ((-0.5 + X[14]) * (-1.0 + X[14])))));
    F[13]=((100.0 * (X[12] - X[13])) - (sPAR[0] * (X[13] * ((-0.5 + X[13]) * (-1.0 + X[13])))));
    F[12]=((100.0 * (X[11] - X[12])) - (sPAR[0] * (X[12] * ((-0.5 + X[12]) * (-1.0 + X[12])))));
    F[11]=((100.0 * (X[10] - X[11])) - (sPAR[0] * (X[11] * ((-0.5 + X[11]) * (-1.0 + X[11])))));
    F[10]=((100.0 * (X[9] - X[10])) - (sPAR[0] * (X[10] * ((-0.5 + X[10]) * (-1.0 + X[10])))));
    F[9]=((100.0 * (X[8] - X[9])) - (sPAR[0] * (X[9] * ((-0.5 + X[9]) * (-1.0 + X[9])))));
    F[8]=((100.0 * (X[7] - X[8])) - (sPAR[0] * (X[8] * ((-0.5 + X[8]) * (-1.0 + X[8])))));
    F[7]=((100.0 * (X[6] - X[7])) - (sPAR[0] * (X[7] * ((-0.5 + X[7]) * (-1.0 + X[7])))));
    F[6]=((100.0 * (X[5] - X[6])) - (sPAR[0] * (X[6] * ((-0.5 + X[6]) * (-1.0 + X[6])))));
    F[5]=((100.0 * (X[4] - X[5])) - (sPAR[0] * (X[5] * ((-0.5 + X[5]) * (-1.0 + X[5])))));
    F[4]=((100.0 * (X[3] - X[4])) - (sPAR[0] * (X[4] * ((-0.5 + X[4]) * (-1.0 + X[4])))));
    F[3]=((100.0 * (X[2] - X[3])) - (sPAR[0] * (X[3] * ((-0.5 + X[3]) * (-1.0 + X[3])))));
    F[2]=((100.0 * (X[1] - X[2])) - (sPAR[0] * (X[2] * ((-0.5 + X[2]) * (-1.0 + X[2])))));
    F[1]=((100.0 * (X[0] - X[1])) - (sPAR[0] * (X[1] * ((-0.5 + X[1]) * (-1.0 + X[1])))));
    F[0]=((100.0 * (1.0 - X[0])) - (sPAR[0] * (X[0] * ((-0.5 + X[0]) * (-1.0 + X[0])))));

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[0]=1.0; //u_in
    sPAR[0]=500.0; //mu
    sPAR[1]=0.0; //alpha
    sPARi[0]=100; //N
    X[0]=0.0; //u[1]
    X[1]=0.0; //u[2]
    X[2]=0.0; //u[3]
    X[3]=0.0; //u[4]
    X[4]=0.0; //u[5]
    X[5]=0.0; //u[6]
    X[6]=0.0; //u[7]
    X[7]=0.0; //u[8]
    X[8]=0.0; //u[9]
    X[9]=0.0; //u[10]
    X[10]=0.0; //u[11]
    X[11]=0.0; //u[12]
    X[12]=0.0; //u[13]
    X[13]=0.0; //u[14]
    X[14]=0.0; //u[15]
    X[15]=0.0; //u[16]
    X[16]=0.0; //u[17]
    X[17]=0.0; //u[18]
    X[18]=0.0; //u[19]
    X[19]=0.0; //u[20]
    X[20]=0.0; //u[21]
    X[21]=0.0; //u[22]
    X[22]=0.0; //u[23]
    X[23]=0.0; //u[24]
    X[24]=0.0; //u[25]
    X[25]=0.0; //u[26]
    X[26]=0.0; //u[27]
    X[27]=0.0; //u[28]
    X[28]=0.0; //u[29]
    X[29]=0.0; //u[30]
    X[30]=0.0; //u[31]
    X[31]=0.0; //u[32]
    X[32]=0.0; //u[33]
    X[33]=0.0; //u[34]
    X[34]=0.0; //u[35]
    X[35]=0.0; //u[36]
    X[36]=0.0; //u[37]
    X[37]=0.0; //u[38]
    X[38]=0.0; //u[39]
    X[39]=0.0; //u[40]
    X[40]=0.0; //u[41]
    X[41]=0.0; //u[42]
    X[42]=0.0; //u[43]
    X[43]=0.0; //u[44]
    X[44]=0.0; //u[45]
    X[45]=0.0; //u[46]
    X[46]=0.0; //u[47]
    X[47]=0.0; //u[48]
    X[48]=0.0; //u[49]
    X[49]=0.0; //u[50]
    X[50]=0.0; //u[51]
    X[51]=0.0; //u[52]
    X[52]=0.0; //u[53]
    X[53]=0.0; //u[54]
    X[54]=0.0; //u[55]
    X[55]=0.0; //u[56]
    X[56]=0.0; //u[57]
    X[57]=0.0; //u[58]
    X[58]=0.0; //u[59]
    X[59]=0.0; //u[60]
    X[60]=0.0; //u[61]
    X[61]=0.0; //u[62]
    X[62]=0.0; //u[63]
    X[63]=0.0; //u[64]
    X[64]=0.0; //u[65]
    X[65]=0.0; //u[66]
    X[66]=0.0; //u[67]
    X[67]=0.0; //u[68]
    X[68]=0.0; //u[69]
    X[69]=0.0; //u[70]
    X[70]=0.0; //u[71]
    X[71]=0.0; //u[72]
    X[72]=0.0; //u[73]
    X[73]=0.0; //u[74]
    X[74]=0.0; //u[75]
    X[75]=0.0; //u[76]
    X[76]=0.0; //u[77]
    X[77]=0.0; //u[78]
    X[78]=0.0; //u[79]
    X[79]=0.0; //u[80]
    X[80]=0.0; //u[81]
    X[81]=0.0; //u[82]
    X[82]=0.0; //u[83]
    X[83]=0.0; //u[84]
    X[84]=0.0; //u[85]
    X[85]=0.0; //u[86]
    X[86]=0.0; //u[87]
    X[87]=0.0; //u[88]
    X[88]=0.0; //u[89]
    X[89]=0.0; //u[90]
    X[90]=0.0; //u[91]
    X[91]=0.0; //u[92]
    X[92]=0.0; //u[93]
    X[93]=0.0; //u[94]
    X[94]=0.0; //u[95]
    X[95]=0.0; //u[96]
    X[96]=0.0; //u[97]
    X[97]=0.0; //u[98]
    X[98]=0.0; //u[99]
    X[99]=0.0; //u[100]

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
