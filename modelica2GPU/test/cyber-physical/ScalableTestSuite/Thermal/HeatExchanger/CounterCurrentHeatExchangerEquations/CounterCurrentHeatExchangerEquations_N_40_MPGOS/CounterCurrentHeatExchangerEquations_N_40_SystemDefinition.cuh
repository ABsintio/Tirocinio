
#ifndef COUNTERCURRENTHEATEXCHANGEREQUATIONS_N_40_PERTHREAD_SYSTEMDEFINITION_H
#define COUNTERCURRENTHEATEXCHANGEREQUATIONS_N_40_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[81]=310.0;
    ACC[80]=(T < 8.0 ? 300.0 : 301.0);
    ACC[0]=(0.2564102564102564 * ((X[78] + (-0.5 * (ACC[80] + X[0]))) * (sPAR[6] * sPAR[9])));
    ACC[77]=(0.2564102564102564 * (((0.5 * (310.0 + X[77])) - X[116]) * (sPAR[7] * sPAR[9])));
    ACC[82]=(T < 15.0 ? 1.0 : 1.1);
    ACC[1]=(0.2564102564102564 * ((X[79] + (-0.5 * (X[0] + X[1]))) * (sPAR[6] * sPAR[9])));
    ACC[76]=(0.2564102564102564 * (((0.5 * (X[77] + X[76])) - X[115]) * (sPAR[7] * sPAR[9])));
    ACC[2]=(0.2564102564102564 * ((X[80] + (-0.5 * (X[1] + X[2]))) * (sPAR[6] * sPAR[9])));
    ACC[75]=(0.2564102564102564 * (((0.5 * (X[76] + X[75])) - X[114]) * (sPAR[7] * sPAR[9])));
    ACC[3]=(0.2564102564102564 * ((X[81] + (-0.5 * (X[2] + X[3]))) * (sPAR[6] * sPAR[9])));
    ACC[74]=(0.2564102564102564 * (((0.5 * (X[75] + X[74])) - X[113]) * (sPAR[7] * sPAR[9])));
    ACC[4]=(0.2564102564102564 * ((X[82] + (-0.5 * (X[3] + X[4]))) * (sPAR[6] * sPAR[9])));
    ACC[73]=(0.2564102564102564 * (((0.5 * (X[74] + X[73])) - X[112]) * (sPAR[7] * sPAR[9])));
    ACC[5]=(0.2564102564102564 * ((X[83] + (-0.5 * (X[4] + X[5]))) * (sPAR[6] * sPAR[9])));
    ACC[72]=(0.2564102564102564 * (((0.5 * (X[73] + X[72])) - X[111]) * (sPAR[7] * sPAR[9])));
    ACC[6]=(0.2564102564102564 * ((X[84] + (-0.5 * (X[5] + X[6]))) * (sPAR[6] * sPAR[9])));
    ACC[71]=(0.2564102564102564 * (((0.5 * (X[72] + X[71])) - X[110]) * (sPAR[7] * sPAR[9])));
    ACC[7]=(0.2564102564102564 * ((X[85] + (-0.5 * (X[6] + X[7]))) * (sPAR[6] * sPAR[9])));
    ACC[70]=(0.2564102564102564 * (((0.5 * (X[71] + X[70])) - X[109]) * (sPAR[7] * sPAR[9])));
    ACC[8]=(0.2564102564102564 * ((X[86] + (-0.5 * (X[7] + X[8]))) * (sPAR[6] * sPAR[9])));
    ACC[69]=(0.2564102564102564 * (((0.5 * (X[70] + X[69])) - X[108]) * (sPAR[7] * sPAR[9])));
    ACC[9]=(0.2564102564102564 * ((X[87] + (-0.5 * (X[8] + X[9]))) * (sPAR[6] * sPAR[9])));
    ACC[68]=(0.2564102564102564 * (((0.5 * (X[69] + X[68])) - X[107]) * (sPAR[7] * sPAR[9])));
    ACC[10]=(0.2564102564102564 * ((X[88] + (-0.5 * (X[9] + X[10]))) * (sPAR[6] * sPAR[9])));
    ACC[67]=(0.2564102564102564 * (((0.5 * (X[68] + X[67])) - X[106]) * (sPAR[7] * sPAR[9])));
    ACC[11]=(0.2564102564102564 * ((X[89] + (-0.5 * (X[10] + X[11]))) * (sPAR[6] * sPAR[9])));
    ACC[66]=(0.2564102564102564 * (((0.5 * (X[67] + X[66])) - X[105]) * (sPAR[7] * sPAR[9])));
    ACC[12]=(0.2564102564102564 * ((X[90] + (-0.5 * (X[11] + X[12]))) * (sPAR[6] * sPAR[9])));
    ACC[65]=(0.2564102564102564 * (((0.5 * (X[66] + X[65])) - X[104]) * (sPAR[7] * sPAR[9])));
    ACC[13]=(0.2564102564102564 * ((X[91] + (-0.5 * (X[12] + X[13]))) * (sPAR[6] * sPAR[9])));
    ACC[64]=(0.2564102564102564 * (((0.5 * (X[65] + X[64])) - X[103]) * (sPAR[7] * sPAR[9])));
    ACC[14]=(0.2564102564102564 * ((X[92] + (-0.5 * (X[13] + X[14]))) * (sPAR[6] * sPAR[9])));
    ACC[63]=(0.2564102564102564 * (((0.5 * (X[64] + X[63])) - X[102]) * (sPAR[7] * sPAR[9])));
    ACC[15]=(0.2564102564102564 * ((X[93] + (-0.5 * (X[14] + X[15]))) * (sPAR[6] * sPAR[9])));
    ACC[62]=(0.2564102564102564 * (((0.5 * (X[63] + X[62])) - X[101]) * (sPAR[7] * sPAR[9])));
    ACC[16]=(0.2564102564102564 * ((X[94] + (-0.5 * (X[15] + X[16]))) * (sPAR[6] * sPAR[9])));
    ACC[61]=(0.2564102564102564 * (((0.5 * (X[62] + X[61])) - X[100]) * (sPAR[7] * sPAR[9])));
    ACC[17]=(0.2564102564102564 * ((X[95] + (-0.5 * (X[16] + X[17]))) * (sPAR[6] * sPAR[9])));
    ACC[60]=(0.2564102564102564 * (((0.5 * (X[61] + X[60])) - X[99]) * (sPAR[7] * sPAR[9])));
    ACC[18]=(0.2564102564102564 * ((X[96] + (-0.5 * (X[17] + X[18]))) * (sPAR[6] * sPAR[9])));
    ACC[59]=(0.2564102564102564 * (((0.5 * (X[60] + X[59])) - X[98]) * (sPAR[7] * sPAR[9])));
    ACC[19]=(0.2564102564102564 * ((X[97] + (-0.5 * (X[18] + X[19]))) * (sPAR[6] * sPAR[9])));
    ACC[58]=(0.2564102564102564 * (((0.5 * (X[59] + X[58])) - X[97]) * (sPAR[7] * sPAR[9])));
    ACC[20]=(0.2564102564102564 * ((X[98] + (-0.5 * (X[19] + X[20]))) * (sPAR[6] * sPAR[9])));
    ACC[57]=(0.2564102564102564 * (((0.5 * (X[58] + X[57])) - X[96]) * (sPAR[7] * sPAR[9])));
    ACC[21]=(0.2564102564102564 * ((X[99] + (-0.5 * (X[20] + X[21]))) * (sPAR[6] * sPAR[9])));
    ACC[56]=(0.2564102564102564 * (((0.5 * (X[57] + X[56])) - X[95]) * (sPAR[7] * sPAR[9])));
    ACC[22]=(0.2564102564102564 * ((X[100] + (-0.5 * (X[21] + X[22]))) * (sPAR[6] * sPAR[9])));
    ACC[55]=(0.2564102564102564 * (((0.5 * (X[56] + X[55])) - X[94]) * (sPAR[7] * sPAR[9])));
    ACC[23]=(0.2564102564102564 * ((X[101] + (-0.5 * (X[22] + X[23]))) * (sPAR[6] * sPAR[9])));
    ACC[54]=(0.2564102564102564 * (((0.5 * (X[55] + X[54])) - X[93]) * (sPAR[7] * sPAR[9])));
    ACC[24]=(0.2564102564102564 * ((X[102] + (-0.5 * (X[23] + X[24]))) * (sPAR[6] * sPAR[9])));
    ACC[53]=(0.2564102564102564 * (((0.5 * (X[54] + X[53])) - X[92]) * (sPAR[7] * sPAR[9])));
    ACC[25]=(0.2564102564102564 * ((X[103] + (-0.5 * (X[24] + X[25]))) * (sPAR[6] * sPAR[9])));
    ACC[52]=(0.2564102564102564 * (((0.5 * (X[53] + X[52])) - X[91]) * (sPAR[7] * sPAR[9])));
    ACC[26]=(0.2564102564102564 * ((X[104] + (-0.5 * (X[25] + X[26]))) * (sPAR[6] * sPAR[9])));
    ACC[51]=(0.2564102564102564 * (((0.5 * (X[52] + X[51])) - X[90]) * (sPAR[7] * sPAR[9])));
    ACC[27]=(0.2564102564102564 * ((X[105] + (-0.5 * (X[26] + X[27]))) * (sPAR[6] * sPAR[9])));
    ACC[50]=(0.2564102564102564 * (((0.5 * (X[51] + X[50])) - X[89]) * (sPAR[7] * sPAR[9])));
    ACC[28]=(0.2564102564102564 * ((X[106] + (-0.5 * (X[27] + X[28]))) * (sPAR[6] * sPAR[9])));
    ACC[49]=(0.2564102564102564 * (((0.5 * (X[50] + X[49])) - X[88]) * (sPAR[7] * sPAR[9])));
    ACC[29]=(0.2564102564102564 * ((X[107] + (-0.5 * (X[28] + X[29]))) * (sPAR[6] * sPAR[9])));
    ACC[48]=(0.2564102564102564 * (((0.5 * (X[49] + X[48])) - X[87]) * (sPAR[7] * sPAR[9])));
    ACC[30]=(0.2564102564102564 * ((X[108] + (-0.5 * (X[29] + X[30]))) * (sPAR[6] * sPAR[9])));
    ACC[47]=(0.2564102564102564 * (((0.5 * (X[48] + X[47])) - X[86]) * (sPAR[7] * sPAR[9])));
    ACC[31]=(0.2564102564102564 * ((X[109] + (-0.5 * (X[30] + X[31]))) * (sPAR[6] * sPAR[9])));
    ACC[46]=(0.2564102564102564 * (((0.5 * (X[47] + X[46])) - X[85]) * (sPAR[7] * sPAR[9])));
    ACC[32]=(0.2564102564102564 * ((X[110] + (-0.5 * (X[31] + X[32]))) * (sPAR[6] * sPAR[9])));
    ACC[45]=(0.2564102564102564 * (((0.5 * (X[46] + X[45])) - X[84]) * (sPAR[7] * sPAR[9])));
    ACC[33]=(0.2564102564102564 * ((X[111] + (-0.5 * (X[32] + X[33]))) * (sPAR[6] * sPAR[9])));
    ACC[44]=(0.2564102564102564 * (((0.5 * (X[45] + X[44])) - X[83]) * (sPAR[7] * sPAR[9])));
    ACC[34]=(0.2564102564102564 * ((X[112] + (-0.5 * (X[33] + X[34]))) * (sPAR[6] * sPAR[9])));
    ACC[43]=(0.2564102564102564 * (((0.5 * (X[44] + X[43])) - X[82]) * (sPAR[7] * sPAR[9])));
    ACC[35]=(0.2564102564102564 * ((X[113] + (-0.5 * (X[34] + X[35]))) * (sPAR[6] * sPAR[9])));
    ACC[42]=(0.2564102564102564 * (((0.5 * (X[43] + X[42])) - X[81]) * (sPAR[7] * sPAR[9])));
    ACC[36]=(0.2564102564102564 * ((X[114] + (-0.5 * (X[35] + X[36]))) * (sPAR[6] * sPAR[9])));
    ACC[41]=(0.2564102564102564 * (((0.5 * (X[42] + X[41])) - X[80]) * (sPAR[7] * sPAR[9])));
    ACC[37]=(0.2564102564102564 * ((X[115] + (-0.5 * (X[36] + X[37]))) * (sPAR[6] * sPAR[9])));
    ACC[40]=(0.2564102564102564 * (((0.5 * (X[41] + X[40])) - X[79]) * (sPAR[7] * sPAR[9])));
    ACC[38]=(0.2564102564102564 * ((X[116] + (-0.5 * (X[37] + X[38]))) * (sPAR[6] * sPAR[9])));
    ACC[78]=(ACC[0] + (ACC[1] + (ACC[2] + (ACC[3] + (ACC[4] + (ACC[5] + (ACC[6] + (ACC[7] + (ACC[8] + (ACC[9] + (ACC[10] + (ACC[11] + (ACC[12] + (ACC[13] + (ACC[14] + (ACC[15] + (ACC[16] + (ACC[17] + (ACC[18] + (ACC[19] + (ACC[20] + (ACC[21] + (ACC[22] + (ACC[23] + (ACC[24] + (ACC[25] + (ACC[26] + (ACC[27] + (ACC[28] + (ACC[29] + (ACC[30] + (ACC[31] + (ACC[32] + (ACC[33] + (ACC[34] + (ACC[35] + (ACC[36] + (ACC[37] + ACC[38]))))))))))))))))))))))))))))))))))))));
    ACC[39]=(0.2564102564102564 * (((0.5 * (X[40] + X[39])) - X[78]) * (sPAR[7] * sPAR[9])));
    ACC[79]=(ACC[39] + (ACC[40] + (ACC[41] + (ACC[42] + (ACC[43] + (ACC[44] + (ACC[45] + (ACC[46] + (ACC[47] + (ACC[48] + (ACC[49] + (ACC[50] + (ACC[51] + (ACC[52] + (ACC[53] + (ACC[54] + (ACC[55] + (ACC[56] + (ACC[57] + (ACC[58] + (ACC[59] + (ACC[60] + (ACC[61] + (ACC[62] + (ACC[63] + (ACC[64] + (ACC[65] + (ACC[66] + (ACC[67] + (ACC[68] + (ACC[69] + (ACC[70] + (ACC[71] + (ACC[72] + (ACC[73] + (ACC[74] + (ACC[75] + (ACC[76] + ACC[77]))))))))))))))))))))))))))))))))))))));
    F[77]=(((sPAR[12] * (sPAR[4] * (310.0 - X[77]))) - ACC[77]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[0]=(((ACC[82] * (sPAR[3] * (ACC[80] - X[0]))) + ACC[0]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[1]=(((ACC[82] * (sPAR[3] * (X[0] - X[1]))) + ACC[1]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[76]=(((sPAR[12] * (sPAR[4] * (X[77] - X[76]))) - ACC[76]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[2]=(((ACC[82] * (sPAR[3] * (X[1] - X[2]))) + ACC[2]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[75]=(((sPAR[12] * (sPAR[4] * (X[76] - X[75]))) - ACC[75]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[3]=(((ACC[82] * (sPAR[3] * (X[2] - X[3]))) + ACC[3]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[74]=(((sPAR[12] * (sPAR[4] * (X[75] - X[74]))) - ACC[74]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[4]=(((ACC[82] * (sPAR[3] * (X[3] - X[4]))) + ACC[4]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[73]=(((sPAR[12] * (sPAR[4] * (X[74] - X[73]))) - ACC[73]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[5]=(((ACC[82] * (sPAR[3] * (X[4] - X[5]))) + ACC[5]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[72]=(((sPAR[12] * (sPAR[4] * (X[73] - X[72]))) - ACC[72]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[6]=(((ACC[82] * (sPAR[3] * (X[5] - X[6]))) + ACC[6]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[71]=(((sPAR[12] * (sPAR[4] * (X[72] - X[71]))) - ACC[71]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[7]=(((ACC[82] * (sPAR[3] * (X[6] - X[7]))) + ACC[7]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[70]=(((sPAR[12] * (sPAR[4] * (X[71] - X[70]))) - ACC[70]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[8]=(((ACC[82] * (sPAR[3] * (X[7] - X[8]))) + ACC[8]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[69]=(((sPAR[12] * (sPAR[4] * (X[70] - X[69]))) - ACC[69]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[9]=(((ACC[82] * (sPAR[3] * (X[8] - X[9]))) + ACC[9]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[68]=(((sPAR[12] * (sPAR[4] * (X[69] - X[68]))) - ACC[68]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[10]=(((ACC[82] * (sPAR[3] * (X[9] - X[10]))) + ACC[10]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[67]=(((sPAR[12] * (sPAR[4] * (X[68] - X[67]))) - ACC[67]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[11]=(((ACC[82] * (sPAR[3] * (X[10] - X[11]))) + ACC[11]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[66]=(((sPAR[12] * (sPAR[4] * (X[67] - X[66]))) - ACC[66]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[12]=(((ACC[82] * (sPAR[3] * (X[11] - X[12]))) + ACC[12]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[65]=(((sPAR[12] * (sPAR[4] * (X[66] - X[65]))) - ACC[65]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[13]=(((ACC[82] * (sPAR[3] * (X[12] - X[13]))) + ACC[13]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[64]=(((sPAR[12] * (sPAR[4] * (X[65] - X[64]))) - ACC[64]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[14]=(((ACC[82] * (sPAR[3] * (X[13] - X[14]))) + ACC[14]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[63]=(((sPAR[12] * (sPAR[4] * (X[64] - X[63]))) - ACC[63]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[15]=(((ACC[82] * (sPAR[3] * (X[14] - X[15]))) + ACC[15]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[62]=(((sPAR[12] * (sPAR[4] * (X[63] - X[62]))) - ACC[62]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[16]=(((ACC[82] * (sPAR[3] * (X[15] - X[16]))) + ACC[16]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[61]=(((sPAR[12] * (sPAR[4] * (X[62] - X[61]))) - ACC[61]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[17]=(((ACC[82] * (sPAR[3] * (X[16] - X[17]))) + ACC[17]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[60]=(((sPAR[12] * (sPAR[4] * (X[61] - X[60]))) - ACC[60]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[18]=(((ACC[82] * (sPAR[3] * (X[17] - X[18]))) + ACC[18]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[59]=(((sPAR[12] * (sPAR[4] * (X[60] - X[59]))) - ACC[59]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[19]=(((ACC[82] * (sPAR[3] * (X[18] - X[19]))) + ACC[19]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[97]=((39.0 * (ACC[58] - ACC[19])) / sPAR[5]);
    F[58]=(((sPAR[12] * (sPAR[4] * (X[59] - X[58]))) - ACC[58]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[98]=((39.0 * (ACC[59] - ACC[20])) / sPAR[5]);
    F[20]=(((ACC[82] * (sPAR[3] * (X[19] - X[20]))) + ACC[20]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[57]=(((sPAR[12] * (sPAR[4] * (X[58] - X[57]))) - ACC[57]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[96]=((39.0 * (ACC[57] - ACC[18])) / sPAR[5]);
    F[99]=((39.0 * (ACC[60] - ACC[21])) / sPAR[5]);
    F[21]=(((ACC[82] * (sPAR[3] * (X[20] - X[21]))) + ACC[21]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[56]=(((sPAR[12] * (sPAR[4] * (X[57] - X[56]))) - ACC[56]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[95]=((39.0 * (ACC[56] - ACC[17])) / sPAR[5]);
    F[100]=((39.0 * (ACC[61] - ACC[22])) / sPAR[5]);
    F[22]=(((ACC[82] * (sPAR[3] * (X[21] - X[22]))) + ACC[22]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[55]=(((sPAR[12] * (sPAR[4] * (X[56] - X[55]))) - ACC[55]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[94]=((39.0 * (ACC[55] - ACC[16])) / sPAR[5]);
    F[101]=((39.0 * (ACC[62] - ACC[23])) / sPAR[5]);
    F[23]=(((ACC[82] * (sPAR[3] * (X[22] - X[23]))) + ACC[23]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[54]=(((sPAR[12] * (sPAR[4] * (X[55] - X[54]))) - ACC[54]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[93]=((39.0 * (ACC[54] - ACC[15])) / sPAR[5]);
    F[102]=((39.0 * (ACC[63] - ACC[24])) / sPAR[5]);
    F[24]=(((ACC[82] * (sPAR[3] * (X[23] - X[24]))) + ACC[24]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[53]=(((sPAR[12] * (sPAR[4] * (X[54] - X[53]))) - ACC[53]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[92]=((39.0 * (ACC[53] - ACC[14])) / sPAR[5]);
    F[103]=((39.0 * (ACC[64] - ACC[25])) / sPAR[5]);
    F[25]=(((ACC[82] * (sPAR[3] * (X[24] - X[25]))) + ACC[25]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[52]=(((sPAR[12] * (sPAR[4] * (X[53] - X[52]))) - ACC[52]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[91]=((39.0 * (ACC[52] - ACC[13])) / sPAR[5]);
    F[104]=((39.0 * (ACC[65] - ACC[26])) / sPAR[5]);
    F[26]=(((ACC[82] * (sPAR[3] * (X[25] - X[26]))) + ACC[26]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[51]=(((sPAR[12] * (sPAR[4] * (X[52] - X[51]))) - ACC[51]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[90]=((39.0 * (ACC[51] - ACC[12])) / sPAR[5]);
    F[105]=((39.0 * (ACC[66] - ACC[27])) / sPAR[5]);
    F[27]=(((ACC[82] * (sPAR[3] * (X[26] - X[27]))) + ACC[27]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[50]=(((sPAR[12] * (sPAR[4] * (X[51] - X[50]))) - ACC[50]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[89]=((39.0 * (ACC[50] - ACC[11])) / sPAR[5]);
    F[106]=((39.0 * (ACC[67] - ACC[28])) / sPAR[5]);
    F[28]=(((ACC[82] * (sPAR[3] * (X[27] - X[28]))) + ACC[28]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[49]=(((sPAR[12] * (sPAR[4] * (X[50] - X[49]))) - ACC[49]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[88]=((39.0 * (ACC[49] - ACC[10])) / sPAR[5]);
    F[107]=((39.0 * (ACC[68] - ACC[29])) / sPAR[5]);
    F[29]=(((ACC[82] * (sPAR[3] * (X[28] - X[29]))) + ACC[29]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[48]=(((sPAR[12] * (sPAR[4] * (X[49] - X[48]))) - ACC[48]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[87]=((39.0 * (ACC[48] - ACC[9])) / sPAR[5]);
    F[108]=((39.0 * (ACC[69] - ACC[30])) / sPAR[5]);
    F[30]=(((ACC[82] * (sPAR[3] * (X[29] - X[30]))) + ACC[30]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[47]=(((sPAR[12] * (sPAR[4] * (X[48] - X[47]))) - ACC[47]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[86]=((39.0 * (ACC[47] - ACC[8])) / sPAR[5]);
    F[109]=((39.0 * (ACC[70] - ACC[31])) / sPAR[5]);
    F[31]=(((ACC[82] * (sPAR[3] * (X[30] - X[31]))) + ACC[31]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[46]=(((sPAR[12] * (sPAR[4] * (X[47] - X[46]))) - ACC[46]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[85]=((39.0 * (ACC[46] - ACC[7])) / sPAR[5]);
    F[110]=((39.0 * (ACC[71] - ACC[32])) / sPAR[5]);
    F[32]=(((ACC[82] * (sPAR[3] * (X[31] - X[32]))) + ACC[32]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[45]=(((sPAR[12] * (sPAR[4] * (X[46] - X[45]))) - ACC[45]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[84]=((39.0 * (ACC[45] - ACC[6])) / sPAR[5]);
    F[111]=((39.0 * (ACC[72] - ACC[33])) / sPAR[5]);
    F[33]=(((ACC[82] * (sPAR[3] * (X[32] - X[33]))) + ACC[33]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[44]=(((sPAR[12] * (sPAR[4] * (X[45] - X[44]))) - ACC[44]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[83]=((39.0 * (ACC[44] - ACC[5])) / sPAR[5]);
    F[112]=((39.0 * (ACC[73] - ACC[34])) / sPAR[5]);
    F[34]=(((ACC[82] * (sPAR[3] * (X[33] - X[34]))) + ACC[34]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[43]=(((sPAR[12] * (sPAR[4] * (X[44] - X[43]))) - ACC[43]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[82]=((39.0 * (ACC[43] - ACC[4])) / sPAR[5]);
    F[113]=((39.0 * (ACC[74] - ACC[35])) / sPAR[5]);
    F[35]=(((ACC[82] * (sPAR[3] * (X[34] - X[35]))) + ACC[35]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[42]=(((sPAR[12] * (sPAR[4] * (X[43] - X[42]))) - ACC[42]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[81]=((39.0 * (ACC[42] - ACC[3])) / sPAR[5]);
    F[114]=((39.0 * (ACC[75] - ACC[36])) / sPAR[5]);
    F[36]=(((ACC[82] * (sPAR[3] * (X[35] - X[36]))) + ACC[36]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[41]=(((sPAR[12] * (sPAR[4] * (X[42] - X[41]))) - ACC[41]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[80]=((39.0 * (ACC[41] - ACC[2])) / sPAR[5]);
    F[115]=((39.0 * (ACC[76] - ACC[37])) / sPAR[5]);
    F[37]=(((ACC[82] * (sPAR[3] * (X[36] - X[37]))) + ACC[37]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[40]=(((sPAR[12] * (sPAR[4] * (X[41] - X[40]))) - ACC[40]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[79]=((39.0 * (ACC[40] - ACC[1])) / sPAR[5]);
    F[38]=(((ACC[82] * (sPAR[3] * (X[37] - X[38]))) + ACC[38]) / (((0.2564102564102564 * sPAR[10]) * sPAR[1]) * sPAR[3]));
    F[116]=((39.0 * (ACC[77] - ACC[38])) / sPAR[5]);
    F[39]=(((sPAR[12] * (sPAR[4] * (X[40] - X[39]))) - ACC[39]) / (((0.2564102564102564 * sPAR[11]) * sPAR[2]) * sPAR[4]));
    F[78]=((39.0 * (ACC[39] - ACC[0])) / sPAR[5]);

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[0]=0.0; //QA[1]
    ACC[1]=0.0; //QA[2]
    ACC[2]=0.0; //QA[3]
    ACC[3]=0.0; //QA[4]
    ACC[4]=0.0; //QA[5]
    ACC[5]=0.0; //QA[6]
    ACC[6]=0.0; //QA[7]
    ACC[7]=0.0; //QA[8]
    ACC[8]=0.0; //QA[9]
    ACC[9]=0.0; //QA[10]
    ACC[10]=0.0; //QA[11]
    ACC[11]=0.0; //QA[12]
    ACC[12]=0.0; //QA[13]
    ACC[13]=0.0; //QA[14]
    ACC[14]=0.0; //QA[15]
    ACC[15]=0.0; //QA[16]
    ACC[16]=0.0; //QA[17]
    ACC[17]=0.0; //QA[18]
    ACC[18]=0.0; //QA[19]
    ACC[19]=0.0; //QA[20]
    ACC[20]=0.0; //QA[21]
    ACC[21]=0.0; //QA[22]
    ACC[22]=0.0; //QA[23]
    ACC[23]=0.0; //QA[24]
    ACC[24]=0.0; //QA[25]
    ACC[25]=0.0; //QA[26]
    ACC[26]=0.0; //QA[27]
    ACC[27]=0.0; //QA[28]
    ACC[28]=0.0; //QA[29]
    ACC[29]=0.0; //QA[30]
    ACC[30]=0.0; //QA[31]
    ACC[31]=0.0; //QA[32]
    ACC[32]=0.0; //QA[33]
    ACC[33]=0.0; //QA[34]
    ACC[34]=0.0; //QA[35]
    ACC[35]=0.0; //QA[36]
    ACC[36]=0.0; //QA[37]
    ACC[37]=0.0; //QA[38]
    ACC[38]=0.0; //QA[39]
    ACC[39]=0.0; //QB[1]
    ACC[40]=0.0; //QB[2]
    ACC[41]=0.0; //QB[3]
    ACC[42]=0.0; //QB[4]
    ACC[43]=0.0; //QB[5]
    ACC[44]=0.0; //QB[6]
    ACC[45]=0.0; //QB[7]
    ACC[46]=0.0; //QB[8]
    ACC[47]=0.0; //QB[9]
    ACC[48]=0.0; //QB[10]
    ACC[49]=0.0; //QB[11]
    ACC[50]=0.0; //QB[12]
    ACC[51]=0.0; //QB[13]
    ACC[52]=0.0; //QB[14]
    ACC[53]=0.0; //QB[15]
    ACC[54]=0.0; //QB[16]
    ACC[55]=0.0; //QB[17]
    ACC[56]=0.0; //QB[18]
    ACC[57]=0.0; //QB[19]
    ACC[58]=0.0; //QB[20]
    ACC[59]=0.0; //QB[21]
    ACC[60]=0.0; //QB[22]
    ACC[61]=0.0; //QB[23]
    ACC[62]=0.0; //QB[24]
    ACC[63]=0.0; //QB[25]
    ACC[64]=0.0; //QB[26]
    ACC[65]=0.0; //QB[27]
    ACC[66]=0.0; //QB[28]
    ACC[67]=0.0; //QB[29]
    ACC[68]=0.0; //QB[30]
    ACC[69]=0.0; //QB[31]
    ACC[70]=0.0; //QB[32]
    ACC[71]=0.0; //QB[33]
    ACC[72]=0.0; //QB[34]
    ACC[73]=0.0; //QB[35]
    ACC[74]=0.0; //QB[36]
    ACC[75]=0.0; //QB[37]
    ACC[76]=0.0; //QB[38]
    ACC[81]=310.0; //TB[40]
    X[77]=300.0; //TB[39]
    X[116]=300.0; //TW[39]
    sPAR[7]=10000.0; //gammaB
    sPAR[9]=0.1; //omega
    ACC[77]=(0.2564102564102564 * (((0.5 * (ACC[81] + X[77])) - X[116]) * (sPAR[7] * sPAR[9]))); //QB[39]
    ACC[78]=0.0; //QtotA
    ACC[79]=0.0; //QtotB
    ACC[80]=300.0; //TA[1]
    ACC[82]=1.0; //wA
    sPAR[0]=10.0; //L
    sPAR[1]=5e-05; //areaA
    sPAR[2]=5e-05; //areaB
    sPAR[3]=4200.0; //cpA
    sPAR[4]=4200.0; //cpB
    sPAR[5]=2000.0; //cpW
    sPAR[6]=4000.0; //gammaA
    sPAR[8]=0.2564102564102564; //l
    sPAR[10]=1000.0; //rhoA
    sPAR[11]=1000.0; //rhoB
    sPAR[12]=1.0; //wB
    sPARi[0]=40; //N
    X[0]=300.0; //TA[2]
    X[1]=300.0; //TA[3]
    X[2]=300.0; //TA[4]
    X[3]=300.0; //TA[5]
    X[4]=300.0; //TA[6]
    X[5]=300.0; //TA[7]
    X[6]=300.0; //TA[8]
    X[7]=300.0; //TA[9]
    X[8]=300.0; //TA[10]
    X[9]=300.0; //TA[11]
    X[10]=300.0; //TA[12]
    X[11]=300.0; //TA[13]
    X[12]=300.0; //TA[14]
    X[13]=300.0; //TA[15]
    X[14]=300.0; //TA[16]
    X[15]=300.0; //TA[17]
    X[16]=300.0; //TA[18]
    X[17]=300.0; //TA[19]
    X[18]=300.0; //TA[20]
    X[19]=300.0; //TA[21]
    X[20]=300.0; //TA[22]
    X[21]=300.0; //TA[23]
    X[22]=300.0; //TA[24]
    X[23]=300.0; //TA[25]
    X[24]=300.0; //TA[26]
    X[25]=300.0; //TA[27]
    X[26]=300.0; //TA[28]
    X[27]=300.0; //TA[29]
    X[28]=300.0; //TA[30]
    X[29]=300.0; //TA[31]
    X[30]=300.0; //TA[32]
    X[31]=300.0; //TA[33]
    X[32]=300.0; //TA[34]
    X[33]=300.0; //TA[35]
    X[34]=300.0; //TA[36]
    X[35]=300.0; //TA[37]
    X[36]=300.0; //TA[38]
    X[37]=300.0; //TA[39]
    X[38]=300.0; //TA[40]
    X[39]=300.0; //TB[1]
    X[40]=300.0; //TB[2]
    X[41]=300.0; //TB[3]
    X[42]=300.0; //TB[4]
    X[43]=300.0; //TB[5]
    X[44]=300.0; //TB[6]
    X[45]=300.0; //TB[7]
    X[46]=300.0; //TB[8]
    X[47]=300.0; //TB[9]
    X[48]=300.0; //TB[10]
    X[49]=300.0; //TB[11]
    X[50]=300.0; //TB[12]
    X[51]=300.0; //TB[13]
    X[52]=300.0; //TB[14]
    X[53]=300.0; //TB[15]
    X[54]=300.0; //TB[16]
    X[55]=300.0; //TB[17]
    X[56]=300.0; //TB[18]
    X[57]=300.0; //TB[19]
    X[58]=300.0; //TB[20]
    X[59]=300.0; //TB[21]
    X[60]=300.0; //TB[22]
    X[61]=300.0; //TB[23]
    X[62]=300.0; //TB[24]
    X[63]=300.0; //TB[25]
    X[64]=300.0; //TB[26]
    X[65]=300.0; //TB[27]
    X[66]=300.0; //TB[28]
    X[67]=300.0; //TB[29]
    X[68]=300.0; //TB[30]
    X[69]=300.0; //TB[31]
    X[70]=300.0; //TB[32]
    X[71]=300.0; //TB[33]
    X[72]=300.0; //TB[34]
    X[73]=300.0; //TB[35]
    X[74]=300.0; //TB[36]
    X[75]=300.0; //TB[37]
    X[76]=300.0; //TB[38]
    X[78]=300.0; //TW[1]
    X[79]=300.0; //TW[2]
    X[80]=300.0; //TW[3]
    X[81]=300.0; //TW[4]
    X[82]=300.0; //TW[5]
    X[83]=300.0; //TW[6]
    X[84]=300.0; //TW[7]
    X[85]=300.0; //TW[8]
    X[86]=300.0; //TW[9]
    X[87]=300.0; //TW[10]
    X[88]=300.0; //TW[11]
    X[89]=300.0; //TW[12]
    X[90]=300.0; //TW[13]
    X[91]=300.0; //TW[14]
    X[92]=300.0; //TW[15]
    X[93]=300.0; //TW[16]
    X[94]=300.0; //TW[17]
    X[95]=300.0; //TW[18]
    X[96]=300.0; //TW[19]
    X[97]=300.0; //TW[20]
    X[98]=300.0; //TW[21]
    X[99]=300.0; //TW[22]
    X[100]=300.0; //TW[23]
    X[101]=300.0; //TW[24]
    X[102]=300.0; //TW[25]
    X[103]=300.0; //TW[26]
    X[104]=300.0; //TW[27]
    X[105]=300.0; //TW[28]
    X[106]=300.0; //TW[29]
    X[107]=300.0; //TW[30]
    X[108]=300.0; //TW[31]
    X[109]=300.0; //TW[32]
    X[110]=300.0; //TW[33]
    X[111]=300.0; //TW[34]
    X[112]=300.0; //TW[35]
    X[113]=300.0; //TW[36]
    X[114]=300.0; //TW[37]
    X[115]=300.0; //TW[38]

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
