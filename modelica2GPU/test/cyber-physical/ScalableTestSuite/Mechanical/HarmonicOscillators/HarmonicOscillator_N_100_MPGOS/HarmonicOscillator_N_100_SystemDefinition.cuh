
#ifndef HARMONICOSCILLATOR_N_100_PERTHREAD_SYSTEMDEFINITION_H
#define HARMONICOSCILLATOR_N_100_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    F[99]=((sPAR[0] * (X[198] - X[199])) / sPAR[1]);
    F[98]=((sPAR[0] * (X[197] + ((-2.0 * X[198]) + X[199]))) / sPAR[1]);
    F[97]=((sPAR[0] * (X[196] + ((-2.0 * X[197]) + X[198]))) / sPAR[1]);
    F[96]=((sPAR[0] * (X[195] + ((-2.0 * X[196]) + X[197]))) / sPAR[1]);
    F[95]=((sPAR[0] * (X[194] + ((-2.0 * X[195]) + X[196]))) / sPAR[1]);
    F[94]=((sPAR[0] * (X[193] + ((-2.0 * X[194]) + X[195]))) / sPAR[1]);
    F[93]=((sPAR[0] * (X[192] + ((-2.0 * X[193]) + X[194]))) / sPAR[1]);
    F[92]=((sPAR[0] * (X[191] + ((-2.0 * X[192]) + X[193]))) / sPAR[1]);
    F[91]=((sPAR[0] * (X[190] + ((-2.0 * X[191]) + X[192]))) / sPAR[1]);
    F[90]=((sPAR[0] * (X[189] + ((-2.0 * X[190]) + X[191]))) / sPAR[1]);
    F[89]=((sPAR[0] * (X[188] + ((-2.0 * X[189]) + X[190]))) / sPAR[1]);
    F[88]=((sPAR[0] * (X[187] + ((-2.0 * X[188]) + X[189]))) / sPAR[1]);
    F[87]=((sPAR[0] * (X[186] + ((-2.0 * X[187]) + X[188]))) / sPAR[1]);
    F[86]=((sPAR[0] * (X[185] + ((-2.0 * X[186]) + X[187]))) / sPAR[1]);
    F[85]=((sPAR[0] * (X[184] + ((-2.0 * X[185]) + X[186]))) / sPAR[1]);
    F[84]=((sPAR[0] * (X[183] + ((-2.0 * X[184]) + X[185]))) / sPAR[1]);
    F[83]=((sPAR[0] * (X[182] + ((-2.0 * X[183]) + X[184]))) / sPAR[1]);
    F[82]=((sPAR[0] * (X[181] + ((-2.0 * X[182]) + X[183]))) / sPAR[1]);
    F[81]=((sPAR[0] * (X[180] + ((-2.0 * X[181]) + X[182]))) / sPAR[1]);
    F[80]=((sPAR[0] * (X[179] + ((-2.0 * X[180]) + X[181]))) / sPAR[1]);
    F[79]=((sPAR[0] * (X[178] + ((-2.0 * X[179]) + X[180]))) / sPAR[1]);
    F[78]=((sPAR[0] * (X[177] + ((-2.0 * X[178]) + X[179]))) / sPAR[1]);
    F[77]=((sPAR[0] * (X[176] + ((-2.0 * X[177]) + X[178]))) / sPAR[1]);
    F[76]=((sPAR[0] * (X[175] + ((-2.0 * X[176]) + X[177]))) / sPAR[1]);
    F[75]=((sPAR[0] * (X[174] + ((-2.0 * X[175]) + X[176]))) / sPAR[1]);
    F[74]=((sPAR[0] * (X[173] + ((-2.0 * X[174]) + X[175]))) / sPAR[1]);
    F[73]=((sPAR[0] * (X[172] + ((-2.0 * X[173]) + X[174]))) / sPAR[1]);
    F[72]=((sPAR[0] * (X[171] + ((-2.0 * X[172]) + X[173]))) / sPAR[1]);
    F[71]=((sPAR[0] * (X[170] + ((-2.0 * X[171]) + X[172]))) / sPAR[1]);
    F[70]=((sPAR[0] * (X[169] + ((-2.0 * X[170]) + X[171]))) / sPAR[1]);
    F[69]=((sPAR[0] * (X[168] + ((-2.0 * X[169]) + X[170]))) / sPAR[1]);
    F[68]=((sPAR[0] * (X[167] + ((-2.0 * X[168]) + X[169]))) / sPAR[1]);
    F[67]=((sPAR[0] * (X[166] + ((-2.0 * X[167]) + X[168]))) / sPAR[1]);
    F[66]=((sPAR[0] * (X[165] + ((-2.0 * X[166]) + X[167]))) / sPAR[1]);
    F[65]=((sPAR[0] * (X[164] + ((-2.0 * X[165]) + X[166]))) / sPAR[1]);
    F[64]=((sPAR[0] * (X[163] + ((-2.0 * X[164]) + X[165]))) / sPAR[1]);
    F[63]=((sPAR[0] * (X[162] + ((-2.0 * X[163]) + X[164]))) / sPAR[1]);
    F[62]=((sPAR[0] * (X[161] + ((-2.0 * X[162]) + X[163]))) / sPAR[1]);
    F[61]=((sPAR[0] * (X[160] + ((-2.0 * X[161]) + X[162]))) / sPAR[1]);
    F[60]=((sPAR[0] * (X[159] + ((-2.0 * X[160]) + X[161]))) / sPAR[1]);
    F[59]=((sPAR[0] * (X[158] + ((-2.0 * X[159]) + X[160]))) / sPAR[1]);
    F[58]=((sPAR[0] * (X[157] + ((-2.0 * X[158]) + X[159]))) / sPAR[1]);
    F[57]=((sPAR[0] * (X[156] + ((-2.0 * X[157]) + X[158]))) / sPAR[1]);
    F[56]=((sPAR[0] * (X[155] + ((-2.0 * X[156]) + X[157]))) / sPAR[1]);
    F[55]=((sPAR[0] * (X[154] + ((-2.0 * X[155]) + X[156]))) / sPAR[1]);
    F[54]=((sPAR[0] * (X[153] + ((-2.0 * X[154]) + X[155]))) / sPAR[1]);
    F[53]=((sPAR[0] * (X[152] + ((-2.0 * X[153]) + X[154]))) / sPAR[1]);
    F[52]=((sPAR[0] * (X[151] + ((-2.0 * X[152]) + X[153]))) / sPAR[1]);
    F[51]=((sPAR[0] * (X[150] + ((-2.0 * X[151]) + X[152]))) / sPAR[1]);
    F[50]=((sPAR[0] * (X[149] + ((-2.0 * X[150]) + X[151]))) / sPAR[1]);
    F[49]=((sPAR[0] * (X[148] + ((-2.0 * X[149]) + X[150]))) / sPAR[1]);
    F[48]=((sPAR[0] * (X[147] + ((-2.0 * X[148]) + X[149]))) / sPAR[1]);
    F[47]=((sPAR[0] * (X[146] + ((-2.0 * X[147]) + X[148]))) / sPAR[1]);
    F[46]=((sPAR[0] * (X[145] + ((-2.0 * X[146]) + X[147]))) / sPAR[1]);
    F[45]=((sPAR[0] * (X[144] + ((-2.0 * X[145]) + X[146]))) / sPAR[1]);
    F[44]=((sPAR[0] * (X[143] + ((-2.0 * X[144]) + X[145]))) / sPAR[1]);
    F[43]=((sPAR[0] * (X[142] + ((-2.0 * X[143]) + X[144]))) / sPAR[1]);
    F[42]=((sPAR[0] * (X[141] + ((-2.0 * X[142]) + X[143]))) / sPAR[1]);
    F[41]=((sPAR[0] * (X[140] + ((-2.0 * X[141]) + X[142]))) / sPAR[1]);
    F[40]=((sPAR[0] * (X[139] + ((-2.0 * X[140]) + X[141]))) / sPAR[1]);
    F[39]=((sPAR[0] * (X[138] + ((-2.0 * X[139]) + X[140]))) / sPAR[1]);
    F[38]=((sPAR[0] * (X[137] + ((-2.0 * X[138]) + X[139]))) / sPAR[1]);
    F[37]=((sPAR[0] * (X[136] + ((-2.0 * X[137]) + X[138]))) / sPAR[1]);
    F[36]=((sPAR[0] * (X[135] + ((-2.0 * X[136]) + X[137]))) / sPAR[1]);
    F[35]=((sPAR[0] * (X[134] + ((-2.0 * X[135]) + X[136]))) / sPAR[1]);
    F[34]=((sPAR[0] * (X[133] + ((-2.0 * X[134]) + X[135]))) / sPAR[1]);
    F[33]=((sPAR[0] * (X[132] + ((-2.0 * X[133]) + X[134]))) / sPAR[1]);
    F[32]=((sPAR[0] * (X[131] + ((-2.0 * X[132]) + X[133]))) / sPAR[1]);
    F[31]=((sPAR[0] * (X[130] + ((-2.0 * X[131]) + X[132]))) / sPAR[1]);
    F[30]=((sPAR[0] * (X[129] + ((-2.0 * X[130]) + X[131]))) / sPAR[1]);
    F[29]=((sPAR[0] * (X[128] + ((-2.0 * X[129]) + X[130]))) / sPAR[1]);
    F[28]=((sPAR[0] * (X[127] + ((-2.0 * X[128]) + X[129]))) / sPAR[1]);
    F[27]=((sPAR[0] * (X[126] + ((-2.0 * X[127]) + X[128]))) / sPAR[1]);
    F[26]=((sPAR[0] * (X[125] + ((-2.0 * X[126]) + X[127]))) / sPAR[1]);
    F[25]=((sPAR[0] * (X[124] + ((-2.0 * X[125]) + X[126]))) / sPAR[1]);
    F[24]=((sPAR[0] * (X[123] + ((-2.0 * X[124]) + X[125]))) / sPAR[1]);
    F[23]=((sPAR[0] * (X[122] + ((-2.0 * X[123]) + X[124]))) / sPAR[1]);
    F[22]=((sPAR[0] * (X[121] + ((-2.0 * X[122]) + X[123]))) / sPAR[1]);
    F[21]=((sPAR[0] * (X[120] + ((-2.0 * X[121]) + X[122]))) / sPAR[1]);
    F[20]=((sPAR[0] * (X[119] + ((-2.0 * X[120]) + X[121]))) / sPAR[1]);
    F[19]=((sPAR[0] * (X[118] + ((-2.0 * X[119]) + X[120]))) / sPAR[1]);
    F[18]=((sPAR[0] * (X[117] + ((-2.0 * X[118]) + X[119]))) / sPAR[1]);
    F[17]=((sPAR[0] * (X[116] + ((-2.0 * X[117]) + X[118]))) / sPAR[1]);
    F[16]=((sPAR[0] * (X[115] + ((-2.0 * X[116]) + X[117]))) / sPAR[1]);
    F[15]=((sPAR[0] * (X[114] + ((-2.0 * X[115]) + X[116]))) / sPAR[1]);
    F[14]=((sPAR[0] * (X[113] + ((-2.0 * X[114]) + X[115]))) / sPAR[1]);
    F[13]=((sPAR[0] * (X[112] + ((-2.0 * X[113]) + X[114]))) / sPAR[1]);
    F[12]=((sPAR[0] * (X[111] + ((-2.0 * X[112]) + X[113]))) / sPAR[1]);
    F[11]=((sPAR[0] * (X[110] + ((-2.0 * X[111]) + X[112]))) / sPAR[1]);
    F[10]=((sPAR[0] * (X[109] + ((-2.0 * X[110]) + X[111]))) / sPAR[1]);
    F[9]=((sPAR[0] * (X[108] + ((-2.0 * X[109]) + X[110]))) / sPAR[1]);
    F[8]=((sPAR[0] * (X[107] + ((-2.0 * X[108]) + X[109]))) / sPAR[1]);
    F[7]=((sPAR[0] * (X[106] + ((-2.0 * X[107]) + X[108]))) / sPAR[1]);
    F[6]=((sPAR[0] * (X[105] + ((-2.0 * X[106]) + X[107]))) / sPAR[1]);
    F[5]=((sPAR[0] * (X[104] + ((-2.0 * X[105]) + X[106]))) / sPAR[1]);
    F[4]=((sPAR[0] * (X[103] + ((-2.0 * X[104]) + X[105]))) / sPAR[1]);
    F[3]=((sPAR[0] * (X[102] + ((-2.0 * X[103]) + X[104]))) / sPAR[1]);
    F[2]=((sPAR[0] * (X[101] + ((-2.0 * X[102]) + X[103]))) / sPAR[1]);
    F[1]=((sPAR[0] * (X[100] + ((-2.0 * X[101]) + X[102]))) / sPAR[1]);
    F[0]=((sPAR[0] * (X[101] - X[100])) / sPAR[1]);
    F[199]=X[99];
    F[198]=X[98];
    F[197]=X[97];
    F[196]=X[96];
    F[195]=X[95];
    F[194]=X[94];
    F[193]=X[93];
    F[192]=X[92];
    F[191]=X[91];
    F[190]=X[90];
    F[189]=X[89];
    F[188]=X[88];
    F[187]=X[87];
    F[186]=X[86];
    F[185]=X[85];
    F[184]=X[84];
    F[183]=X[83];
    F[182]=X[82];
    F[181]=X[81];
    F[180]=X[80];
    F[179]=X[79];
    F[178]=X[78];
    F[177]=X[77];
    F[176]=X[76];
    F[175]=X[75];
    F[174]=X[74];
    F[173]=X[73];
    F[172]=X[72];
    F[171]=X[71];
    F[170]=X[70];
    F[169]=X[69];
    F[168]=X[68];
    F[167]=X[67];
    F[166]=X[66];
    F[165]=X[65];
    F[164]=X[64];
    F[163]=X[63];
    F[162]=X[62];
    F[161]=X[61];
    F[160]=X[60];
    F[159]=X[59];
    F[158]=X[58];
    F[157]=X[57];
    F[156]=X[56];
    F[155]=X[55];
    F[154]=X[54];
    F[153]=X[53];
    F[152]=X[52];
    F[151]=X[51];
    F[150]=X[50];
    F[149]=X[49];
    F[148]=X[48];
    F[147]=X[47];
    F[146]=X[46];
    F[145]=X[45];
    F[144]=X[44];
    F[143]=X[43];
    F[142]=X[42];
    F[141]=X[41];
    F[140]=X[40];
    F[139]=X[39];
    F[138]=X[38];
    F[137]=X[37];
    F[136]=X[36];
    F[135]=X[35];
    F[134]=X[34];
    F[133]=X[33];
    F[132]=X[32];
    F[131]=X[31];
    F[130]=X[30];
    F[129]=X[29];
    F[128]=X[28];
    F[127]=X[27];
    F[126]=X[26];
    F[125]=X[25];
    F[124]=X[24];
    F[123]=X[23];
    F[122]=X[22];
    F[121]=X[21];
    F[120]=X[20];
    F[119]=X[19];
    F[118]=X[18];
    F[117]=X[17];
    F[116]=X[16];
    F[115]=X[15];
    F[114]=X[14];
    F[113]=X[13];
    F[112]=X[12];
    F[111]=X[11];
    F[110]=X[10];
    F[109]=X[9];
    F[108]=X[8];
    F[107]=X[7];
    F[106]=X[6];
    F[105]=X[5];
    F[104]=X[4];
    F[103]=X[3];
    F[102]=X[2];
    F[101]=X[1];
    F[100]=X[0];

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    sPAR[0]=10.0; //k
    sPAR[1]=1.0; //m
    sPARi[0]=100; //N
    X[0]=0.0; //v[1]
    X[1]=0.0; //v[2]
    X[2]=0.0; //v[3]
    X[3]=0.0; //v[4]
    X[4]=0.0; //v[5]
    X[5]=0.0; //v[6]
    X[6]=0.0; //v[7]
    X[7]=0.0; //v[8]
    X[8]=0.0; //v[9]
    X[9]=0.0; //v[10]
    X[10]=0.0; //v[11]
    X[11]=0.0; //v[12]
    X[12]=0.0; //v[13]
    X[13]=0.0; //v[14]
    X[14]=0.0; //v[15]
    X[15]=0.0; //v[16]
    X[16]=0.0; //v[17]
    X[17]=0.0; //v[18]
    X[18]=0.0; //v[19]
    X[19]=0.0; //v[20]
    X[20]=0.0; //v[21]
    X[21]=0.0; //v[22]
    X[22]=0.0; //v[23]
    X[23]=0.0; //v[24]
    X[24]=0.0; //v[25]
    X[25]=0.0; //v[26]
    X[26]=0.0; //v[27]
    X[27]=0.0; //v[28]
    X[28]=0.0; //v[29]
    X[29]=0.0; //v[30]
    X[30]=0.0; //v[31]
    X[31]=0.0; //v[32]
    X[32]=0.0; //v[33]
    X[33]=0.0; //v[34]
    X[34]=0.0; //v[35]
    X[35]=0.0; //v[36]
    X[36]=0.0; //v[37]
    X[37]=0.0; //v[38]
    X[38]=0.0; //v[39]
    X[39]=0.0; //v[40]
    X[40]=0.0; //v[41]
    X[41]=0.0; //v[42]
    X[42]=0.0; //v[43]
    X[43]=0.0; //v[44]
    X[44]=0.0; //v[45]
    X[45]=0.0; //v[46]
    X[46]=0.0; //v[47]
    X[47]=0.0; //v[48]
    X[48]=0.0; //v[49]
    X[49]=0.0; //v[50]
    X[50]=0.0; //v[51]
    X[51]=0.0; //v[52]
    X[52]=0.0; //v[53]
    X[53]=0.0; //v[54]
    X[54]=0.0; //v[55]
    X[55]=0.0; //v[56]
    X[56]=0.0; //v[57]
    X[57]=0.0; //v[58]
    X[58]=0.0; //v[59]
    X[59]=0.0; //v[60]
    X[60]=0.0; //v[61]
    X[61]=0.0; //v[62]
    X[62]=0.0; //v[63]
    X[63]=0.0; //v[64]
    X[64]=0.0; //v[65]
    X[65]=0.0; //v[66]
    X[66]=0.0; //v[67]
    X[67]=0.0; //v[68]
    X[68]=0.0; //v[69]
    X[69]=0.0; //v[70]
    X[70]=0.0; //v[71]
    X[71]=0.0; //v[72]
    X[72]=0.0; //v[73]
    X[73]=0.0; //v[74]
    X[74]=0.0; //v[75]
    X[75]=0.0; //v[76]
    X[76]=0.0; //v[77]
    X[77]=0.0; //v[78]
    X[78]=0.0; //v[79]
    X[79]=0.0; //v[80]
    X[80]=0.0; //v[81]
    X[81]=0.0; //v[82]
    X[82]=0.0; //v[83]
    X[83]=0.0; //v[84]
    X[84]=0.0; //v[85]
    X[85]=0.0; //v[86]
    X[86]=0.0; //v[87]
    X[87]=0.0; //v[88]
    X[88]=0.0; //v[89]
    X[89]=0.0; //v[90]
    X[90]=0.0; //v[91]
    X[91]=0.0; //v[92]
    X[92]=0.0; //v[93]
    X[93]=0.0; //v[94]
    X[94]=0.0; //v[95]
    X[95]=0.0; //v[96]
    X[96]=0.0; //v[97]
    X[97]=0.0; //v[98]
    X[98]=0.0; //v[99]
    X[99]=0.0; //v[100]
    X[100]=100.0; //x[1]
    X[101]=0.0; //x[2]
    X[102]=0.0; //x[3]
    X[103]=0.0; //x[4]
    X[104]=0.0; //x[5]
    X[105]=0.0; //x[6]
    X[106]=0.0; //x[7]
    X[107]=0.0; //x[8]
    X[108]=0.0; //x[9]
    X[109]=0.0; //x[10]
    X[110]=0.0; //x[11]
    X[111]=0.0; //x[12]
    X[112]=0.0; //x[13]
    X[113]=0.0; //x[14]
    X[114]=0.0; //x[15]
    X[115]=0.0; //x[16]
    X[116]=0.0; //x[17]
    X[117]=0.0; //x[18]
    X[118]=0.0; //x[19]
    X[119]=0.0; //x[20]
    X[120]=0.0; //x[21]
    X[121]=0.0; //x[22]
    X[122]=0.0; //x[23]
    X[123]=0.0; //x[24]
    X[124]=0.0; //x[25]
    X[125]=0.0; //x[26]
    X[126]=0.0; //x[27]
    X[127]=0.0; //x[28]
    X[128]=0.0; //x[29]
    X[129]=0.0; //x[30]
    X[130]=0.0; //x[31]
    X[131]=0.0; //x[32]
    X[132]=0.0; //x[33]
    X[133]=0.0; //x[34]
    X[134]=0.0; //x[35]
    X[135]=0.0; //x[36]
    X[136]=0.0; //x[37]
    X[137]=0.0; //x[38]
    X[138]=0.0; //x[39]
    X[139]=0.0; //x[40]
    X[140]=0.0; //x[41]
    X[141]=0.0; //x[42]
    X[142]=0.0; //x[43]
    X[143]=0.0; //x[44]
    X[144]=0.0; //x[45]
    X[145]=0.0; //x[46]
    X[146]=0.0; //x[47]
    X[147]=0.0; //x[48]
    X[148]=0.0; //x[49]
    X[149]=0.0; //x[50]
    X[150]=0.0; //x[51]
    X[151]=0.0; //x[52]
    X[152]=0.0; //x[53]
    X[153]=0.0; //x[54]
    X[154]=0.0; //x[55]
    X[155]=0.0; //x[56]
    X[156]=0.0; //x[57]
    X[157]=0.0; //x[58]
    X[158]=0.0; //x[59]
    X[159]=0.0; //x[60]
    X[160]=0.0; //x[61]
    X[161]=0.0; //x[62]
    X[162]=0.0; //x[63]
    X[163]=0.0; //x[64]
    X[164]=0.0; //x[65]
    X[165]=0.0; //x[66]
    X[166]=0.0; //x[67]
    X[167]=0.0; //x[68]
    X[168]=0.0; //x[69]
    X[169]=0.0; //x[70]
    X[170]=0.0; //x[71]
    X[171]=0.0; //x[72]
    X[172]=0.0; //x[73]
    X[173]=0.0; //x[74]
    X[174]=0.0; //x[75]
    X[175]=0.0; //x[76]
    X[176]=0.0; //x[77]
    X[177]=0.0; //x[78]
    X[178]=0.0; //x[79]
    X[179]=0.0; //x[80]
    X[180]=0.0; //x[81]
    X[181]=0.0; //x[82]
    X[182]=0.0; //x[83]
    X[183]=0.0; //x[84]
    X[184]=0.0; //x[85]
    X[185]=0.0; //x[86]
    X[186]=0.0; //x[87]
    X[187]=0.0; //x[88]
    X[188]=0.0; //x[89]
    X[189]=0.0; //x[90]
    X[190]=0.0; //x[91]
    X[191]=0.0; //x[92]
    X[192]=0.0; //x[93]
    X[193]=0.0; //x[94]
    X[194]=0.0; //x[95]
    X[195]=0.0; //x[96]
    X[196]=0.0; //x[97]
    X[197]=0.0; //x[98]
    X[198]=0.0; //x[99]
    X[199]=0.0; //x[100]

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
