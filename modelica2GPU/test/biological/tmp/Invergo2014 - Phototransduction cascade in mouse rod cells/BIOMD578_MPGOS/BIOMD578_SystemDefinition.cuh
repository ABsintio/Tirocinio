
#ifndef BIOMD578_PERTHREAD_SYSTEMDEFINITION_H
#define BIOMD578_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[0]=(-0.1013215859030837 + (4.405286343612334 * X[4]));
    ACC[2]=((14.02830188679245 * pow((0.1539788125153979 * X[75]),3.8)) + (0.8416981132075471 * ACC[0]));
    ACC[5]=(14.87 - ACC[2]);
    ACC[1]=(X[18] + ((2.0 * X[9]) + X[8]));
    ACC[18]=2.732372244729257e-05;
    ACC[17]=4.978706836786394e-05;
    ACC[16]=9.071795328941252e-05;
    ACC[15]=0.0001652988882215866;
    ACC[14]=0.0003011942119122022;
    ACC[13]=0.0005488116360940264;
    ACC[20]=6600.0;
    ACC[19]=0.0019;
    ACC[22]=693000.0;
    ACC[21]=0.0016;
    ACC[12]=3.85572e-05;
    ACC[11]=3.85572e-05;
    ACC[10]=3.85572e-05;
    ACC[9]=2.90097e-05;
    ACC[8]=1.94622e-05;
    ACC[7]=9.9147e-06;
    ACC[28]=0.0;
    ACC[27]=6.424750068663628e-07;
    ACC[26]=7.826947891052389e-06;
    ACC[25]=9.535174541348651e-05;
    ACC[24]=0.001161622062642334;
    ACC[23]=0.01415145376276015;
    ACC[30]=4.240495099853482e-05;
    ACC[4]=0.0;
    ACC[6]=0.001;
    ACC[31]=0.001;
    ACC[29]=0.0;
    ACC[35]=piecewise(ACC[29],(geq(T,ACC[4]) && leq(T,(ACC[4] + ACC[6]))),0.0);
    ACC[33]=0.0;
    ACC[32]=piecewise(ACC[33],leq(T,ACC[31]),0.0);
    ACC[3]=0.0;
    ACC[34]=(ACC[3] + (ACC[32] + ACC[35]));
    F[74]=((-0.011 * (X[74] * X[4])) + (0.05 * X[72]));
    F[73]=((0.00041081 * (X[72] * X[70])) + (-0.610084 * X[73]));
    F[72]=((0.011 * (X[74] * X[4])) + ((-0.05 * X[72]) + ((-0.00041081 * (X[72] * X[70])) + (0.610084 * X[73]))));
    F[69]=((4.8182e-05 * (X[67] * X[18])) + (-98.0 * X[69]));
    F[68]=((4.8182e-05 * (X[67] * X[9])) + (-98.0 * X[68]));
    F[67]=((98.0 * (X[68] + X[69])) + (-4.8182e-05 * (X[67] * (X[9] + X[18]))));
    F[65]=((4000.0 * X[59]) + (-250.0 * X[65]));
    F[63]=((3500.0 * X[62]) + (-8500.0 * X[63]));
    F[62]=((8500.0 * X[64]) + (-3900.0 * X[62]));
    F[58]=((4000.0 * X[52]) + (-250.0 * X[58]));
    F[56]=((3500.0 * X[55]) + (-8500.0 * X[56]));
    F[55]=((8500.0 * X[57]) + (-3900.0 * X[55]));
    F[51]=((4000.0 * X[45]) + (-250.0 * X[51]));
    F[49]=((3500.0 * X[48]) + (-8500.0 * X[49]));
    F[48]=((8500.0 * X[50]) + (-3900.0 * X[48]));
    F[44]=((4000.0 * X[38]) + (-250.0 * X[44]));
    F[42]=((3500.0 * X[41]) + (-8500.0 * X[42]));
    F[41]=((8500.0 * X[43]) + (-3900.0 * X[41]));
    F[37]=((4000.0 * X[31]) + (-250.0 * X[37]));
    F[35]=((3500.0 * X[34]) + (-8500.0 * X[35]));
    F[34]=((8500.0 * X[36]) + (-3900.0 * X[34]));
    F[30]=((4000.0 * X[24]) + (-250.0 * X[30]));
    F[28]=((3500.0 * X[27]) + (-8500.0 * X[28]));
    F[27]=((8500.0 * X[29]) + (-3900.0 * X[27]));
    F[24]=((0.1724 * (X[70] * X[20])) + (-4250.0 * X[24]));
    F[22]=((3500.0 * X[21]) + (-8500.0 * X[22]));
    F[21]=((8500.0 * X[23]) + (-3900.0 * X[21]));
    F[18]=((940.7 * X[17]) + ((98.0 * X[68]) + ((0.1 * X[9]) + ((-1.4983e-09 * (X[18] * X[7])) + ((-4.8182e-05 * (X[67] * X[18])) + (-0.1 * X[18]))))));
    F[17]=((0.05497 * (X[16] * X[7])) + (-940.7 * X[17]));
    F[16]=((98.0 * X[69]) + ((0.1 * X[18]) + (-0.05497 * (X[16] * X[7]))));
    F[14]=((3500.0 * X[13]) + (-8500.0 * X[14]));
    F[13]=((6.1172e-13 * X[15]) + (-3900.0 * X[13]));
    F[10]=((200.0 * X[5]) + (-2.0 * (X[10] * X[6])));
    F[9]=((21.088 * X[8]) + ((-4.8182e-05 * (X[67] * X[9])) + (-0.1 * X[9])));
    F[8]=((1.4983e-09 * (X[18] * X[7])) + (-21.088 * X[8]));
    F[7]=((200.0 * X[5]) + ((-0.05497 * (X[16] * X[7])) + ((-1.4983e-09 * (X[18] * X[7])) + (-0.05 * X[7]))));
    F[6]=((98.0 * (X[68] + X[69])) + ((0.1 * (X[18] + X[9])) + ((0.05 * X[7]) + (-2.0 * (X[10] * X[6])))));
    F[5]=((8500.0 * (X[14] + (X[22] + (X[28] + (X[35] + (X[42] + (X[49] + (X[56] + X[63])))))))) + (-200.0 * X[5]));
    F[3]=((9.37059 * ((400.0 - X[3]) * X[4])) + (-46.412 * X[3]));
    F[2]=((2.9965e-07 * pow(X[1],2.0)) + (-0.424 * X[2]));
    F[1]=((2.9965e-07 * pow(X[0],2.0)) + ((-0.424 * X[1]) + ((-5.993e-07 * pow(X[1],2.0)) + (0.424 * X[2]))));
    F[75]=((60.0 / (1.0 + pow((5.847953216374268 * X[4]),3.0))) + ((60.0 / (1.0 + pow((16.94915254237288 * X[4]),1.5))) + ((-3.19 + (-0.0021826 * ACC[1])) * X[75])));
    F[64]=((ACC[18] * (X[11] * X[60])) + ((-10700.0 * X[64]) + (400.0 * X[62])));
    F[57]=((ACC[17] * (X[11] * X[53])) + ((-10700.0 * X[57]) + (400.0 * X[55])));
    F[50]=((ACC[16] * (X[11] * X[46])) + ((-10700.0 * X[50]) + (400.0 * X[48])));
    F[43]=((ACC[15] * (X[11] * X[39])) + ((-10700.0 * X[43]) + (400.0 * X[41])));
    F[36]=((ACC[14] * (X[11] * X[32])) + ((-10700.0 * X[36]) + (400.0 * X[34])));
    F[29]=((ACC[13] * (X[11] * X[25])) + ((-10700.0 * X[29]) + (400.0 * X[27])));
    F[12]=((1.1651 * (X[26] + (X[33] + (X[40] + (X[47] + (X[54] + X[61])))))) + ((0.0238 * (X[20] + (X[25] + (X[32] + (X[39] + (X[46] + (X[53] + X[60]))))))) + ((8500.0 * X[14]) + ((ACC[20] * X[15]) + (X[12] * (-0.0007 - (ACC[19] * X[11])))))));
    F[15]=((ACC[19] * (X[12] * X[11])) + ((-6.1172e-13 * X[15]) + ((400.0 * X[13]) - (ACC[20] * X[15]))));
    F[11]=((2.0 * (X[10] * X[6])) + ((ACC[20] * X[15]) + ((ACC[22] * X[71]) + ((-0.001 * (X[11] * X[20])) + ((2200.0 * X[23]) + ((2200.0 * X[29]) + ((2200.0 * X[36]) + ((2200.0 * X[43]) + ((2200.0 * X[50]) + ((2200.0 * X[57]) + ((2200.0 * X[64]) + ((X[11] * (((-(ACC[15])) * X[39]) - (ACC[17] * X[53]))) + (((((X[11] * (((-(ACC[16])) * X[46]) - (ACC[18] * X[60]))) - (ACC[14] * (X[11] * X[32]))) - (ACC[19] * (X[12] * X[11]))) - (ACC[21] * (X[11] * X[19]))) - (ACC[13] * (X[11] * X[25])))))))))))))));
    F[61]=((ACC[12] * (X[0] * X[60])) + (-1.1911 * X[61]));
    F[54]=((ACC[11] * (X[0] * X[53])) + (-1.1911 * X[54]));
    F[47]=((ACC[10] * (X[0] * X[46])) + (-1.1911 * X[47]));
    F[40]=((ACC[9] * (X[0] * X[39])) + (-1.1911 * X[40]));
    F[33]=((ACC[8] * (X[0] * X[32])) + (-1.1911 * X[33]));
    F[0]=((1.1651 * (X[26] + (X[33] + (X[40] + (X[47] + (X[54] + X[61])))))) + ((0.026 * X[26]) + ((0.026 * X[33]) + ((0.026 * X[40]) + ((0.026 * X[47]) + ((0.026 * X[54]) + ((0.026 * X[61]) + ((-5.993e-07 * pow(X[0],2.0)) + ((0.424 * X[1]) + ((X[0] * (((-(ACC[10])) * X[46]) - (ACC[12] * X[60]))) + (((X[0] * (((-(ACC[9])) * X[39]) - (ACC[11] * X[53]))) - (ACC[7] * (X[0] * X[25]))) - (ACC[8] * (X[0] * X[32])))))))))))));
    F[26]=((ACC[7] * (X[0] * X[25])) + (-1.1911 * X[26]));
    F[60]=((250.0 * X[65]) + ((8500.0 * X[63]) + ((250.0 * X[66]) + ((0.026 * X[61]) + ((-0.0238 * X[60]) + ((2200.0 * X[64]) + ((((-(ACC[28])) * (X[70] * X[60])) - (ACC[18] * (X[11] * X[60]))) - (ACC[12] * (X[0] * X[60])))))))));
    F[66]=((ACC[28] * (X[70] * X[60])) + (-250.0 * X[66]));
    F[53]=((250.0 * X[58]) + ((8500.0 * X[56]) + ((250.0 * X[59]) + ((0.026 * X[54]) + ((-0.0238 * X[53]) + ((2200.0 * X[57]) + ((((-(ACC[27])) * (X[70] * X[53])) - (ACC[17] * (X[11] * X[53]))) - (ACC[11] * (X[0] * X[53])))))))));
    F[59]=((ACC[27] * (X[70] * X[53])) + (-4250.0 * X[59]));
    F[46]=((250.0 * X[51]) + ((8500.0 * X[49]) + ((250.0 * X[52]) + ((0.026 * X[47]) + ((-0.0238 * X[46]) + ((2200.0 * X[50]) + ((((-(ACC[26])) * (X[70] * X[46])) - (ACC[16] * (X[11] * X[46]))) - (ACC[10] * (X[0] * X[46])))))))));
    F[52]=((ACC[26] * (X[70] * X[46])) + (-4250.0 * X[52]));
    F[39]=((250.0 * X[44]) + ((8500.0 * X[42]) + ((250.0 * X[45]) + ((0.026 * X[40]) + ((-0.0238 * X[39]) + ((2200.0 * X[43]) + ((((-(ACC[25])) * (X[70] * X[39])) - (ACC[15] * (X[11] * X[39]))) - (ACC[9] * (X[0] * X[39])))))))));
    F[45]=((ACC[25] * (X[70] * X[39])) + (-4250.0 * X[45]));
    F[32]=((250.0 * X[37]) + ((8500.0 * X[35]) + ((250.0 * X[38]) + ((0.026 * X[33]) + ((-0.0238 * X[32]) + ((2200.0 * X[36]) + ((((-(ACC[24])) * (X[70] * X[32])) - (ACC[14] * (X[11] * X[32]))) - (ACC[8] * (X[0] * X[32])))))))));
    F[38]=((ACC[24] * (X[70] * X[32])) + (-4250.0 * X[38]));
    F[25]=((250.0 * X[30]) + ((8500.0 * X[28]) + ((250.0 * X[31]) + ((0.026 * X[26]) + ((-0.0238 * X[25]) + ((2200.0 * X[29]) + ((((-(ACC[23])) * (X[70] * X[25])) - (ACC[13] * (X[11] * X[25]))) - (ACC[7] * (X[0] * X[25])))))))));
    F[31]=((ACC[23] * (X[70] * X[25])) + (-4250.0 * X[31]));
    F[70]=((250.0 * (X[30] + (X[37] + (X[44] + (X[51] + (X[58] + X[65])))))) + ((-0.1724 * (X[70] * X[20])) + ((250.0 * X[24]) + ((250.0 * X[31]) + ((250.0 * X[38]) + ((250.0 * X[45]) + ((250.0 * X[52]) + ((250.0 * X[59]) + ((250.0 * X[66]) + ((-0.00041081 * (X[72] * X[70])) + ((0.610084 * X[73]) + ((X[70] * (((-(ACC[26])) * X[46]) - (ACC[28] * X[60]))) + (((X[70] * (((-(ACC[25])) * X[39]) - (ACC[27] * X[53]))) - (ACC[23] * (X[70] * X[25]))) - (ACC[24] * (X[70] * X[32])))))))))))))));
    F[4]=((-9.37059 * ((400.0 - X[3]) * X[4])) + ((46.412 * X[3]) + ((-981.3558 * (-0.023 + X[4])) + ((3180243461.158188 * pow((0.1539788125153979 * X[75]),3.8)) + (-2.0 * (((0.011 * (X[74] * X[4])) + (-0.05 * X[72])) * ACC[30]))))));
    F[19]=((0.0007 * X[12]) + ((-1e-08 * (ACC[34] * X[19])) + ((ACC[22] * X[71]) - (ACC[21] * (X[11] * X[19])))));
    F[20]=((1e-08 * (ACC[34] * X[19])) + ((8500.0 * X[22]) + ((-0.1724 * (X[70] * X[20])) + ((250.0 * X[24]) + ((-0.0238 * X[20]) + ((-0.001 * (X[11] * X[20])) + (2200.0 * X[23])))))));
    F[23]=((1e-08 * (ACC[34] * X[71])) + ((0.001 * (X[11] * X[20])) + ((-10700.0 * X[23]) + (400.0 * X[21]))));
    F[71]=((ACC[21] * (X[11] * X[19])) + ((-1e-08 * (ACC[34] * X[71])) - (ACC[22] * X[71])));

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[0]=0.0; //Ca2_frac
    ACC[1]=0.0; //E
    ACC[2]=0.0; //J
    ACC[3]=0.0; //background
    ACC[4]=0.0; //del
    ACC[5]=0.0; //deltaJ
    ACC[6]=0.0; //dur
    ACC[7]=0.0; //kA1_1
    ACC[8]=0.0; //kA1_2
    ACC[9]=0.0; //kA1_3
    ACC[10]=0.0; //kA1_4
    ACC[11]=0.0; //kA1_5
    ACC[12]=0.0; //kA1_6
    ACC[13]=0.0; //kG1_1
    ACC[14]=0.0; //kG1_2
    ACC[15]=0.0; //kG1_3
    ACC[16]=0.0; //kG1_4
    ACC[17]=0.0; //kG1_5
    ACC[18]=0.0; //kG1_6
    ACC[19]=0.0; //kG1ops
    ACC[20]=0.0; //kG2ops
    ACC[21]=0.0; //kGpre1
    ACC[22]=0.0; //kGpre2
    ACC[23]=0.0; //kRK1_1
    ACC[24]=0.0; //kRK1_2
    ACC[25]=0.0; //kRK1_3
    ACC[26]=0.0; //kRK1_4
    ACC[27]=0.0; //kRK1_5
    ACC[28]=0.0; //kRK1_6
    ACC[29]=0.0; //mag
    ACC[30]=0.0; //numConcFactor
    ACC[31]=0.0; //predur
    ACC[32]=0.0; //preflash
    ACC[33]=0.0; //premag
    ACC[34]=0.0; //stimulus
    ACC[35]=0.0; //testflash
    X[0]=1260760.0; //Arr
    X[1]=1123300.0; //Arr_di
    X[2]=891810.0; //Arr_tetra
    X[3]=19.2199; //Ca2_buff
    X[4]=0.023; //Ca2_free
    X[5]=0.0; //G_GTP
    X[6]=0.0; //Ga_GDP
    X[7]=0.0; //Ga_GTP
    X[8]=0.0; //Ga_GTP_PDE_a_Ga_GTP
    X[9]=0.0; //Ga_GTP_a_PDE_a_Ga_GTP
    X[10]=0.0; //Gbg
    X[11]=8152500.0; //Gt
    X[12]=0.0; //Ops
    X[13]=0.0; //Ops_G
    X[14]=0.0; //Ops_G_GTP
    X[15]=0.0; //Ops_Gt
    X[16]=2000000.0; //PDE
    X[17]=0.0; //PDE_Ga_GTP
    X[18]=0.0; //PDE_a_Ga_GTP
    X[19]=98152500.0; //R
    X[20]=0.0; //R0
    X[21]=0.0; //R0_G
    X[22]=0.0; //R0_G_GTP
    X[23]=0.0; //R0_Gt
    X[24]=0.0; //R0_RKpre
    X[25]=0.0; //R1
    X[26]=0.0; //R1_Arr
    X[27]=0.0; //R1_G
    X[28]=0.0; //R1_G_GTP
    X[29]=0.0; //R1_Gt
    X[30]=0.0; //R1_RKpost
    X[31]=0.0; //R1_RKpre
    X[32]=0.0; //R2
    X[33]=0.0; //R2_Arr
    X[34]=0.0; //R2_G
    X[35]=0.0; //R2_G_GTP
    X[36]=0.0; //R2_Gt
    X[37]=0.0; //R2_RKpost
    X[38]=0.0; //R2_RKpre
    X[39]=0.0; //R3
    X[40]=0.0; //R3_Arr
    X[41]=0.0; //R3_G
    X[42]=0.0; //R3_G_GTP
    X[43]=0.0; //R3_Gt
    X[44]=0.0; //R3_RKpost
    X[45]=0.0; //R3_RKpre
    X[46]=0.0; //R4
    X[47]=0.0; //R4_Arr
    X[48]=0.0; //R4_G
    X[49]=0.0; //R4_G_GTP
    X[50]=0.0; //R4_Gt
    X[51]=0.0; //R4_RKpost
    X[52]=0.0; //R4_RKpre
    X[53]=0.0; //R5
    X[54]=0.0; //R5_Arr
    X[55]=0.0; //R5_G
    X[56]=0.0; //R5_G_GTP
    X[57]=0.0; //R5_Gt
    X[58]=0.0; //R5_RKpost
    X[59]=0.0; //R5_RKpre
    X[60]=0.0; //R6
    X[61]=0.0; //R6_Arr
    X[62]=0.0; //R6_G
    X[63]=0.0; //R6_G_GTP
    X[64]=0.0; //R6_Gt
    X[65]=0.0; //R6_RKpost
    X[66]=0.0; //R6_RKpre
    X[67]=100000.0; //RGS
    X[68]=0.0; //RGS_Ga_GTP_a_PDE_a_Ga_GTP
    X[69]=0.0; //RGS_PDE_a_Ga_GTP
    X[70]=580.0; //RK
    X[71]=1847500.0; //R_Gt
    X[72]=510930.0; //RecR_Ca
    X[73]=199420.0; //RecR_Ca_RK
    X[74]=9289650.0; //RecT
    X[75]=6.4944; //cGMP

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
