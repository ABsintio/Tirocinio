
model BIOMD473 "Smallbone2013 - Yeast metabolic model with modular rate law, merged with Pritchard 2002"

    function pow
        input  Real x;
        input  Real power;
        output Real y;
        algorithm
            y := x^power;
    end pow;
    
    function piecewise
        input Real x;
        input Boolean condition;
        input Real y;
        output Real z;
        algorithm
            z := if condition then x else y;
    end piecewise;


    function max
        	input Real x;
	input Real y;
        output Real y;
    algorithm
        y :=  (x + y + abs(x - y)) / 2;
    end max;


    parameter Real FLUX_VALUE_0 = 0.164683028785161;
    parameter Real Vmax_0 = 4.94049086356688;
    parameter Real Keq_0 = 36.3062502385472;
    parameter Real Km0025_0 = 0.1;
    parameter Real Km0709_0 = 0.1;
    parameter Real Km0710_0 = 0.1;
    parameter Real KmPYR_0 = 1.81531251192736;
    parameter Real FLUX_VALUE_1 = 0.0510711821801315;
    parameter Real Vmax_1 = 1.53213546540633;
    parameter Real Keq_1 = 36.3062502385472;
    parameter Real Km0063_1 = 0.1;
    parameter Real Km0709_1 = 0.1;
    parameter Real Km0710_1 = 0.1;
    parameter Real KmPYR_1 = 1.81531251192736;
    parameter Real FLUX_VALUE_2 = 0.0487844783292279;
    parameter Real Vmax_2 = 0.487844783292558;
    parameter Real Keq_2 = 0.2;
    parameter Real Km1543_2 = 0.1;
    parameter Real Km0002_2 = 0.1;
    parameter Real Km1538_2 = 0.1;
    parameter Real FLUX_VALUE_3 = 0.0487844783292279;
    parameter Real Vmax_3 = 0.487844783292558;
    parameter Real Keq_3 = 0.2;
    parameter Real Km1543_3 = 0.1;
    parameter Real Km0004_3 = 0.1;
    parameter Real Km1538_3 = 0.1;
    parameter Real FLUX_VALUE_4 = 0.00285020348363397;
    parameter Real Vmax_4 = 0.0171012209018076;
    parameter Real Keq_4 = 2.0;
    parameter Real Km0077_4 = 0.1;
    parameter Real Km0312_4 = 0.1;
    parameter Real FLUX_VALUE_5 = 0.000272166486160745;
    parameter Real Vmax_5 = 0.00381033080625086;
    parameter Real Keq_5 = 2.0;
    parameter Real Km0082_5 = 0.1;
    parameter Real Km0380_5 = 0.1;
    parameter Real Km0529_5 = 0.1;
    parameter Real Km1331_5 = 0.1;
    parameter Real FLUX_VALUE_6 = 0.00708036974499435;
    parameter Real Vmax_6 = 0.0991251764301895;
    parameter Real Keq_6 = 34.6740984446895;
    parameter Real Km0991_6 = 0.1;
    parameter Real KmNADH_6 = 0.0867096979846952;
    parameter Real Km0118_6 = 0.1;
    parameter Real KmNAD_6 = 1.50329030201531;
    parameter Real FLUX_VALUE_7 = 4.25595995293758e-05;
    parameter Real Vmax_7 = 0.000425595995293516;
    parameter Real Keq_7 = 0.2;
    parameter Real Km0142_7 = 0.1;
    parameter Real Km0313_7 = 0.1;
    parameter Real Km0419_7 = 0.1;
    parameter Real FLUX_VALUE_8 = 4.25595995293758e-05;
    parameter Real Vmax_8 = 0.000595834393411522;
    parameter Real Keq_8 = 2.0;
    parameter Real Km0141_8 = 0.1;
    parameter Real Km1212_8 = 0.1;
    parameter Real Km0142_8 = 0.1;
    parameter Real Km1207_8 = 0.1;
    parameter Real FLUX_VALUE_9 = 0.00828407559195422;
    parameter Real Vmax_9 = 0.115977058286883;
    parameter Real Keq_9 = 1.10173867411763;
    parameter Real Km0178_9 = 0.1;
    parameter Real KmPYR_9 = 1.81531251192736;
    parameter Real Km0039_9 = 0.1;
    parameter Real KmCO2_9 = 1.0;
    parameter Real FLUX_VALUE_10 = 0.0123035933209063;
    parameter Real Vmax_10 = 0.172250306492376;
    parameter Real Keq_10 = 2.0;
    parameter Real Km0176_10 = 0.1;
    parameter Real Km0991_10 = 0.1;
    parameter Real Km0180_10 = 0.1;
    parameter Real Km0953_10 = 0.1;
    parameter Real FLUX_VALUE_11 = 0.0113621233895091;
    parameter Real Vmax_11 = 0.159069727453122;
    parameter Real Keq_11 = 3.16279468017105;
    parameter Real Km0551_11 = 0.1;
    parameter Real KmPEP_11 = 0.0632352144936527;
    parameter Real Km0349_11 = 0.1;
    parameter Real KmPHO_11 = 0.1;
    parameter Real FLUX_VALUE_12 = 0.01274208616162;
    parameter Real Vmax_12 = 0.07645251696974;
    parameter Real Keq_12 = 2.0;
    parameter Real Km0162_12 = 0.1;
    parameter Real Km0165_12 = 0.1;
    parameter Real FLUX_VALUE_13 = 0.0127420861583158;
    parameter Real Vmax_13 = 0.178389206216842;
    parameter Real Keq_13 = 2.0;
    parameter Real Km0232_13 = 0.1;
    parameter Real Km0373_13 = 0.1;
    parameter Real Km0162_13 = 0.1;
    parameter Real Km0529_13 = 0.1;
    parameter Real FLUX_VALUE_14 = 0.0123035933209063;
    parameter Real Vmax_14 = 0.0738215599254756;
    parameter Real Keq_14 = 2.0;
    parameter Real Km0835_14 = 0.1;
    parameter Real Km0454_14 = 0.1;
    parameter Real FLUX_VALUE_15 = 0.01274208616162;
    parameter Real Vmax_15 = 0.1274208616164;
    parameter Real Keq_15 = 2.0;
    parameter Real Km0010_15 = 0.1;
    parameter Real Km0291_15 = 0.1;
    parameter Real KmCO2_15 = 1.0;
    parameter Real FLUX_VALUE_16 = 0.00246329803162576;
    parameter Real Vmax_16 = 0.0246329803162152;
    parameter Real Keq_16 = 0.585769706640182;
    parameter Real Km0390_16 = 0.1;
    parameter Real KmAMP_16 = 0.292884853320091;
    parameter Real KmPHO_16 = 0.1;
    parameter Real FLUX_VALUE_17 = 8.51191990587516e-05;
    parameter Real Vmax_17 = 0.000851191990587032;
    parameter Real Keq_17 = 0.2;
    parameter Real Km0577_17 = 0.1;
    parameter Real Km0158_17 = 0.1;
    parameter Real Km0722_17 = 0.1;
    parameter Real FLUX_VALUE_18 = 0.0113621233895091;
    parameter Real Vmax_18 = 0.0681727403370092;
    parameter Real Keq_18 = 2.0;
    parameter Real Km0210_18 = 0.1;
    parameter Real Km0211_18 = 0.1;
    parameter Real FLUX_VALUE_19 = 0.0113621233895091;
    parameter Real Vmax_19 = 0.113621233895182;
    parameter Real Keq_19 = 0.2;
    parameter Real Km0349_19 = 0.1;
    parameter Real Km0210_19 = 0.1;
    parameter Real KmPHO_19 = 0.1;
    parameter Real FLUX_VALUE_20 = 2.22290041668838e-05;
    parameter Real Vmax_20 = 0.000311206058336746;
    parameter Real Keq_20 = 2.0;
    parameter Real Km0231_20 = 0.1;
    parameter Real Km1212_20 = 0.1;
    parameter Real Km1207_20 = 0.1;
    parameter Real Km1445_20 = 0.1;
    parameter Real FLUX_VALUE_21 = 0.01274208616162;
    parameter Real Vmax_21 = 0.07645251696974;
    parameter Real Keq_21 = 2.0;
    parameter Real Km0165_21 = 0.1;
    parameter Real Km0009_21 = 0.1;
    parameter Real FLUX_VALUE_22 = 0.01274208616162;
    parameter Real Vmax_22 = 0.178389206261542;
    parameter Real Keq_22 = 0.115359884738766;
    parameter Real Km0009_22 = 0.1;
    parameter Real KmNAD_22 = 1.50329030201531;
    parameter Real Km0010_22 = 0.1;
    parameter Real KmNADH_22 = 0.0867096979846952;
    parameter Real FLUX_VALUE_23 = 0.0113621233895091;
    parameter Real Vmax_23 = 0.159069727453122;
    parameter Real Keq_23 = 3.16279468017105;
    parameter Real Km0261_23 = 0.1;
    parameter Real KmPEP_23 = 0.0632352144936527;
    parameter Real Km0324_23 = 0.1;
    parameter Real KmPHO_23 = 0.1;
    parameter Real FLUX_VALUE_24 = 0.00425553005793811;
    parameter Real Vmax_24 = 0.195754382665769;
    parameter Real Keq_24 = 0.101538452966048;
    parameter Real Km0301_24 = 0.1;
    parameter Real KmATP_24 = 2.52512746499271;
    parameter Real Km0999_24 = 0.1;
    parameter Real Km0302_24 = 0.1;
    parameter Real KmADP_24 = 1.28198768168719;
    parameter Real Km0991_24 = 0.1;
    parameter Real KmPHO_24 = 0.1;
    parameter Real FLUX_VALUE_25 = 0.00284104672032285;
    parameter Real Vmax_25 = 0.0397746540845398;
    parameter Real Keq_25 = 2.0;
    parameter Real Km0306_25 = 0.1;
    parameter Real Km1212_25 = 0.1;
    parameter Real Km0322_25 = 0.1;
    parameter Real Km1207_25 = 0.1;
    parameter Real FLUX_VALUE_26 = 0.0580388007275702;
    parameter Real Vmax_26 = 0.348232804365842;
    parameter Real Keq_26 = 2.0;
    parameter Real Km0335_26 = 0.1;
    parameter Real Km0340_26 = 0.1;
    parameter Real FLUX_VALUE_27 = 0.0241171063991091;
    parameter Real Vmax_27 = 0.337639489587055;
    parameter Real Keq_27 = 2.0;
    parameter Real Km0146_27 = 0.1;
    parameter Real Km1212_27 = 0.1;
    parameter Real Km0016_27 = 0.1;
    parameter Real Km1207_27 = 0.1;
    parameter Real FLUX_VALUE_28 = 0.0241171063991091;
    parameter Real Vmax_28 = 0.337639489586358;
    parameter Real Keq_28 = 0.060691405302324;
    parameter Real KmPYR_28 = 1.81531251192736;
    parameter Real Km0146_28 = 0.1;
    parameter Real KmCO2_28 = 1.0;
    parameter Real FLUX_VALUE_29 = 0.00176686822395045;
    parameter Real Vmax_29 = 0.0247361551353126;
    parameter Real Keq_29 = 2.0;
    parameter Real Km0373_29 = 0.1;
    parameter Real Km0367_29 = 0.1;
    parameter Real Km0529_29 = 0.1;
    parameter Real FLUX_VALUE_30 = 0.00677602649271165;
    parameter Real Vmax_30 = 0.203280794782218;
    parameter Real Keq_30 = 1.01538452966048;
    parameter Real Km0373_30 = 0.1;
    parameter Real KmATP_30 = 2.52512746499271;
    parameter Real Km0445_30 = 0.1;
    parameter Real KmADP_30 = 1.28198768168719;
    parameter Real Km1101_30 = 0.1;
    parameter Real KmPHO_30 = 0.1;
    parameter Real FLUX_VALUE_31 = 0.121832060085064;
    parameter Real Vmax_31 = 1.21832060085128;
    parameter Real Keq_31 = 20.0;
    parameter Real Km0362_31 = 0.1;
    parameter Real Km0529_31 = 0.1;
    parameter Real Km0373_31 = 0.1;
    parameter Real FLUX_VALUE_32 = 0.00690841177420332;
    parameter Real Vmax_32 = 0.0967177648392158;
    parameter Real Keq_32 = 1.01538452966048;
    parameter Real KmATP_32 = 2.52512746499271;
    parameter Real Km1192_32 = 0.1;
    parameter Real KmADP_32 = 1.28198768168719;
    parameter Real Km1191_32 = 0.1;
    parameter Real FLUX_VALUE_33 = 0.00690841177420332;
    parameter Real Vmax_33 = 0.096717764838893;
    parameter Real Keq_33 = 2.0;
    parameter Real Km0145_33 = 0.1;
    parameter Real Km0991_33 = 0.1;
    parameter Real Km0180_33 = 0.1;
    parameter Real Km1182_33 = 0.1;
    parameter Real FLUX_VALUE_34 = 0.000661479376058174;
    parameter Real Vmax_34 = 0.00926071126484976;
    parameter Real Keq_34 = 2.97390749033099;
    parameter Real Km0386_34 = 0.1;
    parameter Real KmATP_34 = 2.52512746499271;
    parameter Real KmADP_34 = 1.28198768168719;
    parameter Real KmAMP_34 = 0.292884853320091;
    parameter Real FLUX_VALUE_35 = 0.00066147934932568;
    parameter Real Vmax_35 = 0.0066147934932536;
    parameter Real Keq_35 = 0.2;
    parameter Real Km1413_35 = 0.1;
    parameter Real Km0386_35 = 0.1;
    parameter Real Km1012_35 = 0.1;
    parameter Real k_36 = 0.75;
    parameter Real Keq_36 = 0.45;
    parameter Real FLUX_VALUE_36 = 7.17842452147011e-12;
    parameter Real FLUX_VALUE_37 = 0.189468372806467;
    parameter Real Vmax_37 = 2.65255721929185;
    parameter Real Keq_37 = 8.75420949328587;
    parameter Real KmAMP_37 = 0.292884853320091;
    parameter Real Km0785_37 = 0.1;
    parameter Real KmADP_37 = 1.28198768168719;
    parameter Real Km0739_37 = 0.1;
    parameter Real FLUX_VALUE_38 = 0.00425553005793811;
    parameter Real Vmax_38 = 0.0425553005793622;
    parameter Real Keq_38 = 0.2;
    parameter Real Km0299_38 = 0.1;
    parameter Real Km0403_38 = 0.1;
    parameter Real Km0725_38 = 0.1;
    parameter Real FLUX_VALUE_39 = 0.00498248241769124;
    parameter Real Vmax_39 = 0.0498248241769248;
    parameter Real Keq_39 = 0.585769706640182;
    parameter Real Km0393_39 = 0.1;
    parameter Real KmAMP_39 = 0.292884853320091;
    parameter Real Km0725_39 = 0.1;
    parameter Real FLUX_VALUE_40 = 0.00498248241769124;
    parameter Real Vmax_40 = 0.149474472530474;
    parameter Real Keq_40 = 2.0;
    parameter Real Km0785_40 = 0.1;
    parameter Real Km0849_40 = 0.1;
    parameter Real Km0973_40 = 0.1;
    parameter Real Km0393_40 = 0.1;
    parameter Real Km0739_40 = 0.1;
    parameter Real KmPHO_40 = 0.1;
    parameter Real FLUX_VALUE_41 = 0.00246329802950139;
    parameter Real Vmax_41 = 0.0344861724131967;
    parameter Real Keq_41 = 1.01538452966048;
    parameter Real Km0298_41 = 0.1;
    parameter Real KmATP_41 = 2.52512746499271;
    parameter Real Km0201_41 = 0.1;
    parameter Real KmADP_41 = 1.28198768168719;
    parameter Real FLUX_VALUE_42 = 0.0328157050385547;
    parameter Real Vmax_42 = 0.459419870541062;
    parameter Real Keq_42 = 36.3062502385472;
    parameter Real Km0779_42 = 0.1;
    parameter Real Km0955_42 = 0.1;
    parameter Real Km1003_42 = 0.1;
    parameter Real KmPYR_42 = 1.81531251192736;
    parameter Real FLUX_VALUE_43 = 0.0197235800647249;
    parameter Real Vmax_43 = 0.591707401941354;
    parameter Real Keq_43 = 0.2319762921916;
    parameter Real KmATP_43 = 2.52512746499271;
    parameter Real Km0955_43 = 0.1;
    parameter Real Km1582_43 = 0.1;
    parameter Real Km0404_43 = 0.1;
    parameter Real KmAMP_43 = 0.292884853320091;
    parameter Real Km0633_43 = 0.1;
    parameter Real Vmax_44 = 111.334973490802;
    parameter Real Ketoh_44 = 17.0;
    parameter Real Kinad_44 = 0.92;
    parameter Real Keq_44 = 14492.7536231884;
    parameter Real Knad_44 = 0.17;
    parameter Real Knadh_44 = 0.11;
    parameter Real Kinadh_44 = 0.031;
    parameter Real Kacald_44 = 1.11;
    parameter Real Kiacald_44 = 1.1;
    parameter Real Kietoh_44 = 90.0;
    parameter Real FLUX_VALUE_44 = 2.17298600141811;
    parameter Real FLUX_VALUE_45 = 0.08619625580535;
    parameter Real Vmax_45 = 1.20674758126899;
    parameter Real Keq_45 = 1.12270881888713;
    parameter Real KmAcAld_45 = 0.178140579850657;
    parameter Real Km1207_45 = 0.1;
    parameter Real Km0362_45 = 0.1;
    parameter Real Km1212_45 = 0.1;
    parameter Real FLUX_VALUE_46 = 0.029172333789626;
    parameter Real Vmax_46 = 0.408412673052549;
    parameter Real Keq_46 = 0.0647577799710077;
    parameter Real KmAcAld_46 = 0.178140579850657;
    parameter Real KmNAD_46 = 1.50329030201531;
    parameter Real Km0362_46 = 0.1;
    parameter Real KmNADH_46 = 0.0867096979846952;
    parameter Real FLUX_VALUE_47 = 0.00100595417069432;
    parameter Real Vmax_47 = 0.0140833583897285;
    parameter Real Keq_47 = 0.0747652332299264;
    parameter Real KmG6P_47 = 2.67504014044787;
    parameter Real Km1543_47 = 0.1;
    parameter Real Km0409_47 = 0.1;
    parameter Real Km1538_47 = 0.1;
    parameter Real FLUX_VALUE_48 = 0.0012209016222774;
    parameter Real Vmax_48 = 0.0170926227118672;
    parameter Real Keq_48 = 2.0;
    parameter Real Km0427_48 = 0.1;
    parameter Real Km1386_48 = 0.1;
    parameter Real Km0633_48 = 0.1;
    parameter Real Km1187_48 = 0.1;
    parameter Real FLUX_VALUE_49 = 0.00122090164306482;
    parameter Real Vmax_49 = 0.0268598361475;
    parameter Real Keq_49 = 3.63062502385472;
    parameter Real Km0515_49 = 0.1;
    parameter Real Km0999_49 = 0.1;
    parameter Real Km0427_49 = 0.1;
    parameter Real Km0991_49 = 0.1;
    parameter Real KmPYR_49 = 1.81531251192736;
    parameter Real FLUX_VALUE_50 = 0.0069084117612002;
    parameter Real Vmax_50 = 0.069084117612004;
    parameter Real Keq_50 = 0.2;
    parameter Real Km0015_50 = 0.1;
    parameter Real Km0725_50 = 0.1;
    parameter Real Km0965_50 = 0.1;
    parameter Real FLUX_VALUE_51 = 0.0069084117612002;
    parameter Real Vmax_51 = 0.207252352835613;
    parameter Real Keq_51 = 0.2319762921916;
    parameter Real KmATP_51 = 2.52512746499271;
    parameter Real Km0973_51 = 0.1;
    parameter Real Km0979_51 = 0.1;
    parameter Real Km0015_51 = 0.1;
    parameter Real KmAMP_51 = 0.292884853320091;
    parameter Real Km0633_51 = 0.1;
    parameter Real FLUX_VALUE_52 = 0.0069084117619906;
    parameter Real Vmax_52 = 0.207252352859037;
    parameter Real Keq_52 = 0.2319762921916;
    parameter Real KmATP_52 = 2.52512746499271;
    parameter Real Km0965_52 = 0.1;
    parameter Real Km1583_52 = 0.1;
    parameter Real KmAMP_52 = 0.292884853320091;
    parameter Real Km0428_52 = 0.1;
    parameter Real Km0633_52 = 0.1;
    parameter Real FLUX_VALUE_53 = 0.00437203159645897;
    parameter Real Vmax_53 = 0.201113453436838;
    parameter Real Keq_53 = 0.02319762921916;
    parameter Real KmATP_53 = 2.52512746499271;
    parameter Real Km0973_53 = 0.1;
    parameter Real Km0999_53 = 0.1;
    parameter Real KmAMP_53 = 0.292884853320091;
    parameter Real Km0633_53 = 0.1;
    parameter Real Km0969_53 = 0.1;
    parameter Real Km0991_53 = 0.1;
    parameter Real FLUX_VALUE_54 = 0.00437203158801769;
    parameter Real Vmax_54 = 0.131160947640809;
    parameter Real Keq_54 = 0.2319762921916;
    parameter Real KmATP_54 = 2.52512746499271;
    parameter Real Km0969_54 = 0.1;
    parameter Real Km1585_54 = 0.1;
    parameter Real KmAMP_54 = 0.292884853320091;
    parameter Real Km0430_54 = 0.1;
    parameter Real Km0633_54 = 0.1;
    parameter Real FLUX_VALUE_55 = 0.00475463808883757;
    parameter Real Vmax_55 = 0.066564933243752;
    parameter Real Keq_55 = 2.0;
    parameter Real Km0455_55 = 0.1;
    parameter Real Km0973_55 = 0.1;
    parameter Real Km1194_55 = 0.1;
    parameter Real KmPHO_55 = 0.1;
    parameter Real FLUX_VALUE_56 = 0.0358874035357151;
    parameter Real Vmax_56 = 0.502423649501778;
    parameter Real Keq_56 = 1.01538452966048;
    parameter Real KmATP_56 = 2.52512746499271;
    parameter Real Km0973_56 = 0.1;
    parameter Real Km0295_56 = 0.1;
    parameter Real KmADP_56 = 1.28198768168719;
    parameter Real FLUX_VALUE_57 = 0.0739498720561206;
    parameter Real Vmax_57 = 1.03529820878138;
    parameter Real Keq_57 = 2.0;
    parameter Real Km0991_57 = 0.1;
    parameter Real Km1271_57 = 0.1;
    parameter Real Km0180_57 = 0.1;
    parameter Real Km0973_57 = 0.1;
    parameter Real FLUX_VALUE_58 = 0.0358874035357151;
    parameter Real Vmax_58 = 0.789522877785464;
    parameter Real Keq_58 = 0.2;
    parameter Real Km0295_58 = 0.1;
    parameter Real Km1212_58 = 0.1;
    parameter Real Km0978_58 = 0.1;
    parameter Real Km1207_58 = 0.1;
    parameter Real KmPHO_58 = 0.1;
    parameter Real FLUX_VALUE_59 = 0.0127893746060498;
    parameter Real Vmax_59 = 0.383681238181249;
    parameter Real Keq_59 = 0.2319762921916;
    parameter Real KmATP_59 = 2.52512746499271;
    parameter Real Km0973_59 = 0.1;
    parameter Real Km1587_59 = 0.1;
    parameter Real KmAMP_59 = 0.292884853320091;
    parameter Real Km0432_59 = 0.1;
    parameter Real Km0633_59 = 0.1;
    parameter Real FLUX_VALUE_60 = 0.00285020348363397;
    parameter Real Vmax_60 = 0.039902848770934;
    parameter Real Keq_60 = 0.0792039224841972;
    parameter Real KmATP_60 = 2.52512746499271;
    parameter Real Km1386_60 = 0.1;
    parameter Real Km0326_60 = 0.1;
    parameter Real Km0633_60 = 0.1;
    parameter Real FLUX_VALUE_61 = 3.29212520688142;
    parameter Real Vmax_61 = 32.9212520686871;
    parameter Real Keq_61 = 39.3939427197843;
    parameter Real KmADP_61 = 1.28198768168719;
    parameter Real KmPHO_61 = 0.1;
    parameter Real KmATP_61 = 2.52512746499271;
    parameter Real k_62 = 0.658333333333335;
    parameter Real FLUX_VALUE_62 = 1.66237558111758;
    parameter Real FLUX_VALUE_63 = 0.000293102373430305;
    parameter Real Vmax_63 = 0.00410343322802854;
    parameter Real Keq_63 = 2.0;
    parameter Real Km0262_63 = 0.1;
    parameter Real Km1212_63 = 0.1;
    parameter Real Km0122_63 = 0.1;
    parameter Real Km1207_63 = 0.1;
    parameter Real FLUX_VALUE_64 = 0.000290694961726454;
    parameter Real Vmax_64 = 0.00639528915798398;
    parameter Real Keq_64 = 2.0;
    parameter Real Km1207_64 = 0.1;
    parameter Real Km1578_64 = 0.1;
    parameter Real KmCO2_64 = 1.0;
    parameter Real Km1212_64 = 0.1;
    parameter Real Km1579_64 = 0.1;
    parameter Real FLUX_VALUE_65 = 0.000290694961726454;
    parameter Real Vmax_65 = 0.0063952891579488;
    parameter Real Keq_65 = 0.115359884738766;
    parameter Real Km0297_65 = 0.1;
    parameter Real KmNAD_65 = 1.50329030201531;
    parameter Real Km0209_65 = 0.1;
    parameter Real KmCO2_65 = 1.0;
    parameter Real KmNADH_65 = 0.0867096979846952;
    parameter Real FLUX_VALUE_66 = 0.000290694961726454;
    parameter Real Vmax_66 = 0.00406972946417071;
    parameter Real Keq_66 = 2.0;
    parameter Real Km0209_66 = 0.1;
    parameter Real Km1212_66 = 0.1;
    parameter Real Km0296_66 = 0.1;
    parameter Real Km1207_66 = 0.1;
    parameter Real FLUX_VALUE_67 = 0.000290694961726454;
    parameter Real Vmax_67 = 0.00406972946417071;
    parameter Real Keq_67 = 2.0;
    parameter Real Km1212_67 = 0.1;
    parameter Real Km1579_67 = 0.1;
    parameter Real Km1207_67 = 0.1;
    parameter Real Km1569_67 = 0.1;
    parameter Real FLUX_VALUE_68 = 0.000290694961726454;
    parameter Real Vmax_68 = 0.00639528915798398;
    parameter Real Keq_68 = 20.0;
    parameter Real Km0296_68 = 0.1;
    parameter Real Km1212_68 = 0.1;
    parameter Real Km1275_68 = 0.1;
    parameter Real Km1207_68 = 0.1;
    parameter Real Km1576_68 = 0.1;
    parameter Real FLUX_VALUE_69 = 0.000290694961726454;
    parameter Real Vmax_69 = 0.00639528915798398;
    parameter Real Keq_69 = 20.0;
    parameter Real Km1212_69 = 0.1;
    parameter Real Km1275_69 = 0.1;
    parameter Real Km1576_69 = 0.1;
    parameter Real Km1207_69 = 0.1;
    parameter Real Km1577_69 = 0.1;
    parameter Real FLUX_VALUE_70 = 0.000290694961726454;
    parameter Real Vmax_70 = 0.00639528915798398;
    parameter Real Keq_70 = 20.0;
    parameter Real Km1212_70 = 0.1;
    parameter Real Km1275_70 = 0.1;
    parameter Real Km1577_70 = 0.1;
    parameter Real Km1207_70 = 0.1;
    parameter Real Km1578_70 = 0.1;
    parameter Real FLUX_VALUE_71 = 0.000290694961726454;
    parameter Real Vmax_71 = 0.0831387590537316;
    parameter Real Keq_71 = 2000.0;
    parameter Real Km0122_71 = 0.1;
    parameter Real Km1212_71 = 0.1;
    parameter Real Km1275_71 = 0.1;
    parameter Real Km0297_71 = 0.1;
    parameter Real Km1207_71 = 0.1;
    parameter Real FLUX_VALUE_72 = 4.12702283642471e-06;
    parameter Real Vmax_72 = 2.47621370185965e-05;
    parameter Real Keq_72 = 2.0;
    parameter Real Km0700_72 = 0.1;
    parameter Real Km0657_72 = 0.1;
    parameter Real FLUX_VALUE_73 = 0.00027564863865831;
    parameter Real Vmax_73 = 0.00385908094121268;
    parameter Real Keq_73 = 2.0;
    parameter Real Km0662_73 = 0.1;
    parameter Real Km1212_73 = 0.1;
    parameter Real Km0666_73 = 0.1;
    parameter Real Km1207_73 = 0.1;
    parameter Real FLUX_VALUE_74 = 0.0116630498500378;
    parameter Real Vmax_74 = 1.09632668591107;
    parameter Real Keq_74 = 0.0515502871536916;
    parameter Real KmATP_74 = 2.52512746499271;
    parameter Real Km0445_74 = 0.1;
    parameter Real Km0999_74 = 0.1;
    parameter Real KmADP_74 = 1.28198768168719;
    parameter Real Km0455_74 = 0.1;
    parameter Real Km0991_74 = 0.1;
    parameter Real KmPHO_74 = 0.1;
    parameter Real FLUX_VALUE_75 = 0.000260820701144352;
    parameter Real Vmax_75 = 0.00365148981602186;
    parameter Real Keq_75 = 2.0;
    parameter Real Km0539_75 = 0.1;
    parameter Real Km1331_75 = 0.1;
    parameter Real Km0471_75 = 0.1;
    parameter Real Km0633_75 = 0.1;
    parameter Real FLUX_VALUE_76 = 2.22290012145366e-05;
    parameter Real Vmax_76 = 0.000311206017003025;
    parameter Real Keq_76 = 2.0;
    parameter Real Km0816_76 = 0.1;
    parameter Real Km1445_76 = 0.1;
    parameter Real Km0478_76 = 0.1;
    parameter Real Km0529_76 = 0.1;
    parameter Real FLUX_VALUE_77 = 0.0101412217464439;
    parameter Real Vmax_77 = 0.0608473304786268;
    parameter Real Keq_77 = 2.0;
    parameter Real Km0515_77 = 0.1;
    parameter Real Km1377_77 = 0.1;
    parameter Real FLUX_VALUE_78 = 0.0113621233895091;
    parameter Real Vmax_78 = 0.113621233895182;
    parameter Real Keq_78 = 0.2;
    parameter Real Km0324_78 = 0.1;
    parameter Real Km0515_78 = 0.1;
    parameter Real KmPHO_78 = 0.1;
    parameter Real FLUX_VALUE_79 = 0.0766134020848108;
    parameter Real Vmax_79 = 0.459680412508729;
    parameter Real Keq_79 = 2.0;
    parameter Real Km0516_79 = 0.1;
    parameter Real Km0940_79 = 0.1;
    parameter Real FLUX_VALUE_80 = 0.0766134020477328;
    parameter Real Vmax_80 = 1.07258762866652;
    parameter Real Keq_80 = 2.0;
    parameter Real Km0373_80 = 0.1;
    parameter Real Km1271_80 = 0.1;
    parameter Real Km0522_80 = 0.1;
    parameter Real Km0529_80 = 0.1;
    parameter Real FLUX_VALUE_81 = 0.0766134020848108;
    parameter Real Vmax_81 = 0.459680412508729;
    parameter Real Keq_81 = 2.0;
    parameter Real Km0522_81 = 0.1;
    parameter Real Km0516_81 = 0.1;
    parameter Real FLUX_VALUE_82 = 0.00202624708227366;
    parameter Real Vmax_82 = 0.0607874124684739;
    parameter Real Keq_82 = 1.01538452966048;
    parameter Real Km0419_82 = 0.1;
    parameter Real KmATP_82 = 2.52512746499271;
    parameter Real Km1559_82 = 0.1;
    parameter Real KmADP_82 = 1.28198768168719;
    parameter Real Km0539_82 = 0.1;
    parameter Real KmPHO_82 = 0.1;
    parameter Real FLUX_VALUE_83 = 0.000283730618430864;
    parameter Real Vmax_83 = 0.00283730618430728;
    parameter Real Keq_83 = 20.0;
    parameter Real Km1012_83 = 0.1;
    parameter Real Km1039_83 = 0.1;
    parameter Real Km0980_83 = 0.1;
    parameter Real FLUX_VALUE_84 = 0.0042839031237274;
    parameter Real Vmax_84 = 0.0771102562270864;
    parameter Real Keq_84 = 0.02;
    parameter Real Km0980_84 = 0.1;
    parameter Real Km0178_84 = 0.1;
    parameter Real Km0419_84 = 0.1;
    parameter Real Km0981_84 = 0.1;
    parameter Real FLUX_VALUE_85 = 0.00400017250529654;
    parameter Real Vmax_85 = 0.0560024150741031;
    parameter Real Keq_85 = 2.0;
    parameter Real Km0981_85 = 0.1;
    parameter Real Km1233_85 = 0.1;
    parameter Real Km0362_85 = 0.1;
    parameter Real Km0980_85 = 0.1;
    parameter Real FLUX_VALUE_86 = 0.000283730663529172;
    parameter Real Vmax_86 = 0.00851191990586391;
    parameter Real Keq_86 = 0.2319762921916;
    parameter Real KmATP_86 = 2.52512746499271;
    parameter Real Km0981_86 = 0.1;
    parameter Real Km1589_86 = 0.1;
    parameter Real KmAMP_86 = 0.292884853320091;
    parameter Real Km0542_86 = 0.1;
    parameter Real Km0633_86 = 0.1;
    parameter Real FLUX_VALUE_87 = 0.000293102373430305;
    parameter Real Vmax_87 = 0.093206554750874;
    parameter Real Keq_87 = 200.0;
    parameter Real Km1059_87 = 0.1;
    parameter Real Km1212_87 = 0.1;
    parameter Real Km1275_87 = 0.1;
    parameter Real Km0262_87 = 0.1;
    parameter Real Km0722_87 = 0.1;
    parameter Real Km1207_87 = 0.1;
    parameter Real FLUX_VALUE_88 = 1.44213152998562e-06;
    parameter Real Vmax_88 = 1.44213152998124e-05;
    parameter Real Keq_88 = 0.2;
    parameter Real Km0589_88 = 0.1;
    parameter Real Km0419_88 = 0.1;
    parameter Real Km0654_88 = 0.1;
    parameter Real FLUX_VALUE_89 = 0.000103174788678278;
    parameter Real Vmax_89 = 0.0014444470414912;
    parameter Real Keq_89 = 3.93939427197843;
    parameter Real KmADP_89 = 1.28198768168719;
    parameter Real Km0613_89 = 0.1;
    parameter Real KmATP_89 = 2.52512746499271;
    parameter Real Km0615_89 = 0.1;
    parameter Real FLUX_VALUE_90 = 0.000544332973675324;
    parameter Real Vmax_90 = 0.00762066163145907;
    parameter Real Keq_90 = 2.0;
    parameter Real Km0529_90 = 0.1;
    parameter Real Km1524_90 = 0.1;
    parameter Real Km0380_90 = 0.1;
    parameter Real Km0619_90 = 0.1;
    parameter Real FLUX_VALUE_91 = 1.13457877977285e-05;
    parameter Real Vmax_91 = 0.00011345787797757;
    parameter Real Keq_91 = 0.2;
    parameter Real Km1331_91 = 0.1;
    parameter Real Km0619_91 = 0.1;
    parameter Real KmPHO_91 = 0.1;
    parameter Real FLUX_VALUE_92 = 0.000154762180106816;
    parameter Real Vmax_92 = 0.00216667052149085;
    parameter Real Keq_92 = 2.0;
    parameter Real Km0625_92 = 0.1;
    parameter Real Km1212_92 = 0.1;
    parameter Real Km1207_92 = 0.1;
    parameter Real Km1487_92 = 0.1;
    parameter Real FLUX_VALUE_93 = 0.00475463808883757;
    parameter Real Vmax_93 = 0.0285278285330508;
    parameter Real Keq_93 = 2.0;
    parameter Real Km1194_93 = 0.1;
    parameter Real Km0061_93 = 0.1;
    parameter Real FLUX_VALUE_94 = 0.0241171063991091;
    parameter Real Vmax_94 = 0.144702638394309;
    parameter Real Keq_94 = 2.0;
    parameter Real Km0016_94 = 0.1;
    parameter Real Km0232_94 = 0.1;
    parameter Real FLUX_VALUE_95 = 0.00828407559195422;
    parameter Real Vmax_95 = 0.0497044535517506;
    parameter Real Keq_95 = 2.0;
    parameter Real Km0008_95 = 0.1;
    parameter Real Km0056_95 = 0.1;
    parameter Real FLUX_VALUE_96 = 0.000588956076077212;
    parameter Real Vmax_96 = 0.00824538506508194;
    parameter Real Keq_96 = 2.0;
    parameter Real Km0943_96 = 0.1;
    parameter Real Km1376_96 = 0.1;
    parameter Real Km0633_96 = 0.1;
    parameter Real Km0745_96 = 0.1;
    parameter Real FLUX_VALUE_97 = 0.0347312125856391;
    parameter Real Vmax_97 = 0.486236976198895;
    parameter Real Keq_97 = 2.0;
    parameter Real Km0645_97 = 0.1;
    parameter Real Km0743_97 = 0.1;
    parameter Real Km0644_97 = 0.1;
    parameter Real Km0739_97 = 0.1;
    parameter Real FLUX_VALUE_98 = 0.0347312125856391;
    parameter Real Vmax_98 = 0.347312125856782;
    parameter Real Keq_98 = 0.2;
    parameter Real Km0644_98 = 0.1;
    parameter Real Km0645_98 = 0.1;
    parameter Real Km1107_98 = 0.1;
    parameter Real FLUX_VALUE_99 = 0.000153320048576619;
    parameter Real Vmax_99 = 0.00153320048576238;
    parameter Real Keq_99 = 0.2;
    parameter Real Km0656_99 = 0.1;
    parameter Real Km0633_99 = 0.1;
    parameter Real Km0654_99 = 0.1;
    parameter Real Vmax_100 = 3.35999999999999;
    parameter Real Kp2g_100 = 0.04;
    parameter Real Keq_100 = 6.7;
    parameter Real Kpep_100 = 0.5;
    parameter Real FLUX_VALUE_100 = 2.30005961518428;
    parameter Real FLUX_VALUE_101 = 1.11145361985654e-05;
    parameter Real Vmax_101 = 0.0010447664026603;
    parameter Real Keq_101 = 2.0;
    parameter Real Km0595_101 = 0.1;
    parameter Real Km1101_101 = 0.1;
    parameter Real Km1212_101 = 0.1;
    parameter Real KmCO2_101 = 1.0;
    parameter Real Km0529_101 = 0.1;
    parameter Real Km1065_101 = 0.1;
    parameter Real Km1207_101 = 0.1;
    parameter Real FLUX_VALUE_102 = 1.11144810306745e-05;
    parameter Real Vmax_102 = 0.00104476121688681;
    parameter Real Keq_102 = 2.0;
    parameter Real Km1065_102 = 0.1;
    parameter Real Km1101_102 = 0.1;
    parameter Real Km1212_102 = 0.1;
    parameter Real KmCO2_102 = 1.0;
    parameter Real Km0529_102 = 0.1;
    parameter Real Km1161_102 = 0.1;
    parameter Real Km1207_102 = 0.1;
    parameter Real FLUX_VALUE_103 = 1.11144810306745e-05;
    parameter Real Vmax_103 = 0.00104476121688681;
    parameter Real Keq_103 = 2.0;
    parameter Real Km1101_103 = 0.1;
    parameter Real Km1161_103 = 0.1;
    parameter Real Km1212_103 = 0.1;
    parameter Real KmCO2_103 = 1.0;
    parameter Real Km0529_103 = 0.1;
    parameter Real Km1207_103 = 0.1;
    parameter Real Km1286_103 = 0.1;
    parameter Real FLUX_VALUE_104 = 1.11144810306745e-05;
    parameter Real Vmax_104 = 0.00104476121688681;
    parameter Real Keq_104 = 2.0;
    parameter Real Km1101_104 = 0.1;
    parameter Real Km1212_104 = 0.1;
    parameter Real Km1286_104 = 0.1;
    parameter Real KmCO2_104 = 1.0;
    parameter Real Km0529_104 = 0.1;
    parameter Real Km1207_104 = 0.1;
    parameter Real Km1449_104 = 0.1;
    parameter Real FLUX_VALUE_105 = 2.22290048783841e-05;
    parameter Real Vmax_105 = 0.409680559908238;
    parameter Real Keq_105 = 2.0;
    parameter Real Km1101_105 = 0.1;
    parameter Real Km1212_105 = 0.1;
    parameter Real Km1449_105 = 0.1;
    parameter Real KmCO2_105 = 1.0;
    parameter Real Km0529_105 = 0.1;
    parameter Real Km1084_105 = 0.1;
    parameter Real Km1207_105 = 0.1;
    parameter Real FLUX_VALUE_106 = 2.22290070597961e-05;
    parameter Real Vmax_106 = 0.00208952666362167;
    parameter Real Keq_106 = 2.0;
    parameter Real Km1084_106 = 0.1;
    parameter Real Km1101_106 = 0.1;
    parameter Real Km1212_106 = 0.1;
    parameter Real KmCO2_106 = 1.0;
    parameter Real Km0505_106 = 0.1;
    parameter Real Km0529_106 = 0.1;
    parameter Real Km1207_106 = 0.1;
    parameter Real FLUX_VALUE_107 = 0.00163287683739387;
    parameter Real Vmax_107 = 0.153490422715048;
    parameter Real Keq_107 = 2.0;
    parameter Real Km1101_107 = 0.1;
    parameter Real Km1212_107 = 0.1;
    parameter Real Km1255_107 = 0.1;
    parameter Real KmCO2_107 = 1.0;
    parameter Real Km0529_107 = 0.1;
    parameter Real Km0602_107 = 0.1;
    parameter Real Km1207_107 = 0.1;
    parameter Real FLUX_VALUE_108 = 0.00163287685017081;
    parameter Real Vmax_108 = 30.0939203486961;
    parameter Real Keq_108 = 2.0;
    parameter Real Km0373_108 = 0.1;
    parameter Real Km1101_108 = 0.1;
    parameter Real Km1212_108 = 0.1;
    parameter Real KmCO2_108 = 1.0;
    parameter Real Km0529_108 = 0.1;
    parameter Real Km1207_108 = 0.1;
    parameter Real Km1255_108 = 0.1;
    parameter Real FLUX_VALUE_109 = 0.00159953337270158;
    parameter Real Vmax_109 = 0.0479860011809812;
    parameter Real Keq_109 = 17.2431413667748;
    parameter Real KmAMP_109 = 0.292884853320091;
    parameter Real Km0602_109 = 0.1;
    parameter Real Km0633_109 = 0.1;
    parameter Real KmATP_109 = 2.52512746499271;
    parameter Real Km0529_109 = 0.1;
    parameter Real Km0595_109 = 0.1;
    parameter Real FLUX_VALUE_110 = 3.40095790139533e-11;
    parameter Real Vmax_110 = 1.02028737041523e-09;
    parameter Real Keq_110 = 0.2319762921916;
    parameter Real KmATP_110 = 2.52512746499271;
    parameter Real Km0529_110 = 0.1;
    parameter Real Km1065_110 = 0.1;
    parameter Real KmAMP_110 = 0.292884853320091;
    parameter Real Km0633_110 = 0.1;
    parameter Real Km1073_110 = 0.1;
    parameter Real FLUX_VALUE_111 = 2.22290070597961e-05;
    parameter Real Vmax_111 = 0.000666870211793481;
    parameter Real Keq_111 = 0.2319762921916;
    parameter Real KmATP_111 = 2.52512746499271;
    parameter Real Km0505_111 = 0.1;
    parameter Real Km0529_111 = 0.1;
    parameter Real KmAMP_111 = 0.292884853320091;
    parameter Real Km0633_111 = 0.1;
    parameter Real Km0816_111 = 0.1;
    parameter Real FLUX_VALUE_112 = 1.11145238477096e-05;
    parameter Real Vmax_112 = 0.000333435715430091;
    parameter Real Keq_112 = 17.2431413667748;
    parameter Real KmAMP_112 = 0.292884853320091;
    parameter Real Km0633_112 = 0.1;
    parameter Real Km1454_112 = 0.1;
    parameter Real KmATP_112 = 2.52512746499271;
    parameter Real Km0529_112 = 0.1;
    parameter Real Km1449_112 = 0.1;
    parameter Real FLUX_VALUE_113 = 3.33434646922878e-05;
    parameter Real Vmax_113 = 0.00313428568107011;
    parameter Real Keq_113 = 2.0;
    parameter Real Km0602_113 = 0.1;
    parameter Real Km1101_113 = 0.1;
    parameter Real Km1212_113 = 0.1;
    parameter Real KmCO2_113 = 1.0;
    parameter Real Km0529_113 = 0.1;
    parameter Real Km1073_113 = 0.1;
    parameter Real Km1207_113 = 0.1;
    parameter Real FLUX_VALUE_114 = 3.33435576399053e-05;
    parameter Real Vmax_114 = 0.0031342944181522;
    parameter Real Keq_114 = 2.0;
    parameter Real Km1073_114 = 0.1;
    parameter Real Km1101_114 = 0.1;
    parameter Real Km1212_114 = 0.1;
    parameter Real KmCO2_114 = 1.0;
    parameter Real Km0529_114 = 0.1;
    parameter Real Km1176_114 = 0.1;
    parameter Real Km1207_114 = 0.1;
    parameter Real FLUX_VALUE_115 = 3.33435576399053e-05;
    parameter Real Vmax_115 = 0.00313429441815219;
    parameter Real Keq_115 = 2.0;
    parameter Real Km1101_115 = 0.1;
    parameter Real Km1176_115 = 0.1;
    parameter Real Km1212_115 = 0.1;
    parameter Real KmCO2_115 = 1.0;
    parameter Real Km0529_115 = 0.1;
    parameter Real Km1207_115 = 0.1;
    parameter Real Km1302_115 = 0.1;
    parameter Real FLUX_VALUE_116 = 1.11145238477096e-05;
    parameter Real Vmax_116 = 0.0010447652416894;
    parameter Real Keq_116 = 2.0;
    parameter Real Km1101_116 = 0.1;
    parameter Real Km1212_116 = 0.1;
    parameter Real Km1302_116 = 0.1;
    parameter Real KmCO2_116 = 1.0;
    parameter Real Km0529_116 = 0.1;
    parameter Real Km1207_116 = 0.1;
    parameter Real Km1454_116 = 0.1;
    parameter Real FLUX_VALUE_117 = 0.116081031795502;
    parameter Real Vmax_117 = 10.9116169887544;
    parameter Real Keq_117 = 20.0;
    parameter Real Km0710_117 = 0.1;
    parameter Real Km1275_117 = 0.1;
    parameter Real Km0709_117 = 0.1;
    parameter Real FLUX_VALUE_118 = 0.016407852625713;
    parameter Real Vmax_118 = 0.49223557877178;
    parameter Real Keq_118 = 2.0;
    parameter Real Km0709_118 = 0.1;
    parameter Real Km1535_118 = 0.1;
    parameter Real Km0710_118 = 0.1;
    parameter Real Km1537_118 = 0.1;
    parameter Real FLUX_VALUE_119 = 0.000420781143195575;
    parameter Real Vmax_119 = 0.0126234342959288;
    parameter Real Keq_119 = 1.01538452966048;
    parameter Real KmATP_119 = 2.52512746499271;
    parameter Real Km0722_119 = 0.1;
    parameter Real Km1487_119 = 0.1;
    parameter Real Km0120_119 = 0.1;
    parameter Real KmADP_119 = 1.28198768168719;
    parameter Real KmPHO_119 = 0.1;
    parameter Real Vmax_120 = 1.57816666666667;
    parameter Real Kf16bp_120 = 0.3;
    parameter Real Keq_120 = 0.069;
    parameter Real Kdhap_120 = 2.0;
    parameter Real Kgap_120 = 2.4;
    parameter Real Kigap_120 = 10.0;
    parameter Real FLUX_VALUE_120 = 1.30887182462633;
    parameter Real FLUX_VALUE_121 = 0.0325542768625425;
    parameter Real Vmax_121 = 0.19532566117551;
    parameter Real Keq_121 = 2.0;
    parameter Real Km0725_121 = 0.1;
    parameter Real Km0066_121 = 0.1;
    parameter Real FLUX_VALUE_122 = 0.000588956076077212;
    parameter Real Vmax_122 = 0.00824538506508194;
    parameter Real Keq_122 = 2.0;
    parameter Real Km0745_122 = 0.1;
    parameter Real Km0943_122 = 0.1;
    parameter Real Km0190_122 = 0.1;
    parameter Real Km0633_122 = 0.1;
    parameter Real FLUX_VALUE_123 = 0.0580388007275702;
    parameter Real Vmax_123 = 0.812543210185245;
    parameter Real Keq_123 = 0.0747652332299264;
    parameter Real KmG6P_123 = 2.67504014044787;
    parameter Real Km1207_123 = 0.1;
    parameter Real Km0335_123 = 0.1;
    parameter Real Km1212_123 = 0.1;
    parameter Real Vmax_124 = 17.6;
    parameter Real Kg6p_124 = 1.4;
    parameter Real Keq_124 = 0.29;
    parameter Real Kf6p_124 = 0.3;
    parameter Real FLUX_VALUE_124 = 1.30887182463095;
    parameter Real FLUX_VALUE_125 = 0.234891466636016;
    parameter Real Vmax_125 = 5.16761226600326;
    parameter Real Keq_125 = 346.740984446895;
    parameter Real Km0180_125 = 0.1;
    parameter Real Km0419_125 = 0.1;
    parameter Real KmNADH_125 = 0.0867096979846952;
    parameter Real Km0991_125 = 0.1;
    parameter Real KmNAD_125 = 1.50329030201531;
    parameter Real FLUX_VALUE_126 = 0.0352715905304057;
    parameter Real Vmax_126 = 1.05814771591225;
    parameter Real Keq_126 = 1.01538452966048;
    parameter Real Km0419_126 = 0.1;
    parameter Real KmATP_126 = 2.52512746499271;
    parameter Real Km0991_126 = 0.1;
    parameter Real KmADP_126 = 1.28198768168719;
    parameter Real Km0999_126 = 0.1;
    parameter Real KmPHO_126 = 0.1;
    parameter Real FLUX_VALUE_127 = 0.00453109271757193;
    parameter Real Vmax_127 = 0.135932781527054;
    parameter Real Keq_127 = 0.2319762921916;
    parameter Real KmATP_127 = 2.52512746499271;
    parameter Real Km0999_127 = 0.1;
    parameter Real Km1590_127 = 0.1;
    parameter Real KmAMP_127 = 0.292884853320091;
    parameter Real Km0633_127 = 0.1;
    parameter Real Km0747_127 = 0.1;
    parameter Real FLUX_VALUE_128 = 0.0129742294322885;
    parameter Real Vmax_128 = 0.38922688296856;
    parameter Real Keq_128 = 0.2319762921916;
    parameter Real KmATP_128 = 2.52512746499271;
    parameter Real Km0991_128 = 0.1;
    parameter Real Km1591_128 = 0.1;
    parameter Real KmAMP_128 = 0.292884853320091;
    parameter Real Km0633_128 = 0.1;
    parameter Real Km0748_128 = 0.1;
    parameter Real Vmax_129 = 19.2192000003017;
    parameter Real Kgap_129 = 0.21;
    parameter Real Knad_129 = 0.09;
    parameter Real Kbpg_129 = 0.0098;
    parameter Real Knadh_129 = 0.06;
    parameter Real Keq_129 = 0.0533412710224736;
    parameter Real Kpho_129 = 0.0001;
    parameter Real FLUX_VALUE_129 = 2.3000596152207;
    parameter Real FLUX_VALUE_130 = 0.0930539823300854;
    parameter Real Vmax_130 = 0.930539823300708;
    parameter Real Keq_130 = 0.3;
    parameter Real Km0767_130 = 0.1;
    parameter Real KmGLY_130 = 0.15;
    parameter Real KmPHO_130 = 0.1;
    parameter Real FLUX_VALUE_131 = 0.0933261488162462;
    parameter Real Vmax_131 = 1.30656608342273;
    parameter Real Keq_131 = 3.45307079878881;
    parameter Real KmDHAP_131 = 1.00415254899644;
    parameter Real KmNADH_131 = 0.0867096979846952;
    parameter Real Km0767_131 = 0.1;
    parameter Real KmNAD_131 = 1.50329030201531;
    parameter Real FLUX_VALUE_132 = 0.000272166486160745;
    parameter Real Vmax_132 = 0.00381033080625086;
    parameter Real Keq_132 = 2.0;
    parameter Real Km0380_132 = 0.1;
    parameter Real Km0767_132 = 0.1;
    parameter Real Km0082_132 = 0.1;
    parameter Real Km0529_132 = 0.1;
    parameter Real FLUX_VALUE_133 = 0.00425553005793811;
    parameter Real Vmax_133 = 0.0595774208111671;
    parameter Real Keq_133 = 2.0;
    parameter Real Km0120_133 = 0.1;
    parameter Real Km0325_133 = 0.1;
    parameter Real Km0301_133 = 0.1;
    parameter Real Km1487_133 = 0.1;
    parameter Real FLUX_VALUE_134 = 0.0236039441855424;
    parameter Real Vmax_134 = 1.08578143252884;
    parameter Real Keq_134 = 0.115359884738766;
    parameter Real Km1003_134 = 0.1;
    parameter Real KmNAD_134 = 1.50329030201531;
    parameter Real Km1487_134 = 0.1;
    parameter Real Km0306_134 = 0.1;
    parameter Real Km0419_134 = 0.1;
    parameter Real KmCO2_134 = 1.0;
    parameter Real KmNADH_134 = 0.0867096979846952;
    parameter Real FLUX_VALUE_135 = 0.00966765286937471;
    parameter Real Vmax_135 = 0.135347140171492;
    parameter Real Keq_135 = 2.0;
    parameter Real Km0306_135 = 0.1;
    parameter Real Km1003_135 = 0.1;
    parameter Real Km1039_135 = 0.1;
    parameter Real Km1487_135 = 0.1;
    parameter Real FLUX_VALUE_136 = 0.0222900528766687;
    parameter Real Vmax_136 = 0.222900528766374;
    parameter Real Keq_136 = 0.2;
    parameter Real Km1543_136 = 0.1;
    parameter Real Km0773_136 = 0.1;
    parameter Real Km1538_136 = 0.1;
    parameter Real FLUX_VALUE_137 = 0.0124841491952836;
    parameter Real Vmax_137 = 0.374524475858294;
    parameter Real Keq_137 = 0.2319762921916;
    parameter Real KmATP_137 = 2.52512746499271;
    parameter Real Km1003_137 = 0.1;
    parameter Real Km1593_137 = 0.1;
    parameter Real KmAMP_137 = 0.292884853320091;
    parameter Real Km0633_137 = 0.1;
    parameter Real Km0757_137 = 0.1;
    parameter Real FLUX_VALUE_138 = 0.00212325112240554;
    parameter Real Vmax_138 = 0.0976695516305215;
    parameter Real Keq_138 = 0.02319762921916;
    parameter Real KmATP_138 = 2.52512746499271;
    parameter Real Km0999_138 = 0.1;
    parameter Real Km1565_138 = 0.1;
    parameter Real KmAMP_138 = 0.292884853320091;
    parameter Real Km0633_138 = 0.1;
    parameter Real Km0782_138 = 0.1;
    parameter Real Km0991_138 = 0.1;
    parameter Real FLUX_VALUE_139 = 4.25595995293758e-05;
    parameter Real Vmax_139 = 0.000766072791528529;
    parameter Real Keq_139 = 0.02;
    parameter Real Km0785_139 = 0.1;
    parameter Real Km0141_139 = 0.1;
    parameter Real Km0633_139 = 0.1;
    parameter Real Km0722_139 = 0.1;
    parameter Real FLUX_VALUE_140 = 7.2867193132727e-05;
    parameter Real Vmax_140 = 0.00102014070386398;
    parameter Real Keq_140 = 1.01538452966048;
    parameter Real KmATP_140 = 2.52512746499271;
    parameter Real Km0782_140 = 0.1;
    parameter Real KmADP_140 = 1.28198768168719;
    parameter Real Km0739_140 = 0.1;
    parameter Real FLUX_VALUE_141 = 7.28671814146884e-05;
    parameter Real Vmax_141 = 0.00102014053980128;
    parameter Real Keq_141 = 2.0;
    parameter Real Km0586_141 = 0.1;
    parameter Real Km0782_141 = 0.1;
    parameter Real Km0582_141 = 0.1;
    parameter Real Km0739_141 = 0.1;
    parameter Real Vmax_142 = 3.94500000000001;
    parameter Real Kglc_142 = 0.08;
    parameter Real Katp_142 = 0.15;
    parameter Real Keq_142 = 2000.0;
    parameter Real Kg6p_142 = 30.0;
    parameter Real Kadp_142 = 0.23;
    parameter Real FLUX_VALUE_142 = 1.48887182462075;
    parameter Real FLUX_VALUE_143 = 0.00285020348363397;
    parameter Real Vmax_143 = 0.0855061045085068;
    parameter Real Keq_143 = 0.00665395150347065;
    parameter Real Km1010_143 = 0.1;
    parameter Real KmNAD_143 = 1.50329030201531;
    parameter Real Km1006_143 = 0.1;
    parameter Real KmNADH_143 = 0.0867096979846952;
    parameter Real FLUX_VALUE_144 = 0.00285020348363397;
    parameter Real Vmax_144 = 0.0285020348363794;
    parameter Real Keq_144 = 0.2;
    parameter Real Km1011_144 = 0.1;
    parameter Real Km1010_144 = 0.1;
    parameter Real KmPHO_144 = 0.1;
    parameter Real FLUX_VALUE_145 = 0.00285020348363397;
    parameter Real Vmax_145 = 0.0399028487708512;
    parameter Real Keq_145 = 2.0;
    parameter Real Km0207_145 = 0.1;
    parameter Real Km0991_145 = 0.1;
    parameter Real Km0180_145 = 0.1;
    parameter Real Km1011_145 = 0.1;
    parameter Real FLUX_VALUE_146 = 0.00285020348363395;
    parameter Real Vmax_146 = 0.0855061045089722;
    parameter Real Keq_146 = 0.2319762921916;
    parameter Real KmATP_146 = 2.52512746499271;
    parameter Real Km1006_146 = 0.1;
    parameter Real Km1594_146 = 0.1;
    parameter Real KmAMP_146 = 0.292884853320091;
    parameter Real Km0633_146 = 0.1;
    parameter Real Km0832_146 = 0.1;
    parameter Real FLUX_VALUE_147 = 0.0123035933209063;
    parameter Real Vmax_147 = 0.0738215599254756;
    parameter Real Keq_147 = 2.0;
    parameter Real Km0454_147 = 0.1;
    parameter Real Km0836_147 = 0.1;
    parameter Real FLUX_VALUE_148 = 0.0123035933209063;
    parameter Real Vmax_148 = 0.172250306492376;
    parameter Real Keq_148 = 2.0;
    parameter Real Km0180_148 = 0.1;
    parameter Real Km0373_148 = 0.1;
    parameter Real Km0529_148 = 0.1;
    parameter Real Km0835_148 = 0.1;
    parameter Real FLUX_VALUE_149 = 0.0123035933209063;
    parameter Real Vmax_149 = 0.270679053058119;
    parameter Real Keq_149 = 0.115359884738766;
    parameter Real Km0836_149 = 0.1;
    parameter Real KmNAD_149 = 1.50329030201531;
    parameter Real Km0176_149 = 0.1;
    parameter Real KmNADH_149 = 0.0867096979846952;
    parameter Real KmCO2_149 = 1.0;
    parameter Real FLUX_VALUE_150 = 0.0358874035357151;
    parameter Real Vmax_150 = 0.502423649500023;
    parameter Real Keq_150 = 2.0;
    parameter Real Km0978_150 = 0.1;
    parameter Real Km1212_150 = 0.1;
    parameter Real Km1014_150 = 0.1;
    parameter Real Km1207_150 = 0.1;
    parameter Real FLUX_VALUE_151 = 0.0294239329923396;
    parameter Real Vmax_151 = 0.411935061894587;
    parameter Real Keq_151 = 1.01538452966048;
    parameter Real KmATP_151 = 2.52512746499271;
    parameter Real Km1014_151 = 0.1;
    parameter Real KmADP_151 = 1.28198768168719;
    parameter Real Km1238_151 = 0.1;
    parameter Real FLUX_VALUE_152 = 0.00646347054337555;
    parameter Real Vmax_152 = 0.0904885876072154;
    parameter Real Keq_152 = 2.0;
    parameter Real Km0373_152 = 0.1;
    parameter Real Km1014_152 = 0.1;
    parameter Real Km0529_152 = 0.1;
    parameter Real Km1233_152 = 0.1;
    parameter Real FLUX_VALUE_153 = 0.164683028785161;
    parameter Real Vmax_153 = 1.64683028785322;
    parameter Real Keq_153 = 0.2;
    parameter Real Km0033_153 = 0.1;
    parameter Real Km0025_153 = 0.1;
    parameter Real Km0750_153 = 0.1;
    parameter Real FLUX_VALUE_154 = 0.00176686822395045;
    parameter Real Vmax_154 = 0.0812759383017414;
    parameter Real Keq_154 = 0.2;
    parameter Real Km0218_154 = 0.1;
    parameter Real Km1212_154 = 0.1;
    parameter Real Km0028_154 = 0.1;
    parameter Real Km0529_154 = 0.1;
    parameter Real Km1207_154 = 0.1;
    parameter Real FLUX_VALUE_155 = 0.00176686822395045;
    parameter Real Vmax_155 = 0.0247361551353126;
    parameter Real Keq_155 = 2.0;
    parameter Real Km0367_155 = 0.1;
    parameter Real Km0373_155 = 0.1;
    parameter Real Km0218_155 = 0.1;
    parameter Real Km0529_155 = 0.1;
    parameter Real FLUX_VALUE_156 = 0.00285020348363397;
    parameter Real Vmax_156 = 0.0627044766399947;
    parameter Real Keq_156 = 0.2;
    parameter Real Km0312_156 = 0.1;
    parameter Real Km0999_156 = 0.1;
    parameter Real Km0403_156 = 0.1;
    parameter Real Km0550_156 = 0.1;
    parameter Real Km0991_156 = 0.1;
    parameter Real FLUX_VALUE_157 = 0.00285020348363397;
    parameter Real Vmax_157 = 0.0171012209018076;
    parameter Real Keq_157 = 2.0;
    parameter Real Km0550_157 = 0.1;
    parameter Real Km0207_157 = 0.1;
    parameter Real FLUX_VALUE_158 = 0.00212325112979508;
    parameter Real Vmax_158 = 0.0297255158169593;
    parameter Real Keq_158 = 0.115359884738766;
    parameter Real Km0849_158 = 0.1;
    parameter Real KmNAD_158 = 1.50329030201531;
    parameter Real KmNADH_158 = 0.0867096979846952;
    parameter Real Km1565_158 = 0.1;
    parameter Real FLUX_VALUE_159 = 0.0012209016222774;
    parameter Real Vmax_159 = 0.012209016222748;
    parameter Real Keq_159 = 2.0;
    parameter Real Km0076_159 = 0.1;
    parameter Real Km0086_159 = 0.1;
    parameter Real KmCO2_159 = 1.0;
    parameter Real FLUX_VALUE_160 = 0.344670057643959;
    parameter Real Vmax_160 = 3.44670057643918;
    parameter Real Keq_160 = 0.2;
    parameter Real Km0633_160 = 0.1;
    parameter Real KmPHO_160 = 0.1;
    parameter Real FLUX_VALUE_161 = 0.00710573354157207;
    parameter Real Vmax_161 = 0.0426344012494648;
    parameter Real Keq_161 = 2.0;
    parameter Real Km1365_161 = 0.1;
    parameter Real Km0849_161 = 0.1;
    parameter Real FLUX_VALUE_162 = 2.22289676445616e-05;
    parameter Real Vmax_162 = 0.000311205547023725;
    parameter Real Keq_162 = 2.0;
    parameter Real Km0089_162 = 0.1;
    parameter Real Km0478_162 = 0.1;
    parameter Real Km0619_162 = 0.1;
    parameter Real Km0897_162 = 0.1;
    parameter Real FLUX_VALUE_163 = 0.0218988485072582;
    parameter Real Vmax_163 = 0.481774667157451;
    parameter Real Keq_163 = 0.115359884738766;
    parameter Real Km0940_163 = 0.1;
    parameter Real KmNAD_163 = 1.50329030201531;
    parameter Real Km0180_163 = 0.1;
    parameter Real KmCO2_163 = 1.0;
    parameter Real KmNADH_163 = 0.0867096979846952;
    parameter Real FLUX_VALUE_164 = 0.0218988484840627;
    parameter Real Vmax_164 = 0.481774666649759;
    parameter Real Keq_164 = 2.0;
    parameter Real Km0940_164 = 0.1;
    parameter Real Km1207_164 = 0.1;
    parameter Real Km0180_164 = 0.1;
    parameter Real KmCO2_164 = 1.0;
    parameter Real Km1212_164 = 0.1;
    parameter Real FLUX_VALUE_165 = 0.0328157050442014;
    parameter Real Vmax_165 = 0.328157050442028;
    parameter Real Keq_165 = 0.2;
    parameter Real Km0940_165 = 0.1;
    parameter Real Km0779_165 = 0.1;
    parameter Real Km1458_165 = 0.1;
    parameter Real FLUX_VALUE_166 = 0.00828407558805172;
    parameter Real Vmax_166 = 0.115977058232448;
    parameter Real Keq_166 = 2.0;
    parameter Real Km0056_166 = 0.1;
    parameter Real Km0991_166 = 0.1;
    parameter Real Km0180_166 = 0.1;
    parameter Real Km1016_166 = 0.1;
    parameter Real FLUX_VALUE_167 = 0.00828407558516234;
    parameter Real Vmax_167 = 0.248522267554262;
    parameter Real Keq_167 = 0.2319762921916;
    parameter Real KmATP_167 = 2.52512746499271;
    parameter Real Km1016_167 = 0.1;
    parameter Real Km1596_167 = 0.1;
    parameter Real KmAMP_167 = 0.292884853320091;
    parameter Real Km0633_167 = 0.1;
    parameter Real Km0847_167 = 0.1;
    parameter Real FLUX_VALUE_168 = 0.000588956076077212;
    parameter Real Vmax_168 = 0.00353373645646654;
    parameter Real Keq_168 = 2.0;
    parameter Real Km0943_168 = 0.1;
    parameter Real Km1376_168 = 0.1;
    parameter Real FLUX_VALUE_169 = 0.00828407559195422;
    parameter Real Vmax_169 = 0.115977058287718;
    parameter Real Keq_169 = 2.0;
    parameter Real Km0039_169 = 0.1;
    parameter Real Km1212_169 = 0.1;
    parameter Real Km0008_169 = 0.1;
    parameter Real Km1207_169 = 0.1;
    parameter Real FLUX_VALUE_170 = 0.0525392851982949;
    parameter Real Vmax_170 = 0.735549992773958;
    parameter Real Keq_170 = 0.110173867411763;
    parameter Real Km0991_170 = 0.1;
    parameter Real KmPYR_170 = 1.81531251192736;
    parameter Real Km0180_170 = 0.1;
    parameter Real Km0955_170 = 0.1;
    parameter Real FLUX_VALUE_171 = 0.0123035933209063;
    parameter Real Vmax_171 = 0.172250306492376;
    parameter Real Keq_171 = 2.0;
    parameter Real Km0953_171 = 0.1;
    parameter Real Km1212_171 = 0.1;
    parameter Real Km0959_171 = 0.1;
    parameter Real Km1207_171 = 0.1;
    parameter Real FLUX_VALUE_172 = 0.0510711821801315;
    parameter Real Vmax_172 = 0.714996550521682;
    parameter Real Keq_172 = 2.0;
    parameter Real Km1151_172 = 0.1;
    parameter Real Km1212_172 = 0.1;
    parameter Real Km0062_172 = 0.1;
    parameter Real Km1207_172 = 0.1;
    parameter Real FLUX_VALUE_173 = 0.00400017246822682;
    parameter Real Vmax_173 = 0.0400017246822364;
    parameter Real Keq_173 = 0.2;
    parameter Real Km1045_173 = 0.1;
    parameter Real Km0178_173 = 0.1;
    parameter Real Km0419_173 = 0.1;
    parameter Real FLUX_VALUE_174 = 0.0510711821801315;
    parameter Real Vmax_174 = 0.714996550518395;
    parameter Real Keq_174 = 0.115359884738766;
    parameter Real Km0062_174 = 0.1;
    parameter Real KmNAD_174 = 1.50329030201531;
    parameter Real Km0063_174 = 0.1;
    parameter Real KmNADH_174 = 0.0867096979846952;
    parameter Real FLUX_VALUE_175 = 0.164683028785161;
    parameter Real Vmax_175 = 1.64683028785322;
    parameter Real Keq_175 = 20.0;
    parameter Real Km0750_175 = 0.1;
    parameter Real Km1151_175 = 0.1;
    parameter Real Km0033_175 = 0.1;
    parameter Real FLUX_VALUE_176 = 0.000294478036673883;
    parameter Real Vmax_176 = 0.0017668682200466;
    parameter Real Keq_176 = 2.0;
    parameter Real Km0037_176 = 0.1;
    parameter Real Km1059_176 = 0.1;
    parameter Real FLUX_VALUE_177 = 0.0127420861652554;
    parameter Real Vmax_177 = 0.178389206313151;
    parameter Real Keq_177 = 2.0;
    parameter Real Km0291_177 = 0.1;
    parameter Real Km0991_177 = 0.1;
    parameter Real Km0180_177 = 0.1;
    parameter Real Km1021_177 = 0.1;
    parameter Real FLUX_VALUE_178 = 0.0127420861621283;
    parameter Real Vmax_178 = 0.382262584863961;
    parameter Real Keq_178 = 0.2319762921916;
    parameter Real KmATP_178 = 2.52512746499271;
    parameter Real Km1021_178 = 0.1;
    parameter Real Km1598_178 = 0.1;
    parameter Real KmAMP_178 = 0.292884853320091;
    parameter Real Km0633_178 = 0.1;
    parameter Real Km1077_178 = 0.1;
    parameter Real FLUX_VALUE_179 = 0.0123035933184923;
    parameter Real Vmax_179 = 0.369107799554827;
    parameter Real Keq_179 = 0.2319762921916;
    parameter Real KmATP_179 = 2.52512746499271;
    parameter Real Km1025_179 = 0.1;
    parameter Real Km1600_179 = 0.1;
    parameter Real KmAMP_179 = 0.292884853320091;
    parameter Real Km0633_179 = 0.1;
    parameter Real Km1099_179 = 0.1;
    parameter Real FLUX_VALUE_180 = 0.0325542768625425;
    parameter Real Vmax_180 = 0.455759876073545;
    parameter Real Keq_180 = 0.115359884738766;
    parameter Real Km0066_180 = 0.1;
    parameter Real KmNAD_180 = 1.50329030201531;
    parameter Real KmNADH_180 = 0.0867096979846952;
    parameter Real Km1271_180 = 0.1;
    parameter Real FLUX_VALUE_181 = 0.0347312125856392;
    parameter Real Vmax_181 = 0.486236976198897;
    parameter Real Keq_181 = 2.0;
    parameter Real Km0573_181 = 0.1;
    parameter Real Km0785_181 = 0.1;
    parameter Real Km0633_181 = 0.1;
    parameter Real Km0743_181 = 0.1;
    parameter Real FLUX_VALUE_182 = 0.0347312125856392;
    parameter Real Vmax_182 = 0.208387275514557;
    parameter Real Keq_182 = 0.32001208082349;
    parameter Real KmF6P_182 = 0.624976405532373;
    parameter Real Km0574_182 = 0.1;
    parameter Real FLUX_VALUE_183 = 0.0109404824355924;
    parameter Real Vmax_183 = 0.0656428946135088;
    parameter Real Keq_183 = 2.0;
    parameter Real Km0304_183 = 0.1;
    parameter Real Km0120_183 = 0.1;
    parameter Real FLUX_VALUE_184 = 0.000661479358800954;
    parameter Real Vmax_184 = 0.0145525458936722;
    parameter Real Keq_184 = 0.00792039224841972;
    parameter Real KmATP_184 = 2.52512746499271;
    parameter Real Km1029_184 = 0.1;
    parameter Real Km0633_184 = 0.1;
    parameter Real KmPHO_184 = 0.1;
    parameter Real Km1416_184 = 0.1;
    parameter Real FLUX_VALUE_185 = 0.00284104672032285;
    parameter Real Vmax_185 = 0.0397746540845398;
    parameter Real Keq_185 = 2.0;
    parameter Real Km0322_185 = 0.1;
    parameter Real Km1012_185 = 0.1;
    parameter Real Km1029_185 = 0.1;
    parameter Real Km1487_185 = 0.1;
    parameter Real FLUX_VALUE_186 = 0.00217956736983773;
    parameter Real Vmax_186 = 0.0653870210950378;
    parameter Real Keq_186 = 0.2319762921916;
    parameter Real KmATP_186 = 2.52512746499271;
    parameter Real Km1029_186 = 0.1;
    parameter Real Km1602_186 = 0.1;
    parameter Real KmAMP_186 = 0.292884853320091;
    parameter Real Km0633_186 = 0.1;
    parameter Real Km1148_186 = 0.1;
    parameter Real FLUX_VALUE_187 = 7.08627601042622e-12;
    parameter Real Vmax_187 = 9.92078641462824e-11;
    parameter Real Keq_187 = 34.6740984446895;
    parameter Real Km0304_187 = 0.1;
    parameter Real KmNADH_187 = 0.0867096979846952;
    parameter Real Km0306_187 = 0.1;
    parameter Real KmNAD_187 = 1.50329030201531;
    parameter Real FLUX_VALUE_188 = 0.0109404824426787;
    parameter Real Vmax_188 = 0.153166754197004;
    parameter Real Keq_188 = 2.0;
    parameter Real Km0306_188 = 0.1;
    parameter Real Km1207_188 = 0.1;
    parameter Real Km0304_188 = 0.1;
    parameter Real Km1212_188 = 0.1;
    parameter Real FLUX_VALUE_189 = 1.44184282113713e-06;
    parameter Real Vmax_189 = 2.01857994959905e-05;
    parameter Real Keq_189 = 1.01538452966048;
    parameter Real Km0028_189 = 0.1;
    parameter Real KmATP_189 = 2.52512746499271;
    parameter Real Km0019_189 = 0.1;
    parameter Real KmADP_189 = 1.28198768168719;
    parameter Real FLUX_VALUE_190 = 0.00176542638112931;
    parameter Real Vmax_190 = 0.0247159693358207;
    parameter Real Keq_190 = 2.0;
    parameter Real Km0028_190 = 0.1;
    parameter Real Km0539_190 = 0.1;
    parameter Real Km0019_190 = 0.1;
    parameter Real Km0467_190 = 0.1;
    parameter Real FLUX_VALUE_191 = 0.00176686822823163;
    parameter Real Vmax_191 = 0.0671409926730056;
    parameter Real Keq_191 = 0.101538452966048;
    parameter Real Km0018_191 = 0.1;
    parameter Real KmATP_191 = 2.52512746499271;
    parameter Real KmADP_191 = 1.28198768168719;
    parameter Real KmCO2_191 = 1.0;
    parameter Real Km0943_191 = 0.1;
    parameter Real KmPHO_191 = 0.1;
    parameter Real FLUX_VALUE_192 = 9.028139427404e-05;
    parameter Real Vmax_192 = 0.0009028139427408;
    parameter Real Keq_192 = 0.2;
    parameter Real Km0126_192 = 0.1;
    parameter Real Km1153_192 = 0.1;
    parameter Real KmPHO_192 = 0.1;
    parameter Real FLUX_VALUE_193 = 9.02813775553284e-05;
    parameter Real Vmax_193 = 0.00054168826533146;
    parameter Real Keq_193 = 0.0747652332299264;
    parameter Real KmG6P_193 = 2.67504014044787;
    parameter Real Km0126_193 = 0.1;
    parameter Real FLUX_VALUE_194 = 0.00690841177420332;
    parameter Real Vmax_194 = 0.151985059032946;
    parameter Real Keq_194 = 0.2;
    parameter Real Km1191_194 = 0.1;
    parameter Real Km1212_194 = 0.1;
    parameter Real Km0145_194 = 0.1;
    parameter Real Km1207_194 = 0.1;
    parameter Real KmPHO_194 = 0.1;
    parameter Real FLUX_VALUE_195 = 0.00166080972545792;
    parameter Real Vmax_195 = 0.0166080972545584;
    parameter Real Keq_195 = 0.2;
    parameter Real Km0467_195 = 0.1;
    parameter Real Km0526_195 = 0.1;
    parameter Real KmPHO_195 = 0.1;
    parameter Real FLUX_VALUE_196 = 0.22922462740014;
    parameter Real Vmax_196 = 3.2091447836179;
    parameter Real Keq_196 = 1.01538452966048;
    parameter Real KmATP_196 = 2.52512746499271;
    parameter Real Km0739_196 = 0.1;
    parameter Real KmADP_196 = 1.28198768168719;
    parameter Real Km0785_196 = 0.1;
    parameter Real FLUX_VALUE_197 = 0.123044531161555;
    parameter Real Vmax_197 = 1.72262343626641;
    parameter Real Keq_197 = 1.01538452966048;
    parameter Real KmATP_197 = 2.52512746499271;
    parameter Real Km1538_197 = 0.1;
    parameter Real KmADP_197 = 1.28198768168719;
    parameter Real Km1559_197 = 0.1;
    parameter Real FLUX_VALUE_198 = 0.00246329798479173;
    parameter Real Vmax_198 = 0.0344861717870684;
    parameter Real Keq_198 = 2.0;
    parameter Real Km0841_198 = 0.1;
    parameter Real Km1233_198 = 0.1;
    parameter Real Km0362_198 = 0.1;
    parameter Real Km1012_198 = 0.1;
    parameter Real FLUX_VALUE_199 = 0.0069084117612002;
    parameter Real Vmax_199 = 0.0967177646568056;
    parameter Real Keq_199 = 2.0;
    parameter Real Km0455_199 = 0.1;
    parameter Real Km1266_199 = 0.1;
    parameter Real Km0979_199 = 0.1;
    parameter Real KmPHO_199 = 0.1;
    parameter Real FLUX_VALUE_200 = 0.00690841177420332;
    parameter Real Vmax_200 = 0.096717764838893;
    parameter Real Keq_200 = 2.0;
    parameter Real Km0991_200 = 0.1;
    parameter Real Km1182_200 = 0.1;
    parameter Real Km1192_200 = 0.1;
    parameter Real Km1266_200 = 0.1;
    parameter Real FLUX_VALUE_201 = 0.00475463808883757;
    parameter Real Vmax_201 = 0.066564933243752;
    parameter Real Keq_201 = 2.0;
    parameter Real Km1269_201 = 0.1;
    parameter Real Km1386_201 = 0.1;
    parameter Real Km0633_201 = 0.1;
    parameter Real Km1270_201 = 0.1;
    parameter Real FLUX_VALUE_202 = 0.00475463808883758;
    parameter Real Vmax_202 = 0.0475463808883516;
    parameter Real Keq_202 = 2.0;
    parameter Real Km1270_202 = 0.1;
    parameter Real KmCO2_202 = 1.0;
    parameter Real Km1545_202 = 0.1;
    parameter Real FLUX_VALUE_203 = 0.00575629338495522;
    parameter Real Vmax_203 = 0.0805881073893461;
    parameter Real Keq_203 = 2.0;
    parameter Real Km0951_203 = 0.1;
    parameter Real Km0991_203 = 0.1;
    parameter Real Km0180_203 = 0.1;
    parameter Real Km1032_203 = 0.1;
    parameter Real FLUX_VALUE_204 = 0.00575629331008426;
    parameter Real Vmax_204 = 0.172688799302723;
    parameter Real Keq_204 = 0.2319762921916;
    parameter Real KmATP_204 = 2.52512746499271;
    parameter Real Km1032_204 = 0.1;
    parameter Real Km1604_204 = 0.1;
    parameter Real KmAMP_204 = 0.292884853320091;
    parameter Real Km0633_204 = 0.1;
    parameter Real Km1314_204 = 0.1;
    parameter Real FLUX_VALUE_205 = 0.00425553005793811;
    parameter Real Vmax_205 = 0.0936216612749765;
    parameter Real Keq_205 = 0.101538452966048;
    parameter Real Km0302_205 = 0.1;
    parameter Real KmATP_205 = 2.52512746499271;
    parameter Real Km0300_205 = 0.1;
    parameter Real KmADP_205 = 1.28198768168719;
    parameter Real KmPHO_205 = 0.1;
    parameter Real FLUX_VALUE_206 = 0.000123809739802672;
    parameter Real Vmax_206 = 0.00173333635723482;
    parameter Real Keq_206 = 2.0;
    parameter Real Km1351_206 = 0.1;
    parameter Real Km1416_206 = 0.1;
    parameter Real Km1343_206 = 0.1;
    parameter Real Km1413_206 = 0.1;
    parameter Real FLUX_VALUE_207 = 9.028139427404e-05;
    parameter Real Vmax_207 = 0.00126393951983312;
    parameter Real Keq_207 = 2.0;
    parameter Real Km0471_207 = 0.1;
    parameter Real Km1153_207 = 0.1;
    parameter Real Km0089_207 = 0.1;
    parameter Real Km0526_207 = 0.1;
    parameter Real FLUX_VALUE_208 = 0.000153773416789459;
    parameter Real Vmax_208 = 0.00153773416789918;
    parameter Real Keq_208 = 2.0;
    parameter Real Km1337_208 = 0.1;
    parameter Real KmCO2_208 = 1.0;
    parameter Real Km1351_208 = 0.1;
    parameter Real FLUX_VALUE_209 = 0.000170539319634365;
    parameter Real Vmax_209 = 0.00238755047488222;
    parameter Real Keq_209 = 2.0;
    parameter Real Km0471_209 = 0.1;
    parameter Real Km1039_209 = 0.1;
    parameter Real Km0526_209 = 0.1;
    parameter Real Km1337_209 = 0.1;
    parameter Real FLUX_VALUE_210 = 0.00246329802950139;
    parameter Real Vmax_210 = 0.0541925566490612;
    parameter Real Keq_210 = 0.2;
    parameter Real Km0201_210 = 0.1;
    parameter Real Km1616_210 = 0.1;
    parameter Real Km0390_210 = 0.1;
    parameter Real Km1469_210 = 0.1;
    parameter Real Km1620_210 = 0.1;
    parameter Real FLUX_VALUE_211 = 0.0227242467860983;
    parameter Real Vmax_211 = 0.499933429296603;
    parameter Real Keq_211 = 0.642080585266171;
    parameter Real KmATP_211 = 2.52512746499271;
    parameter Real Km1271_211 = 0.1;
    parameter Real KmADP_211 = 1.28198768168719;
    parameter Real KmCO2_211 = 1.0;
    parameter Real KmPEP_211 = 0.0632352144936527;
    parameter Real Vmax_212 = 1.83333333333333;
    parameter Real gR_212 = 5.12;
    parameter Real Kf6p_212 = 0.1;
    parameter Real Katp_212 = 0.71;
    parameter Real L0_212 = 0.66;
    parameter Real Ciatp_212 = 100.0;
    parameter Real Kiatp_212 = 0.65;
    parameter Real Camp_212 = 0.0845;
    parameter Real Kamp_212 = 0.0995;
    parameter Real Cf26_212 = 0.0174;
    parameter Real Kf26_212 = 0.000682;
    parameter Real Cf16_212 = 0.397;
    parameter Real Kf16_212 = 0.111;
    parameter Real Catp_212 = 3.0;
    parameter Real FLUX_VALUE_212 = 1.30887182461986;
    parameter Real FLUX_VALUE_213 = 0.120864963713311;
    parameter Real Vmax_213 = 0.725189782279089;
    parameter Real Keq_213 = 0.0747652332299264;
    parameter Real KmG6P_213 = 2.67504014044787;
    parameter Real Km0567_213 = 0.1;
    parameter Real FLUX_VALUE_214 = 0.0580388007275702;
    parameter Real Vmax_214 = 1.27685361600309;
    parameter Real Keq_214 = 2.0;
    parameter Real Km0340_214 = 0.1;
    parameter Real Km1207_214 = 0.1;
    parameter Real KmCO2_214 = 1.0;
    parameter Real Km0577_214 = 0.1;
    parameter Real Km1212_214 = 0.1;
    parameter Real Vmax_215 = 259.220125786164;
    parameter Real Keq_215 = 3200.0;
    parameter Real Kp3g_215 = 0.53;
    parameter Real Katp_215 = 0.3;
    parameter Real Kbpg_215 = 0.003;
    parameter Real Kadp_215 = 0.2;
    parameter Real FLUX_VALUE_215 = 2.30005961520794;
    parameter Real Vmax_216 = 43.0833333333332;
    parameter Real Kp3g_216 = 1.2;
    parameter Real Keq_216 = 0.19;
    parameter Real Kp2g_216 = 0.08;
    parameter Real FLUX_VALUE_216 = 2.30005961515984;
    parameter Real FLUX_VALUE_217 = 0.000123809739802672;
    parameter Real Vmax_217 = 0.00173333635723482;
    parameter Real Keq_217 = 2.0;
    parameter Real Km1342_217 = 0.1;
    parameter Real Km1416_217 = 0.1;
    parameter Real Km1346_217 = 0.1;
    parameter Real Km1413_217 = 0.1;
    parameter Real FLUX_VALUE_218 = 0.000123809739802672;
    parameter Real Vmax_218 = 0.00173333635723482;
    parameter Real Keq_218 = 2.0;
    parameter Real Km1343_218 = 0.1;
    parameter Real Km1416_218 = 0.1;
    parameter Real Km1342_218 = 0.1;
    parameter Real Km1413_218 = 0.1;
    parameter Real FLUX_VALUE_219 = 0.0347312125856392;
    parameter Real Vmax_219 = 0.20838727551367;
    parameter Real Keq_219 = 2.0;
    parameter Real Km0574_219 = 0.1;
    parameter Real Km0573_219 = 0.1;
    parameter Real FLUX_VALUE_220 = 0.00176686822823163;
    parameter Real Vmax_220 = 0.0247361551953705;
    parameter Real Keq_220 = 1.01538452966048;
    parameter Real Km0019_220 = 0.1;
    parameter Real KmATP_220 = 2.52512746499271;
    parameter Real Km0018_220 = 0.1;
    parameter Real KmADP_220 = 1.28198768168719;
    parameter Real FLUX_VALUE_221 = 0.00425553005793811;
    parameter Real Vmax_221 = 0.127665901738241;
    parameter Real Keq_221 = 1.01538452966048;
    parameter Real KmATP_221 = 2.52512746499271;
    parameter Real Km0973_221 = 0.1;
    parameter Real Km1364_221 = 0.1;
    parameter Real Km0299_221 = 0.1;
    parameter Real KmADP_221 = 1.28198768168719;
    parameter Real KmPHO_221 = 0.1;
    parameter Real FLUX_VALUE_222 = 0.00285020348363397;
    parameter Real Vmax_222 = 0.0171012209018076;
    parameter Real Keq_222 = 2.0;
    parameter Real Km0078_222 = 0.1;
    parameter Real Km0077_222 = 0.1;
    parameter Real FLUX_VALUE_223 = 0.00285020348363397;
    parameter Real Vmax_223 = 0.0285020348363794;
    parameter Real Keq_223 = 0.2;
    parameter Real Km0326_223 = 0.1;
    parameter Real Km0078_223 = 0.1;
    parameter Real Km0633_223 = 0.1;
    parameter Real FLUX_VALUE_224 = 0.00425553005793811;
    parameter Real Vmax_224 = 0.127665901738241;
    parameter Real Keq_224 = 0.101538452966048;
    parameter Real Km0300_224 = 0.1;
    parameter Real KmCO2_224 = 1.0;
    parameter Real KmATP_224 = 2.52512746499271;
    parameter Real Km1364_224 = 0.1;
    parameter Real KmADP_224 = 1.28198768168719;
    parameter Real KmPHO_224 = 0.1;
    parameter Real FLUX_VALUE_225 = 0.00710573354157207;
    parameter Real Vmax_225 = 0.099480269582018;
    parameter Real Keq_225 = 2.0;
    parameter Real Km0120_225 = 0.1;
    parameter Real Km0403_225 = 0.1;
    parameter Real Km1365_225 = 0.1;
    parameter Real Km1487_225 = 0.1;
    parameter Real FLUX_VALUE_226 = 0.0012209016222774;
    parameter Real Vmax_226 = 0.0073254097336688;
    parameter Real Keq_226 = 2.0;
    parameter Real Km1187_226 = 0.1;
    parameter Real Km0076_226 = 0.1;
    parameter Real FLUX_VALUE_227 = 0.00425553005793811;
    parameter Real Vmax_227 = 0.127665901738241;
    parameter Real Keq_227 = 1.01538452966048;
    parameter Real Km0327_227 = 0.1;
    parameter Real KmATP_227 = 2.52512746499271;
    parameter Real Km1003_227 = 0.1;
    parameter Real Km0325_227 = 0.1;
    parameter Real KmADP_227 = 1.28198768168719;
    parameter Real KmPHO_227 = 0.1;
    parameter Real FLUX_VALUE_228 = 0.00425553005793811;
    parameter Real Vmax_228 = 0.0936216612746768;
    parameter Real Keq_228 = 0.2;
    parameter Real Km0999_228 = 0.1;
    parameter Real Km1386_228 = 0.1;
    parameter Real Km0327_228 = 0.1;
    parameter Real Km0633_228 = 0.1;
    parameter Real Km0991_228 = 0.1;
    parameter Real FLUX_VALUE_229 = 0.0130812732613324;
    parameter Real Vmax_229 = 0.183137825658954;
    parameter Real Keq_229 = 0.2319762921916;
    parameter Real KmATP_229 = 2.52512746499271;
    parameter Real Km1408_229 = 0.1;
    parameter Real KmAMP_229 = 0.292884853320091;
    parameter Real Km1386_229 = 0.1;
    parameter Real FLUX_VALUE_230 = 0.00575629331008437;
    parameter Real Vmax_230 = 0.0575629331008874;
    parameter Real Keq_230 = 2.0;
    parameter Real Km1377_230 = 0.1;
    parameter Real KmCO2_230 = 1.0;
    parameter Real Km0951_230 = 0.1;
    parameter Real FLUX_VALUE_231 = 0.00438492843635988;
    parameter Real Vmax_231 = 0.0964684255999347;
    parameter Real Keq_231 = 2.0;
    parameter Real Km1207_231 = 0.1;
    parameter Real Km1377_231 = 0.1;
    parameter Real Km0204_231 = 0.1;
    parameter Real KmCO2_231 = 1.0;
    parameter Real Km1212_231 = 0.1;
    parameter Real FLUX_VALUE_232 = 0.00708036973988706;
    parameter Real Vmax_232 = 0.212411092196814;
    parameter Real Keq_232 = 0.2319762921916;
    parameter Real KmATP_232 = 2.52512746499271;
    parameter Real Km1035_232 = 0.1;
    parameter Real Km1606_232 = 0.1;
    parameter Real KmAMP_232 = 0.292884853320091;
    parameter Real Km0633_232 = 0.1;
    parameter Real Km1379_232 = 0.1;
    parameter Real FLUX_VALUE_233 = 0.00708036973057843;
    parameter Real Vmax_233 = 0.099125176228096;
    parameter Real Keq_233 = 2.0;
    parameter Real Km0118_233 = 0.1;
    parameter Real Km1212_233 = 0.1;
    parameter Real Km1035_233 = 0.1;
    parameter Real Km1207_233 = 0.1;
    parameter Real FLUX_VALUE_234 = 0.140733244027409;
    parameter Real Vmax_234 = 4.22199732082751;
    parameter Real Keq_234 = 0.0559344202713846;
    parameter Real KmATP_234 = 2.52512746499271;
    parameter Real Km0445_234 = 0.1;
    parameter Real KmPYR_234 = 1.81531251192736;
    parameter Real KmADP_234 = 1.28198768168719;
    parameter Real Km1271_234 = 0.1;
    parameter Real KmPHO_234 = 0.1;
    parameter Real Vmax_235 = 14.2966666666667;
    parameter Real Kpyr_235 = 4.33;
    parameter Real nH_235 = 1.9;
    parameter Real FLUX_VALUE_235 = 2.30005961519295;
    parameter Real Vmax_236 = 16.6666666666667;
    parameter Real Kpep_236 = 0.14;
    parameter Real Kadp_236 = 0.53;
    parameter Real Keq_236 = 6500.0;
    parameter Real Kpyr_236 = 21.0;
    parameter Real Katp_236 = 1.5;
    parameter Real FLUX_VALUE_236 = 2.30005961519136;
    parameter Real FLUX_VALUE_237 = 8.51191990587516e-05;
    parameter Real Vmax_237 = 0.00119166878682504;
    parameter Real Keq_237 = 2.0;
    parameter Real Km0158_237 = 0.1;
    parameter Real Km0314_237 = 0.1;
    parameter Real Km0328_237 = 0.1;
    parameter Real KmPHO_237 = 0.1;
    parameter Real FLUX_VALUE_238 = 4.25595995293758e-05;
    parameter Real Vmax_238 = 0.000595834393411522;
    parameter Real Keq_238 = 2.0;
    parameter Real Km0328_238 = 0.1;
    parameter Real Km0314_238 = 0.1;
    parameter Real Km1405_238 = 0.1;
    parameter Real FLUX_VALUE_239 = 7.28671814146884e-05;
    parameter Real Vmax_239 = 0.00102014053980339;
    parameter Real Keq_239 = 0.0792039224841972;
    parameter Real KmATP_239 = 2.52512746499271;
    parameter Real Km1616_239 = 0.1;
    parameter Real Km0586_239 = 0.1;
    parameter Real Km1620_239 = 0.1;
    parameter Real FLUX_VALUE_240 = 0.000153320048576619;
    parameter Real Vmax_240 = 0.00214648068007533;
    parameter Real Keq_240 = 2.0;
    parameter Real Km1559_240 = 0.1;
    parameter Real Km1616_240 = 0.1;
    parameter Real Km0656_240 = 0.1;
    parameter Real Km1620_240 = 0.1;
    parameter Real FLUX_VALUE_241 = 8.18949921570746e-05;
    parameter Real Vmax_241 = 0.00114652989019652;
    parameter Real Keq_241 = 0.156007739276235;
    parameter Real KmADP_241 = 1.28198768168719;
    parameter Real Km1616_241 = 0.1;
    parameter Real Km0582_241 = 0.1;
    parameter Real Km1620_241 = 0.1;
    parameter Real FLUX_VALUE_242 = 0.000104616655671391;
    parameter Real Vmax_242 = 0.00146463317939895;
    parameter Real Keq_242 = 2.0;
    parameter Real Km0467_242 = 0.1;
    parameter Real Km1616_242 = 0.1;
    parameter Real Km0587_242 = 0.1;
    parameter Real Km1620_242 = 0.1;
    parameter Real FLUX_VALUE_243 = 0.000103174784204643;
    parameter Real Vmax_243 = 0.00144444697886;
    parameter Real Keq_243 = 2.0;
    parameter Real Km0739_243 = 0.1;
    parameter Real Km1616_243 = 0.1;
    parameter Real Km0613_243 = 0.1;
    parameter Real Km1620_243 = 0.1;
    parameter Real FLUX_VALUE_244 = 0.0318261171454807;
    parameter Real Vmax_244 = 0.190956702872768;
    parameter Real Keq_244 = 2.0;
    parameter Real Km0577_244 = 0.1;
    parameter Real Km1408_244 = 0.1;
    parameter Real FLUX_VALUE_245 = 0.0261275643830308;
    parameter Real Vmax_245 = 0.15676538629837;
    parameter Real Keq_245 = 2.0;
    parameter Real Km0577_245 = 0.1;
    parameter Real Km0581_245 = 0.1;
    parameter Real FLUX_VALUE_246 = 9.0277971522068e-06;
    parameter Real Vmax_246 = 0.00012638916013079;
    parameter Real Keq_246 = 2.0;
    parameter Real Km1416_246 = 0.1;
    parameter Real Km1569_246 = 0.1;
    parameter Real Km0700_246 = 0.1;
    parameter Real Km1413_246 = 0.1;
    parameter Real FLUX_VALUE_247 = 0.0123035933209063;
    parameter Real Vmax_247 = 0.270679053058119;
    parameter Real Keq_247 = 0.0115359884738766;
    parameter Real Km1038_247 = 0.1;
    parameter Real KmNAD_247 = 1.50329030201531;
    parameter Real Km0180_247 = 0.1;
    parameter Real Km1025_247 = 0.1;
    parameter Real KmNADH_247 = 0.0867096979846952;
    parameter Real FLUX_VALUE_248 = 0.0123035933209063;
    parameter Real Vmax_248 = 0.270679053059877;
    parameter Real Keq_248 = 20.0;
    parameter Real Km0959_248 = 0.1;
    parameter Real Km0991_248 = 0.1;
    parameter Real Km1212_248 = 0.1;
    parameter Real Km1038_248 = 0.1;
    parameter Real Km1207_248 = 0.1;
    parameter Real FLUX_VALUE_249 = 0.00860364819259676;
    parameter Real Vmax_249 = 0.0860364819254253;
    parameter Real Keq_249 = 1.99172924671537;
    parameter Real Km0551_249 = 0.1;
    parameter Real KmDHAP_249 = 1.00415254899644;
    parameter Real Km1426_249 = 0.1;
    parameter Real FLUX_VALUE_250 = 2.22290041668838e-05;
    parameter Real Vmax_250 = 0.000489038091671887;
    parameter Real Keq_250 = 2.0;
    parameter Real Km1039_250 = 0.1;
    parameter Real Km1302_250 = 0.1;
    parameter Real Km0231_250 = 0.1;
    parameter Real KmCO2_250 = 1.0;
    parameter Real Km0529_250 = 0.1;
    parameter Real FLUX_VALUE_251 = 0.00797025227550128;
    parameter Real Vmax_251 = 0.239107568264616;
    parameter Real Keq_251 = 0.2319762921916;
    parameter Real KmATP_251 = 2.52512746499271;
    parameter Real Km1039_251 = 0.1;
    parameter Real Km1607_251 = 0.1;
    parameter Real KmAMP_251 = 0.292884853320091;
    parameter Real Km0633_251 = 0.1;
    parameter Real Km1428_251 = 0.1;
    parameter Real FLUX_VALUE_252 = 0.0113621233895091;
    parameter Real Vmax_252 = 0.159069727453255;
    parameter Real Keq_252 = 2.0;
    parameter Real Km0211_252 = 0.1;
    parameter Real Km1212_252 = 0.1;
    parameter Real Km1207_252 = 0.1;
    parameter Real Km1429_252 = 0.1;
    parameter Real FLUX_VALUE_253 = 0.0113621233895091;
    parameter Real Vmax_253 = 0.159069727453444;
    parameter Real Keq_253 = 1.01538452966048;
    parameter Real KmATP_253 = 2.52512746499271;
    parameter Real Km1429_253 = 0.1;
    parameter Real Km0261_253 = 0.1;
    parameter Real KmADP_253 = 1.28198768168719;
    parameter Real FLUX_VALUE_254 = 0.000294478038038606;
    parameter Real Vmax_254 = 0.00647851683686446;
    parameter Real Keq_254 = 346.740984446895;
    parameter Real KmNADH_254 = 0.0867096979846952;
    parameter Real Km1275_254 = 0.1;
    parameter Real Km1447_254 = 0.1;
    parameter Real Km0037_254 = 0.1;
    parameter Real KmNAD_254 = 1.50329030201531;
    parameter Real FLUX_VALUE_255 = 0.000294478038038606;
    parameter Real Vmax_255 = 0.0135459897497517;
    parameter Real Keq_255 = 0.2;
    parameter Real Km0190_255 = 0.1;
    parameter Real Km1212_255 = 0.1;
    parameter Real Km0633_255 = 0.1;
    parameter Real Km1207_255 = 0.1;
    parameter Real Km1447_255 = 0.1;
    parameter Real FLUX_VALUE_256 = 3.49074696876419e-05;
    parameter Real Vmax_256 = 0.000349074696876838;
    parameter Real Keq_256 = 20.0;
    parameter Real Km0666_256 = 0.1;
    parameter Real Km0595_256 = 0.1;
    parameter Real Km0672_256 = 0.1;
    parameter Real FLUX_VALUE_257 = 0.016407852625713;
    parameter Real Vmax_257 = 0.229709936759964;
    parameter Real Keq_257 = 2.0;
    parameter Real Km1458_257 = 0.1;
    parameter Real Km1537_257 = 0.1;
    parameter Real Km0725_257 = 0.1;
    parameter Real Km1535_257 = 0.1;
    parameter Real FLUX_VALUE_258 = 0.00246329804183154;
    parameter Real Vmax_258 = 0.0344861725856358;
    parameter Real Keq_258 = 0.156007739276235;
    parameter Real KmADP_258 = 1.28198768168719;
    parameter Real Km1467_258 = 0.1;
    parameter Real Km0298_258 = 0.1;
    parameter Real KmPHO_258 = 0.1;
    parameter Real FLUX_VALUE_259 = 0.00246329802176611;
    parameter Real Vmax_259 = 0.152724477349998;
    parameter Real Keq_259 = 2.0;
    parameter Real Km1212_259 = 0.1;
    parameter Real Km1469_259 = 0.1;
    parameter Real Km0841_259 = 0.1;
    parameter Real Km1207_259 = 0.1;
    parameter Real FLUX_VALUE_260 = 0.00297917193961127;
    parameter Real Vmax_260 = 0.0417084071545156;
    parameter Real Keq_260 = 2.0;
    parameter Real Km1212_260 = 0.1;
    parameter Real Km1620_260 = 0.1;
    parameter Real Km1207_260 = 0.1;
    parameter Real Km1616_260 = 0.1;
    parameter Real FLUX_VALUE_261 = 0.0171955712954056;
    parameter Real Vmax_261 = 0.171955712954077;
    parameter Real Keq_261 = 0.356281159701314;
    parameter Real Km1045_261 = 0.1;
    parameter Real KmAcAld_261 = 0.178140579850657;
    parameter Real Km1003_261 = 0.1;
    parameter Real FLUX_VALUE_262 = 0.0294239330059784;
    parameter Real Vmax_262 = 0.294239330059568;
    parameter Real Keq_262 = 0.2;
    parameter Real Km1238_262 = 0.1;
    parameter Real Km1045_262 = 0.1;
    parameter Real KmPHO_262 = 0.1;
    parameter Real FLUX_VALUE_263 = 0.00822818924234598;
    parameter Real Vmax_263 = 0.246845677270283;
    parameter Real Keq_263 = 0.2319762921916;
    parameter Real KmATP_263 = 2.52512746499271;
    parameter Real Km1045_263 = 0.1;
    parameter Real Km1608_263 = 0.1;
    parameter Real KmAMP_263 = 0.292884853320091;
    parameter Real Km0633_263 = 0.1;
    parameter Real Km1491_263 = 0.1;
    parameter Real FLUX_VALUE_264 = 0.000154762180106604;
    parameter Real Vmax_264 = 0.00216667052149491;
    parameter Real Keq_264 = 2.0;
    parameter Real Km0306_264 = 0.1;
    parameter Real Km0654_264 = 0.1;
    parameter Real Km0625_264 = 0.1;
    parameter Real Km0649_264 = 0.1;
    parameter Real FLUX_VALUE_265 = 0.027348492079945;
    parameter Real Vmax_265 = 0.382878889118084;
    parameter Real Keq_265 = 27.6655030058691;
    parameter Real KmGAP_265 = 0.0451809175780963;
    parameter Real Km1427_265 = 0.1;
    parameter Real Km0551_265 = 0.1;
    parameter Real KmF6P_265 = 0.624976405532373;
    parameter Real FLUX_VALUE_266 = 0.0187448438862699;
    parameter Real Vmax_266 = 0.262427814407557;
    parameter Real Keq_266 = 0.903618351561926;
    parameter Real Km0581_266 = 0.1;
    parameter Real Km1408_266 = 0.1;
    parameter Real KmGAP_266 = 0.0451809175780963;
    parameter Real Km1427_266 = 0.1;
    parameter Real FLUX_VALUE_267 = 0.00738272049676082;
    parameter Real Vmax_267 = 0.103358086954292;
    parameter Real Keq_267 = 5.64740149332261;
    parameter Real Km0551_267 = 0.1;
    parameter Real Km0581_267 = 0.1;
    parameter Real KmF6P_267 = 0.624976405532373;
    parameter Real KmGAP_267 = 0.0451809175780963;
    parameter Real FLUX_VALUE_268 = 0.00100595417069432;
    parameter Real Vmax_268 = 0.0100595417069864;
    parameter Real Keq_268 = 0.2;
    parameter Real Km0409_268 = 0.1;
    parameter Real KmPHO_268 = 0.1;
    parameter Real Km1520_268 = 0.1;
    parameter Real FLUX_VALUE_269 = 0.000577907768859609;
    parameter Real Vmax_269 = 0.00577907768859218;
    parameter Real Keq_269 = 20.0;
    parameter Real Km0619_269 = 0.1;
    parameter Real Km0595_269 = 0.1;
    parameter Real Km1524_269 = 0.1;
    parameter Real k_270 = 7500.0;
    parameter Real Keq_270 = 0.045;
    parameter Real FLUX_VALUE_270 = 0.99118781666685;
    parameter Real FLUX_VALUE_271 = 0.0012209016222774;
    parameter Real Vmax_271 = 0.0170926227118672;
    parameter Real Keq_271 = 0.903618351561926;
    parameter Real Km0086_271 = 0.1;
    parameter Real Km1039_271 = 0.1;
    parameter Real KmGAP_271 = 0.0451809175780963;
    parameter Real Km1048_271 = 0.1;
    parameter Real FLUX_VALUE_272 = 0.00122090164306492;
    parameter Real Vmax_272 = 0.0366270492919246;
    parameter Real Keq_272 = 0.2319762921916;
    parameter Real KmATP_272 = 2.52512746499271;
    parameter Real Km1048_272 = 0.1;
    parameter Real Km1610_272 = 0.1;
    parameter Real KmAMP_272 = 0.292884853320091;
    parameter Real Km0633_272 = 0.1;
    parameter Real Km1527_272 = 0.1;
    parameter Real FLUX_VALUE_273 = 0.00438492843635935;
    parameter Real Vmax_273 = 0.0613889981090618;
    parameter Real Keq_273 = 2.0;
    parameter Real Km0204_273 = 0.1;
    parameter Real Km0991_273 = 0.1;
    parameter Real Km0180_273 = 0.1;
    parameter Real Km1051_273 = 0.1;
    parameter Real FLUX_VALUE_274 = 0.00438492843635993;
    parameter Real Vmax_274 = 0.131547853090342;
    parameter Real Keq_274 = 0.2319762921916;
    parameter Real KmATP_274 = 2.52512746499271;
    parameter Real Km1051_274 = 0.1;
    parameter Real Km1612_274 = 0.1;
    parameter Real KmAMP_274 = 0.292884853320091;
    parameter Real Km0633_274 = 0.1;
    parameter Real Km1533_274 = 0.1;
    parameter Real FLUX_VALUE_275 = 0.00217956739387047;
    parameter Real Vmax_275 = 0.0305139435143012;
    parameter Real Keq_275 = 1.01538452966048;
    parameter Real KmATP_275 = 2.52512746499271;
    parameter Real Km1545_275 = 0.1;
    parameter Real KmADP_275 = 1.28198768168719;
    parameter Real Km1538_275 = 0.1;
    parameter Real FLUX_VALUE_276 = 0.120864963642659;
    parameter Real Vmax_276 = 1.69210949099445;
    parameter Real Keq_276 = 2.0;
    parameter Real Km0567_276 = 0.1;
    parameter Real Km1559_276 = 0.1;
    parameter Real Km0633_276 = 0.1;
    parameter Real Km1543_276 = 0.1;
    parameter Real FLUX_VALUE_277 = 0.0113750202369144;
    parameter Real Vmax_277 = 0.159250283316603;
    parameter Real Keq_277 = 2.0;
    parameter Real Km0232_277 = 0.1;
    parameter Real Km0991_277 = 0.1;
    parameter Real Km0180_277 = 0.1;
    parameter Real Km1056_277 = 0.1;
    parameter Real FLUX_VALUE_278 = 0.0113750202378513;
    parameter Real Vmax_278 = 0.34125060713542;
    parameter Real Keq_278 = 0.2319762921916;
    parameter Real KmATP_278 = 2.52512746499271;
    parameter Real Km1056_278 = 0.1;
    parameter Real Km1614_278 = 0.1;
    parameter Real KmAMP_278 = 0.292884853320091;
    parameter Real Km0633_278 = 0.1;
    parameter Real Km1561_278 = 0.1;
    parameter Real FLUX_VALUE_279 = 0.240257282740139;
    parameter Real Vmax_279 = 0.800857609133593;
    parameter Real Km0420_279 = 1.0;
    parameter Real Km0419_279 = 0.1;
    parameter Real Vmax_280 = 1.62066666666667;
    parameter Real Kglc_280 = 1.1918;
    parameter Real Ki_280 = 0.91;
    parameter Real FLUX_VALUE_280 = 1.48887182462482;
    parameter Real FLUX_VALUE_281 = 0.0930539823300854;
    parameter Real Vmax_281 = 0.186107964660342;
    parameter Real KmGLY_281 = 0.15;
    parameter Real FLUX_VALUE_282 = 0.0339899481592154;
    parameter Real Vmax_282 = 0.113299827197769;
    parameter Real Km1324_282 = 1.0;
    parameter Real KmPHO_282 = 0.1;
    parameter Real FLUX_VALUE_283 = 0.00332308792210365;
    parameter Real Vmax_283 = 0.011076959740391;
    parameter Real Km1468_283 = 1.0;
    parameter Real Km1467_283 = 0.1;
    parameter Real FLUX_VALUE_284 = 0.0289005954752697;
    parameter Real Vmax_284 = 0.0578011909505788;
    parameter Real KmAcAld_284 = 0.178140579850657;
    parameter Real FLUX_VALUE_285 = 0.159172320370159;
    parameter Real Vmax_285 = 0.955033922220908;
    parameter Real Keq_285 = 0.2;
    parameter Real KmCO2_285 = 1.0;
    parameter Real Km0445_285 = 0.1;
    parameter Real FLUX_VALUE_286 = 0.000281022322927489;
    parameter Real Vmax_286 = 0.00618249110440952;
    parameter Real Keq_286 = 20.0;
    parameter Real Km1275_286 = 0.1;
    parameter Real Km1416_286 = 0.1;
    parameter Real Km1569_286 = 0.1;
    parameter Real Km0662_286 = 0.1;
    parameter Real Km1413_286 = 0.1;
    parameter Real FLUX_VALUE_287 = 2.36766036345189;
    parameter Real Vmax_287 = 4.73532072690756;
    parameter Real KmCO2_287 = 1.0;
    parameter Real FLUX_VALUE_288 = 0.000104616918267866;
    parameter Real Vmax_288 = 0.00146463685574951;
    parameter Real Keq_288 = 3.93939427197843;
    parameter Real KmADP_288 = 1.28198768168719;
    parameter Real Km0587_288 = 0.1;
    parameter Real KmATP_288 = 2.52512746499271;
    parameter Real Km0589_288 = 0.1;
    parameter Real FLUX_VALUE_289 = 0.000154762173571763;
    parameter Real Vmax_289 = 0.00216667042999349;
    parameter Real Keq_289 = 3.93939427197843;
    parameter Real KmADP_289 = 1.28198768168719;
    parameter Real Km0582_289 = 0.1;
    parameter Real KmATP_289 = 2.52512746499271;
    parameter Real Km0584_289 = 0.1;
    parameter Real FLUX_VALUE_290 = 2.17298600141811;
    parameter Real Vmax_290 = 4.34597200283244;
    parameter Real KmEtOH_290 = 50.0;
    parameter Real FLUX_VALUE_291 = 0.215754210950637;
    parameter Real Vmax_291 = 2.15754210949741;
    parameter Real Keq_291 = 0.0199172924671537;
    parameter Real KmDHAP_291 = 1.00415254899644;
    parameter Real Km1151_291 = 0.1;
    parameter Real KmPHO_291 = 0.1;
    parameter Real FLUX_VALUE_292 = 0.119280009047118;
    parameter Real Vmax_292 = 0.39760003015712;
    parameter Real Km1277_292 = 1.0;
    parameter Real Km1275_292 = 0.1;
    parameter Real FLUX_VALUE_293 = 4.25595995293758e-05;
    parameter Real Vmax_293 = 0.000425595995293516;
    parameter Real Keq_293 = 0.2;
    parameter Real Km0313_293 = 0.1;
    parameter Real Km0314_293 = 0.1;
    parameter Real KmPHO_293 = 0.1;
    parameter Real FLUX_VALUE_294 = 0.0164078524184884;
    parameter Real Vmax_294 = 0.0328157048369536;
    parameter Real Km1458_294 = 0.1;
    parameter Real FLUX_VALUE_295 = 0.042989494474117;
    parameter Real zero_flux_295 = 0.0;
    parameter Real v0_295 = 0.042989494474151;
    parameter Real ic0002_295 = 0.1;
    parameter Real ep0002_295 = 1.1348;
    parameter Real icAMP_295 = 0.292884853320091;
    parameter Real epAMP_295 = 0.046;
    parameter Real icATP_295 = 2.52512746499271;
    parameter Real epATP_295 = 59.276;
    parameter Real ic0526_295 = 0.1;
    parameter Real ep0526_295 = 0.0447;
    parameter Real ic0584_295 = 0.1;
    parameter Real ep0584_295 = 0.0036;
    parameter Real ic0589_295 = 0.1;
    parameter Real ep0589_295 = 0.0024;
    parameter Real ic0615_295 = 0.1;
    parameter Real ep0615_295 = 0.0024;
    parameter Real ic0649_295 = 0.1;
    parameter Real ep0649_295 = 0.0036;
    parameter Real ic0773_295 = 0.1;
    parameter Real ep0773_295 = 0.5185;
    parameter Real ic0782_295 = 0.1;
    parameter Real ep0782_295 = 0.046;
    parameter Real ic1107_295 = 0.1;
    parameter Real ep1107_295 = 0.8079;
    parameter Real ic1405_295 = 0.1;
    parameter Real ep1405_295 = 0.00099;
    parameter Real ic1467_295 = 0.1;
    parameter Real ep1467_295 = 0.02;
    parameter Real ic1520_295 = 0.1;
    parameter Real ep1520_295 = 0.0234;
    parameter Real ic1545_295 = 0.1;
    parameter Real ep1545_295 = 0.0599;
    parameter Real ic0004_295 = 0.1;
    parameter Real ep0004_295 = 1.1348;
    parameter Real ic0404_295 = 0.1;
    parameter Real ep0404_295 = 0.4588;
    parameter Real ic0428_295 = 0.1;
    parameter Real ep0428_295 = 0.1607;
    parameter Real ic0430_295 = 0.1;
    parameter Real ep0430_295 = 0.1017;
    parameter Real ic0432_295 = 0.1;
    parameter Real ep0432_295 = 0.2975;
    parameter Real ic0542_295 = 0.1;
    parameter Real ep0542_295 = 0.0066;
    parameter Real ic0747_295 = 0.1;
    parameter Real ep0747_295 = 0.1054;
    parameter Real ic0748_295 = 0.1;
    parameter Real ep0748_295 = 0.3018;
    parameter Real ic0757_295 = 0.1;
    parameter Real ep0757_295 = 0.2904;
    parameter Real ic0832_295 = 0.1;
    parameter Real ep0832_295 = 0.0663;
    parameter Real ic0847_295 = 0.1;
    parameter Real ep0847_295 = 0.1927;
    parameter Real ic1077_295 = 0.1;
    parameter Real ep1077_295 = 0.2964;
    parameter Real ic1099_295 = 0.1;
    parameter Real ep1099_295 = 0.2862;
    parameter Real ic1148_295 = 0.1;
    parameter Real ep1148_295 = 0.0507;
    parameter Real ic1314_295 = 0.1;
    parameter Real ep1314_295 = 0.1339;
    parameter Real ic1379_295 = 0.1;
    parameter Real ep1379_295 = 0.1647;
    parameter Real ic1337_295 = 0.1;
    parameter Real ep1337_295 = 0.00039;
    parameter Real ic0089_295 = 0.1;
    parameter Real ep0089_295 = 0.001583;
    parameter Real ic1428_295 = 0.1;
    parameter Real ep1428_295 = 0.1854;
    parameter Real ic1491_295 = 0.1;
    parameter Real ep1491_295 = 0.1914;
    parameter Real ic1527_295 = 0.1;
    parameter Real ep1527_295 = 0.0284;
    parameter Real ic1533_295 = 0.1;
    parameter Real ep1533_295 = 0.102;
    parameter Real ic1561_295 = 0.1;
    parameter Real ep1561_295 = 0.2646;
    parameter Real ic0122_295 = 0.1;
    parameter Real ep0122_295 = 5.6e-05;
    parameter Real ic0897_295 = 0.1;
    parameter Real ep0897_295 = 0.00051708;
    parameter Real ic0657_295 = 0.1;
    parameter Real ep0657_295 = 9.6e-05;
    parameter Real ic0662_295 = 0.1;
    parameter Real ep0662_295 = 0.000125;
    parameter Real ic0666_295 = 0.1;
    parameter Real ep0666_295 = 0.0056;
    parameter Real ic0672_295 = 0.1;
    parameter Real ep0672_295 = 0.000812;
    parameter Real ic0595_295 = 0.1;
    parameter Real ep0595_295 = 0.000535599999999999;
    parameter Real ic0700_295 = 0.1;
    parameter Real ep0700_295 = 0.000114;
    parameter Real ic1059_295 = 0.1;
    parameter Real ep1059_295 = 3.2e-05;
    parameter Real ic1346_295 = 0.1;
    parameter Real ep1346_295 = 0.00288;
    parameter Real ic1351_295 = 0.1;
    parameter Real ep1351_295 = 0.000697;
    parameter Real ic1524_295 = 0.1;
    parameter Real ep1524_295 = 0.000781;
    parameter Real ic1569_295 = 0.1;
    parameter Real ep1569_295 = 1.5e-05;
    parameter Real FLUX_VALUE_296 = 0.00860364821592488;
    parameter Real Vmax_296 = 0.0860364821592976;
    parameter Real Keq_296 = 0.2;
    parameter Real Km1426_296 = 0.1;
    parameter Real Km1427_296 = 0.1;
    parameter Real KmPHO_296 = 0.1;
    parameter Real FLUX_VALUE_297 = 0.00475463820864726;
    parameter Real Vmax_297 = 0.0665649349207449;
    parameter Real Keq_297 = 0.115359884738766;
    parameter Real Km0061_297 = 0.1;
    parameter Real KmNAD_297 = 1.50329030201531;
    parameter Real Km1269_297 = 0.1;
    parameter Real KmNADH_297 = 0.0867096979846952;
    parameter Real cell = 1.0;
    parameter Real extracellular = 1.0;



    Real s_0002;
    Real s_0004;
    Real s_0008;
    Real s_0009;
    Real s_0010;
    Real s_0015;
    Real s_0016;
    Real s_0018;
    Real s_0019;
    Real s_0025;
    Real s_0028;
    Real s_0033;
    Real s_0037;
    Real s_0039;
    Real s_0056;
    Real s_0061;
    Real s_0062;
    Real s_0063;
    Real s_0066;
    Real BPG;
    Real s_0076;
    Real s_0077;
    Real s_0078;
    Real s_0082;
    Real s_0086;
    Real s_0089;
    Real s_0118;
    Real s_0120;
    Real s_0122;
    Real s_0126;
    Real s_0141;
    Real s_0142;
    Real s_0145;
    Real s_0146;
    Real s_0158;
    Real s_0162;
    Real s_0165;
    Real s_0176;
    Real s_0178;
    Real s_0180;
    Real P2G;
    Real s_0190;
    Real s_0201;
    Real s_0204;
    Real s_0207;
    Real s_0209;
    Real s_0210;
    Real s_0211;
    Real s_0218;
    Real s_0231;
    Real s_0232;
    Real P3G;
    Real s_0261;
    Real s_0262;
    Real s_0291;
    Real s_0295;
    Real s_0296;
    Real s_0297;
    Real s_0298;
    Real s_0299;
    Real s_0300;
    Real s_0301;
    Real s_0302;
    Real s_0304;
    Real s_0306;
    Real s_0312;
    Real s_0313;
    Real s_0314;
    Real s_0322;
    Real s_0324;
    Real s_0325;
    Real s_0326;
    Real s_0327;
    Real s_0328;
    Real s_0335;
    Real s_0340;
    Real s_0349;
    Real AcAld;
    Real s_0360;
    Real s_0362;
    Real s_0367;
    Real s_0373;
    Real s_0380;
    Real s_0386;
    Real s_0390;
    Real s_0393;
    Real ADP;
    Real s_0403;
    Real s_0404;
    Real s_0409;
    Real s_0419;
    Real s_0420;
    Real AMP;
    Real s_0427;
    Real s_0428;
    Real s_0430;
    Real s_0432;
    Real ATP;
    Real s_0445;
    Real s_0454;
    Real s_0455;
    Real CO2;
    Real s_0458;
    Real s_0467;
    Real s_0471;
    Real s_0478;
    Real s_0505;
    Real s_0515;
    Real s_0516;
    Real s_0522;
    Real s_0526;
    Real s_0529;
    Real s_0539;
    Real s_0542;
    Real s_0550;
    Real s_0551;
    Real F16bP;
    Real F6P;
    Real GLC;
    Real GLCx;
    Real s_0567;
    Real G6P;
    Real s_0573;
    Real s_0574;
    Real s_0577;
    Real s_0581;
    Real s_0582;
    Real s_0584;
    Real s_0586;
    Real s_0587;
    Real s_0589;
    Real s_0595;
    Real s_0602;
    Real s_0613;
    Real s_0615;
    Real s_0619;
    Real s_0625;
    Real DHAP;
    Real s_0633;
    Real s_0644;
    Real s_0645;
    Real s_0649;
    Real s_0654;
    Real s_0656;
    Real s_0657;
    Real s_0662;
    Real s_0666;
    Real s_0672;
    Real EtOH;
    Real s_0681;
    Real s_0700;
    Real s_0709;
    Real s_0710;
    Real s_0722;
    Real s_0725;
    Real s_0739;
    Real s_0743;
    Real s_0745;
    Real s_0747;
    Real s_0748;
    Real s_0750;
    Real s_0757;
    Real GAP;
    Real GLY;
    Real s_0766;
    Real s_0767;
    Real s_0773;
    Real s_0779;
    Real s_0782;
    Real s_0785;
    Real s_0816;
    Real s_0832;
    Real s_0835;
    Real s_0836;
    Real s_0841;
    Real s_0847;
    Real s_0849;
    Real s_0897;
    Real s_0940;
    Real s_0943;
    Real s_0951;
    Real s_0953;
    Real s_0955;
    Real s_0959;
    Real s_0965;
    Real s_0969;
    Real s_0973;
    Real s_0978;
    Real s_0979;
    Real s_0980;
    Real s_0981;
    Real s_0991;
    Real s_0999;
    Real s_1003;
    Real s_1006;
    Real s_1010;
    Real s_1011;
    Real s_1012;
    Real s_1014;
    Real s_1016;
    Real s_1021;
    Real s_1025;
    Real s_1029;
    Real s_1032;
    Real s_1035;
    Real s_1038;
    Real s_1039;
    Real s_1045;
    Real s_1048;
    Real s_1051;
    Real s_1056;
    Real s_1059;
    Real s_1065;
    Real s_1073;
    Real s_1077;
    Real s_1084;
    Real s_1099;
    Real s_1101;
    Real s_1107;
    Real s_1148;
    Real s_1151;
    Real s_1153;
    Real s_1161;
    Real s_1176;
    Real s_1182;
    Real s_1187;
    Real s_1191;
    Real s_1192;
    Real s_1194;
    Real NAD;
    Real NADH;
    Real s_1207;
    Real s_1212;
    Real s_1233;
    Real s_1238;
    Real s_1255;
    Real s_1266;
    Real s_1269;
    Real s_1270;
    Real s_1271;
    Real s_1275;
    Real s_1277;
    Real s_1286;
    Real s_1302;
    Real s_1314;
    Real PHO;
    Real s_1324;
    Real s_1331;
    Real s_1337;
    Real s_1342;
    Real s_1343;
    Real s_1346;
    Real s_1351;
    Real PEP;
    Real s_1364;
    Real s_1365;
    Real s_1376;
    Real s_1377;
    Real s_1379;
    Real s_1386;
    Real PYR;
    Real s_1405;
    Real s_1408;
    Real s_1413;
    Real s_1416;
    Real s_1426;
    Real s_1427;
    Real s_1428;
    Real s_1429;
    Real s_1445;
    Real s_1447;
    Real s_1449;
    Real s_1454;
    Real s_1458;
    Real s_1459;
    Real s_1467;
    Real s_1468;
    Real s_1469;
    Real s_1487;
    Real s_1491;
    Real s_1520;
    Real s_1524;
    Real s_1527;
    Real s_1533;
    Real s_1535;
    Real s_1537;
    Real s_1538;
    Real s_1543;
    Real s_1545;
    Real s_1559;
    Real s_1561;
    Real s_1565;
    Real s_1569;
    Real s_1576;
    Real s_1577;
    Real s_1578;
    Real s_1579;
    Real s_1582;
    Real s_1583;
    Real s_1585;
    Real s_1587;
    Real s_1589;
    Real s_1590;
    Real s_1591;
    Real s_1593;
    Real s_1594;
    Real s_1596;
    Real s_1598;
    Real s_1600;
    Real s_1602;
    Real s_1604;
    Real s_1606;
    Real s_1607;
    Real s_1608;
    Real s_1610;
    Real s_1612;
    Real s_1614;
    Real s_1616;
    Real s_1620;
    Real e_0001;
    Real e_0002;
    Real e_0003;
    Real e_0004;
    Real e_0005;
    Real e_0006;
    Real e_0007;
    Real e_0008;
    Real e_0010;
    Real e_0011;
    Real e_0012;
    Real e_0017;
    Real e_0020;
    Real e_0022;
    Real e_0025;
    Real e_0026;
    Real e_0028;
    Real e_0030;
    Real e_0031;
    Real e_0033;
    Real e_0038;
    Real e_0045;
    Real e_0051;
    Real e_0053;
    Real e_0054;
    Real e_0057;
    Real e_0062;
    Real e_0063;
    Real e_0064;
    Real e_0065;
    Real e_0066;
    Real e_0069;
    Real e_0071;
    Real e_0074;
    Real e_0079;
    Real e_0084;
    Real e_0087;
    Real e_0088;
    Real e_0089;
    Real e_0090;
    Real e_0091;
    Real e_0092;
    Real e_0100;
    Real e_0101;
    Real e_0103;
    Real e_0106;
    Real e_0107;
    Real e_0109;
    Real e_0111;
    Real e_0113;
    Real e_0117;
    Real e_0122;
    Real e_0124;
    Real e_0127;
    Real e_0128;
    Real e_0129;
    Real e_0133;
    Real e_0134;
    Real e_0135;
    Real e_0136;
    Real e_0137;
    Real e_0141;
    Real e_0142;
    Real e_0146;
    Real e_0151;
    Real e_0152;
    Real e_0154;
    Real e_0155;
    Real e_0160;
    Real e_0165;
    Real e_0167;
    Real e_0168;
    Real e_0169;
    Real e_0171;
    Real e_0175;
    Real e_0176;
    Real e_0177;
    Real e_0179;
    Real e_0182;
    Real e_0183;
    Real e_0186;
    Real e_0188;
    Real e_0194;
    Real e_0196;
    Real e_0202;
    Real e_0203;
    Real e_0204;
    Real e_0207;
    Real e_0213;
    Real e_0214;
    Real e_0218;
    Real e_0219;
    Real e_0220;
    Real e_0223;
    Real e_0231;
    Real e_0234;
    Real e_0237;
    Real e_0239;
    Real e_0243;
    Real e_0249;
    Real e_0250;
    Real e_0251;
    Real e_0255;
    Real e_0260;
    Real e_0263;
    Real e_0268;
    Real e_0269;
    Real e_0271;
    Real e_0273;
    Real e_0276;
    Real e_0278;
    Real e_0280;
    Real e_0281;
    Real e_0283;
    Real e_0288;
    Real e_0289;
    Real e_0290;
    Real e_0291;
    Real e_0293;
    Real e_0295;
    Real e_0296;
    Real e_0297;
    Real e_0298;
    Real e_0299;
    Real e_0303;
    Real e_0311;
    Real e_0312;
    Real e_0313;
    Real e_0314;
    Real e_0317;
    Real e_0320;
    Real e_0321;
    Real e_0322;
    Real e_0325;
    Real e_0326;
    Real e_0328;
    Real e_0329;
    Real e_0330;
    Real e_0334;
    Real e_0340;
    Real e_0342;
    Real e_0343;
    Real e_0346;
    Real e_0347;
    Real e_0348;
    Real e_0352;
    Real e_0353;
    Real e_0355;
    Real e_0356;
    Real e_0362;
    Real e_0364;
    Real e_0365;
    Real e_0367;
    Real e_0368;
    Real e_0370;
    Real e_0372;
    Real e_0376;
    Real e_0379;
    Real e_0380;
    Real e_0381;
    Real e_0382;
    Real e_0385;
    Real e_0387;
    Real e_0389;
    Real e_0390;
    Real e_0392;
    Real e_0396;
    Real e_0398;
    Real e_0401;
    Real e_0404;
    Real e_0405;
    Real e_0407;
    Real e_0409;
    Real e_0417;
    Real e_0418;
    Real e_0422;
    Real e_0424;
    Real e_0425;
    Real e_0426;
    Real e_0427;
    Real e_0428;
    Real e_0429;
    Real e_0431;
    Real e_0432;
    Real e_0434;
    Real e_0435;
    Real e_0436;
    Real e_0440;
    Real e_0447;
    Real e_0448;
    Real e_0452;
    Real e_0453;
    Real e_0454;
    Real e_0455;
    Real e_0456;
    Real e_0457;
    Real e_0458;
    Real e_0462;
    Real e_0465;
    Real e_0466;
    Real e_0467;
    Real e_0470;
    Real e_0472;
    Real e_0475;
    Real e_0476;
    Real e_0489;
    Real e_0492;
    Real e_0494;
    Real e_0495;
    Real e_0496;
    Real e_0499;
    Real e_0506;
    Real e_0508;
    Real e_0510;
    Real e_0512;
    Real e_0514;
    Real e_0515;
    Real e_0525;
    Real e_0528;
    Real e_0531;
    Real e_0536;
    Real e_0540;
    Real e_0541;
    Real e_0542;
    Real e_0544;
    Real e_0545;
    Real e_0547;
    Real e_0548;
    Real e_0549;
    Real e_0550;
    Real e_0556;
    Real e_0557;
    Real e_0558;
    Real e_0559;
    Real e_0561;
    Real e_0565;
    Real e_0567;
    Real e_0568;
    Real e_0569;
    Real e_0571;
    Real e_0574;
    Real e_0576;
    Real e_0578;
    Real e_0579;
    Real e_0581;
    Real e_0582;
    Real e_0585;
    Real e_0586;
    Real e_0588;
    Real e_0591;
    Real e_0594;
    Real e_0601;
    Real e_0603;
    Real e_0607;
    Real e_0610;
    Real e_0611;
    Real e_0612;
    Real e_0613;
    Real e_0615;
    Real e_0619;
    Real e_0621;
    Real e_0629;
    Real e_0631;
    Real e_0632;
    Real e_0633;
    Real e_0636;
    Real e_0638;
    Real e_0639;
    Real e_0642;
    Real e_0644;
    Real e_0647;
    Real e_0658;
    Real e_0667;
    Real e_0671;
    Real e_0674;
    Real e_0675;
    Real e_0682;
    Real e_0684;
    Real e_0685;
    Real e_0686;
    Real e_0687;
    Real e_0690;
    Real e_0692;
    Real e_0693;
    Real e_0695;
    Real e_0697;
    Real e_0698;
    Real e_0699;
    Real e_0704;
    Real e_0705;
    Real e_0708;
    Real e_0709;
    Real e_0711;
    Real e_0712;
    Real e_0716;
    Real e_0727;
    Real e_0729;
    Real e_0730;
    Real e_0733;
    Real e_0734;
    Real e_0736;
    Real e_0740;
    Real e_0741;
    Real e_0742;
    Real e_0743;
    Real e_0744;
    Real e_0745;
    Real e_0746;
    Real e_0747;
    Real e_0750;
    Real e_0752;
    Real e_0753;
    Real e_0754;
    Real e_0755;
    Real e_0757;
    Real e_0761;
    Real e_0762;
    Real e_0763;
    Real e_0765;
    Real e_0769;
    Real e_0771;
    Real e_0774;
    Real e_0778;
    Real e_0788;
    Real e_0791;
    Real e_0792;
    Real e_0793;
    Real e_0799;
    Real e_0800;
    Real e_0802;
    Real e_0805;
    Real e_0808;
    Real e_0812;
    Real e_0813;
    Real e_0826;
    Real e_0827;
    Real e_0829;
    Real e_0830;
    Real e_0832;
    Real e_0834;
    Real e_0836;
    Real e_0838;
    Real e_0840;
    Real e_0841;
    Real e_0842;
    Real e_0846;
    Real e_0848;
    Real e_0850;
    Real e_0851;
    Real e_0852;
    Real e_0855;
    Real e_0860;
    Real e_0862;
    Real e_0867;
    Real e_0869;
    Real e_0875;
    Real e_0880;
    Real e_0883;
    Real e_0884;
    Real e_0888;
    Real e_0889;
    Real e_0890;
    Real e_0892;
    Real e_0894;
    Real e_0895;
    Real e_0898;
    Real e_0903;
    Real e_0904;
    Real e_0911;
    Real e_0913;
    Real e_0915;
    Real e_0922;
    Real e_0924;
    Real e_0926;
    Real e_0934;
    Real e_0935;
    Real e_0940;
    Real e_0944;
    Real e_0947;
    Real e_0950;
    Real e_0953;
    Real e_0955;
    Real e_0956;
    Real e_0959;
    Real e_0962;
    Real e_0963;
    Real e_0964;
    Real e_0970;
    Real e_0973;
    Real e_0975;
    Real e_0976;
    Real e_0978;
    Real e_0980;
    Real F26bP;

initial equation
    s_0002 = 0.1;
    s_0004 = 0.1;
    s_0008 = 0.1;
    s_0009 = 0.1;
    s_0010 = 0.1;
    s_0015 = 0.1;
    s_0016 = 0.1;
    s_0018 = 0.1;
    s_0019 = 0.1;
    s_0025 = 0.1;
    s_0028 = 0.1;
    s_0033 = 0.1;
    s_0037 = 0.1;
    s_0039 = 0.1;
    s_0056 = 0.1;
    s_0061 = 0.1;
    s_0062 = 0.1;
    s_0063 = 0.1;
    s_0066 = 0.1;
    BPG = 0.000736873499865602;
    s_0076 = 0.1;
    s_0077 = 0.1;
    s_0078 = 0.1;
    s_0082 = 0.1;
    s_0086 = 0.1;
    s_0089 = 0.1;
    s_0118 = 0.1;
    s_0120 = 0.1;
    s_0122 = 0.1;
    s_0126 = 0.1;
    s_0141 = 0.1;
    s_0142 = 0.1;
    s_0145 = 0.1;
    s_0146 = 0.1;
    s_0158 = 0.1;
    s_0162 = 0.1;
    s_0165 = 0.1;
    s_0176 = 0.1;
    s_0178 = 0.1;
    s_0180 = 0.1;
    P2G = 0.127695817386632;
    s_0190 = 0.1;
    s_0201 = 0.1;
    s_0204 = 0.1;
    s_0207 = 0.1;
    s_0209 = 0.1;
    s_0210 = 0.1;
    s_0211 = 0.1;
    s_0218 = 0.1;
    s_0231 = 0.1;
    s_0232 = 0.1;
    P3G = 0.885688538360659;
    s_0261 = 0.1;
    s_0262 = 0.1;
    s_0291 = 0.1;
    s_0295 = 0.1;
    s_0296 = 0.1;
    s_0297 = 0.1;
    s_0298 = 0.1;
    s_0299 = 0.1;
    s_0300 = 0.1;
    s_0301 = 0.1;
    s_0302 = 0.1;
    s_0304 = 0.1;
    s_0306 = 0.1;
    s_0312 = 0.1;
    s_0313 = 0.1;
    s_0314 = 0.1;
    s_0322 = 0.1;
    s_0324 = 0.1;
    s_0325 = 0.1;
    s_0326 = 0.1;
    s_0327 = 0.1;
    s_0328 = 0.1;
    s_0335 = 0.1;
    s_0340 = 0.1;
    s_0349 = 0.1;
    AcAld = 0.178140579850657;
    s_0360 = 0.0;
    s_0362 = 0.1;
    s_0367 = 0.1;
    s_0373 = 0.1;
    s_0380 = 0.1;
    s_0386 = 0.1;
    s_0390 = 0.1;
    s_0393 = 0.1;
    ADP = 1.28198768168719;
    s_0403 = 0.1;
    s_0404 = 0.1;
    s_0409 = 0.1;
    s_0419 = 0.1;
    s_0420 = 1.0;
    AMP = 0.292884853320091;
    s_0427 = 0.1;
    s_0428 = 0.1;
    s_0430 = 0.1;
    s_0432 = 0.1;
    ATP = 2.52512746499271;
    s_0445 = 0.1;
    s_0454 = 0.1;
    s_0455 = 0.1;
    CO2 = 1.0;
    s_0458 = 0.0;
    s_0467 = 0.1;
    s_0471 = 0.1;
    s_0478 = 0.1;
    s_0505 = 0.1;
    s_0515 = 0.1;
    s_0516 = 0.1;
    s_0522 = 0.1;
    s_0526 = 0.1;
    s_0529 = 0.1;
    s_0539 = 0.1;
    s_0542 = 0.1;
    s_0550 = 0.1;
    s_0551 = 0.1;
    F16bP = 6.22132076069411;
    F6P = 0.624976405532373;
    GLC = 0.097652231064563;
    GLCx = 100.0;
    s_0567 = 0.1;
    G6P = 2.67504014044787;
    s_0573 = 0.1;
    s_0574 = 0.1;
    s_0577 = 0.1;
    s_0581 = 0.1;
    s_0582 = 0.1;
    s_0584 = 0.1;
    s_0586 = 0.1;
    s_0587 = 0.1;
    s_0589 = 0.1;
    s_0595 = 0.1;
    s_0602 = 0.1;
    s_0613 = 0.1;
    s_0615 = 0.1;
    s_0619 = 0.1;
    s_0625 = 0.1;
    DHAP = 1.00415254899644;
    s_0633 = 0.1;
    s_0644 = 0.1;
    s_0645 = 0.1;
    s_0649 = 0.1;
    s_0654 = 0.1;
    s_0656 = 0.1;
    s_0657 = 0.1;
    s_0662 = 0.1;
    s_0666 = 0.1;
    s_0672 = 0.1;
    EtOH = 50.0;
    s_0681 = 0.0;
    s_0700 = 0.1;
    s_0709 = 0.1;
    s_0710 = 0.1;
    s_0722 = 0.1;
    s_0725 = 0.1;
    s_0739 = 0.1;
    s_0743 = 0.1;
    s_0745 = 0.1;
    s_0747 = 0.1;
    s_0748 = 0.1;
    s_0750 = 0.1;
    s_0757 = 0.1;
    GAP = 0.0451809175780963;
    GLY = 0.15;
    s_0766 = 0.0;
    s_0767 = 0.1;
    s_0773 = 0.1;
    s_0779 = 0.1;
    s_0782 = 0.1;
    s_0785 = 0.1;
    s_0816 = 0.1;
    s_0832 = 0.1;
    s_0835 = 0.1;
    s_0836 = 0.1;
    s_0841 = 0.1;
    s_0847 = 0.1;
    s_0849 = 0.1;
    s_0897 = 0.1;
    s_0940 = 0.1;
    s_0943 = 0.1;
    s_0951 = 0.1;
    s_0953 = 0.1;
    s_0955 = 0.1;
    s_0959 = 0.1;
    s_0965 = 0.1;
    s_0969 = 0.1;
    s_0973 = 0.1;
    s_0978 = 0.1;
    s_0979 = 0.1;
    s_0980 = 0.1;
    s_0981 = 0.1;
    s_0991 = 0.1;
    s_0999 = 0.1;
    s_1003 = 0.1;
    s_1006 = 0.1;
    s_1010 = 0.1;
    s_1011 = 0.1;
    s_1012 = 0.1;
    s_1014 = 0.1;
    s_1016 = 0.1;
    s_1021 = 0.1;
    s_1025 = 0.1;
    s_1029 = 0.1;
    s_1032 = 0.1;
    s_1035 = 0.1;
    s_1038 = 0.1;
    s_1039 = 0.1;
    s_1045 = 0.1;
    s_1048 = 0.1;
    s_1051 = 0.1;
    s_1056 = 0.1;
    s_1059 = 0.1;
    s_1065 = 0.1;
    s_1073 = 0.1;
    s_1077 = 0.1;
    s_1084 = 0.1;
    s_1099 = 0.1;
    s_1101 = 0.1;
    s_1107 = 0.1;
    s_1148 = 0.1;
    s_1151 = 0.1;
    s_1153 = 0.1;
    s_1161 = 0.1;
    s_1176 = 0.1;
    s_1182 = 0.1;
    s_1187 = 0.1;
    s_1191 = 0.1;
    s_1192 = 0.1;
    s_1194 = 0.1;
    NAD = 1.50329030201531;
    NADH = 0.0867096979846952;
    s_1207 = 0.1;
    s_1212 = 0.1;
    s_1233 = 0.1;
    s_1238 = 0.1;
    s_1255 = 0.1;
    s_1266 = 0.1;
    s_1269 = 0.1;
    s_1270 = 0.1;
    s_1271 = 0.1;
    s_1275 = 0.1;
    s_1277 = 1.0;
    s_1286 = 0.1;
    s_1302 = 0.1;
    s_1314 = 0.1;
    PHO = 0.1;
    s_1324 = 1.0;
    s_1331 = 0.1;
    s_1337 = 0.1;
    s_1342 = 0.1;
    s_1343 = 0.1;
    s_1346 = 0.1;
    s_1351 = 0.1;
    PEP = 0.0632352144936527;
    s_1364 = 0.1;
    s_1365 = 0.1;
    s_1376 = 0.1;
    s_1377 = 0.1;
    s_1379 = 0.1;
    s_1386 = 0.1;
    PYR = 1.81531251192736;
    s_1405 = 0.1;
    s_1408 = 0.1;
    s_1413 = 0.1;
    s_1416 = 0.1;
    s_1426 = 0.1;
    s_1427 = 0.1;
    s_1428 = 0.1;
    s_1429 = 0.1;
    s_1445 = 0.1;
    s_1447 = 0.1;
    s_1449 = 0.1;
    s_1454 = 0.1;
    s_1458 = 0.1;
    s_1459 = 0.0;
    s_1467 = 0.1;
    s_1468 = 1.0;
    s_1469 = 0.1;
    s_1487 = 0.1;
    s_1491 = 0.1;
    s_1520 = 0.1;
    s_1524 = 0.1;
    s_1527 = 0.1;
    s_1533 = 0.1;
    s_1535 = 0.1;
    s_1537 = 0.1;
    s_1538 = 0.1;
    s_1543 = 0.1;
    s_1545 = 0.1;
    s_1559 = 0.1;
    s_1561 = 0.1;
    s_1565 = 0.1;
    s_1569 = 0.1;
    s_1576 = 0.1;
    s_1577 = 0.1;
    s_1578 = 0.1;
    s_1579 = 0.1;
    s_1582 = 0.1;
    s_1583 = 0.1;
    s_1585 = 0.1;
    s_1587 = 0.1;
    s_1589 = 0.1;
    s_1590 = 0.1;
    s_1591 = 0.1;
    s_1593 = 0.1;
    s_1594 = 0.1;
    s_1596 = 0.1;
    s_1598 = 0.1;
    s_1600 = 0.1;
    s_1602 = 0.1;
    s_1604 = 0.1;
    s_1606 = 0.1;
    s_1607 = 0.1;
    s_1608 = 0.1;
    s_1610 = 0.1;
    s_1612 = 0.1;
    s_1614 = 0.1;
    s_1616 = 0.1;
    s_1620 = 0.1;
    e_0001 = 0.001;
    e_0002 = 0.001;
    e_0003 = 0.001;
    e_0004 = 0.001;
    e_0005 = 0.001;
    e_0006 = 0.001;
    e_0007 = 0.001;
    e_0008 = 0.001;
    e_0010 = 0.001;
    e_0011 = 0.001;
    e_0012 = 0.001;
    e_0017 = 0.001;
    e_0020 = 0.001;
    e_0022 = 0.001;
    e_0025 = 0.001;
    e_0026 = 0.001;
    e_0028 = 0.001;
    e_0030 = 0.001;
    e_0031 = 0.001;
    e_0033 = 0.001;
    e_0038 = 0.001;
    e_0045 = 0.001;
    e_0051 = 0.001;
    e_0053 = 0.001;
    e_0054 = 0.001;
    e_0057 = 0.001;
    e_0062 = 0.001;
    e_0063 = 0.001;
    e_0064 = 0.001;
    e_0065 = 0.001;
    e_0066 = 0.001;
    e_0069 = 0.001;
    e_0071 = 0.001;
    e_0074 = 0.001;
    e_0079 = 0.001;
    e_0084 = 0.001;
    e_0087 = 0.001;
    e_0088 = 0.001;
    e_0089 = 0.001;
    e_0090 = 0.001;
    e_0091 = 0.001;
    e_0092 = 0.001;
    e_0100 = 0.001;
    e_0101 = 0.001;
    e_0103 = 0.001;
    e_0106 = 0.001;
    e_0107 = 0.001;
    e_0109 = 0.001;
    e_0111 = 0.001;
    e_0113 = 0.001;
    e_0117 = 0.001;
    e_0122 = 0.001;
    e_0124 = 0.001;
    e_0127 = 0.001;
    e_0128 = 0.001;
    e_0129 = 0.001;
    e_0133 = 0.001;
    e_0134 = 0.001;
    e_0135 = 0.001;
    e_0136 = 0.001;
    e_0137 = 0.001;
    e_0141 = 0.001;
    e_0142 = 0.001;
    e_0146 = 0.001;
    e_0151 = 0.001;
    e_0152 = 0.001;
    e_0154 = 0.001;
    e_0155 = 0.001;
    e_0160 = 0.001;
    e_0165 = 0.001;
    e_0167 = 0.001;
    e_0168 = 0.001;
    e_0169 = 0.001;
    e_0171 = 0.001;
    e_0175 = 0.001;
    e_0176 = 0.001;
    e_0177 = 0.001;
    e_0179 = 0.001;
    e_0182 = 0.001;
    e_0183 = 0.001;
    e_0186 = 0.001;
    e_0188 = 0.001;
    e_0194 = 0.001;
    e_0196 = 0.001;
    e_0202 = 0.001;
    e_0203 = 0.001;
    e_0204 = 0.001;
    e_0207 = 0.001;
    e_0213 = 0.001;
    e_0214 = 0.001;
    e_0218 = 0.001;
    e_0219 = 0.001;
    e_0220 = 0.001;
    e_0223 = 0.001;
    e_0231 = 0.001;
    e_0234 = 0.001;
    e_0237 = 0.001;
    e_0239 = 0.001;
    e_0243 = 0.001;
    e_0249 = 0.001;
    e_0250 = 0.001;
    e_0251 = 0.001;
    e_0255 = 0.001;
    e_0260 = 0.001;
    e_0263 = 0.001;
    e_0268 = 0.001;
    e_0269 = 0.001;
    e_0271 = 0.001;
    e_0273 = 0.001;
    e_0276 = 0.001;
    e_0278 = 0.001;
    e_0280 = 0.001;
    e_0281 = 0.001;
    e_0283 = 0.001;
    e_0288 = 0.001;
    e_0289 = 0.001;
    e_0290 = 0.001;
    e_0291 = 0.001;
    e_0293 = 0.001;
    e_0295 = 0.001;
    e_0296 = 0.001;
    e_0297 = 0.001;
    e_0298 = 0.001;
    e_0299 = 0.001;
    e_0303 = 0.001;
    e_0311 = 0.001;
    e_0312 = 0.001;
    e_0313 = 0.001;
    e_0314 = 0.001;
    e_0317 = 0.001;
    e_0320 = 0.001;
    e_0321 = 0.001;
    e_0322 = 0.001;
    e_0325 = 0.001;
    e_0326 = 0.001;
    e_0328 = 0.001;
    e_0329 = 0.001;
    e_0330 = 0.001;
    e_0334 = 0.001;
    e_0340 = 0.001;
    e_0342 = 0.001;
    e_0343 = 0.001;
    e_0346 = 0.001;
    e_0347 = 0.001;
    e_0348 = 0.001;
    e_0352 = 0.001;
    e_0353 = 0.001;
    e_0355 = 0.001;
    e_0356 = 0.001;
    e_0362 = 0.001;
    e_0364 = 0.001;
    e_0365 = 0.001;
    e_0367 = 0.001;
    e_0368 = 0.001;
    e_0370 = 0.001;
    e_0372 = 0.001;
    e_0376 = 0.001;
    e_0379 = 0.001;
    e_0380 = 0.001;
    e_0381 = 0.001;
    e_0382 = 0.001;
    e_0385 = 0.001;
    e_0387 = 0.001;
    e_0389 = 0.001;
    e_0390 = 0.001;
    e_0392 = 0.001;
    e_0396 = 0.001;
    e_0398 = 0.001;
    e_0401 = 0.001;
    e_0404 = 0.001;
    e_0405 = 0.001;
    e_0407 = 0.001;
    e_0409 = 0.001;
    e_0417 = 0.001;
    e_0418 = 0.001;
    e_0422 = 0.001;
    e_0424 = 0.001;
    e_0425 = 0.001;
    e_0426 = 0.001;
    e_0427 = 0.001;
    e_0428 = 0.001;
    e_0429 = 0.001;
    e_0431 = 0.001;
    e_0432 = 0.001;
    e_0434 = 0.001;
    e_0435 = 0.001;
    e_0436 = 0.001;
    e_0440 = 0.001;
    e_0447 = 0.001;
    e_0448 = 0.001;
    e_0452 = 0.001;
    e_0453 = 0.001;
    e_0454 = 0.001;
    e_0455 = 0.001;
    e_0456 = 0.001;
    e_0457 = 0.001;
    e_0458 = 0.001;
    e_0462 = 0.001;
    e_0465 = 0.001;
    e_0466 = 0.001;
    e_0467 = 0.001;
    e_0470 = 0.001;
    e_0472 = 0.001;
    e_0475 = 0.001;
    e_0476 = 0.001;
    e_0489 = 0.001;
    e_0492 = 0.001;
    e_0494 = 0.001;
    e_0495 = 0.001;
    e_0496 = 0.001;
    e_0499 = 0.001;
    e_0506 = 0.001;
    e_0508 = 0.001;
    e_0510 = 0.001;
    e_0512 = 0.001;
    e_0514 = 0.001;
    e_0515 = 0.001;
    e_0525 = 0.001;
    e_0528 = 0.001;
    e_0531 = 0.001;
    e_0536 = 0.001;
    e_0540 = 0.001;
    e_0541 = 0.001;
    e_0542 = 0.001;
    e_0544 = 0.001;
    e_0545 = 0.001;
    e_0547 = 0.001;
    e_0548 = 0.001;
    e_0549 = 0.001;
    e_0550 = 0.001;
    e_0556 = 0.001;
    e_0557 = 0.001;
    e_0558 = 0.001;
    e_0559 = 0.001;
    e_0561 = 0.001;
    e_0565 = 0.001;
    e_0567 = 0.001;
    e_0568 = 0.001;
    e_0569 = 0.001;
    e_0571 = 0.001;
    e_0574 = 0.001;
    e_0576 = 0.001;
    e_0578 = 0.001;
    e_0579 = 0.001;
    e_0581 = 0.001;
    e_0582 = 0.001;
    e_0585 = 0.001;
    e_0586 = 0.001;
    e_0588 = 0.001;
    e_0591 = 0.001;
    e_0594 = 0.001;
    e_0601 = 0.001;
    e_0603 = 0.001;
    e_0607 = 0.001;
    e_0610 = 0.001;
    e_0611 = 0.001;
    e_0612 = 0.001;
    e_0613 = 0.001;
    e_0615 = 0.001;
    e_0619 = 0.001;
    e_0621 = 0.001;
    e_0629 = 0.001;
    e_0631 = 0.001;
    e_0632 = 0.001;
    e_0633 = 0.001;
    e_0636 = 0.001;
    e_0638 = 0.001;
    e_0639 = 0.001;
    e_0642 = 0.001;
    e_0644 = 0.001;
    e_0647 = 0.001;
    e_0658 = 0.001;
    e_0667 = 0.001;
    e_0671 = 0.001;
    e_0674 = 0.001;
    e_0675 = 0.001;
    e_0682 = 0.001;
    e_0684 = 0.001;
    e_0685 = 0.001;
    e_0686 = 0.001;
    e_0687 = 0.001;
    e_0690 = 0.001;
    e_0692 = 0.001;
    e_0693 = 0.001;
    e_0695 = 0.001;
    e_0697 = 0.001;
    e_0698 = 0.001;
    e_0699 = 0.001;
    e_0704 = 0.001;
    e_0705 = 0.001;
    e_0708 = 0.001;
    e_0709 = 0.001;
    e_0711 = 0.001;
    e_0712 = 0.001;
    e_0716 = 0.001;
    e_0727 = 0.001;
    e_0729 = 0.001;
    e_0730 = 0.001;
    e_0733 = 0.001;
    e_0734 = 0.001;
    e_0736 = 0.001;
    e_0740 = 0.001;
    e_0741 = 0.001;
    e_0742 = 0.001;
    e_0743 = 0.001;
    e_0744 = 0.001;
    e_0745 = 0.001;
    e_0746 = 0.001;
    e_0747 = 0.001;
    e_0750 = 0.001;
    e_0752 = 0.001;
    e_0753 = 0.001;
    e_0754 = 0.001;
    e_0755 = 0.001;
    e_0757 = 0.001;
    e_0761 = 0.001;
    e_0762 = 0.001;
    e_0763 = 0.001;
    e_0765 = 0.001;
    e_0769 = 0.001;
    e_0771 = 0.001;
    e_0774 = 0.001;
    e_0778 = 0.001;
    e_0788 = 0.001;
    e_0791 = 0.001;
    e_0792 = 0.001;
    e_0793 = 0.001;
    e_0799 = 0.001;
    e_0800 = 0.001;
    e_0802 = 0.001;
    e_0805 = 0.001;
    e_0808 = 0.001;
    e_0812 = 0.001;
    e_0813 = 0.001;
    e_0826 = 0.001;
    e_0827 = 0.001;
    e_0829 = 0.001;
    e_0830 = 0.001;
    e_0832 = 0.001;
    e_0834 = 0.001;
    e_0836 = 0.001;
    e_0838 = 0.001;
    e_0840 = 0.001;
    e_0841 = 0.001;
    e_0842 = 0.001;
    e_0846 = 0.001;
    e_0848 = 0.001;
    e_0850 = 0.001;
    e_0851 = 0.001;
    e_0852 = 0.001;
    e_0855 = 0.001;
    e_0860 = 0.001;
    e_0862 = 0.001;
    e_0867 = 0.001;
    e_0869 = 0.001;
    e_0875 = 0.001;
    e_0880 = 0.001;
    e_0883 = 0.001;
    e_0884 = 0.001;
    e_0888 = 0.001;
    e_0889 = 0.001;
    e_0890 = 0.001;
    e_0892 = 0.001;
    e_0894 = 0.001;
    e_0895 = 0.001;
    e_0898 = 0.001;
    e_0903 = 0.001;
    e_0904 = 0.001;
    e_0911 = 0.001;
    e_0913 = 0.001;
    e_0915 = 0.001;
    e_0922 = 0.001;
    e_0924 = 0.001;
    e_0926 = 0.001;
    e_0934 = 0.001;
    e_0935 = 0.001;
    e_0940 = 0.001;
    e_0944 = 0.001;
    e_0947 = 0.001;
    e_0950 = 0.001;
    e_0953 = 0.001;
    e_0955 = 0.001;
    e_0956 = 0.001;
    e_0959 = 0.001;
    e_0962 = 0.001;
    e_0963 = 0.001;
    e_0964 = 0.001;
    e_0970 = 0.001;
    e_0973 = 0.001;
    e_0975 = 0.001;
    e_0976 = 0.001;
    e_0978 = 0.001;
    e_0980 = 0.001;
    F26bP = 0.02;

equation

    der(s_0002) = (cell * Vmax_2 * (s_1543 - s_0002 * s_1538 / Keq_2) / Km1543_2 / (1 + s_1543 / Km1543_2 + (1 + s_0002 / Km0002_2) * (1 + s_1538 / Km1538_2) - 1)) - (1.1348 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0004) = (cell * Vmax_3 * (s_1543 - s_0004 * s_1538 / Keq_3) / Km1543_3 / (1 + s_1543 / Km1543_3 + (1 + s_0004 / Km0004_3) * (1 + s_1538 / Km1538_3) - 1)) - (1.1348 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0008) = (cell * Vmax_169 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_169) / (Km0039_169 * Km1212_169) / ((1 + s_0039 / Km0039_169) * (1 + s_1212 / Km1212_169) + (1 + s_0008 / Km0008_169) * (1 + s_1207 / Km1207_169) - 1)) - (cell * Vmax_95 * (s_0008 - s_0056 / Keq_95) / Km0008_95 / (1 + s_0008 / Km0008_95 + 1 + s_0056 / Km0056_95 - 1));
    der(s_0009) = (cell * Vmax_21 * (s_0165 - s_0009 / Keq_21) / Km0165_21 / (1 + s_0165 / Km0165_21 + 1 + s_0009 / Km0009_21 - 1)) - (cell * Vmax_22 * (s_0009 * NAD - s_0010 * NADH / Keq_22) / (Km0009_22 * KmNAD_22) / ((1 + s_0009 / Km0009_22) * (1 + NAD / KmNAD_22) + (1 + s_0010 / Km0010_22) * (1 + NADH / KmNAD_22H) - 1));
    der(s_0010) = (cell * Vmax_22 * (s_0009 * NAD - s_0010 * NADH / Keq_22) / (Km0009_22 * KmNAD_22) / ((1 + s_0009 / Km0009_22) * (1 + NAD / KmNAD_22) + (1 + s_0010 / Km0010_22) * (1 + NADH / KmNAD_22H) - 1)) - (cell * Vmax_15 * (s_0010 - s_0291 * CO2 / Keq_15) / Km0010_15 / (1 + s_0010 / Km0010_15 + (1 + s_0291 / Km0291_15) * (1 + CO2 / KmCO2_15) - 1));
    der(s_0015) = (cell * Vmax_51 * (ATP * s_0973 * s_0979 - s_0015 * AMP * s_0633 / Keq_51) / (KmATP_51 * Km0973_51 * Km0979_51) / ((1 + ATP / KmATP_51) * (1 + s_0973 / Km0973_51) * (1 + s_0979 / Km0979_51) + (1 + s_0015 / Km0015_51) * (1 + AMP / KmAMP_51) * (1 + s_0633 / Km0633_51) - 1)) - (cell * Vmax_50 * (s_0015 - s_0725 * s_0965 / Keq_50) / Km0015_50 / (1 + s_0015 / Km0015_50 + (1 + s_0725 / Km0725_50) * (1 + s_0965 / Km0965_50) - 1));
    der(s_0016) = (cell * Vmax_27 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_27) / (Km0146_27 * Km1212_27) / ((1 + s_0146 / Km0146_27) * (1 + s_1212 / Km1212_27) + (1 + s_0016 / Km0016_27) * (1 + s_1207 / Km1207_27) - 1)) - (cell * Vmax_94 * (s_0016 - s_0232 / Keq_94) / Km0016_94 / (1 + s_0016 / Km0016_94 + 1 + s_0232 / Km0232_94 - 1));
    der(s_0018) = (cell * Vmax_220 * (s_0019 * ATP - s_0018 * ADP / Keq_220) / (Km0019_220 * KmATP_220) / ((1 + s_0019 / Km0019_220) * (1 + ATP / KmATP_220) + (1 + s_0018 / Km0018_220) * (1 + ADP / KmADP_220) - 1)) - (cell * Vmax_191 * (s_0018 * ATP - ADP * CO2 * s_0943 * PHO / Keq_191) / (Km0018_191 * KmATP_191) / ((1 + s_0018 / Km0018_191) * (1 + ATP / KmATP_191) + (1 + ADP / KmADP_191) * (1 + CO2 / KmCO2_191) * (1 + s_0943 / Km0943_191) * (1 + PHO / KmPHO_191) - 1));
    der(s_0019) = (cell * Vmax_189 * (s_0028 * ATP - s_0019 * ADP / Keq_189) / (Km0028_189 * KmATP_189) / ((1 + s_0028 / Km0028_189) * (1 + ATP / KmATP_189) + (1 + s_0019 / Km0019_189) * (1 + ADP / KmADP_189) - 1)) + (cell * Vmax_190 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_190) / (Km0028_190 * Km0539_190) / ((1 + s_0028 / Km0028_190) * (1 + s_0539 / Km0539_190) + (1 + s_0019 / Km0019_190) * (1 + s_0467 / Km0467_190) - 1)) - (cell * Vmax_220 * (s_0019 * ATP - s_0018 * ADP / Keq_220) / (Km0019_220 * KmATP_220) / ((1 + s_0019 / Km0019_220) * (1 + ATP / KmATP_220) + (1 + s_0018 / Km0018_220) * (1 + ADP / KmADP_220) - 1));
    der(s_0025) = (cell * Vmax_153 * (s_0033 - s_0025 * s_0750 / Keq_153) / Km0033_153 / (1 + s_0033 / Km0033_153 + (1 + s_0025 / Km0025_153) * (1 + s_0750 / Km0750_153) - 1)) - (cell * Vmax_0 * (s_0025 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_0) / (Km0025_0 * pow(Km0709_0, 2)) / ((1 + s_0025 / Km0025_0) * pow(1 + s_0709 / Km0709_0, 2) + pow(1 + s_0710 / Km0710_0, 2) * (1 + PYR / KmPYR_0) - 1));
    der(s_0028) = (cell * Vmax_154 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_154) / (Km0218_154 * pow(Km1212_154, 2)) / ((1 + s_0218 / Km0218_154) * pow(1 + s_1212 / Km1212_154, 2) + (1 + s_0028 / Km0028_154) * (1 + s_0529 / Km0529_154) * pow(1 + s_1207 / Km1207_154, 2) - 1)) - (cell * Vmax_189 * (s_0028 * ATP - s_0019 * ADP / Keq_189) / (Km0028_189 * KmATP_189) / ((1 + s_0028 / Km0028_189) * (1 + ATP / KmATP_189) + (1 + s_0019 / Km0019_189) * (1 + ADP / KmADP_189) - 1)) - (cell * Vmax_190 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_190) / (Km0028_190 * Km0539_190) / ((1 + s_0028 / Km0028_190) * (1 + s_0539 / Km0539_190) + (1 + s_0019 / Km0019_190) * (1 + s_0467 / Km0467_190) - 1));
    der(s_0033) = (cell * Vmax_175 * (s_0750 * s_1151 - s_0033 / Keq_175) / (Km0750_175 * Km1151_175) / ((1 + s_0750 / Km0750_175) * (1 + s_1151 / Km1151_175) + 1 + s_0033 / Km0033_175 - 1)) - (cell * Vmax_153 * (s_0033 - s_0025 * s_0750 / Keq_153) / Km0033_153 / (1 + s_0033 / Km0033_153 + (1 + s_0025 / Km0025_153) * (1 + s_0750 / Km0750_153) - 1));
    der(s_0037) = (cell * Vmax_254 * (NADH * s_1275 * s_1447 - s_0037 * NAD / Keq_254) / (KmNAD_254H_254 * Km1275_254 * Km1447_254) / ((1 + NADH / KmNAD_254H_254) * (1 + s_1275 / Km1275_254) * (1 + s_1447 / Km1447_254) + (1 + s_0037 / Km0037_254) * (1 + NAD / KmNAD_254) - 1)) - (cell * Vmax_176 * (s_0037 - s_1059 / Keq_176) / Km0037_176 / (1 + s_0037 / Km0037_176 + 1 + s_1059 / Km1059_176 - 1));
    der(s_0039) = (cell * Vmax_9 * (s_0178 * PYR - s_0039 * CO2 / Keq_9) / (Km0178_9 * KmPYR_9) / ((1 + s_0178 / Km0178_9) * (1 + PYR / KmPYR_9) + (1 + s_0039 / Km0039_9) * (1 + CO2 / KmCO2_9) - 1)) - (cell * Vmax_169 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_169) / (Km0039_169 * Km1212_169) / ((1 + s_0039 / Km0039_169) * (1 + s_1212 / Km1212_169) + (1 + s_0008 / Km0008_169) * (1 + s_1207 / Km1207_169) - 1));
    der(s_0056) = (cell * Vmax_95 * (s_0008 - s_0056 / Keq_95) / Km0008_95 / (1 + s_0008 / Km0008_95 + 1 + s_0056 / Km0056_95 - 1)) - (cell * Vmax_166 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_166) / (Km0056_166 * Km0991_166) / ((1 + s_0056 / Km0056_166) * (1 + s_0991 / Km0991_166) + (1 + s_0180 / Km0180_166) * (1 + s_1016 / Km1016_166) - 1));
    der(s_0061) = (cell * Vmax_93 * (s_1194 - s_0061 / Keq_93) / Km1194_93 / (1 + s_1194 / Km1194_93 + 1 + s_0061 / Km0061_93 - 1)) - (cell * Vmax_297 * (s_0061 * NAD - s_1269 * NADH / Keq_297) / (Km0061_297 * KmNAD_297) / ((1 + s_0061 / Km0061_297) * (1 + NAD / KmNAD_297) + (1 + s_1269 / Km1269_297) * (1 + NADH / KmNAD_297H) - 1));
    der(s_0062) = (cell * Vmax_172 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_172) / (Km1151_172 * Km1212_172) / ((1 + s_1151 / Km1151_172) * (1 + s_1212 / Km1212_172) + (1 + s_0062 / Km0062_172) * (1 + s_1207 / Km1207_172) - 1)) - (cell * Vmax_174 * (s_0062 * NAD - s_0063 * NADH / Keq_174) / (Km0062_174 * KmNAD_174) / ((1 + s_0062 / Km0062_174) * (1 + NAD / KmNAD_174) + (1 + s_0063 / Km0063_174) * (1 + NADH / KmNAD_174H) - 1));
    der(s_0063) = (cell * Vmax_174 * (s_0062 * NAD - s_0063 * NADH / Keq_174) / (Km0062_174 * KmNAD_174) / ((1 + s_0062 / Km0062_174) * (1 + NAD / KmNAD_174) + (1 + s_0063 / Km0063_174) * (1 + NADH / KmNAD_174H) - 1)) - (cell * Vmax_1 * (s_0063 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_1) / (Km0063_1 * pow(Km0709_1, 2)) / ((1 + s_0063 / Km0063_1) * pow(1 + s_0709 / Km0709_1, 2) + pow(1 + s_0710 / Km0710_1, 2) * (1 + PYR / KmPYR_1) - 1));
    der(s_0066) = (cell * Vmax_121 * (s_0725 - s_0066 / Keq_121) / Km0725_121 / (1 + s_0725 / Km0725_121 + 1 + s_0066 / Km0066_121 - 1)) - (cell * Vmax_180 * (s_0066 * NAD - NADH * s_1271 / Keq_180) / (Km0066_180 * KmNAD_180) / ((1 + s_0066 / Km0066_180) * (1 + NAD / KmNAD_180) + (1 + NADH / KmNAD_180H) * (1 + s_1271 / Km1271_180) - 1));
    der(BPG) = (cell * Vmax_129 / (Kgap_129 * Knad_129 * Kpho_129) * (GAP * NAD * PHO - BPG * NADH / Keq_129) / ((1 + PHO / Kpho_129) * (1 + GAP / Kgap_129 + BPG / Kbpg_129) * (1 + NAD / Knad_129 + NADH / Knad_129h))) - (cell * (Vmax_215 * (BPG * ADP / (Kbpg_215 * Kadp_215) - P3G * ATP / (Kbpg_215 * Kadp_215 * Keq_215)) / ((1 + BPG / Kbpg_215 + P3G / Kp3g_215) * (1 + ADP / Kadp_215 + ATP / Katp_215))));
    der(s_0076) = (cell * Vmax_226 * (s_1187 - s_0076 / Keq_226) / Km1187_226 / (1 + s_1187 / Km1187_226 + 1 + s_0076 / Km0076_226 - 1)) - (cell * Vmax_159 * (s_0076 - s_0086 * CO2 / Keq_159) / Km0076_159 / (1 + s_0076 / Km0076_159 + (1 + s_0086 / Km0086_159) * (1 + CO2 / KmCO2_159) - 1));
    der(s_0077) = (cell * Vmax_222 * (s_0078 - s_0077 / Keq_222) / Km0078_222 / (1 + s_0078 / Km0078_222 + 1 + s_0077 / Km0077_222 - 1)) - (cell * Vmax_4 * (s_0077 - s_0312 / Keq_4) / Km0077_4 / (1 + s_0077 / Km0077_4 + 1 + s_0312 / Km0312_4 - 1));
    der(s_0078) = (cell * Vmax_223 * (s_0326 - s_0078 * s_0633 / Keq_223) / Km0326_223 / (1 + s_0326 / Km0326_223 + (1 + s_0078 / Km0078_223) * (1 + s_0633 / Km0633_223) - 1)) - (cell * Vmax_222 * (s_0078 - s_0077 / Keq_222) / Km0078_222 / (1 + s_0078 / Km0078_222 + 1 + s_0077 / Km0077_222 - 1));
    der(s_0082) = (cell * Vmax_132 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_132) / (Km0380_132 * Km0767_132) / ((1 + s_0380 / Km0380_132) * (1 + s_0767 / Km0767_132) + (1 + s_0082 / Km0082_132) * (1 + s_0529 / Km0529_132) - 1)) - (cell * Vmax_5 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_5) / (Km0082_5 * Km0380_5) / ((1 + s_0082 / Km0082_5) * (1 + s_0380 / Km0380_5) + (1 + s_0529 / Km0529_5) * (1 + s_1331 / Km1331_5) - 1));
    der(s_0086) = (cell * Vmax_159 * (s_0076 - s_0086 * CO2 / Keq_159) / Km0076_159 / (1 + s_0076 / Km0076_159 + (1 + s_0086 / Km0086_159) * (1 + CO2 / KmCO2_159) - 1)) - (cell * Vmax_271 * (s_0086 * s_1039 - GAP * s_1048 / Keq_271) / (Km0086_271 * Km1039_271) / ((1 + s_0086 / Km0086_271) * (1 + s_1039 / Km1039_271) + (1 + GAP / KmGAP_271) * (1 + s_1048 / Km1048_271) - 1));
    der(s_0089) = (cell * Vmax_207 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_207) / (Km0471_207 * Km1153_207) / ((1 + s_0471 / Km0471_207) * (1 + s_1153 / Km1153_207) + (1 + s_0089 / Km0089_207) * (1 + s_0526 / Km0526_207) - 1)) - (cell * Vmax_162 * (s_0089 * s_0478 - s_0619 * s_0897 / Keq_162) / (Km0089_162 * Km0478_162) / ((1 + s_0089 / Km0089_162) * (1 + s_0478 / Km0478_162) + (1 + s_0619 / Km0619_162) * (1 + s_0897 / Km0897_162) - 1)) - (0.001583 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0118) = (cell * Vmax_6 * (s_0991 * NADH - s_0118 * NAD / Keq_6) / (Km0991_6 * KmNAD_6H_6) / ((1 + s_0991 / Km0991_6) * (1 + NADH / KmNAD_6H_6) + (1 + s_0118 / Km0118_6) * (1 + NAD / KmNAD_6) - 1)) - (cell * Vmax_233 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_233) / (Km0118_233 * Km1212_233) / ((1 + s_0118 / Km0118_233) * (1 + s_1212 / Km1212_233) + (1 + s_1035 / Km1035_233) * (1 + s_1207 / Km1207_233) - 1));
    der(s_0120) = (cell * Vmax_119 * (ATP * s_0722 * s_1487 - s_0120 * ADP * PHO / Keq_119) / (KmATP_119 * Km0722_119 * Km1487_119) / ((1 + ATP / KmATP_119) * (1 + s_0722 / Km0722_119) * (1 + s_1487 / Km1487_119) + (1 + s_0120 / Km0120_119) * (1 + ADP / KmADP_119) * (1 + PHO / KmPHO_119) - 1)) + (cell * Vmax_183 * (s_0304 - s_0120 / Keq_183) / Km0304_183 / (1 + s_0304 / Km0304_183 + 1 + s_0120 / Km0120_183 - 1)) - (cell * Vmax_133 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_133) / (Km0120_133 * Km0325_133) / ((1 + s_0120 / Km0120_133) * (1 + s_0325 / Km0325_133) + (1 + s_0301 / Km0301_133) * (1 + s_1487 / Km1487_133) - 1)) - (cell * Vmax_225 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_225) / (Km0120_225 * Km0403_225) / ((1 + s_0120 / Km0120_225) * (1 + s_0403 / Km0403_225) + (1 + s_1365 / Km1365_225) * (1 + s_1487 / Km1487_225) - 1));
    der(s_0122) = (cell * Vmax_63 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_63) / (Km0262_63 * Km1212_63) / ((1 + s_0262 / Km0262_63) * (1 + s_1212 / Km1212_63) + (1 + s_0122 / Km0122_63) * (1 + s_1207 / Km1207_63) - 1)) - (cell * Vmax_71 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_71) / (Km0122_71 * pow(Km1212_71, 3) * pow(Km1275_71, 3)) / ((1 + s_0122 / Km0122_71) * pow(1 + s_1212 / Km1212_71, 3) * pow(1 + s_1275 / Km1275_71, 3) + (1 + s_0297 / Km0297_71) * pow(1 + s_1207 / Km1207_71, 3) - 1)) - (5.6e-05 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0126) = (cell * Vmax_193 * (G6P - s_0126 / Keq_193) / KmG6P_193 / (1 + G6P / KmG6P_193 + 1 + s_0126 / Km0126_193 - 1)) - (cell * Vmax_192 * (s_0126 - s_1153 * PHO / Keq_192) / Km0126_192 / (1 + s_0126 / Km0126_192 + (1 + s_1153 / Km1153_192) * (1 + PHO / KmPHO_192) - 1));
    der(s_0141) = (cell * Vmax_139 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_139) / Km0785_139 / (1 + s_0785 / Km0785_139 + (1 + s_0141 / Km0141_139) * (1 + s_0633 / Km0633_139) * (1 + s_0722 / Km0722_139) - 1)) - (cell * Vmax_8 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_8) / (Km0141_8 * Km1212_8) / ((1 + s_0141 / Km0141_8) * (1 + s_1212 / Km1212_8) + (1 + s_0142 / Km0142_8) * (1 + s_1207 / Km1207_8) - 1));
    der(s_0142) = (cell * Vmax_8 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_8) / (Km0141_8 * Km1212_8) / ((1 + s_0141 / Km0141_8) * (1 + s_1212 / Km1212_8) + (1 + s_0142 / Km0142_8) * (1 + s_1207 / Km1207_8) - 1)) - (cell * Vmax_7 * (s_0142 - s_0313 * s_0419 / Keq_7) / Km0142_7 / (1 + s_0142 / Km0142_7 + (1 + s_0313 / Km0313_7) * (1 + s_0419 / Km0419_7) - 1));
    der(s_0145) = (cell * Vmax_194 * (s_1191 * s_1212 - s_0145 * s_1207 * PHO / Keq_194) / (Km1191_194 * Km1212_194) / ((1 + s_1191 / Km1191_194) * (1 + s_1212 / Km1212_194) + (1 + s_0145 / Km0145_194) * (1 + s_1207 / Km1207_194) * (1 + PHO / KmPHO_194) - 1)) - (cell * Vmax_33 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_33) / (Km0145_33 * Km0991_33) / ((1 + s_0145 / Km0145_33) * (1 + s_0991 / Km0991_33) + (1 + s_0180 / Km0180_33) * (1 + s_1182 / Km1182_33) - 1));
    der(s_0146) = (cell * Vmax_28 * (pow(PYR, 2) - s_0146 * CO2 / Keq_28) / pow(KmPYR_28, 2) / (pow(1 + PYR / KmPYR_28, 2) + (1 + s_0146 / Km0146_28) * (1 + CO2 / KmCO2_28) - 1)) - (cell * Vmax_27 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_27) / (Km0146_27 * Km1212_27) / ((1 + s_0146 / Km0146_27) * (1 + s_1212 / Km1212_27) + (1 + s_0016 / Km0016_27) * (1 + s_1207 / Km1207_27) - 1));
    der(s_0158) = (cell * Vmax_17 * (s_0577 - s_0158 * s_0722 / Keq_17) / Km0577_17 / (1 + s_0577 / Km0577_17 + (1 + s_0158 / Km0158_17) * (1 + s_0722 / Km0722_17) - 1)) - (cell * Vmax_237 * (s_0158 * s_0314 - s_0328 * PHO / Keq_237) / (Km0158_237 * Km0314_237) / ((1 + s_0158 / Km0158_237) * (1 + s_0314 / Km0314_237) + (1 + s_0328 / Km0328_237) * (1 + PHO / KmPHO_237) - 1));
    der(s_0162) = (cell * Vmax_13 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_13) / (Km0232_13 * Km0373_13) / ((1 + s_0232 / Km0232_13) * (1 + s_0373 / Km0373_13) + (1 + s_0162 / Km0162_13) * (1 + s_0529 / Km0529_13) - 1)) - (cell * Vmax_12 * (s_0162 - s_0165 / Keq_12) / Km0162_12 / (1 + s_0162 / Km0162_12 + 1 + s_0165 / Km0165_12 - 1));
    der(s_0165) = (cell * Vmax_12 * (s_0162 - s_0165 / Keq_12) / Km0162_12 / (1 + s_0162 / Km0162_12 + 1 + s_0165 / Km0165_12 - 1)) - (cell * Vmax_21 * (s_0165 - s_0009 / Keq_21) / Km0165_21 / (1 + s_0165 / Km0165_21 + 1 + s_0009 / Km0009_21 - 1));
    der(s_0176) = (cell * Vmax_149 * (s_0836 * NAD - s_0176 * NADH * CO2 / Keq_149) / (Km0836_149 * KmNAD_149) / ((1 + s_0836 / Km0836_149) * (1 + NAD / KmNAD_149) + (1 + s_0176 / Km0176_149) * (1 + NADH / KmNAD_149H) * (1 + CO2 / KmCO2_149) - 1)) - (cell * Vmax_10 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_10) / (Km0176_10 * Km0991_10) / ((1 + s_0176 / Km0176_10) * (1 + s_0991 / Km0991_10) + (1 + s_0180 / Km0180_10) * (1 + s_0953 / Km0953_10) - 1));
    der(s_0178) = (cell * Vmax_84 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_84) / Km0980_84 / (1 + s_0980 / Km0980_84 + (1 + s_0178 / Km0178_84) * (1 + s_0419 / Km0419_84) * (1 + s_0981 / Km0981_84) - 1)) + (cell * Vmax_173 * (s_1045 - s_0178 * s_0419 / Keq_173) / Km1045_173 / (1 + s_1045 / Km1045_173 + (1 + s_0178 / Km0178_173) * (1 + s_0419 / Km0419_173) - 1)) - (cell * Vmax_9 * (s_0178 * PYR - s_0039 * CO2 / Keq_9) / (Km0178_9 * KmPYR_9) / ((1 + s_0178 / Km0178_9) * (1 + PYR / KmPYR_9) + (1 + s_0039 / Km0039_9) * (1 + CO2 / KmCO2_9) - 1));
    der(s_0180) = (cell * Vmax_10 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_10) / (Km0176_10 * Km0991_10) / ((1 + s_0176 / Km0176_10) * (1 + s_0991 / Km0991_10) + (1 + s_0180 / Km0180_10) * (1 + s_0953 / Km0953_10) - 1)) + (cell * Vmax_33 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_33) / (Km0145_33 * Km0991_33) / ((1 + s_0145 / Km0145_33) * (1 + s_0991 / Km0991_33) + (1 + s_0180 / Km0180_33) * (1 + s_1182 / Km1182_33) - 1)) + (cell * Vmax_57 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_57) / (Km0991_57 * Km1271_57) / ((1 + s_0991 / Km0991_57) * (1 + s_1271 / Km1271_57) + (1 + s_0180 / Km0180_57) * (1 + s_0973 / Km0973_57) - 1)) + (cell * Vmax_145 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_145) / (Km0207_145 * Km0991_145) / ((1 + s_0207 / Km0207_145) * (1 + s_0991 / Km0991_145) + (1 + s_0180 / Km0180_145) * (1 + s_1011 / Km1011_145) - 1)) + (cell * Vmax_163 * (s_0940 * NAD - s_0180 * CO2 * NADH / Keq_163) / (Km0940_163 * KmNAD_163) / ((1 + s_0940 / Km0940_163) * (1 + NAD / KmNAD_163) + (1 + s_0180 / Km0180_163) * (1 + CO2 / KmCO2_163) * (1 + NADH / KmNAD_163H) - 1)) + (cell * Vmax_164 * (s_0940 * s_1207 - s_0180 * CO2 * s_1212 / Keq_164) / (Km0940_164 * Km1207_164) / ((1 + s_0940 / Km0940_164) * (1 + s_1207 / Km1207_164) + (1 + s_0180 / Km0180_164) * (1 + CO2 / KmCO2_164) * (1 + s_1212 / Km1212_164) - 1)) + (cell * Vmax_166 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_166) / (Km0056_166 * Km0991_166) / ((1 + s_0056 / Km0056_166) * (1 + s_0991 / Km0991_166) + (1 + s_0180 / Km0180_166) * (1 + s_1016 / Km1016_166) - 1)) + (cell * Vmax_170 * (s_0991 * PYR - s_0180 * s_0955 / Keq_170) / (Km0991_170 * KmPYR_170) / ((1 + s_0991 / Km0991_170) * (1 + PYR / KmPYR_170) + (1 + s_0180 / Km0180_170) * (1 + s_0955 / Km0955_170) - 1)) + (cell * Vmax_177 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_177) / (Km0291_177 * Km0991_177) / ((1 + s_0291 / Km0291_177) * (1 + s_0991 / Km0991_177) + (1 + s_0180 / Km0180_177) * (1 + s_1021 / Km1021_177) - 1)) + (cell * Vmax_203 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_203) / (Km0951_203 * Km0991_203) / ((1 + s_0951 / Km0951_203) * (1 + s_0991 / Km0991_203) + (1 + s_0180 / Km0180_203) * (1 + s_1032 / Km1032_203) - 1)) + (cell * Vmax_247 * (s_1038 * NAD - s_0180 * s_1025 * NADH / Keq_247) / (Km1038_247 * KmNAD_247) / ((1 + s_1038 / Km1038_247) * (1 + NAD / KmNAD_247) + (1 + s_0180 / Km0180_247) * (1 + s_1025 / Km1025_247) * (1 + NADH / KmNAD_247H) - 1)) + (cell * Vmax_273 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_273) / (Km0204_273 * Km0991_273) / ((1 + s_0204 / Km0204_273) * (1 + s_0991 / Km0991_273) + (1 + s_0180 / Km0180_273) * (1 + s_1051 / Km1051_273) - 1)) + (cell * Vmax_277 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_277) / (Km0232_277 * Km0991_277) / ((1 + s_0232 / Km0232_277) * (1 + s_0991 / Km0991_277) + (1 + s_0180 / Km0180_277) * (1 + s_1056 / Km1056_277) - 1)) - (cell * Vmax_125 * (s_0180 * s_0419 * NADH - s_0991 * NAD / Keq_125) / (Km0180_125 * Km0419_125 * KmNAD_125H_125) / ((1 + s_0180 / Km0180_125) * (1 + s_0419 / Km0419_125) * (1 + NADH / KmNAD_125H_125) + (1 + s_0991 / Km0991_125) * (1 + NAD / KmNAD_125) - 1)) - (cell * Vmax_148 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_148) / (Km0180_148 * Km0373_148) / ((1 + s_0180 / Km0180_148) * (1 + s_0373 / Km0373_148) + (1 + s_0529 / Km0529_148) * (1 + s_0835 / Km0835_148) - 1));
    der(P2G) = (cell * (Vmax_216 * (P3G / Kp3g_216 - P2G / (Kp3g_216 * Keq_216)) / (1 + P3G / Kp3g_216 + P2G / Kp2g_216))) - (cell * (Vmax_100 * (P2G / Kp2g_100 - PEP / (Kp2g_100 * Keq_100)) / (1 + P2G / Kp2g_100 + PEP / Kpep_100)));
    der(s_0190) = (cell * Vmax_122 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_122) / (Km0745_122 * Km0943_122) / ((1 + s_0745 / Km0745_122) * (1 + s_0943 / Km0943_122) + (1 + s_0190 / Km0190_122) * (1 + s_0633 / Km0633_122) - 1)) - (2.0 * cell * Vmax_255 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_255) / (pow(Km0190_255, 2) * Km1212_255) / (pow(1 + s_0190 / Km0190_255, 2) * (1 + s_1212 / Km1212_255) + pow(1 + s_0633 / Km0633_255, 2) * (1 + s_1207 / Km1207_255) * (1 + s_1447 / Km1447_255) - 1));
    der(s_0201) = (cell * Vmax_41 * (s_0298 * ATP - s_0201 * ADP / Keq_41) / (Km0298_41 * KmATP_41) / ((1 + s_0298 / Km0298_41) * (1 + ATP / KmATP_41) + (1 + s_0201 / Km0201_41) * (1 + ADP / KmADP_41) - 1)) - (cell * Vmax_210 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_210) / (Km0201_210 * Km1616_210) / ((1 + s_0201 / Km0201_210) * (1 + s_1616 / Km1616_210) + (1 + s_0390 / Km0390_210) * (1 + s_1469 / Km1469_210) * (1 + s_1620 / Km1620_210) - 1));
    der(s_0204) = (cell * Vmax_231 * (s_1207 * s_1377 - s_0204 * CO2 * s_1212 / Keq_231) / (Km1207_231 * Km1377_231) / ((1 + s_1207 / Km1207_231) * (1 + s_1377 / Km1377_231) + (1 + s_0204 / Km0204_231) * (1 + CO2 / KmCO2_231) * (1 + s_1212 / Km1212_231) - 1)) - (cell * Vmax_273 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_273) / (Km0204_273 * Km0991_273) / ((1 + s_0204 / Km0204_273) * (1 + s_0991 / Km0991_273) + (1 + s_0180 / Km0180_273) * (1 + s_1051 / Km1051_273) - 1));
    der(s_0207) = (cell * Vmax_157 * (s_0550 - s_0207 / Keq_157) / Km0550_157 / (1 + s_0550 / Km0550_157 + 1 + s_0207 / Km0207_157 - 1)) - (cell * Vmax_145 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_145) / (Km0207_145 * Km0991_145) / ((1 + s_0207 / Km0207_145) * (1 + s_0991 / Km0991_145) + (1 + s_0180 / Km0180_145) * (1 + s_1011 / Km1011_145) - 1));
    der(s_0209) = (cell * Vmax_65 * (s_0297 * NAD - s_0209 * CO2 * NADH / Keq_65) / (Km0297_65 * KmNAD_65) / ((1 + s_0297 / Km0297_65) * (1 + NAD / KmNAD_65) + (1 + s_0209 / Km0209_65) * (1 + CO2 / KmCO2_65) * (1 + NADH / KmNAD_65H) - 1)) - (cell * Vmax_66 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_66) / (Km0209_66 * Km1212_66) / ((1 + s_0209 / Km0209_66) * (1 + s_1212 / Km1212_66) + (1 + s_0296 / Km0296_66) * (1 + s_1207 / Km1207_66) - 1));
    der(s_0210) = (cell * Vmax_19 * (s_0349 - s_0210 * PHO / Keq_19) / Km0349_19 / (1 + s_0349 / Km0349_19 + (1 + s_0210 / Km0210_19) * (1 + PHO / KmPHO_19) - 1)) - (cell * Vmax_18 * (s_0210 - s_0211 / Keq_18) / Km0210_18 / (1 + s_0210 / Km0210_18 + 1 + s_0211 / Km0211_18 - 1));
    der(s_0211) = (cell * Vmax_18 * (s_0210 - s_0211 / Keq_18) / Km0210_18 / (1 + s_0210 / Km0210_18 + 1 + s_0211 / Km0211_18 - 1)) - (cell * Vmax_252 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_252) / (Km0211_252 * Km1212_252) / ((1 + s_0211 / Km0211_252) * (1 + s_1212 / Km1212_252) + (1 + s_1207 / Km1207_252) * (1 + s_1429 / Km1429_252) - 1));
    der(s_0218) = (cell * Vmax_155 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_155) / (Km0367_155 * Km0373_155) / ((1 + s_0367 / Km0367_155) * (1 + s_0373 / Km0373_155) + (1 + s_0218 / Km0218_155) * (1 + s_0529 / Km0529_155) - 1)) - (cell * Vmax_154 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_154) / (Km0218_154 * pow(Km1212_154, 2)) / ((1 + s_0218 / Km0218_154) * pow(1 + s_1212 / Km1212_154, 2) + (1 + s_0028 / Km0028_154) * (1 + s_0529 / Km0529_154) * pow(1 + s_1207 / Km1207_154, 2) - 1));
    der(s_0231) = (cell * Vmax_250 * (s_1039 * s_1302 - s_0231 * CO2 * s_0529 / Keq_250) / (Km1039_250 * Km1302_250) / ((1 + s_1039 / Km1039_250) * (1 + s_1302 / Km1302_250) + (1 + s_0231 / Km0231_250) * (1 + CO2 / KmCO2_250) * (1 + s_0529 / Km0529_250) - 1)) - (cell * Vmax_20 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_20) / (Km0231_20 * Km1212_20) / ((1 + s_0231 / Km0231_20) * (1 + s_1212 / Km1212_20) + (1 + s_1207 / Km1207_20) * (1 + s_1445 / Km1445_20) - 1));
    der(s_0232) = (cell * Vmax_94 * (s_0016 - s_0232 / Keq_94) / Km0016_94 / (1 + s_0016 / Km0016_94 + 1 + s_0232 / Km0232_94 - 1)) - (cell * Vmax_13 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_13) / (Km0232_13 * Km0373_13) / ((1 + s_0232 / Km0232_13) * (1 + s_0373 / Km0373_13) + (1 + s_0162 / Km0162_13) * (1 + s_0529 / Km0529_13) - 1)) - (cell * Vmax_277 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_277) / (Km0232_277 * Km0991_277) / ((1 + s_0232 / Km0232_277) * (1 + s_0991 / Km0991_277) + (1 + s_0180 / Km0180_277) * (1 + s_1056 / Km1056_277) - 1));
    der(P3G) = (cell * (Vmax_215 * (BPG * ADP / (Kbpg_215 * Kadp_215) - P3G * ATP / (Kbpg_215 * Kadp_215 * Keq_215)) / ((1 + BPG / Kbpg_215 + P3G / Kp3g_215) * (1 + ADP / Kadp_215 + ATP / Katp_215)))) - (cell * (Vmax_216 * (P3G / Kp3g_216 - P2G / (Kp3g_216 * Keq_216)) / (1 + P3G / Kp3g_216 + P2G / Kp2g_216)));
    der(s_0261) = (cell * Vmax_253 * (ATP * s_1429 - s_0261 * ADP / Keq_253) / (KmATP_253 * Km1429_253) / ((1 + ATP / KmATP_253) * (1 + s_1429 / Km1429_253) + (1 + s_0261 / Km0261_253) * (1 + ADP / KmADP_253) - 1)) - (cell * Vmax_23 * (s_0261 * PEP - s_0324 * PHO / Keq_23) / (Km0261_23 * KmPEP_23) / ((1 + s_0261 / Km0261_23) * (1 + PEP / KmPEP_23) + (1 + s_0324 / Km0324_23) * (1 + PHO / KmPHO_23) - 1));
    der(s_0262) = (cell * Vmax_87 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_87) / (Km1059_87 * pow(Km1212_87, 3) * pow(Km1275_87, 3)) / ((1 + s_1059 / Km1059_87) * pow(1 + s_1212 / Km1212_87, 3) * pow(1 + s_1275 / Km1275_87, 3) + (1 + s_0262 / Km0262_87) * (1 + s_0722 / Km0722_87) * pow(1 + s_1207 / Km1207_87, 3) - 1)) - (cell * Vmax_63 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_63) / (Km0262_63 * Km1212_63) / ((1 + s_0262 / Km0262_63) * (1 + s_1212 / Km1212_63) + (1 + s_0122 / Km0122_63) * (1 + s_1207 / Km1207_63) - 1));
    der(s_0291) = (cell * Vmax_15 * (s_0010 - s_0291 * CO2 / Keq_15) / Km0010_15 / (1 + s_0010 / Km0010_15 + (1 + s_0291 / Km0291_15) * (1 + CO2 / KmCO2_15) - 1)) - (cell * Vmax_177 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_177) / (Km0291_177 * Km0991_177) / ((1 + s_0291 / Km0291_177) * (1 + s_0991 / Km0991_177) + (1 + s_0180 / Km0180_177) * (1 + s_1021 / Km1021_177) - 1));
    der(s_0295) = (cell * Vmax_56 * (ATP * s_0973 - s_0295 * ADP / Keq_56) / (KmATP_56 * Km0973_56) / ((1 + ATP / KmATP_56) * (1 + s_0973 / Km0973_56) + (1 + s_0295 / Km0295_56) * (1 + ADP / KmADP_56) - 1)) - (cell * Vmax_58 * (s_0295 * s_1212 - s_0978 * s_1207 * PHO / Keq_58) / (Km0295_58 * Km1212_58) / ((1 + s_0295 / Km0295_58) * (1 + s_1212 / Km1212_58) + (1 + s_0978 / Km0978_58) * (1 + s_1207 / Km1207_58) * (1 + PHO / KmPHO_58) - 1));
    der(s_0296) = (cell * Vmax_66 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_66) / (Km0209_66 * Km1212_66) / ((1 + s_0209 / Km0209_66) * (1 + s_1212 / Km1212_66) + (1 + s_0296 / Km0296_66) * (1 + s_1207 / Km1207_66) - 1)) - (cell * Vmax_68 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_68) / (Km0296_68 * Km1212_68 * Km1275_68) / ((1 + s_0296 / Km0296_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_1207 / Km1207_68) * (1 + s_1576 / Km1576_68) - 1));
    der(s_0297) = (cell * Vmax_71 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_71) / (Km0122_71 * pow(Km1212_71, 3) * pow(Km1275_71, 3)) / ((1 + s_0122 / Km0122_71) * pow(1 + s_1212 / Km1212_71, 3) * pow(1 + s_1275 / Km1275_71, 3) + (1 + s_0297 / Km0297_71) * pow(1 + s_1207 / Km1207_71, 3) - 1)) - (cell * Vmax_65 * (s_0297 * NAD - s_0209 * CO2 * NADH / Keq_65) / (Km0297_65 * KmNAD_65) / ((1 + s_0297 / Km0297_65) * (1 + NAD / KmNAD_65) + (1 + s_0209 / Km0209_65) * (1 + CO2 / KmCO2_65) * (1 + NADH / KmNAD_65H) - 1));
    der(s_0298) = (cell * Vmax_258 * (ADP * s_1467 - s_0298 * PHO / Keq_258) / (KmADP_258 * Km1467_258) / ((1 + ADP / KmADP_258) * (1 + s_1467 / Km1467_258) + (1 + s_0298 / Km0298_258) * (1 + PHO / KmPHO_258) - 1)) - (cell * Vmax_41 * (s_0298 * ATP - s_0201 * ADP / Keq_41) / (Km0298_41 * KmATP_41) / ((1 + s_0298 / Km0298_41) * (1 + ATP / KmATP_41) + (1 + s_0201 / Km0201_41) * (1 + ADP / KmADP_41) - 1));
    der(s_0299) = (cell * Vmax_221 * (ATP * s_0973 * s_1364 - s_0299 * ADP * PHO / Keq_221) / (KmATP_221 * Km0973_221 * Km1364_221) / ((1 + ATP / KmATP_221) * (1 + s_0973 / Km0973_221) * (1 + s_1364 / Km1364_221) + (1 + s_0299 / Km0299_221) * (1 + ADP / KmADP_221) * (1 + PHO / KmPHO_221) - 1)) - (cell * Vmax_38 * (s_0299 - s_0403 * s_0725 / Keq_38) / Km0299_38 / (1 + s_0299 / Km0299_38 + (1 + s_0403 / Km0403_38) * (1 + s_0725 / Km0725_38) - 1));
    der(s_0300) = (cell * Vmax_205 * (s_0302 * ATP - s_0300 * ADP * PHO / Keq_205) / (Km0302_205 * KmATP_205) / ((1 + s_0302 / Km0302_205) * (1 + ATP / KmATP_205) + (1 + s_0300 / Km0300_205) * (1 + ADP / KmADP_205) * (1 + PHO / KmPHO_205) - 1)) - (cell * Vmax_224 * (s_0300 * CO2 * ATP - s_1364 * ADP * PHO / Keq_224) / (Km0300_224 * KmCO2_224 * KmATP_224) / ((1 + s_0300 / Km0300_224) * (1 + CO2 / KmCO2_224) * (1 + ATP / KmATP_224) + (1 + s_1364 / Km1364_224) * (1 + ADP / KmADP_224) * (1 + PHO / KmPHO_224) - 1));
    der(s_0301) = (cell * Vmax_133 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_133) / (Km0120_133 * Km0325_133) / ((1 + s_0120 / Km0120_133) * (1 + s_0325 / Km0325_133) + (1 + s_0301 / Km0301_133) * (1 + s_1487 / Km1487_133) - 1)) - (cell * Vmax_24 * (s_0301 * ATP * s_0999 - s_0302 * ADP * s_0991 * PHO / Keq_24) / (Km0301_24 * KmATP_24 * Km0999_24) / ((1 + s_0301 / Km0301_24) * (1 + ATP / KmATP_24) * (1 + s_0999 / Km0999_24) + (1 + s_0302 / Km0302_24) * (1 + ADP / KmADP_24) * (1 + s_0991 / Km0991_24) * (1 + PHO / KmPHO_24) - 1));
    der(s_0302) = (cell * Vmax_24 * (s_0301 * ATP * s_0999 - s_0302 * ADP * s_0991 * PHO / Keq_24) / (Km0301_24 * KmATP_24 * Km0999_24) / ((1 + s_0301 / Km0301_24) * (1 + ATP / KmATP_24) * (1 + s_0999 / Km0999_24) + (1 + s_0302 / Km0302_24) * (1 + ADP / KmADP_24) * (1 + s_0991 / Km0991_24) * (1 + PHO / KmPHO_24) - 1)) - (cell * Vmax_205 * (s_0302 * ATP - s_0300 * ADP * PHO / Keq_205) / (Km0302_205 * KmATP_205) / ((1 + s_0302 / Km0302_205) * (1 + ATP / KmATP_205) + (1 + s_0300 / Km0300_205) * (1 + ADP / KmADP_205) * (1 + PHO / KmPHO_205) - 1));
    der(s_0304) = (cell * Vmax_188 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_188) / (Km0306_188 * Km1207_188) / ((1 + s_0306 / Km0306_188) * (1 + s_1207 / Km1207_188) + (1 + s_0304 / Km0304_188) * (1 + s_1212 / Km1212_188) - 1)) - (cell * Vmax_183 * (s_0304 - s_0120 / Keq_183) / Km0304_183 / (1 + s_0304 / Km0304_183 + 1 + s_0120 / Km0120_183 - 1)) - (cell * Vmax_187 * (s_0304 * NADH - s_0306 * NAD / Keq_187) / (Km0304_187 * KmNAD_187H_187) / ((1 + s_0304 / Km0304_187) * (1 + NADH / KmNAD_187H_187) + (1 + s_0306 / Km0306_187) * (1 + NAD / KmNAD_187) - 1));
    der(s_0306) = (cell * Vmax_134 * (s_1003 * NAD * s_1487 - s_0306 * s_0419 * CO2 * NADH / Keq_134) / (Km1003_134 * KmNAD_134 * Km1487_134) / ((1 + s_1003 / Km1003_134) * (1 + NAD / KmNAD_134) * (1 + s_1487 / Km1487_134) + (1 + s_0306 / Km0306_134) * (1 + s_0419 / Km0419_134) * (1 + CO2 / KmCO2_134) * (1 + NADH / KmNAD_134H) - 1)) + (cell * Vmax_187 * (s_0304 * NADH - s_0306 * NAD / Keq_187) / (Km0304_187 * KmNAD_187H_187) / ((1 + s_0304 / Km0304_187) * (1 + NADH / KmNAD_187H_187) + (1 + s_0306 / Km0306_187) * (1 + NAD / KmNAD_187) - 1)) - (cell * Vmax_25 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_25) / (Km0306_25 * Km1212_25) / ((1 + s_0306 / Km0306_25) * (1 + s_1212 / Km1212_25) + (1 + s_0322 / Km0322_25) * (1 + s_1207 / Km1207_25) - 1)) - (cell * Vmax_135 * (s_0306 * s_1003 - s_1039 * s_1487 / Keq_135) / (Km0306_135 * Km1003_135) / ((1 + s_0306 / Km0306_135) * (1 + s_1003 / Km1003_135) + (1 + s_1039 / Km1039_135) * (1 + s_1487 / Km1487_135) - 1)) - (cell * Vmax_188 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_188) / (Km0306_188 * Km1207_188) / ((1 + s_0306 / Km0306_188) * (1 + s_1207 / Km1207_188) + (1 + s_0304 / Km0304_188) * (1 + s_1212 / Km1212_188) - 1)) - (cell * Vmax_264 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_264) / (Km0306_264 * Km0654_264) / ((1 + s_0306 / Km0306_264) * (1 + s_0654 / Km0654_264) + (1 + s_0625 / Km0625_264) * (1 + s_0649 / Km0649_264) - 1));
    der(s_0312) = (cell * Vmax_4 * (s_0077 - s_0312 / Keq_4) / Km0077_4 / (1 + s_0077 / Km0077_4 + 1 + s_0312 / Km0312_4 - 1)) - (cell * Vmax_156 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_156) / (Km0312_156 * Km0999_156) / ((1 + s_0312 / Km0312_156) * (1 + s_0999 / Km0999_156) + (1 + s_0403 / Km0403_156) * (1 + s_0550 / Km0550_156) * (1 + s_0991 / Km0991_156) - 1));
    der(s_0313) = (cell * Vmax_7 * (s_0142 - s_0313 * s_0419 / Keq_7) / Km0142_7 / (1 + s_0142 / Km0142_7 + (1 + s_0313 / Km0313_7) * (1 + s_0419 / Km0419_7) - 1)) - (cell * Vmax_293 * (s_0313 - s_0314 * PHO / Keq_293) / Km0313_293 / (1 + s_0313 / Km0313_293 + (1 + s_0314 / Km0314_293) * (1 + PHO / KmPHO_293) - 1));
    der(s_0314) = (cell * Vmax_238 * (pow(s_0328, 2) - s_0314 * s_1405 / Keq_238) / pow(Km0328_238, 2) / (pow(1 + s_0328 / Km0328_238, 2) + (1 + s_0314 / Km0314_238) * (1 + s_1405 / Km1405_238) - 1)) + (cell * Vmax_293 * (s_0313 - s_0314 * PHO / Keq_293) / Km0313_293 / (1 + s_0313 / Km0313_293 + (1 + s_0314 / Km0314_293) * (1 + PHO / KmPHO_293) - 1)) - (cell * Vmax_237 * (s_0158 * s_0314 - s_0328 * PHO / Keq_237) / (Km0158_237 * Km0314_237) / ((1 + s_0158 / Km0158_237) * (1 + s_0314 / Km0314_237) + (1 + s_0328 / Km0328_237) * (1 + PHO / KmPHO_237) - 1));
    der(s_0322) = (cell * Vmax_25 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_25) / (Km0306_25 * Km1212_25) / ((1 + s_0306 / Km0306_25) * (1 + s_1212 / Km1212_25) + (1 + s_0322 / Km0322_25) * (1 + s_1207 / Km1207_25) - 1)) - (cell * Vmax_185 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_185) / (Km0322_185 * Km1012_185) / ((1 + s_0322 / Km0322_185) * (1 + s_1012 / Km1012_185) + (1 + s_1029 / Km1029_185) * (1 + s_1487 / Km1487_185) - 1));
    der(s_0324) = (cell * Vmax_23 * (s_0261 * PEP - s_0324 * PHO / Keq_23) / (Km0261_23 * KmPEP_23) / ((1 + s_0261 / Km0261_23) * (1 + PEP / KmPEP_23) + (1 + s_0324 / Km0324_23) * (1 + PHO / KmPHO_23) - 1)) - (cell * Vmax_78 * (s_0324 - s_0515 * PHO / Keq_78) / Km0324_78 / (1 + s_0324 / Km0324_78 + (1 + s_0515 / Km0515_78) * (1 + PHO / KmPHO_78) - 1));
    der(s_0325) = (cell * Vmax_227 * (s_0327 * ATP * s_1003 - s_0325 * ADP * PHO / Keq_227) / (Km0327_227 * KmATP_227 * Km1003_227) / ((1 + s_0327 / Km0327_227) * (1 + ATP / KmATP_227) * (1 + s_1003 / Km1003_227) + (1 + s_0325 / Km0325_227) * (1 + ADP / KmADP_227) * (1 + PHO / KmPHO_227) - 1)) - (cell * Vmax_133 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_133) / (Km0120_133 * Km0325_133) / ((1 + s_0120 / Km0120_133) * (1 + s_0325 / Km0325_133) + (1 + s_0301 / Km0301_133) * (1 + s_1487 / Km1487_133) - 1));
    der(s_0326) = (cell * Vmax_60 * (ATP * s_1386 - s_0326 * s_0633 / Keq_60) / (KmATP_60 * Km1386_60) / ((1 + ATP / KmATP_60) * (1 + s_1386 / Km1386_60) + (1 + s_0326 / Km0326_60) * (1 + s_0633 / Km0633_60) - 1)) - (cell * Vmax_223 * (s_0326 - s_0078 * s_0633 / Keq_223) / Km0326_223 / (1 + s_0326 / Km0326_223 + (1 + s_0078 / Km0078_223) * (1 + s_0633 / Km0633_223) - 1));
    der(s_0327) = (cell * Vmax_228 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_228) / (Km0999_228 * Km1386_228) / ((1 + s_0999 / Km0999_228) * (1 + s_1386 / Km1386_228) + (1 + s_0327 / Km0327_228) * (1 + s_0633 / Km0633_228) * (1 + s_0991 / Km0991_228) - 1)) - (cell * Vmax_227 * (s_0327 * ATP * s_1003 - s_0325 * ADP * PHO / Keq_227) / (Km0327_227 * KmATP_227 * Km1003_227) / ((1 + s_0327 / Km0327_227) * (1 + ATP / KmATP_227) * (1 + s_1003 / Km1003_227) + (1 + s_0325 / Km0325_227) * (1 + ADP / KmADP_227) * (1 + PHO / KmPHO_227) - 1));
    der(s_0328) = (cell * Vmax_237 * (s_0158 * s_0314 - s_0328 * PHO / Keq_237) / (Km0158_237 * Km0314_237) / ((1 + s_0158 / Km0158_237) * (1 + s_0314 / Km0314_237) + (1 + s_0328 / Km0328_237) * (1 + PHO / KmPHO_237) - 1)) - (2.0 * cell * Vmax_238 * (pow(s_0328, 2) - s_0314 * s_1405 / Keq_238) / pow(Km0328_238, 2) / (pow(1 + s_0328 / Km0328_238, 2) + (1 + s_0314 / Km0314_238) * (1 + s_1405 / Km1405_238) - 1));
    der(s_0335) = (cell * Vmax_123 * (G6P * s_1207 - s_0335 * s_1212 / Keq_123) / (KmG6P_123 * Km1207_123) / ((1 + G6P / KmG6P_123) * (1 + s_1207 / Km1207_123) + (1 + s_0335 / Km0335_123) * (1 + s_1212 / Km1212_123) - 1)) - (cell * Vmax_26 * (s_0335 - s_0340 / Keq_26) / Km0335_26 / (1 + s_0335 / Km0335_26 + 1 + s_0340 / Km0340_26 - 1));
    der(s_0340) = (cell * Vmax_26 * (s_0335 - s_0340 / Keq_26) / Km0335_26 / (1 + s_0335 / Km0335_26 + 1 + s_0340 / Km0340_26 - 1)) - (cell * Vmax_214 * (s_0340 * s_1207 - CO2 * s_0577 * s_1212 / Keq_214) / (Km0340_214 * Km1207_214) / ((1 + s_0340 / Km0340_214) * (1 + s_1207 / Km1207_214) + (1 + CO2 / KmCO2_214) * (1 + s_0577 / Km0577_214) * (1 + s_1212 / Km1212_214) - 1));
    der(s_0349) = (cell * Vmax_11 * (s_0551 * PEP - s_0349 * PHO / Keq_11) / (Km0551_11 * KmPEP_11) / ((1 + s_0551 / Km0551_11) * (1 + PEP / KmPEP_11) + (1 + s_0349 / Km0349_11) * (1 + PHO / KmPHO_11) - 1)) - (cell * Vmax_19 * (s_0349 - s_0210 * PHO / Keq_19) / Km0349_19 / (1 + s_0349 / Km0349_19 + (1 + s_0210 / Km0210_19) * (1 + PHO / KmPHO_19) - 1));
    der(AcAld) = (cell * (Vmax_235 * pow(PYR / Kpyr_235, nH_235) / (1 + pow(PYR / Kpyr_235, nH_235)))) + (cell * Vmax_261 * (s_1045 - AcAld * s_1003 / Keq_261) / Km1045_261 / (1 + s_1045 / Km1045_261 + (1 + AcAld / KmAcAld_261) * (1 + s_1003 / Km1003_261) - 1)) - (cell * (Vmax_44 * (AcAld * NADH / (Kacald_44 * Kinad_44h) - EtOH * NAD / (Kacald_44 * Kinad_44h * Keq_44)) / (1 + NADH / Kinad_44h + AcAld * Knad_44h / (Kinad_44h * Kacald_44) + EtOH * Knad_44 / (Kinad_44 * Ketoh_44) + NAD / Kinad_44 + AcAld * NADH / (Kinad_44h * Kacald_44) + NADH * EtOH * Knad_44 / (Kinad_44h * Kinad_44 * Ketoh_44) + AcAld * NAD * Knad_44h / (Kinad_44h * Kinad_44 * Kacald_44) + EtOH * NAD / (Ketoh_44 * Kinad_44) + AcAld * NADH * EtOH / (Kinad_44h * Kietoh_44 * Kacald_44) + AcAld * EtOH * NAD / (Kiacald_44 * Kinad_44 * Ketoh_44)))) - (cell * Vmax_45 * (AcAld * s_1207 - s_0362 * s_1212 / Keq_45) / (KmAcAld_45 * Km1207_45) / ((1 + AcAld / KmAcAld_45) * (1 + s_1207 / Km1207_45) + (1 + s_0362 / Km0362_45) * (1 + s_1212 / Km1212_45) - 1)) - (cell * Vmax_46 * (AcAld * NAD - s_0362 * NADH / Keq_46) / (KmAcAld_46 * KmNAD_46) / ((1 + AcAld / KmAcAld_46) * (1 + NAD / KmNAD_46) + (1 + s_0362 / Km0362_46) * (1 + NADH / KmNAD_46H) - 1)) - (cell * Vmax_284 * AcAld / KmAcAld_284 / (1 + AcAld / KmAcAld_284));
    der(s_0360) = 0.0;
    der(s_0362) = (cell * Vmax_45 * (AcAld * s_1207 - s_0362 * s_1212 / Keq_45) / (KmAcAld_45 * Km1207_45) / ((1 + AcAld / KmAcAld_45) * (1 + s_1207 / Km1207_45) + (1 + s_0362 / Km0362_45) * (1 + s_1212 / Km1212_45) - 1)) + (cell * Vmax_46 * (AcAld * NAD - s_0362 * NADH / Keq_46) / (KmAcAld_46 * KmNAD_46) / ((1 + AcAld / KmAcAld_46) * (1 + NAD / KmNAD_46) + (1 + s_0362 / Km0362_46) * (1 + NADH / KmNAD_46H) - 1)) + (cell * Vmax_85 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_85) / (Km0981_85 * Km1233_85) / ((1 + s_0981 / Km0981_85) * (1 + s_1233 / Km1233_85) + (1 + s_0362 / Km0362_85) * (1 + s_0980 / Km0980_85) - 1)) + (cell * Vmax_198 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_198) / (Km0841_198 * Km1233_198) / ((1 + s_0841 / Km0841_198) * (1 + s_1233 / Km1233_198) + (1 + s_0362 / Km0362_198) * (1 + s_1012 / Km1012_198) - 1)) - (cell * Vmax_31 * (s_0362 * s_0529 - s_0373 / Keq_31) / (Km0362_31 * Km0529_31) / ((1 + s_0362 / Km0362_31) * (1 + s_0529 / Km0529_31) + 1 + s_0373 / Km0373_31 - 1));
    der(s_0367) = (cell * Vmax_29 * (pow(s_0373, 2) - s_0367 * s_0529 / Keq_29) / pow(Km0373_29, 2) / (pow(1 + s_0373 / Km0373_29, 2) + (1 + s_0367 / Km0367_29) * (1 + s_0529 / Km0529_29) - 1)) - (cell * Vmax_155 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_155) / (Km0367_155 * Km0373_155) / ((1 + s_0367 / Km0367_155) * (1 + s_0373 / Km0373_155) + (1 + s_0218 / Km0218_155) * (1 + s_0529 / Km0529_155) - 1));
    der(s_0373) = (cell * Vmax_31 * (s_0362 * s_0529 - s_0373 / Keq_31) / (Km0362_31 * Km0529_31) / ((1 + s_0362 / Km0362_31) * (1 + s_0529 / Km0529_31) + 1 + s_0373 / Km0373_31 - 1)) - (cell * Vmax_13 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_13) / (Km0232_13 * Km0373_13) / ((1 + s_0232 / Km0232_13) * (1 + s_0373 / Km0373_13) + (1 + s_0162 / Km0162_13) * (1 + s_0529 / Km0529_13) - 1)) - (2.0 * cell * Vmax_29 * (pow(s_0373, 2) - s_0367 * s_0529 / Keq_29) / pow(Km0373_29, 2) / (pow(1 + s_0373 / Km0373_29, 2) + (1 + s_0367 / Km0367_29) * (1 + s_0529 / Km0529_29) - 1)) - (cell * Vmax_30 * (s_0373 * ATP * s_0445 - ADP * s_1101 * PHO / Keq_30) / (Km0373_30 * KmATP_30 * Km0445_30) / ((1 + s_0373 / Km0373_30) * (1 + ATP / KmATP_30) * (1 + s_0445 / Km0445_30) + (1 + ADP / KmADP_30) * (1 + s_1101 / Km1101_30) * (1 + PHO / KmPHO_30) - 1)) - (cell * Vmax_80 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_80) / (Km0373_80 * Km1271_80) / ((1 + s_0373 / Km0373_80) * (1 + s_1271 / Km1271_80) + (1 + s_0522 / Km0522_80) * (1 + s_0529 / Km0529_80) - 1)) - (cell * Vmax_108 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(CO2, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_108) / (Km0373_108 * pow(Km1101_108, 3) * pow(Km1212_108, 6)) / ((1 + s_0373 / Km0373_108) * pow(1 + s_1101 / Km1101_108, 3) * pow(1 + s_1212 / Km1212_108, 6) + pow(1 + CO2 / KmCO2_108, 3) * pow(1 + s_0529 / Km0529_108, 3) * pow(1 + s_1207 / Km1207_108, 6) * (1 + s_1255 / Km1255_108) - 1)) - (cell * Vmax_148 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_148) / (Km0180_148 * Km0373_148) / ((1 + s_0180 / Km0180_148) * (1 + s_0373 / Km0373_148) + (1 + s_0529 / Km0529_148) * (1 + s_0835 / Km0835_148) - 1)) - (cell * Vmax_152 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_152) / (Km0373_152 * Km1014_152) / ((1 + s_0373 / Km0373_152) * (1 + s_1014 / Km1014_152) + (1 + s_0529 / Km0529_152) * (1 + s_1233 / Km1233_152) - 1)) - (cell * Vmax_155 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_155) / (Km0367_155 * Km0373_155) / ((1 + s_0367 / Km0367_155) * (1 + s_0373 / Km0373_155) + (1 + s_0218 / Km0218_155) * (1 + s_0529 / Km0529_155) - 1));
    der(s_0380) = (cell * Vmax_90 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_90) / (Km0529_90 * Km1524_90) / ((1 + s_0529 / Km0529_90) * (1 + s_1524 / Km1524_90) + (1 + s_0380 / Km0380_90) * (1 + s_0619 / Km0619_90) - 1)) - (cell * Vmax_5 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_5) / (Km0082_5 * Km0380_5) / ((1 + s_0082 / Km0082_5) * (1 + s_0380 / Km0380_5) + (1 + s_0529 / Km0529_5) * (1 + s_1331 / Km1331_5) - 1)) - (cell * Vmax_132 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_132) / (Km0380_132 * Km0767_132) / ((1 + s_0380 / Km0380_132) * (1 + s_0767 / Km0767_132) + (1 + s_0082 / Km0082_132) * (1 + s_0529 / Km0529_132) - 1));
    der(s_0386) = (cell * Vmax_35 * (s_1413 - s_0386 * s_1012 / Keq_35) / Km1413_35 / (1 + s_1413 / Km1413_35 + (1 + s_0386 / Km0386_35) * (1 + s_1012 / Km1012_35) - 1)) - (cell * Vmax_34 * (s_0386 * ATP - ADP * AMP / Keq_34) / (Km0386_34 * KmATP_34) / ((1 + s_0386 / Km0386_34) * (1 + ATP / KmATP_34) + (1 + ADP / KmADP_34) * (1 + AMP / KmAMP_34) - 1));
    der(s_0390) = (cell * Vmax_210 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_210) / (Km0201_210 * Km1616_210) / ((1 + s_0201 / Km0201_210) * (1 + s_1616 / Km1616_210) + (1 + s_0390 / Km0390_210) * (1 + s_1469 / Km1469_210) * (1 + s_1620 / Km1620_210) - 1)) - (cell * Vmax_16 * (s_0390 - AMP * PHO / Keq_16) / Km0390_16 / (1 + s_0390 / Km0390_16 + (1 + AMP / KmAMP_16) * (1 + PHO / KmPHO_16) - 1));
    der(s_0393) = (cell * Vmax_40 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * PHO / Keq_40) / (Km0785_40 * Km0849_40 * Km0973_40) / ((1 + s_0785 / Km0785_40) * (1 + s_0849 / Km0849_40) * (1 + s_0973 / Km0973_40) + (1 + s_0393 / Km0393_40) * (1 + s_0739 / Km0739_40) * (1 + PHO / KmPHO_40) - 1)) - (cell * Vmax_39 * (s_0393 - AMP * s_0725 / Keq_39) / Km0393_39 / (1 + s_0393 / Km0393_39 + (1 + AMP / KmAMP_39) * (1 + s_0725 / Km0725_39) - 1));
    der(ADP) = (cell * Vmax_24 * (s_0301 * ATP * s_0999 - s_0302 * ADP * s_0991 * PHO / Keq_24) / (Km0301_24 * KmATP_24 * Km0999_24) / ((1 + s_0301 / Km0301_24) * (1 + ATP / KmATP_24) * (1 + s_0999 / Km0999_24) + (1 + s_0302 / Km0302_24) * (1 + ADP / KmADP_24) * (1 + s_0991 / Km0991_24) * (1 + PHO / KmPHO_24) - 1)) + (cell * Vmax_30 * (s_0373 * ATP * s_0445 - ADP * s_1101 * PHO / Keq_30) / (Km0373_30 * KmATP_30 * Km0445_30) / ((1 + s_0373 / Km0373_30) * (1 + ATP / KmATP_30) * (1 + s_0445 / Km0445_30) + (1 + ADP / KmADP_30) * (1 + s_1101 / Km1101_30) * (1 + PHO / KmPHO_30) - 1)) + (cell * Vmax_32 * (ATP * s_1192 - ADP * s_1191 / Keq_32) / (KmATP_32 * Km1192_32) / ((1 + ATP / KmATP_32) * (1 + s_1192 / Km1192_32) + (1 + ADP / KmADP_32) * (1 + s_1191 / Km1191_32) - 1)) + (cell * Vmax_34 * (s_0386 * ATP - ADP * AMP / Keq_34) / (Km0386_34 * KmATP_34) / ((1 + s_0386 / Km0386_34) * (1 + ATP / KmATP_34) + (1 + ADP / KmADP_34) * (1 + AMP / KmAMP_34) - 1)) + (cell * Vmax_37 * (AMP * s_0785 - ADP * s_0739 / Keq_37) / (KmAMP_37 * Km0785_37) / ((1 + AMP / KmAMP_37) * (1 + s_0785 / Km0785_37) + (1 + ADP / KmADP_37) * (1 + s_0739 / Km0739_37) - 1)) + (cell * Vmax_41 * (s_0298 * ATP - s_0201 * ADP / Keq_41) / (Km0298_41 * KmATP_41) / ((1 + s_0298 / Km0298_41) * (1 + ATP / KmATP_41) + (1 + s_0201 / Km0201_41) * (1 + ADP / KmADP_41) - 1)) + (cell * Vmax_56 * (ATP * s_0973 - s_0295 * ADP / Keq_56) / (KmATP_56 * Km0973_56) / ((1 + ATP / KmATP_56) * (1 + s_0973 / Km0973_56) + (1 + s_0295 / Km0295_56) * (1 + ADP / KmADP_56) - 1)) + (cell * k_62 * ATP) + (2.0 * cell * Vmax_74 * (pow(ATP, 2) * s_0445 * s_0999 - pow(ADP, 2) * s_0455 * s_0991 * PHO / Keq_74) / (pow(KmATP_74, 2) * Km0445_74 * Km0999_74) / (pow(1 + ATP / KmATP_74, 2) * (1 + s_0445 / Km0445_74) * (1 + s_0999 / Km0999_74) + pow(1 + ADP / KmADP_74, 2) * (1 + s_0455 / Km0455_74) * (1 + s_0991 / Km0991_74) * (1 + PHO / KmPHO_74) - 1)) + (cell * Vmax_82 * (s_0419 * ATP * s_1559 - ADP * s_0539 * PHO / Keq_82) / (Km0419_82 * KmATP_82 * Km1559_82) / ((1 + s_0419 / Km0419_82) * (1 + ATP / KmATP_82) * (1 + s_1559 / Km1559_82) + (1 + ADP / KmADP_82) * (1 + s_0539 / Km0539_82) * (1 + PHO / KmPHO_82) - 1)) + (cell * Vmax_119 * (ATP * s_0722 * s_1487 - s_0120 * ADP * PHO / Keq_119) / (KmATP_119 * Km0722_119 * Km1487_119) / ((1 + ATP / KmATP_119) * (1 + s_0722 / Km0722_119) * (1 + s_1487 / Km1487_119) + (1 + s_0120 / Km0120_119) * (1 + ADP / KmADP_119) * (1 + PHO / KmPHO_119) - 1)) + (cell * Vmax_126 * (s_0419 * ATP * s_0991 - ADP * s_0999 * PHO / Keq_126) / (Km0419_126 * KmATP_126 * Km0991_126) / ((1 + s_0419 / Km0419_126) * (1 + ATP / KmATP_126) * (1 + s_0991 / Km0991_126) + (1 + ADP / KmADP_126) * (1 + s_0999 / Km0999_126) * (1 + PHO / KmPHO_126) - 1)) + (cell * Vmax_140 * (ATP * s_0782 - ADP * s_0739 / Keq_140) / (KmATP_140 * Km0782_140) / ((1 + ATP / KmATP_140) * (1 + s_0782 / Km0782_140) + (1 + ADP / KmADP_140) * (1 + s_0739 / Km0739_140) - 1)) + (cell * (Vmax_142 * (GLC * ATP / (Kglc_142 * Katp_142) - G6P * ADP / (Kglc_142 * Katp_142 * Keq_142)) / ((1 + GLC / Kglc_142 + G6P / Kg6p_142) * (1 + ATP / Katp_142 + ADP / Kadp_142)))) + (cell * Vmax_151 * (ATP * s_1014 - ADP * s_1238 / Keq_151) / (KmATP_151 * Km1014_151) / ((1 + ATP / KmATP_151) * (1 + s_1014 / Km1014_151) + (1 + ADP / KmADP_151) * (1 + s_1238 / Km1238_151) - 1)) + (cell * Vmax_189 * (s_0028 * ATP - s_0019 * ADP / Keq_189) / (Km0028_189 * KmATP_189) / ((1 + s_0028 / Km0028_189) * (1 + ATP / KmATP_189) + (1 + s_0019 / Km0019_189) * (1 + ADP / KmADP_189) - 1)) + (cell * Vmax_191 * (s_0018 * ATP - ADP * CO2 * s_0943 * PHO / Keq_191) / (Km0018_191 * KmATP_191) / ((1 + s_0018 / Km0018_191) * (1 + ATP / KmATP_191) + (1 + ADP / KmADP_191) * (1 + CO2 / KmCO2_191) * (1 + s_0943 / Km0943_191) * (1 + PHO / KmPHO_191) - 1)) + (cell * Vmax_196 * (ATP * s_0739 - ADP * s_0785 / Keq_196) / (KmATP_196 * Km0739_196) / ((1 + ATP / KmATP_196) * (1 + s_0739 / Km0739_196) + (1 + ADP / KmADP_196) * (1 + s_0785 / Km0785_196) - 1)) + (cell * Vmax_197 * (ATP * s_1538 - ADP * s_1559 / Keq_197) / (KmATP_197 * Km1538_197) / ((1 + ATP / KmATP_197) * (1 + s_1538 / Km1538_197) + (1 + ADP / KmADP_197) * (1 + s_1559 / Km1559_197) - 1)) + (cell * Vmax_205 * (s_0302 * ATP - s_0300 * ADP * PHO / Keq_205) / (Km0302_205 * KmATP_205) / ((1 + s_0302 / Km0302_205) * (1 + ATP / KmATP_205) + (1 + s_0300 / Km0300_205) * (1 + ADP / KmADP_205) * (1 + PHO / KmPHO_205) - 1)) + (cell * Vmax_211 * (ATP * s_1271 - ADP * CO2 * PEP / Keq_211) / (KmATP_211 * Km1271_211) / ((1 + ATP / KmATP_211) * (1 + s_1271 / Km1271_211) + (1 + ADP / KmADP_211) * (1 + CO2 / KmCO2_211) * (1 + PEP / KmPEP_211) - 1)) + (cell * Vmax_212 * (gR_212 * (F6P / Kf6p_212) * (ATP / Katp_212) * (1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212) / (pow(1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212, 2) + L0_212 * pow((1 + Ciatp_212 * ATP / Kiatp_212) / (1 + ATP / Kiatp_212), 2) * pow((1 + Camp_212 * AMP / Kamp_212) / (1 + AMP / Kamp_212), 2) * pow((1 + Cf26_212 * F26bP / Kf26_212 + Cf16_212 * F16bP / Kf16_212) / (1 + F26bP / Kf26_212 + F16bP / Kf16_212), 2) * pow(1 + Catp_212 * ATP / Katp_212, 2)))) + (cell * Vmax_220 * (s_0019 * ATP - s_0018 * ADP / Keq_220) / (Km0019_220 * KmATP_220) / ((1 + s_0019 / Km0019_220) * (1 + ATP / KmATP_220) + (1 + s_0018 / Km0018_220) * (1 + ADP / KmADP_220) - 1)) + (cell * Vmax_221 * (ATP * s_0973 * s_1364 - s_0299 * ADP * PHO / Keq_221) / (KmATP_221 * Km0973_221 * Km1364_221) / ((1 + ATP / KmATP_221) * (1 + s_0973 / Km0973_221) * (1 + s_1364 / Km1364_221) + (1 + s_0299 / Km0299_221) * (1 + ADP / KmADP_221) * (1 + PHO / KmPHO_221) - 1)) + (cell * Vmax_224 * (s_0300 * CO2 * ATP - s_1364 * ADP * PHO / Keq_224) / (Km0300_224 * KmCO2_224 * KmATP_224) / ((1 + s_0300 / Km0300_224) * (1 + CO2 / KmCO2_224) * (1 + ATP / KmATP_224) + (1 + s_1364 / Km1364_224) * (1 + ADP / KmADP_224) * (1 + PHO / KmPHO_224) - 1)) + (cell * Vmax_227 * (s_0327 * ATP * s_1003 - s_0325 * ADP * PHO / Keq_227) / (Km0327_227 * KmATP_227 * Km1003_227) / ((1 + s_0327 / Km0327_227) * (1 + ATP / KmATP_227) * (1 + s_1003 / Km1003_227) + (1 + s_0325 / Km0325_227) * (1 + ADP / KmADP_227) * (1 + PHO / KmPHO_227) - 1)) + (cell * Vmax_234 * (ATP * s_0445 * PYR - ADP * s_1271 * PHO / Keq_234) / (KmATP_234 * Km0445_234 * KmPYR_234) / ((1 + ATP / KmATP_234) * (1 + s_0445 / Km0445_234) * (1 + PYR / KmPYR_234) + (1 + ADP / KmADP_234) * (1 + s_1271 / Km1271_234) * (1 + PHO / KmPHO_234) - 1)) + (cell * Vmax_253 * (ATP * s_1429 - s_0261 * ADP / Keq_253) / (KmATP_253 * Km1429_253) / ((1 + ATP / KmATP_253) * (1 + s_1429 / Km1429_253) + (1 + s_0261 / Km0261_253) * (1 + ADP / KmADP_253) - 1)) + (cell * Vmax_275 * (ATP * s_1545 - ADP * s_1538 / Keq_275) / (KmATP_275 * Km1545_275) / ((1 + ATP / KmATP_275) * (1 + s_1545 / Km1545_275) + (1 + ADP / KmADP_275) * (1 + s_1538 / Km1538_275) - 1)) + (59.276 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (2.0 * cell * k_36 * (ADP * ADP - AMP * ATP / Keq_36)) - (cell * Vmax_61 * (ADP * PHO - ATP / Keq_61) / (KmADP_61 * KmPHO_61) / ((1 + ADP / KmADP_61) * (1 + PHO / KmPHO_61) + 1 + ATP / KmATP_61 - 1)) - (cell * Vmax_89 * (ADP * s_0613 - ATP * s_0615 / Keq_89) / (KmADP_89 * Km0613_89) / ((1 + ADP / KmADP_89) * (1 + s_0613 / Km0613_89) + (1 + ATP / KmATP_89) * (1 + s_0615 / Km0615_89) - 1)) - (cell * (Vmax_215 * (BPG * ADP / (Kbpg_215 * Kadp_215) - P3G * ATP / (Kbpg_215 * Kadp_215 * Keq_215)) / ((1 + BPG / Kbpg_215 + P3G / Kp3g_215) * (1 + ADP / Kadp_215 + ATP / Katp_215)))) - (cell * (Vmax_236 * (PEP * ADP / (Kpep_236 * Kadp_236) - PYR * ATP / (Kpep_236 * Kadp_236 * Keq_236)) / ((1 + PEP / Kpep_236 + PYR / Kpyr_236) * (1 + ADP / Kadp_236 + ATP / Katp_236)))) - (cell * Vmax_241 * (ADP * s_1616 - s_0582 * s_1620 / Keq_241) / (KmADP_241 * Km1616_241) / ((1 + ADP / KmADP_241) * (1 + s_1616 / Km1616_241) + (1 + s_0582 / Km0582_241) * (1 + s_1620 / Km1620_241) - 1)) - (cell * Vmax_258 * (ADP * s_1467 - s_0298 * PHO / Keq_258) / (KmADP_258 * Km1467_258) / ((1 + ADP / KmADP_258) * (1 + s_1467 / Km1467_258) + (1 + s_0298 / Km0298_258) * (1 + PHO / KmPHO_258) - 1)) - (cell * Vmax_288 * (ADP * s_0587 - ATP * s_0589 / Keq_288) / (KmADP_288 * Km0587_288) / ((1 + ADP / KmADP_288) * (1 + s_0587 / Km0587_288) + (1 + ATP / KmATP_288) * (1 + s_0589 / Km0589_288) - 1)) - (cell * Vmax_289 * (ADP * s_0582 - ATP * s_0584 / Keq_289) / (KmADP_289 * Km0582_289) / ((1 + ADP / KmADP_289) * (1 + s_0582 / Km0582_289) + (1 + ATP / KmATP_289) * (1 + s_0584 / Km0584_289) - 1));
    der(s_0403) = (cell * Vmax_38 * (s_0299 - s_0403 * s_0725 / Keq_38) / Km0299_38 / (1 + s_0299 / Km0299_38 + (1 + s_0403 / Km0403_38) * (1 + s_0725 / Km0725_38) - 1)) + (cell * Vmax_156 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_156) / (Km0312_156 * Km0999_156) / ((1 + s_0312 / Km0312_156) * (1 + s_0999 / Km0999_156) + (1 + s_0403 / Km0403_156) * (1 + s_0550 / Km0550_156) * (1 + s_0991 / Km0991_156) - 1)) - (cell * Vmax_225 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_225) / (Km0120_225 * Km0403_225) / ((1 + s_0120 / Km0120_225) * (1 + s_0403 / Km0403_225) + (1 + s_1365 / Km1365_225) * (1 + s_1487 / Km1487_225) - 1));
    der(s_0404) = (cell * Vmax_43 * (ATP * s_0955 * s_1582 - s_0404 * AMP * s_0633 / Keq_43) / (KmATP_43 * Km0955_43 * Km1582_43) / ((1 + ATP / KmATP_43) * (1 + s_0955 / Km0955_43) * (1 + s_1582 / Km1582_43) + (1 + s_0404 / Km0404_43) * (1 + AMP / KmAMP_43) * (1 + s_0633 / Km0633_43) - 1)) - (0.4588 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0409) = (cell * Vmax_47 * (G6P * s_1543 - s_0409 * s_1538 / Keq_47) / (KmG6P_47 * Km1543_47) / ((1 + G6P / KmG6P_47) * (1 + s_1543 / Km1543_47) + (1 + s_0409 / Km0409_47) * (1 + s_1538 / Km1538_47) - 1)) - (cell * Vmax_268 * (s_0409 - PHO * s_1520 / Keq_268) / Km0409_268 / (1 + s_0409 / Km0409_268 + (1 + PHO / KmPHO_268) * (1 + s_1520 / Km1520_268) - 1));
    der(s_0419) = (cell * Vmax_7 * (s_0142 - s_0313 * s_0419 / Keq_7) / Km0142_7 / (1 + s_0142 / Km0142_7 + (1 + s_0313 / Km0313_7) * (1 + s_0419 / Km0419_7) - 1)) + (cell * Vmax_84 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_84) / Km0980_84 / (1 + s_0980 / Km0980_84 + (1 + s_0178 / Km0178_84) * (1 + s_0419 / Km0419_84) * (1 + s_0981 / Km0981_84) - 1)) + (cell * Vmax_88 * (s_0589 - s_0419 * s_0654 / Keq_88) / Km0589_88 / (1 + s_0589 / Km0589_88 + (1 + s_0419 / Km0419_88) * (1 + s_0654 / Km0654_88) - 1)) + (cell * Vmax_134 * (s_1003 * NAD * s_1487 - s_0306 * s_0419 * CO2 * NADH / Keq_134) / (Km1003_134 * KmNAD_134 * Km1487_134) / ((1 + s_1003 / Km1003_134) * (1 + NAD / KmNAD_134) * (1 + s_1487 / Km1487_134) + (1 + s_0306 / Km0306_134) * (1 + s_0419 / Km0419_134) * (1 + CO2 / KmCO2_134) * (1 + NADH / KmNAD_134H) - 1)) + (cell * Vmax_173 * (s_1045 - s_0178 * s_0419 / Keq_173) / Km1045_173 / (1 + s_1045 / Km1045_173 + (1 + s_0178 / Km0178_173) * (1 + s_0419 / Km0419_173) - 1)) + (cell * Vmax_279 * (s_0420 - s_0419) / Km0420_279 / (1 + s_0420 / Km0420_279 + 1 + s_0419 / Km0419_279 - 1)) - (cell * Vmax_82 * (s_0419 * ATP * s_1559 - ADP * s_0539 * PHO / Keq_82) / (Km0419_82 * KmATP_82 * Km1559_82) / ((1 + s_0419 / Km0419_82) * (1 + ATP / KmATP_82) * (1 + s_1559 / Km1559_82) + (1 + ADP / KmADP_82) * (1 + s_0539 / Km0539_82) * (1 + PHO / KmPHO_82) - 1)) - (cell * Vmax_125 * (s_0180 * s_0419 * NADH - s_0991 * NAD / Keq_125) / (Km0180_125 * Km0419_125 * KmNAD_125H_125) / ((1 + s_0180 / Km0180_125) * (1 + s_0419 / Km0419_125) * (1 + NADH / KmNAD_125H_125) + (1 + s_0991 / Km0991_125) * (1 + NAD / KmNAD_125) - 1)) - (cell * Vmax_126 * (s_0419 * ATP * s_0991 - ADP * s_0999 * PHO / Keq_126) / (Km0419_126 * KmATP_126 * Km0991_126) / ((1 + s_0419 / Km0419_126) * (1 + ATP / KmATP_126) * (1 + s_0991 / Km0991_126) + (1 + ADP / KmADP_126) * (1 + s_0999 / Km0999_126) * (1 + PHO / KmPHO_126) - 1));
    der(s_0420) = 0.0;
    der(AMP) = (cell * Vmax_16 * (s_0390 - AMP * PHO / Keq_16) / Km0390_16 / (1 + s_0390 / Km0390_16 + (1 + AMP / KmAMP_16) * (1 + PHO / KmPHO_16) - 1)) + (cell * Vmax_34 * (s_0386 * ATP - ADP * AMP / Keq_34) / (Km0386_34 * KmATP_34) / ((1 + s_0386 / Km0386_34) * (1 + ATP / KmATP_34) + (1 + ADP / KmADP_34) * (1 + AMP / KmAMP_34) - 1)) + (cell * k_36 * (ADP * ADP - AMP * ATP / Keq_36)) + (cell * Vmax_39 * (s_0393 - AMP * s_0725 / Keq_39) / Km0393_39 / (1 + s_0393 / Km0393_39 + (1 + AMP / KmAMP_39) * (1 + s_0725 / Km0725_39) - 1)) + (cell * Vmax_43 * (ATP * s_0955 * s_1582 - s_0404 * AMP * s_0633 / Keq_43) / (KmATP_43 * Km0955_43 * Km1582_43) / ((1 + ATP / KmATP_43) * (1 + s_0955 / Km0955_43) * (1 + s_1582 / Km1582_43) + (1 + s_0404 / Km0404_43) * (1 + AMP / KmAMP_43) * (1 + s_0633 / Km0633_43) - 1)) + (cell * Vmax_51 * (ATP * s_0973 * s_0979 - s_0015 * AMP * s_0633 / Keq_51) / (KmATP_51 * Km0973_51 * Km0979_51) / ((1 + ATP / KmATP_51) * (1 + s_0973 / Km0973_51) * (1 + s_0979 / Km0979_51) + (1 + s_0015 / Km0015_51) * (1 + AMP / KmAMP_51) * (1 + s_0633 / Km0633_51) - 1)) + (cell * Vmax_52 * (ATP * s_0965 * s_1583 - AMP * s_0428 * s_0633 / Keq_52) / (KmATP_52 * Km0965_52 * Km1583_52) / ((1 + ATP / KmATP_52) * (1 + s_0965 / Km0965_52) * (1 + s_1583 / Km1583_52) + (1 + AMP / KmAMP_52) * (1 + s_0428 / Km0428_52) * (1 + s_0633 / Km0633_52) - 1)) + (cell * Vmax_53 * (ATP * s_0973 * s_0999 - AMP * s_0633 * s_0969 * s_0991 / Keq_53) / (KmATP_53 * Km0973_53 * Km0999_53) / ((1 + ATP / KmATP_53) * (1 + s_0973 / Km0973_53) * (1 + s_0999 / Km0999_53) + (1 + AMP / KmAMP_53) * (1 + s_0633 / Km0633_53) * (1 + s_0969 / Km0969_53) * (1 + s_0991 / Km0991_53) - 1)) + (cell * Vmax_54 * (ATP * s_0969 * s_1585 - AMP * s_0430 * s_0633 / Keq_54) / (KmATP_54 * Km0969_54 * Km1585_54) / ((1 + ATP / KmATP_54) * (1 + s_0969 / Km0969_54) * (1 + s_1585 / Km1585_54) + (1 + AMP / KmAMP_54) * (1 + s_0430 / Km0430_54) * (1 + s_0633 / Km0633_54) - 1)) + (cell * Vmax_59 * (ATP * s_0973 * s_1587 - AMP * s_0432 * s_0633 / Keq_59) / (KmATP_59 * Km0973_59 * Km1587_59) / ((1 + ATP / KmATP_59) * (1 + s_0973 / Km0973_59) * (1 + s_1587 / Km1587_59) + (1 + AMP / KmAMP_59) * (1 + s_0432 / Km0432_59) * (1 + s_0633 / Km0633_59) - 1)) + (cell * Vmax_86 * (ATP * s_0981 * s_1589 - AMP * s_0542 * s_0633 / Keq_86) / (KmATP_86 * Km0981_86 * Km1589_86) / ((1 + ATP / KmATP_86) * (1 + s_0981 / Km0981_86) * (1 + s_1589 / Km1589_86) + (1 + AMP / KmAMP_86) * (1 + s_0542 / Km0542_86) * (1 + s_0633 / Km0633_86) - 1)) + (cell * Vmax_110 * (ATP * s_0529 * s_1065 - AMP * s_0633 * s_1073 / Keq_110) / (KmATP_110 * Km0529_110 * Km1065_110) / ((1 + ATP / KmATP_110) * (1 + s_0529 / Km0529_110) * (1 + s_1065 / Km1065_110) + (1 + AMP / KmAMP_110) * (1 + s_0633 / Km0633_110) * (1 + s_1073 / Km1073_110) - 1)) + (cell * Vmax_111 * (ATP * s_0505 * s_0529 - AMP * s_0633 * s_0816 / Keq_111) / (KmATP_111 * Km0505_111 * Km0529_111) / ((1 + ATP / KmATP_111) * (1 + s_0505 / Km0505_111) * (1 + s_0529 / Km0529_111) + (1 + AMP / KmAMP_111) * (1 + s_0633 / Km0633_111) * (1 + s_0816 / Km0816_111) - 1)) + (cell * Vmax_127 * (ATP * s_0999 * s_1590 - AMP * s_0633 * s_0747 / Keq_127) / (KmATP_127 * Km0999_127 * Km1590_127) / ((1 + ATP / KmATP_127) * (1 + s_0999 / Km0999_127) * (1 + s_1590 / Km1590_127) + (1 + AMP / KmAMP_127) * (1 + s_0633 / Km0633_127) * (1 + s_0747 / Km0747_127) - 1)) + (cell * Vmax_128 * (ATP * s_0991 * s_1591 - AMP * s_0633 * s_0748 / Keq_128) / (KmATP_128 * Km0991_128 * Km1591_128) / ((1 + ATP / KmATP_128) * (1 + s_0991 / Km0991_128) * (1 + s_1591 / Km1591_128) + (1 + AMP / KmAMP_128) * (1 + s_0633 / Km0633_128) * (1 + s_0748 / Km0748_128) - 1)) + (cell * Vmax_137 * (ATP * s_1003 * s_1593 - AMP * s_0633 * s_0757 / Keq_137) / (KmATP_137 * Km1003_137 * Km1593_137) / ((1 + ATP / KmATP_137) * (1 + s_1003 / Km1003_137) * (1 + s_1593 / Km1593_137) + (1 + AMP / KmAMP_137) * (1 + s_0633 / Km0633_137) * (1 + s_0757 / Km0757_137) - 1)) + (cell * Vmax_138 * (ATP * s_0999 * s_1565 - AMP * s_0633 * s_0782 * s_0991 / Keq_138) / (KmATP_138 * Km0999_138 * Km1565_138) / ((1 + ATP / KmATP_138) * (1 + s_0999 / Km0999_138) * (1 + s_1565 / Km1565_138) + (1 + AMP / KmAMP_138) * (1 + s_0633 / Km0633_138) * (1 + s_0782 / Km0782_138) * (1 + s_0991 / Km0991_138) - 1)) + (cell * Vmax_146 * (ATP * s_1006 * s_1594 - AMP * s_0633 * s_0832 / Keq_146) / (KmATP_146 * Km1006_146 * Km1594_146) / ((1 + ATP / KmATP_146) * (1 + s_1006 / Km1006_146) * (1 + s_1594 / Km1594_146) + (1 + AMP / KmAMP_146) * (1 + s_0633 / Km0633_146) * (1 + s_0832 / Km0832_146) - 1)) + (cell * Vmax_167 * (ATP * s_1016 * s_1596 - AMP * s_0633 * s_0847 / Keq_167) / (KmATP_167 * Km1016_167 * Km1596_167) / ((1 + ATP / KmATP_167) * (1 + s_1016 / Km1016_167) * (1 + s_1596 / Km1596_167) + (1 + AMP / KmAMP_167) * (1 + s_0633 / Km0633_167) * (1 + s_0847 / Km0847_167) - 1)) + (cell * Vmax_178 * (ATP * s_1021 * s_1598 - AMP * s_0633 * s_1077 / Keq_178) / (KmATP_178 * Km1021_178 * Km1598_178) / ((1 + ATP / KmATP_178) * (1 + s_1021 / Km1021_178) * (1 + s_1598 / Km1598_178) + (1 + AMP / KmAMP_178) * (1 + s_0633 / Km0633_178) * (1 + s_1077 / Km1077_178) - 1)) + (cell * Vmax_179 * (ATP * s_1025 * s_1600 - AMP * s_0633 * s_1099 / Keq_179) / (KmATP_179 * Km1025_179 * Km1600_179) / ((1 + ATP / KmATP_179) * (1 + s_1025 / Km1025_179) * (1 + s_1600 / Km1600_179) + (1 + AMP / KmAMP_179) * (1 + s_0633 / Km0633_179) * (1 + s_1099 / Km1099_179) - 1)) + (cell * Vmax_186 * (ATP * s_1029 * s_1602 - AMP * s_0633 * s_1148 / Keq_186) / (KmATP_186 * Km1029_186 * Km1602_186) / ((1 + ATP / KmATP_186) * (1 + s_1029 / Km1029_186) * (1 + s_1602 / Km1602_186) + (1 + AMP / KmAMP_186) * (1 + s_0633 / Km0633_186) * (1 + s_1148 / Km1148_186) - 1)) + (cell * Vmax_204 * (ATP * s_1032 * s_1604 - AMP * s_0633 * s_1314 / Keq_204) / (KmATP_204 * Km1032_204 * Km1604_204) / ((1 + ATP / KmATP_204) * (1 + s_1032 / Km1032_204) * (1 + s_1604 / Km1604_204) + (1 + AMP / KmAMP_204) * (1 + s_0633 / Km0633_204) * (1 + s_1314 / Km1314_204) - 1)) + (cell * Vmax_229 * (ATP * s_1408 - AMP * s_1386 / Keq_229) / (KmATP_229 * Km1408_229) / ((1 + ATP / KmATP_229) * (1 + s_1408 / Km1408_229) + (1 + AMP / KmAMP_229) * (1 + s_1386 / Km1386_229) - 1)) + (cell * Vmax_232 * (ATP * s_1035 * s_1606 - AMP * s_0633 * s_1379 / Keq_232) / (KmATP_232 * Km1035_232 * Km1606_232) / ((1 + ATP / KmATP_232) * (1 + s_1035 / Km1035_232) * (1 + s_1606 / Km1606_232) + (1 + AMP / KmAMP_232) * (1 + s_0633 / Km0633_232) * (1 + s_1379 / Km1379_232) - 1)) + (cell * Vmax_251 * (ATP * s_1039 * s_1607 - AMP * s_0633 * s_1428 / Keq_251) / (KmATP_251 * Km1039_251 * Km1607_251) / ((1 + ATP / KmATP_251) * (1 + s_1039 / Km1039_251) * (1 + s_1607 / Km1607_251) + (1 + AMP / KmAMP_251) * (1 + s_0633 / Km0633_251) * (1 + s_1428 / Km1428_251) - 1)) + (cell * Vmax_263 * (ATP * s_1045 * s_1608 - AMP * s_0633 * s_1491 / Keq_263) / (KmATP_263 * Km1045_263 * Km1608_263) / ((1 + ATP / KmATP_263) * (1 + s_1045 / Km1045_263) * (1 + s_1608 / Km1608_263) + (1 + AMP / KmAMP_263) * (1 + s_0633 / Km0633_263) * (1 + s_1491 / Km1491_263) - 1)) + (cell * Vmax_272 * (ATP * s_1048 * s_1610 - AMP * s_0633 * s_1527 / Keq_272) / (KmATP_272 * Km1048_272 * Km1610_272) / ((1 + ATP / KmATP_272) * (1 + s_1048 / Km1048_272) * (1 + s_1610 / Km1610_272) + (1 + AMP / KmAMP_272) * (1 + s_0633 / Km0633_272) * (1 + s_1527 / Km1527_272) - 1)) + (cell * Vmax_274 * (ATP * s_1051 * s_1612 - AMP * s_0633 * s_1533 / Keq_274) / (KmATP_274 * Km1051_274 * Km1612_274) / ((1 + ATP / KmATP_274) * (1 + s_1051 / Km1051_274) * (1 + s_1612 / Km1612_274) + (1 + AMP / KmAMP_274) * (1 + s_0633 / Km0633_274) * (1 + s_1533 / Km1533_274) - 1)) + (cell * Vmax_278 * (ATP * s_1056 * s_1614 - AMP * s_0633 * s_1561 / Keq_278) / (KmATP_278 * Km1056_278 * Km1614_278) / ((1 + ATP / KmATP_278) * (1 + s_1056 / Km1056_278) * (1 + s_1614 / Km1614_278) + (1 + AMP / KmAMP_278) * (1 + s_0633 / Km0633_278) * (1 + s_1561 / Km1561_278) - 1)) - (cell * Vmax_37 * (AMP * s_0785 - ADP * s_0739 / Keq_37) / (KmAMP_37 * Km0785_37) / ((1 + AMP / KmAMP_37) * (1 + s_0785 / Km0785_37) + (1 + ADP / KmADP_37) * (1 + s_0739 / Km0739_37) - 1)) - (cell * Vmax_109 * (AMP * s_0602 * s_0633 - ATP * s_0529 * s_0595 / Keq_109) / (KmAMP_109 * Km0602_109 * Km0633_109) / ((1 + AMP / KmAMP_109) * (1 + s_0602 / Km0602_109) * (1 + s_0633 / Km0633_109) + (1 + ATP / KmATP_109) * (1 + s_0529 / Km0529_109) * (1 + s_0595 / Km0595_109) - 1)) - (cell * Vmax_112 * (AMP * s_0633 * s_1454 - ATP * s_0529 * s_1449 / Keq_112) / (KmAMP_112 * Km0633_112 * Km1454_112) / ((1 + AMP / KmAMP_112) * (1 + s_0633 / Km0633_112) * (1 + s_1454 / Km1454_112) + (1 + ATP / KmATP_112) * (1 + s_0529 / Km0529_112) * (1 + s_1449 / Km1449_112) - 1)) - (0.046 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0427) = (cell * Vmax_49 * (s_0515 * s_0999 - s_0427 * s_0991 * PYR / Keq_49) / (Km0515_49 * Km0999_49) / ((1 + s_0515 / Km0515_49) * (1 + s_0999 / Km0999_49) + (1 + s_0427 / Km0427_49) * (1 + s_0991 / Km0991_49) * (1 + PYR / KmPYR_49) - 1)) - (cell * Vmax_48 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_48) / (Km0427_48 * Km1386_48) / ((1 + s_0427 / Km0427_48) * (1 + s_1386 / Km1386_48) + (1 + s_0633 / Km0633_48) * (1 + s_1187 / Km1187_48) - 1));
    der(s_0428) = (cell * Vmax_52 * (ATP * s_0965 * s_1583 - AMP * s_0428 * s_0633 / Keq_52) / (KmATP_52 * Km0965_52 * Km1583_52) / ((1 + ATP / KmATP_52) * (1 + s_0965 / Km0965_52) * (1 + s_1583 / Km1583_52) + (1 + AMP / KmAMP_52) * (1 + s_0428 / Km0428_52) * (1 + s_0633 / Km0633_52) - 1)) - (0.1607 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0430) = (cell * Vmax_54 * (ATP * s_0969 * s_1585 - AMP * s_0430 * s_0633 / Keq_54) / (KmATP_54 * Km0969_54 * Km1585_54) / ((1 + ATP / KmATP_54) * (1 + s_0969 / Km0969_54) * (1 + s_1585 / Km1585_54) + (1 + AMP / KmAMP_54) * (1 + s_0430 / Km0430_54) * (1 + s_0633 / Km0633_54) - 1)) - (0.1017 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0432) = (cell * Vmax_59 * (ATP * s_0973 * s_1587 - AMP * s_0432 * s_0633 / Keq_59) / (KmATP_59 * Km0973_59 * Km1587_59) / ((1 + ATP / KmATP_59) * (1 + s_0973 / Km0973_59) * (1 + s_1587 / Km1587_59) + (1 + AMP / KmAMP_59) * (1 + s_0432 / Km0432_59) * (1 + s_0633 / Km0633_59) - 1)) - (0.2975 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(ATP) = (cell * k_36 * (ADP * ADP - AMP * ATP / Keq_36)) + (cell * Vmax_61 * (ADP * PHO - ATP / Keq_61) / (KmADP_61 * KmPHO_61) / ((1 + ADP / KmADP_61) * (1 + PHO / KmPHO_61) + 1 + ATP / KmATP_61 - 1)) + (cell * Vmax_89 * (ADP * s_0613 - ATP * s_0615 / Keq_89) / (KmADP_89 * Km0613_89) / ((1 + ADP / KmADP_89) * (1 + s_0613 / Km0613_89) + (1 + ATP / KmATP_89) * (1 + s_0615 / Km0615_89) - 1)) + (cell * Vmax_109 * (AMP * s_0602 * s_0633 - ATP * s_0529 * s_0595 / Keq_109) / (KmAMP_109 * Km0602_109 * Km0633_109) / ((1 + AMP / KmAMP_109) * (1 + s_0602 / Km0602_109) * (1 + s_0633 / Km0633_109) + (1 + ATP / KmATP_109) * (1 + s_0529 / Km0529_109) * (1 + s_0595 / Km0595_109) - 1)) + (cell * Vmax_112 * (AMP * s_0633 * s_1454 - ATP * s_0529 * s_1449 / Keq_112) / (KmAMP_112 * Km0633_112 * Km1454_112) / ((1 + AMP / KmAMP_112) * (1 + s_0633 / Km0633_112) * (1 + s_1454 / Km1454_112) + (1 + ATP / KmATP_112) * (1 + s_0529 / Km0529_112) * (1 + s_1449 / Km1449_112) - 1)) + (cell * (Vmax_215 * (BPG * ADP / (Kbpg_215 * Kadp_215) - P3G * ATP / (Kbpg_215 * Kadp_215 * Keq_215)) / ((1 + BPG / Kbpg_215 + P3G / Kp3g_215) * (1 + ADP / Kadp_215 + ATP / Katp_215)))) + (cell * (Vmax_236 * (PEP * ADP / (Kpep_236 * Kadp_236) - PYR * ATP / (Kpep_236 * Kadp_236 * Keq_236)) / ((1 + PEP / Kpep_236 + PYR / Kpyr_236) * (1 + ADP / Kadp_236 + ATP / Katp_236)))) + (cell * Vmax_288 * (ADP * s_0587 - ATP * s_0589 / Keq_288) / (KmADP_288 * Km0587_288) / ((1 + ADP / KmADP_288) * (1 + s_0587 / Km0587_288) + (1 + ATP / KmATP_288) * (1 + s_0589 / Km0589_288) - 1)) + (cell * Vmax_289 * (ADP * s_0582 - ATP * s_0584 / Keq_289) / (KmADP_289 * Km0582_289) / ((1 + ADP / KmADP_289) * (1 + s_0582 / Km0582_289) + (1 + ATP / KmATP_289) * (1 + s_0584 / Km0584_289) - 1)) - (cell * Vmax_24 * (s_0301 * ATP * s_0999 - s_0302 * ADP * s_0991 * PHO / Keq_24) / (Km0301_24 * KmATP_24 * Km0999_24) / ((1 + s_0301 / Km0301_24) * (1 + ATP / KmATP_24) * (1 + s_0999 / Km0999_24) + (1 + s_0302 / Km0302_24) * (1 + ADP / KmADP_24) * (1 + s_0991 / Km0991_24) * (1 + PHO / KmPHO_24) - 1)) - (cell * Vmax_30 * (s_0373 * ATP * s_0445 - ADP * s_1101 * PHO / Keq_30) / (Km0373_30 * KmATP_30 * Km0445_30) / ((1 + s_0373 / Km0373_30) * (1 + ATP / KmATP_30) * (1 + s_0445 / Km0445_30) + (1 + ADP / KmADP_30) * (1 + s_1101 / Km1101_30) * (1 + PHO / KmPHO_30) - 1)) - (cell * Vmax_32 * (ATP * s_1192 - ADP * s_1191 / Keq_32) / (KmATP_32 * Km1192_32) / ((1 + ATP / KmATP_32) * (1 + s_1192 / Km1192_32) + (1 + ADP / KmADP_32) * (1 + s_1191 / Km1191_32) - 1)) - (cell * Vmax_34 * (s_0386 * ATP - ADP * AMP / Keq_34) / (Km0386_34 * KmATP_34) / ((1 + s_0386 / Km0386_34) * (1 + ATP / KmATP_34) + (1 + ADP / KmADP_34) * (1 + AMP / KmAMP_34) - 1)) - (cell * Vmax_41 * (s_0298 * ATP - s_0201 * ADP / Keq_41) / (Km0298_41 * KmATP_41) / ((1 + s_0298 / Km0298_41) * (1 + ATP / KmATP_41) + (1 + s_0201 / Km0201_41) * (1 + ADP / KmADP_41) - 1)) - (cell * Vmax_43 * (ATP * s_0955 * s_1582 - s_0404 * AMP * s_0633 / Keq_43) / (KmATP_43 * Km0955_43 * Km1582_43) / ((1 + ATP / KmATP_43) * (1 + s_0955 / Km0955_43) * (1 + s_1582 / Km1582_43) + (1 + s_0404 / Km0404_43) * (1 + AMP / KmAMP_43) * (1 + s_0633 / Km0633_43) - 1)) - (cell * Vmax_51 * (ATP * s_0973 * s_0979 - s_0015 * AMP * s_0633 / Keq_51) / (KmATP_51 * Km0973_51 * Km0979_51) / ((1 + ATP / KmATP_51) * (1 + s_0973 / Km0973_51) * (1 + s_0979 / Km0979_51) + (1 + s_0015 / Km0015_51) * (1 + AMP / KmAMP_51) * (1 + s_0633 / Km0633_51) - 1)) - (cell * Vmax_52 * (ATP * s_0965 * s_1583 - AMP * s_0428 * s_0633 / Keq_52) / (KmATP_52 * Km0965_52 * Km1583_52) / ((1 + ATP / KmATP_52) * (1 + s_0965 / Km0965_52) * (1 + s_1583 / Km1583_52) + (1 + AMP / KmAMP_52) * (1 + s_0428 / Km0428_52) * (1 + s_0633 / Km0633_52) - 1)) - (cell * Vmax_53 * (ATP * s_0973 * s_0999 - AMP * s_0633 * s_0969 * s_0991 / Keq_53) / (KmATP_53 * Km0973_53 * Km0999_53) / ((1 + ATP / KmATP_53) * (1 + s_0973 / Km0973_53) * (1 + s_0999 / Km0999_53) + (1 + AMP / KmAMP_53) * (1 + s_0633 / Km0633_53) * (1 + s_0969 / Km0969_53) * (1 + s_0991 / Km0991_53) - 1)) - (cell * Vmax_54 * (ATP * s_0969 * s_1585 - AMP * s_0430 * s_0633 / Keq_54) / (KmATP_54 * Km0969_54 * Km1585_54) / ((1 + ATP / KmATP_54) * (1 + s_0969 / Km0969_54) * (1 + s_1585 / Km1585_54) + (1 + AMP / KmAMP_54) * (1 + s_0430 / Km0430_54) * (1 + s_0633 / Km0633_54) - 1)) - (cell * Vmax_56 * (ATP * s_0973 - s_0295 * ADP / Keq_56) / (KmATP_56 * Km0973_56) / ((1 + ATP / KmATP_56) * (1 + s_0973 / Km0973_56) + (1 + s_0295 / Km0295_56) * (1 + ADP / KmADP_56) - 1)) - (cell * Vmax_59 * (ATP * s_0973 * s_1587 - AMP * s_0432 * s_0633 / Keq_59) / (KmATP_59 * Km0973_59 * Km1587_59) / ((1 + ATP / KmATP_59) * (1 + s_0973 / Km0973_59) * (1 + s_1587 / Km1587_59) + (1 + AMP / KmAMP_59) * (1 + s_0432 / Km0432_59) * (1 + s_0633 / Km0633_59) - 1)) - (cell * Vmax_60 * (ATP * s_1386 - s_0326 * s_0633 / Keq_60) / (KmATP_60 * Km1386_60) / ((1 + ATP / KmATP_60) * (1 + s_1386 / Km1386_60) + (1 + s_0326 / Km0326_60) * (1 + s_0633 / Km0633_60) - 1)) - (cell * k_62 * ATP) - (2.0 * cell * Vmax_74 * (pow(ATP, 2) * s_0445 * s_0999 - pow(ADP, 2) * s_0455 * s_0991 * PHO / Keq_74) / (pow(KmATP_74, 2) * Km0445_74 * Km0999_74) / (pow(1 + ATP / KmATP_74, 2) * (1 + s_0445 / Km0445_74) * (1 + s_0999 / Km0999_74) + pow(1 + ADP / KmADP_74, 2) * (1 + s_0455 / Km0455_74) * (1 + s_0991 / Km0991_74) * (1 + PHO / KmPHO_74) - 1)) - (cell * Vmax_82 * (s_0419 * ATP * s_1559 - ADP * s_0539 * PHO / Keq_82) / (Km0419_82 * KmATP_82 * Km1559_82) / ((1 + s_0419 / Km0419_82) * (1 + ATP / KmATP_82) * (1 + s_1559 / Km1559_82) + (1 + ADP / KmADP_82) * (1 + s_0539 / Km0539_82) * (1 + PHO / KmPHO_82) - 1)) - (cell * Vmax_86 * (ATP * s_0981 * s_1589 - AMP * s_0542 * s_0633 / Keq_86) / (KmATP_86 * Km0981_86 * Km1589_86) / ((1 + ATP / KmATP_86) * (1 + s_0981 / Km0981_86) * (1 + s_1589 / Km1589_86) + (1 + AMP / KmAMP_86) * (1 + s_0542 / Km0542_86) * (1 + s_0633 / Km0633_86) - 1)) - (cell * Vmax_110 * (ATP * s_0529 * s_1065 - AMP * s_0633 * s_1073 / Keq_110) / (KmATP_110 * Km0529_110 * Km1065_110) / ((1 + ATP / KmATP_110) * (1 + s_0529 / Km0529_110) * (1 + s_1065 / Km1065_110) + (1 + AMP / KmAMP_110) * (1 + s_0633 / Km0633_110) * (1 + s_1073 / Km1073_110) - 1)) - (cell * Vmax_111 * (ATP * s_0505 * s_0529 - AMP * s_0633 * s_0816 / Keq_111) / (KmATP_111 * Km0505_111 * Km0529_111) / ((1 + ATP / KmATP_111) * (1 + s_0505 / Km0505_111) * (1 + s_0529 / Km0529_111) + (1 + AMP / KmAMP_111) * (1 + s_0633 / Km0633_111) * (1 + s_0816 / Km0816_111) - 1)) - (cell * Vmax_119 * (ATP * s_0722 * s_1487 - s_0120 * ADP * PHO / Keq_119) / (KmATP_119 * Km0722_119 * Km1487_119) / ((1 + ATP / KmATP_119) * (1 + s_0722 / Km0722_119) * (1 + s_1487 / Km1487_119) + (1 + s_0120 / Km0120_119) * (1 + ADP / KmADP_119) * (1 + PHO / KmPHO_119) - 1)) - (cell * Vmax_126 * (s_0419 * ATP * s_0991 - ADP * s_0999 * PHO / Keq_126) / (Km0419_126 * KmATP_126 * Km0991_126) / ((1 + s_0419 / Km0419_126) * (1 + ATP / KmATP_126) * (1 + s_0991 / Km0991_126) + (1 + ADP / KmADP_126) * (1 + s_0999 / Km0999_126) * (1 + PHO / KmPHO_126) - 1)) - (cell * Vmax_127 * (ATP * s_0999 * s_1590 - AMP * s_0633 * s_0747 / Keq_127) / (KmATP_127 * Km0999_127 * Km1590_127) / ((1 + ATP / KmATP_127) * (1 + s_0999 / Km0999_127) * (1 + s_1590 / Km1590_127) + (1 + AMP / KmAMP_127) * (1 + s_0633 / Km0633_127) * (1 + s_0747 / Km0747_127) - 1)) - (cell * Vmax_128 * (ATP * s_0991 * s_1591 - AMP * s_0633 * s_0748 / Keq_128) / (KmATP_128 * Km0991_128 * Km1591_128) / ((1 + ATP / KmATP_128) * (1 + s_0991 / Km0991_128) * (1 + s_1591 / Km1591_128) + (1 + AMP / KmAMP_128) * (1 + s_0633 / Km0633_128) * (1 + s_0748 / Km0748_128) - 1)) - (cell * Vmax_137 * (ATP * s_1003 * s_1593 - AMP * s_0633 * s_0757 / Keq_137) / (KmATP_137 * Km1003_137 * Km1593_137) / ((1 + ATP / KmATP_137) * (1 + s_1003 / Km1003_137) * (1 + s_1593 / Km1593_137) + (1 + AMP / KmAMP_137) * (1 + s_0633 / Km0633_137) * (1 + s_0757 / Km0757_137) - 1)) - (cell * Vmax_138 * (ATP * s_0999 * s_1565 - AMP * s_0633 * s_0782 * s_0991 / Keq_138) / (KmATP_138 * Km0999_138 * Km1565_138) / ((1 + ATP / KmATP_138) * (1 + s_0999 / Km0999_138) * (1 + s_1565 / Km1565_138) + (1 + AMP / KmAMP_138) * (1 + s_0633 / Km0633_138) * (1 + s_0782 / Km0782_138) * (1 + s_0991 / Km0991_138) - 1)) - (cell * Vmax_140 * (ATP * s_0782 - ADP * s_0739 / Keq_140) / (KmATP_140 * Km0782_140) / ((1 + ATP / KmATP_140) * (1 + s_0782 / Km0782_140) + (1 + ADP / KmADP_140) * (1 + s_0739 / Km0739_140) - 1)) - (cell * (Vmax_142 * (GLC * ATP / (Kglc_142 * Katp_142) - G6P * ADP / (Kglc_142 * Katp_142 * Keq_142)) / ((1 + GLC / Kglc_142 + G6P / Kg6p_142) * (1 + ATP / Katp_142 + ADP / Kadp_142)))) - (cell * Vmax_146 * (ATP * s_1006 * s_1594 - AMP * s_0633 * s_0832 / Keq_146) / (KmATP_146 * Km1006_146 * Km1594_146) / ((1 + ATP / KmATP_146) * (1 + s_1006 / Km1006_146) * (1 + s_1594 / Km1594_146) + (1 + AMP / KmAMP_146) * (1 + s_0633 / Km0633_146) * (1 + s_0832 / Km0832_146) - 1)) - (cell * Vmax_151 * (ATP * s_1014 - ADP * s_1238 / Keq_151) / (KmATP_151 * Km1014_151) / ((1 + ATP / KmATP_151) * (1 + s_1014 / Km1014_151) + (1 + ADP / KmADP_151) * (1 + s_1238 / Km1238_151) - 1)) - (cell * Vmax_167 * (ATP * s_1016 * s_1596 - AMP * s_0633 * s_0847 / Keq_167) / (KmATP_167 * Km1016_167 * Km1596_167) / ((1 + ATP / KmATP_167) * (1 + s_1016 / Km1016_167) * (1 + s_1596 / Km1596_167) + (1 + AMP / KmAMP_167) * (1 + s_0633 / Km0633_167) * (1 + s_0847 / Km0847_167) - 1)) - (cell * Vmax_178 * (ATP * s_1021 * s_1598 - AMP * s_0633 * s_1077 / Keq_178) / (KmATP_178 * Km1021_178 * Km1598_178) / ((1 + ATP / KmATP_178) * (1 + s_1021 / Km1021_178) * (1 + s_1598 / Km1598_178) + (1 + AMP / KmAMP_178) * (1 + s_0633 / Km0633_178) * (1 + s_1077 / Km1077_178) - 1)) - (cell * Vmax_179 * (ATP * s_1025 * s_1600 - AMP * s_0633 * s_1099 / Keq_179) / (KmATP_179 * Km1025_179 * Km1600_179) / ((1 + ATP / KmATP_179) * (1 + s_1025 / Km1025_179) * (1 + s_1600 / Km1600_179) + (1 + AMP / KmAMP_179) * (1 + s_0633 / Km0633_179) * (1 + s_1099 / Km1099_179) - 1)) - (cell * Vmax_184 * (ATP * s_1029 - s_0633 * PHO * s_1416 / Keq_184) / (KmATP_184 * Km1029_184) / ((1 + ATP / KmATP_184) * (1 + s_1029 / Km1029_184) + (1 + s_0633 / Km0633_184) * (1 + PHO / KmPHO_184) * (1 + s_1416 / Km1416_184) - 1)) - (cell * Vmax_186 * (ATP * s_1029 * s_1602 - AMP * s_0633 * s_1148 / Keq_186) / (KmATP_186 * Km1029_186 * Km1602_186) / ((1 + ATP / KmATP_186) * (1 + s_1029 / Km1029_186) * (1 + s_1602 / Km1602_186) + (1 + AMP / KmAMP_186) * (1 + s_0633 / Km0633_186) * (1 + s_1148 / Km1148_186) - 1)) - (cell * Vmax_189 * (s_0028 * ATP - s_0019 * ADP / Keq_189) / (Km0028_189 * KmATP_189) / ((1 + s_0028 / Km0028_189) * (1 + ATP / KmATP_189) + (1 + s_0019 / Km0019_189) * (1 + ADP / KmADP_189) - 1)) - (cell * Vmax_191 * (s_0018 * ATP - ADP * CO2 * s_0943 * PHO / Keq_191) / (Km0018_191 * KmATP_191) / ((1 + s_0018 / Km0018_191) * (1 + ATP / KmATP_191) + (1 + ADP / KmADP_191) * (1 + CO2 / KmCO2_191) * (1 + s_0943 / Km0943_191) * (1 + PHO / KmPHO_191) - 1)) - (cell * Vmax_196 * (ATP * s_0739 - ADP * s_0785 / Keq_196) / (KmATP_196 * Km0739_196) / ((1 + ATP / KmATP_196) * (1 + s_0739 / Km0739_196) + (1 + ADP / KmADP_196) * (1 + s_0785 / Km0785_196) - 1)) - (cell * Vmax_197 * (ATP * s_1538 - ADP * s_1559 / Keq_197) / (KmATP_197 * Km1538_197) / ((1 + ATP / KmATP_197) * (1 + s_1538 / Km1538_197) + (1 + ADP / KmADP_197) * (1 + s_1559 / Km1559_197) - 1)) - (cell * Vmax_204 * (ATP * s_1032 * s_1604 - AMP * s_0633 * s_1314 / Keq_204) / (KmATP_204 * Km1032_204 * Km1604_204) / ((1 + ATP / KmATP_204) * (1 + s_1032 / Km1032_204) * (1 + s_1604 / Km1604_204) + (1 + AMP / KmAMP_204) * (1 + s_0633 / Km0633_204) * (1 + s_1314 / Km1314_204) - 1)) - (cell * Vmax_205 * (s_0302 * ATP - s_0300 * ADP * PHO / Keq_205) / (Km0302_205 * KmATP_205) / ((1 + s_0302 / Km0302_205) * (1 + ATP / KmATP_205) + (1 + s_0300 / Km0300_205) * (1 + ADP / KmADP_205) * (1 + PHO / KmPHO_205) - 1)) - (cell * Vmax_211 * (ATP * s_1271 - ADP * CO2 * PEP / Keq_211) / (KmATP_211 * Km1271_211) / ((1 + ATP / KmATP_211) * (1 + s_1271 / Km1271_211) + (1 + ADP / KmADP_211) * (1 + CO2 / KmCO2_211) * (1 + PEP / KmPEP_211) - 1)) - (cell * Vmax_212 * (gR_212 * (F6P / Kf6p_212) * (ATP / Katp_212) * (1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212) / (pow(1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212, 2) + L0_212 * pow((1 + Ciatp_212 * ATP / Kiatp_212) / (1 + ATP / Kiatp_212), 2) * pow((1 + Camp_212 * AMP / Kamp_212) / (1 + AMP / Kamp_212), 2) * pow((1 + Cf26_212 * F26bP / Kf26_212 + Cf16_212 * F16bP / Kf16_212) / (1 + F26bP / Kf26_212 + F16bP / Kf16_212), 2) * pow(1 + Catp_212 * ATP / Katp_212, 2)))) - (cell * Vmax_220 * (s_0019 * ATP - s_0018 * ADP / Keq_220) / (Km0019_220 * KmATP_220) / ((1 + s_0019 / Km0019_220) * (1 + ATP / KmATP_220) + (1 + s_0018 / Km0018_220) * (1 + ADP / KmADP_220) - 1)) - (cell * Vmax_221 * (ATP * s_0973 * s_1364 - s_0299 * ADP * PHO / Keq_221) / (KmATP_221 * Km0973_221 * Km1364_221) / ((1 + ATP / KmATP_221) * (1 + s_0973 / Km0973_221) * (1 + s_1364 / Km1364_221) + (1 + s_0299 / Km0299_221) * (1 + ADP / KmADP_221) * (1 + PHO / KmPHO_221) - 1)) - (cell * Vmax_224 * (s_0300 * CO2 * ATP - s_1364 * ADP * PHO / Keq_224) / (Km0300_224 * KmCO2_224 * KmATP_224) / ((1 + s_0300 / Km0300_224) * (1 + CO2 / KmCO2_224) * (1 + ATP / KmATP_224) + (1 + s_1364 / Km1364_224) * (1 + ADP / KmADP_224) * (1 + PHO / KmPHO_224) - 1)) - (cell * Vmax_227 * (s_0327 * ATP * s_1003 - s_0325 * ADP * PHO / Keq_227) / (Km0327_227 * KmATP_227 * Km1003_227) / ((1 + s_0327 / Km0327_227) * (1 + ATP / KmATP_227) * (1 + s_1003 / Km1003_227) + (1 + s_0325 / Km0325_227) * (1 + ADP / KmADP_227) * (1 + PHO / KmPHO_227) - 1)) - (cell * Vmax_229 * (ATP * s_1408 - AMP * s_1386 / Keq_229) / (KmATP_229 * Km1408_229) / ((1 + ATP / KmATP_229) * (1 + s_1408 / Km1408_229) + (1 + AMP / KmAMP_229) * (1 + s_1386 / Km1386_229) - 1)) - (cell * Vmax_232 * (ATP * s_1035 * s_1606 - AMP * s_0633 * s_1379 / Keq_232) / (KmATP_232 * Km1035_232 * Km1606_232) / ((1 + ATP / KmATP_232) * (1 + s_1035 / Km1035_232) * (1 + s_1606 / Km1606_232) + (1 + AMP / KmAMP_232) * (1 + s_0633 / Km0633_232) * (1 + s_1379 / Km1379_232) - 1)) - (cell * Vmax_234 * (ATP * s_0445 * PYR - ADP * s_1271 * PHO / Keq_234) / (KmATP_234 * Km0445_234 * KmPYR_234) / ((1 + ATP / KmATP_234) * (1 + s_0445 / Km0445_234) * (1 + PYR / KmPYR_234) + (1 + ADP / KmADP_234) * (1 + s_1271 / Km1271_234) * (1 + PHO / KmPHO_234) - 1)) - (cell * Vmax_239 * (ATP * s_1616 - s_0586 * s_1620 / Keq_239) / (KmATP_239 * Km1616_239) / ((1 + ATP / KmATP_239) * (1 + s_1616 / Km1616_239) + (1 + s_0586 / Km0586_239) * (1 + s_1620 / Km1620_239) - 1)) - (cell * Vmax_251 * (ATP * s_1039 * s_1607 - AMP * s_0633 * s_1428 / Keq_251) / (KmATP_251 * Km1039_251 * Km1607_251) / ((1 + ATP / KmATP_251) * (1 + s_1039 / Km1039_251) * (1 + s_1607 / Km1607_251) + (1 + AMP / KmAMP_251) * (1 + s_0633 / Km0633_251) * (1 + s_1428 / Km1428_251) - 1)) - (cell * Vmax_253 * (ATP * s_1429 - s_0261 * ADP / Keq_253) / (KmATP_253 * Km1429_253) / ((1 + ATP / KmATP_253) * (1 + s_1429 / Km1429_253) + (1 + s_0261 / Km0261_253) * (1 + ADP / KmADP_253) - 1)) - (cell * Vmax_263 * (ATP * s_1045 * s_1608 - AMP * s_0633 * s_1491 / Keq_263) / (KmATP_263 * Km1045_263 * Km1608_263) / ((1 + ATP / KmATP_263) * (1 + s_1045 / Km1045_263) * (1 + s_1608 / Km1608_263) + (1 + AMP / KmAMP_263) * (1 + s_0633 / Km0633_263) * (1 + s_1491 / Km1491_263) - 1)) - (cell * Vmax_272 * (ATP * s_1048 * s_1610 - AMP * s_0633 * s_1527 / Keq_272) / (KmATP_272 * Km1048_272 * Km1610_272) / ((1 + ATP / KmATP_272) * (1 + s_1048 / Km1048_272) * (1 + s_1610 / Km1610_272) + (1 + AMP / KmAMP_272) * (1 + s_0633 / Km0633_272) * (1 + s_1527 / Km1527_272) - 1)) - (cell * Vmax_274 * (ATP * s_1051 * s_1612 - AMP * s_0633 * s_1533 / Keq_274) / (KmATP_274 * Km1051_274 * Km1612_274) / ((1 + ATP / KmATP_274) * (1 + s_1051 / Km1051_274) * (1 + s_1612 / Km1612_274) + (1 + AMP / KmAMP_274) * (1 + s_0633 / Km0633_274) * (1 + s_1533 / Km1533_274) - 1)) - (cell * Vmax_275 * (ATP * s_1545 - ADP * s_1538 / Keq_275) / (KmATP_275 * Km1545_275) / ((1 + ATP / KmATP_275) * (1 + s_1545 / Km1545_275) + (1 + ADP / KmADP_275) * (1 + s_1538 / Km1538_275) - 1)) - (cell * Vmax_278 * (ATP * s_1056 * s_1614 - AMP * s_0633 * s_1561 / Keq_278) / (KmATP_278 * Km1056_278 * Km1614_278) / ((1 + ATP / KmATP_278) * (1 + s_1056 / Km1056_278) * (1 + s_1614 / Km1614_278) + (1 + AMP / KmAMP_278) * (1 + s_0633 / Km0633_278) * (1 + s_1561 / Km1561_278) - 1)) - (59.276 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0445) = (cell * Vmax_285 * (CO2 - s_0445 / Keq_285) / KmCO2_285 / (1 + CO2 / KmCO2_285 + 1 + s_0445 / Km0445_285 - 1)) - (cell * Vmax_30 * (s_0373 * ATP * s_0445 - ADP * s_1101 * PHO / Keq_30) / (Km0373_30 * KmATP_30 * Km0445_30) / ((1 + s_0373 / Km0373_30) * (1 + ATP / KmATP_30) * (1 + s_0445 / Km0445_30) + (1 + ADP / KmADP_30) * (1 + s_1101 / Km1101_30) * (1 + PHO / KmPHO_30) - 1)) - (cell * Vmax_74 * (pow(ATP, 2) * s_0445 * s_0999 - pow(ADP, 2) * s_0455 * s_0991 * PHO / Keq_74) / (pow(KmATP_74, 2) * Km0445_74 * Km0999_74) / (pow(1 + ATP / KmATP_74, 2) * (1 + s_0445 / Km0445_74) * (1 + s_0999 / Km0999_74) + pow(1 + ADP / KmADP_74, 2) * (1 + s_0455 / Km0455_74) * (1 + s_0991 / Km0991_74) * (1 + PHO / KmPHO_74) - 1)) - (cell * Vmax_234 * (ATP * s_0445 * PYR - ADP * s_1271 * PHO / Keq_234) / (KmATP_234 * Km0445_234 * KmPYR_234) / ((1 + ATP / KmATP_234) * (1 + s_0445 / Km0445_234) * (1 + PYR / KmPYR_234) + (1 + ADP / KmADP_234) * (1 + s_1271 / Km1271_234) * (1 + PHO / KmPHO_234) - 1));
    der(s_0454) = (cell * Vmax_14 * (s_0835 - s_0454 / Keq_14) / Km0835_14 / (1 + s_0835 / Km0835_14 + 1 + s_0454 / Km0454_14 - 1)) - (cell * Vmax_147 * (s_0454 - s_0836 / Keq_147) / Km0454_147 / (1 + s_0454 / Km0454_147 + 1 + s_0836 / Km0836_147 - 1));
    der(s_0455) = (cell * Vmax_74 * (pow(ATP, 2) * s_0445 * s_0999 - pow(ADP, 2) * s_0455 * s_0991 * PHO / Keq_74) / (pow(KmATP_74, 2) * Km0445_74 * Km0999_74) / (pow(1 + ATP / KmATP_74, 2) * (1 + s_0445 / Km0445_74) * (1 + s_0999 / Km0999_74) + pow(1 + ADP / KmADP_74, 2) * (1 + s_0455 / Km0455_74) * (1 + s_0991 / Km0991_74) * (1 + PHO / KmPHO_74) - 1)) - (cell * Vmax_55 * (s_0455 * s_0973 - s_1194 * PHO / Keq_55) / (Km0455_55 * Km0973_55) / ((1 + s_0455 / Km0455_55) * (1 + s_0973 / Km0973_55) + (1 + s_1194 / Km1194_55) * (1 + PHO / KmPHO_55) - 1)) - (cell * Vmax_199 * (s_0455 * s_1266 - s_0979 * PHO / Keq_199) / (Km0455_199 * Km1266_199) / ((1 + s_0455 / Km0455_199) * (1 + s_1266 / Km1266_199) + (1 + s_0979 / Km0979_199) * (1 + PHO / KmPHO_199) - 1));
    der(CO2) = (cell * Vmax_9 * (s_0178 * PYR - s_0039 * CO2 / Keq_9) / (Km0178_9 * KmPYR_9) / ((1 + s_0178 / Km0178_9) * (1 + PYR / KmPYR_9) + (1 + s_0039 / Km0039_9) * (1 + CO2 / KmCO2_9) - 1)) + (cell * Vmax_15 * (s_0010 - s_0291 * CO2 / Keq_15) / Km0010_15 / (1 + s_0010 / Km0010_15 + (1 + s_0291 / Km0291_15) * (1 + CO2 / KmCO2_15) - 1)) + (cell * Vmax_28 * (pow(PYR, 2) - s_0146 * CO2 / Keq_28) / pow(KmPYR_28, 2) / (pow(1 + PYR / KmPYR_28, 2) + (1 + s_0146 / Km0146_28) * (1 + CO2 / KmCO2_28) - 1)) + (cell * Vmax_64 * (s_1207 * s_1578 - CO2 * s_1212 * s_1579 / Keq_64) / (Km1207_64 * Km1578_64) / ((1 + s_1207 / Km1207_64) * (1 + s_1578 / Km1578_64) + (1 + CO2 / KmCO2_64) * (1 + s_1212 / Km1212_64) * (1 + s_1579 / Km1579_64) - 1)) + (cell * Vmax_65 * (s_0297 * NAD - s_0209 * CO2 * NADH / Keq_65) / (Km0297_65 * KmNAD_65) / ((1 + s_0297 / Km0297_65) * (1 + NAD / KmNAD_65) + (1 + s_0209 / Km0209_65) * (1 + CO2 / KmCO2_65) * (1 + NADH / KmNAD_65H) - 1)) + (cell * Vmax_101 * (s_0595 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_101) / (Km0595_101 * Km1101_101 * pow(Km1212_101, 2)) / ((1 + s_0595 / Km0595_101) * (1 + s_1101 / Km1101_101) * pow(1 + s_1212 / Km1212_101, 2) + (1 + CO2 / KmCO2_101) * (1 + s_0529 / Km0529_101) * (1 + s_1065 / Km1065_101) * pow(1 + s_1207 / Km1207_101, 2) - 1)) + (cell * Vmax_102 * (s_1065 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_102) / (Km1065_102 * Km1101_102 * pow(Km1212_102, 2)) / ((1 + s_1065 / Km1065_102) * (1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) + (1 + CO2 / KmCO2_102) * (1 + s_0529 / Km0529_102) * (1 + s_1161 / Km1161_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) + (cell * Vmax_103 * (s_1101 * s_1161 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_103) / (Km1101_103 * Km1161_103 * pow(Km1212_103, 2)) / ((1 + s_1101 / Km1101_103) * (1 + s_1161 / Km1161_103) * pow(1 + s_1212 / Km1212_103, 2) + (1 + CO2 / KmCO2_103) * (1 + s_0529 / Km0529_103) * pow(1 + s_1207 / Km1207_103, 2) * (1 + s_1286 / Km1286_103) - 1)) + (cell * Vmax_104 * (s_1101 * pow(s_1212, 2) * s_1286 - CO2 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_104) / (Km1101_104 * pow(Km1212_104, 2) * Km1286_104) / ((1 + s_1101 / Km1101_104) * pow(1 + s_1212 / Km1212_104, 2) * (1 + s_1286 / Km1286_104) + (1 + CO2 / KmCO2_104) * (1 + s_0529 / Km0529_104) * pow(1 + s_1207 / Km1207_104, 2) * (1 + s_1449 / Km1449_104) - 1)) + (3.0 * cell * Vmax_105 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(CO2, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_105) / (pow(Km1101_105, 3) * pow(Km1212_105, 6) * Km1449_105) / (pow(1 + s_1101 / Km1101_105, 3) * pow(1 + s_1212 / Km1212_105, 6) * (1 + s_1449 / Km1449_105) + pow(1 + CO2 / KmCO2_105, 3) * pow(1 + s_0529 / Km0529_105, 3) * (1 + s_1084 / Km1084_105) * pow(1 + s_1207 / Km1207_105, 6) - 1)) + (cell * Vmax_106 * (s_1084 * s_1101 * pow(s_1212, 2) - CO2 * s_0505 * s_0529 * pow(s_1207, 2) / Keq_106) / (Km1084_106 * Km1101_106 * pow(Km1212_106, 2)) / ((1 + s_1084 / Km1084_106) * (1 + s_1101 / Km1101_106) * pow(1 + s_1212 / Km1212_106, 2) + (1 + CO2 / KmCO2_106) * (1 + s_0505 / Km0505_106) * (1 + s_0529 / Km0529_106) * pow(1 + s_1207 / Km1207_106, 2) - 1)) + (cell * Vmax_107 * (s_1101 * pow(s_1212, 2) * s_1255 - CO2 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_107) / (Km1101_107 * pow(Km1212_107, 2) * Km1255_107) / ((1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) * (1 + s_1255 / Km1255_107) + (1 + CO2 / KmCO2_107) * (1 + s_0529 / Km0529_107) * (1 + s_0602 / Km0602_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) + (3.0 * cell * Vmax_108 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(CO2, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_108) / (Km0373_108 * pow(Km1101_108, 3) * pow(Km1212_108, 6)) / ((1 + s_0373 / Km0373_108) * pow(1 + s_1101 / Km1101_108, 3) * pow(1 + s_1212 / Km1212_108, 6) + pow(1 + CO2 / KmCO2_108, 3) * pow(1 + s_0529 / Km0529_108, 3) * pow(1 + s_1207 / Km1207_108, 6) * (1 + s_1255 / Km1255_108) - 1)) + (cell * Vmax_113 * (s_0602 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_113) / (Km0602_113 * Km1101_113 * pow(Km1212_113, 2)) / ((1 + s_0602 / Km0602_113) * (1 + s_1101 / Km1101_113) * pow(1 + s_1212 / Km1212_113, 2) + (1 + CO2 / KmCO2_113) * (1 + s_0529 / Km0529_113) * (1 + s_1073 / Km1073_113) * pow(1 + s_1207 / Km1207_113, 2) - 1)) + (cell * Vmax_114 * (s_1073 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_114) / (Km1073_114 * Km1101_114 * pow(Km1212_114, 2)) / ((1 + s_1073 / Km1073_114) * (1 + s_1101 / Km1101_114) * pow(1 + s_1212 / Km1212_114, 2) + (1 + CO2 / KmCO2_114) * (1 + s_0529 / Km0529_114) * (1 + s_1176 / Km1176_114) * pow(1 + s_1207 / Km1207_114, 2) - 1)) + (cell * Vmax_115 * (s_1101 * s_1176 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_115) / (Km1101_115 * Km1176_115 * pow(Km1212_115, 2)) / ((1 + s_1101 / Km1101_115) * (1 + s_1176 / Km1176_115) * pow(1 + s_1212 / Km1212_115, 2) + (1 + CO2 / KmCO2_115) * (1 + s_0529 / Km0529_115) * pow(1 + s_1207 / Km1207_115, 2) * (1 + s_1302 / Km1302_115) - 1)) + (cell * Vmax_116 * (s_1101 * pow(s_1212, 2) * s_1302 - CO2 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_116) / (Km1101_116 * pow(Km1212_116, 2) * Km1302_116) / ((1 + s_1101 / Km1101_116) * pow(1 + s_1212 / Km1212_116, 2) * (1 + s_1302 / Km1302_116) + (1 + CO2 / KmCO2_116) * (1 + s_0529 / Km0529_116) * pow(1 + s_1207 / Km1207_116, 2) * (1 + s_1454 / Km1454_116) - 1)) + (cell * Vmax_134 * (s_1003 * NAD * s_1487 - s_0306 * s_0419 * CO2 * NADH / Keq_134) / (Km1003_134 * KmNAD_134 * Km1487_134) / ((1 + s_1003 / Km1003_134) * (1 + NAD / KmNAD_134) * (1 + s_1487 / Km1487_134) + (1 + s_0306 / Km0306_134) * (1 + s_0419 / Km0419_134) * (1 + CO2 / KmCO2_134) * (1 + NADH / KmNAD_134H) - 1)) + (cell * Vmax_149 * (s_0836 * NAD - s_0176 * NADH * CO2 / Keq_149) / (Km0836_149 * KmNAD_149) / ((1 + s_0836 / Km0836_149) * (1 + NAD / KmNAD_149) + (1 + s_0176 / Km0176_149) * (1 + NADH / KmNAD_149H) * (1 + CO2 / KmCO2_149) - 1)) + (cell * Vmax_159 * (s_0076 - s_0086 * CO2 / Keq_159) / Km0076_159 / (1 + s_0076 / Km0076_159 + (1 + s_0086 / Km0086_159) * (1 + CO2 / KmCO2_159) - 1)) + (cell * Vmax_163 * (s_0940 * NAD - s_0180 * CO2 * NADH / Keq_163) / (Km0940_163 * KmNAD_163) / ((1 + s_0940 / Km0940_163) * (1 + NAD / KmNAD_163) + (1 + s_0180 / Km0180_163) * (1 + CO2 / KmCO2_163) * (1 + NADH / KmNAD_163H) - 1)) + (cell * Vmax_164 * (s_0940 * s_1207 - s_0180 * CO2 * s_1212 / Keq_164) / (Km0940_164 * Km1207_164) / ((1 + s_0940 / Km0940_164) * (1 + s_1207 / Km1207_164) + (1 + s_0180 / Km0180_164) * (1 + CO2 / KmCO2_164) * (1 + s_1212 / Km1212_164) - 1)) + (cell * Vmax_191 * (s_0018 * ATP - ADP * CO2 * s_0943 * PHO / Keq_191) / (Km0018_191 * KmATP_191) / ((1 + s_0018 / Km0018_191) * (1 + ATP / KmATP_191) + (1 + ADP / KmADP_191) * (1 + CO2 / KmCO2_191) * (1 + s_0943 / Km0943_191) * (1 + PHO / KmPHO_191) - 1)) + (cell * Vmax_202 * (s_1270 - CO2 * s_1545 / Keq_202) / Km1270_202 / (1 + s_1270 / Km1270_202 + (1 + CO2 / KmCO2_202) * (1 + s_1545 / Km1545_202) - 1)) + (cell * Vmax_208 * (s_1337 - CO2 * s_1351 / Keq_208) / Km1337_208 / (1 + s_1337 / Km1337_208 + (1 + CO2 / KmCO2_208) * (1 + s_1351 / Km1351_208) - 1)) + (cell * Vmax_211 * (ATP * s_1271 - ADP * CO2 * PEP / Keq_211) / (KmATP_211 * Km1271_211) / ((1 + ATP / KmATP_211) * (1 + s_1271 / Km1271_211) + (1 + ADP / KmADP_211) * (1 + CO2 / KmCO2_211) * (1 + PEP / KmPEP_211) - 1)) + (cell * Vmax_214 * (s_0340 * s_1207 - CO2 * s_0577 * s_1212 / Keq_214) / (Km0340_214 * Km1207_214) / ((1 + s_0340 / Km0340_214) * (1 + s_1207 / Km1207_214) + (1 + CO2 / KmCO2_214) * (1 + s_0577 / Km0577_214) * (1 + s_1212 / Km1212_214) - 1)) + (cell * Vmax_230 * (s_1377 - CO2 * s_0951 / Keq_230) / Km1377_230 / (1 + s_1377 / Km1377_230 + (1 + CO2 / KmCO2_230) * (1 + s_0951 / Km0951_230) - 1)) + (cell * Vmax_231 * (s_1207 * s_1377 - s_0204 * CO2 * s_1212 / Keq_231) / (Km1207_231 * Km1377_231) / ((1 + s_1207 / Km1207_231) * (1 + s_1377 / Km1377_231) + (1 + s_0204 / Km0204_231) * (1 + CO2 / KmCO2_231) * (1 + s_1212 / Km1212_231) - 1)) + (cell * (Vmax_235 * pow(PYR / Kpyr_235, nH_235) / (1 + pow(PYR / Kpyr_235, nH_235)))) + (cell * Vmax_250 * (s_1039 * s_1302 - s_0231 * CO2 * s_0529 / Keq_250) / (Km1039_250 * Km1302_250) / ((1 + s_1039 / Km1039_250) * (1 + s_1302 / Km1302_250) + (1 + s_0231 / Km0231_250) * (1 + CO2 / KmCO2_250) * (1 + s_0529 / Km0529_250) - 1)) - (cell * Vmax_224 * (s_0300 * CO2 * ATP - s_1364 * ADP * PHO / Keq_224) / (Km0300_224 * KmCO2_224 * KmATP_224) / ((1 + s_0300 / Km0300_224) * (1 + CO2 / KmCO2_224) * (1 + ATP / KmATP_224) + (1 + s_1364 / Km1364_224) * (1 + ADP / KmADP_224) * (1 + PHO / KmPHO_224) - 1)) - (cell * Vmax_285 * (CO2 - s_0445 / Keq_285) / KmCO2_285 / (1 + CO2 / KmCO2_285 + 1 + s_0445 / Km0445_285 - 1)) - (cell * Vmax_287 * CO2 / KmCO2_287 / (1 + CO2 / KmCO2_287));
    der(s_0458) = 0.0;
    der(s_0467) = (cell * Vmax_190 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_190) / (Km0028_190 * Km0539_190) / ((1 + s_0028 / Km0028_190) * (1 + s_0539 / Km0539_190) + (1 + s_0019 / Km0019_190) * (1 + s_0467 / Km0467_190) - 1)) - (cell * Vmax_195 * (s_0467 - s_0526 * PHO / Keq_195) / Km0467_195 / (1 + s_0467 / Km0467_195 + (1 + s_0526 / Km0526_195) * (1 + PHO / KmPHO_195) - 1)) - (cell * Vmax_242 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_242) / (Km0467_242 * Km1616_242) / ((1 + s_0467 / Km0467_242) * (1 + s_1616 / Km1616_242) + (1 + s_0587 / Km0587_242) * (1 + s_1620 / Km1620_242) - 1));
    der(s_0471) = (cell * Vmax_75 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_75) / (Km0539_75 * Km1331_75) / ((1 + s_0539 / Km0539_75) * (1 + s_1331 / Km1331_75) + (1 + s_0471 / Km0471_75) * (1 + s_0633 / Km0633_75) - 1)) - (cell * Vmax_207 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_207) / (Km0471_207 * Km1153_207) / ((1 + s_0471 / Km0471_207) * (1 + s_1153 / Km1153_207) + (1 + s_0089 / Km0089_207) * (1 + s_0526 / Km0526_207) - 1)) - (cell * Vmax_209 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_209) / (Km0471_209 * Km1039_209) / ((1 + s_0471 / Km0471_209) * (1 + s_1039 / Km1039_209) + (1 + s_0526 / Km0526_209) * (1 + s_1337 / Km1337_209) - 1));
    der(s_0478) = (cell * Vmax_76 * (s_0816 * s_1445 - s_0478 * s_0529 / Keq_76) / (Km0816_76 * Km1445_76) / ((1 + s_0816 / Km0816_76) * (1 + s_1445 / Km1445_76) + (1 + s_0478 / Km0478_76) * (1 + s_0529 / Km0529_76) - 1)) - (cell * Vmax_162 * (s_0089 * s_0478 - s_0619 * s_0897 / Keq_162) / (Km0089_162 * Km0478_162) / ((1 + s_0089 / Km0089_162) * (1 + s_0478 / Km0478_162) + (1 + s_0619 / Km0619_162) * (1 + s_0897 / Km0897_162) - 1));
    der(s_0505) = (cell * Vmax_106 * (s_1084 * s_1101 * pow(s_1212, 2) - CO2 * s_0505 * s_0529 * pow(s_1207, 2) / Keq_106) / (Km1084_106 * Km1101_106 * pow(Km1212_106, 2)) / ((1 + s_1084 / Km1084_106) * (1 + s_1101 / Km1101_106) * pow(1 + s_1212 / Km1212_106, 2) + (1 + CO2 / KmCO2_106) * (1 + s_0505 / Km0505_106) * (1 + s_0529 / Km0529_106) * pow(1 + s_1207 / Km1207_106, 2) - 1)) - (cell * Vmax_111 * (ATP * s_0505 * s_0529 - AMP * s_0633 * s_0816 / Keq_111) / (KmATP_111 * Km0505_111 * Km0529_111) / ((1 + ATP / KmATP_111) * (1 + s_0505 / Km0505_111) * (1 + s_0529 / Km0529_111) + (1 + AMP / KmAMP_111) * (1 + s_0633 / Km0633_111) * (1 + s_0816 / Km0816_111) - 1));
    der(s_0515) = (cell * Vmax_78 * (s_0324 - s_0515 * PHO / Keq_78) / Km0324_78 / (1 + s_0324 / Km0324_78 + (1 + s_0515 / Km0515_78) * (1 + PHO / KmPHO_78) - 1)) - (cell * Vmax_49 * (s_0515 * s_0999 - s_0427 * s_0991 * PYR / Keq_49) / (Km0515_49 * Km0999_49) / ((1 + s_0515 / Km0515_49) * (1 + s_0999 / Km0999_49) + (1 + s_0427 / Km0427_49) * (1 + s_0991 / Km0991_49) * (1 + PYR / KmPYR_49) - 1)) - (cell * Vmax_77 * (s_0515 - s_1377 / Keq_77) / Km0515_77 / (1 + s_0515 / Km0515_77 + 1 + s_1377 / Km1377_77 - 1));
    der(s_0516) = (cell * Vmax_81 * (s_0522 - s_0516 / Keq_81) / Km0522_81 / (1 + s_0522 / Km0522_81 + 1 + s_0516 / Km0516_81 - 1)) - (cell * Vmax_79 * (s_0516 - s_0940 / Keq_79) / Km0516_79 / (1 + s_0516 / Km0516_79 + 1 + s_0940 / Km0940_79 - 1));
    der(s_0522) = (cell * Vmax_80 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_80) / (Km0373_80 * Km1271_80) / ((1 + s_0373 / Km0373_80) * (1 + s_1271 / Km1271_80) + (1 + s_0522 / Km0522_80) * (1 + s_0529 / Km0529_80) - 1)) - (cell * Vmax_81 * (s_0522 - s_0516 / Keq_81) / Km0522_81 / (1 + s_0522 / Km0522_81 + 1 + s_0516 / Km0516_81 - 1));
    der(s_0526) = (cell * Vmax_195 * (s_0467 - s_0526 * PHO / Keq_195) / Km0467_195 / (1 + s_0467 / Km0467_195 + (1 + s_0526 / Km0526_195) * (1 + PHO / KmPHO_195) - 1)) + (cell * Vmax_207 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_207) / (Km0471_207 * Km1153_207) / ((1 + s_0471 / Km0471_207) * (1 + s_1153 / Km1153_207) + (1 + s_0089 / Km0089_207) * (1 + s_0526 / Km0526_207) - 1)) + (cell * Vmax_209 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_209) / (Km0471_209 * Km1039_209) / ((1 + s_0471 / Km0471_209) * (1 + s_1039 / Km1039_209) + (1 + s_0526 / Km0526_209) * (1 + s_1337 / Km1337_209) - 1)) - (0.0447 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0529) = (cell * Vmax_5 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_5) / (Km0082_5 * Km0380_5) / ((1 + s_0082 / Km0082_5) * (1 + s_0380 / Km0380_5) + (1 + s_0529 / Km0529_5) * (1 + s_1331 / Km1331_5) - 1)) + (cell * Vmax_13 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_13) / (Km0232_13 * Km0373_13) / ((1 + s_0232 / Km0232_13) * (1 + s_0373 / Km0373_13) + (1 + s_0162 / Km0162_13) * (1 + s_0529 / Km0529_13) - 1)) + (cell * Vmax_29 * (pow(s_0373, 2) - s_0367 * s_0529 / Keq_29) / pow(Km0373_29, 2) / (pow(1 + s_0373 / Km0373_29, 2) + (1 + s_0367 / Km0367_29) * (1 + s_0529 / Km0529_29) - 1)) + (cell * Vmax_76 * (s_0816 * s_1445 - s_0478 * s_0529 / Keq_76) / (Km0816_76 * Km1445_76) / ((1 + s_0816 / Km0816_76) * (1 + s_1445 / Km1445_76) + (1 + s_0478 / Km0478_76) * (1 + s_0529 / Km0529_76) - 1)) + (cell * Vmax_80 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_80) / (Km0373_80 * Km1271_80) / ((1 + s_0373 / Km0373_80) * (1 + s_1271 / Km1271_80) + (1 + s_0522 / Km0522_80) * (1 + s_0529 / Km0529_80) - 1)) + (cell * Vmax_101 * (s_0595 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_101) / (Km0595_101 * Km1101_101 * pow(Km1212_101, 2)) / ((1 + s_0595 / Km0595_101) * (1 + s_1101 / Km1101_101) * pow(1 + s_1212 / Km1212_101, 2) + (1 + CO2 / KmCO2_101) * (1 + s_0529 / Km0529_101) * (1 + s_1065 / Km1065_101) * pow(1 + s_1207 / Km1207_101, 2) - 1)) + (cell * Vmax_102 * (s_1065 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_102) / (Km1065_102 * Km1101_102 * pow(Km1212_102, 2)) / ((1 + s_1065 / Km1065_102) * (1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) + (1 + CO2 / KmCO2_102) * (1 + s_0529 / Km0529_102) * (1 + s_1161 / Km1161_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) + (cell * Vmax_103 * (s_1101 * s_1161 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_103) / (Km1101_103 * Km1161_103 * pow(Km1212_103, 2)) / ((1 + s_1101 / Km1101_103) * (1 + s_1161 / Km1161_103) * pow(1 + s_1212 / Km1212_103, 2) + (1 + CO2 / KmCO2_103) * (1 + s_0529 / Km0529_103) * pow(1 + s_1207 / Km1207_103, 2) * (1 + s_1286 / Km1286_103) - 1)) + (cell * Vmax_104 * (s_1101 * pow(s_1212, 2) * s_1286 - CO2 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_104) / (Km1101_104 * pow(Km1212_104, 2) * Km1286_104) / ((1 + s_1101 / Km1101_104) * pow(1 + s_1212 / Km1212_104, 2) * (1 + s_1286 / Km1286_104) + (1 + CO2 / KmCO2_104) * (1 + s_0529 / Km0529_104) * pow(1 + s_1207 / Km1207_104, 2) * (1 + s_1449 / Km1449_104) - 1)) + (3.0 * cell * Vmax_105 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(CO2, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_105) / (pow(Km1101_105, 3) * pow(Km1212_105, 6) * Km1449_105) / (pow(1 + s_1101 / Km1101_105, 3) * pow(1 + s_1212 / Km1212_105, 6) * (1 + s_1449 / Km1449_105) + pow(1 + CO2 / KmCO2_105, 3) * pow(1 + s_0529 / Km0529_105, 3) * (1 + s_1084 / Km1084_105) * pow(1 + s_1207 / Km1207_105, 6) - 1)) + (cell * Vmax_106 * (s_1084 * s_1101 * pow(s_1212, 2) - CO2 * s_0505 * s_0529 * pow(s_1207, 2) / Keq_106) / (Km1084_106 * Km1101_106 * pow(Km1212_106, 2)) / ((1 + s_1084 / Km1084_106) * (1 + s_1101 / Km1101_106) * pow(1 + s_1212 / Km1212_106, 2) + (1 + CO2 / KmCO2_106) * (1 + s_0505 / Km0505_106) * (1 + s_0529 / Km0529_106) * pow(1 + s_1207 / Km1207_106, 2) - 1)) + (cell * Vmax_107 * (s_1101 * pow(s_1212, 2) * s_1255 - CO2 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_107) / (Km1101_107 * pow(Km1212_107, 2) * Km1255_107) / ((1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) * (1 + s_1255 / Km1255_107) + (1 + CO2 / KmCO2_107) * (1 + s_0529 / Km0529_107) * (1 + s_0602 / Km0602_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) + (3.0 * cell * Vmax_108 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(CO2, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_108) / (Km0373_108 * pow(Km1101_108, 3) * pow(Km1212_108, 6)) / ((1 + s_0373 / Km0373_108) * pow(1 + s_1101 / Km1101_108, 3) * pow(1 + s_1212 / Km1212_108, 6) + pow(1 + CO2 / KmCO2_108, 3) * pow(1 + s_0529 / Km0529_108, 3) * pow(1 + s_1207 / Km1207_108, 6) * (1 + s_1255 / Km1255_108) - 1)) + (cell * Vmax_109 * (AMP * s_0602 * s_0633 - ATP * s_0529 * s_0595 / Keq_109) / (KmAMP_109 * Km0602_109 * Km0633_109) / ((1 + AMP / KmAMP_109) * (1 + s_0602 / Km0602_109) * (1 + s_0633 / Km0633_109) + (1 + ATP / KmATP_109) * (1 + s_0529 / Km0529_109) * (1 + s_0595 / Km0595_109) - 1)) + (cell * Vmax_112 * (AMP * s_0633 * s_1454 - ATP * s_0529 * s_1449 / Keq_112) / (KmAMP_112 * Km0633_112 * Km1454_112) / ((1 + AMP / KmAMP_112) * (1 + s_0633 / Km0633_112) * (1 + s_1454 / Km1454_112) + (1 + ATP / KmATP_112) * (1 + s_0529 / Km0529_112) * (1 + s_1449 / Km1449_112) - 1)) + (cell * Vmax_113 * (s_0602 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_113) / (Km0602_113 * Km1101_113 * pow(Km1212_113, 2)) / ((1 + s_0602 / Km0602_113) * (1 + s_1101 / Km1101_113) * pow(1 + s_1212 / Km1212_113, 2) + (1 + CO2 / KmCO2_113) * (1 + s_0529 / Km0529_113) * (1 + s_1073 / Km1073_113) * pow(1 + s_1207 / Km1207_113, 2) - 1)) + (cell * Vmax_114 * (s_1073 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_114) / (Km1073_114 * Km1101_114 * pow(Km1212_114, 2)) / ((1 + s_1073 / Km1073_114) * (1 + s_1101 / Km1101_114) * pow(1 + s_1212 / Km1212_114, 2) + (1 + CO2 / KmCO2_114) * (1 + s_0529 / Km0529_114) * (1 + s_1176 / Km1176_114) * pow(1 + s_1207 / Km1207_114, 2) - 1)) + (cell * Vmax_115 * (s_1101 * s_1176 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_115) / (Km1101_115 * Km1176_115 * pow(Km1212_115, 2)) / ((1 + s_1101 / Km1101_115) * (1 + s_1176 / Km1176_115) * pow(1 + s_1212 / Km1212_115, 2) + (1 + CO2 / KmCO2_115) * (1 + s_0529 / Km0529_115) * pow(1 + s_1207 / Km1207_115, 2) * (1 + s_1302 / Km1302_115) - 1)) + (cell * Vmax_116 * (s_1101 * pow(s_1212, 2) * s_1302 - CO2 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_116) / (Km1101_116 * pow(Km1212_116, 2) * Km1302_116) / ((1 + s_1101 / Km1101_116) * pow(1 + s_1212 / Km1212_116, 2) * (1 + s_1302 / Km1302_116) + (1 + CO2 / KmCO2_116) * (1 + s_0529 / Km0529_116) * pow(1 + s_1207 / Km1207_116, 2) * (1 + s_1454 / Km1454_116) - 1)) + (cell * Vmax_132 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_132) / (Km0380_132 * Km0767_132) / ((1 + s_0380 / Km0380_132) * (1 + s_0767 / Km0767_132) + (1 + s_0082 / Km0082_132) * (1 + s_0529 / Km0529_132) - 1)) + (cell * Vmax_148 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_148) / (Km0180_148 * Km0373_148) / ((1 + s_0180 / Km0180_148) * (1 + s_0373 / Km0373_148) + (1 + s_0529 / Km0529_148) * (1 + s_0835 / Km0835_148) - 1)) + (cell * Vmax_152 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_152) / (Km0373_152 * Km1014_152) / ((1 + s_0373 / Km0373_152) * (1 + s_1014 / Km1014_152) + (1 + s_0529 / Km0529_152) * (1 + s_1233 / Km1233_152) - 1)) + (cell * Vmax_154 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_154) / (Km0218_154 * pow(Km1212_154, 2)) / ((1 + s_0218 / Km0218_154) * pow(1 + s_1212 / Km1212_154, 2) + (1 + s_0028 / Km0028_154) * (1 + s_0529 / Km0529_154) * pow(1 + s_1207 / Km1207_154, 2) - 1)) + (cell * Vmax_155 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_155) / (Km0367_155 * Km0373_155) / ((1 + s_0367 / Km0367_155) * (1 + s_0373 / Km0373_155) + (1 + s_0218 / Km0218_155) * (1 + s_0529 / Km0529_155) - 1)) + (cell * Vmax_250 * (s_1039 * s_1302 - s_0231 * CO2 * s_0529 / Keq_250) / (Km1039_250 * Km1302_250) / ((1 + s_1039 / Km1039_250) * (1 + s_1302 / Km1302_250) + (1 + s_0231 / Km0231_250) * (1 + CO2 / KmCO2_250) * (1 + s_0529 / Km0529_250) - 1)) - (cell * Vmax_31 * (s_0362 * s_0529 - s_0373 / Keq_31) / (Km0362_31 * Km0529_31) / ((1 + s_0362 / Km0362_31) * (1 + s_0529 / Km0529_31) + 1 + s_0373 / Km0373_31 - 1)) - (cell * Vmax_90 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_90) / (Km0529_90 * Km1524_90) / ((1 + s_0529 / Km0529_90) * (1 + s_1524 / Km1524_90) + (1 + s_0380 / Km0380_90) * (1 + s_0619 / Km0619_90) - 1)) - (cell * Vmax_110 * (ATP * s_0529 * s_1065 - AMP * s_0633 * s_1073 / Keq_110) / (KmATP_110 * Km0529_110 * Km1065_110) / ((1 + ATP / KmATP_110) * (1 + s_0529 / Km0529_110) * (1 + s_1065 / Km1065_110) + (1 + AMP / KmAMP_110) * (1 + s_0633 / Km0633_110) * (1 + s_1073 / Km1073_110) - 1)) - (cell * Vmax_111 * (ATP * s_0505 * s_0529 - AMP * s_0633 * s_0816 / Keq_111) / (KmATP_111 * Km0505_111 * Km0529_111) / ((1 + ATP / KmATP_111) * (1 + s_0505 / Km0505_111) * (1 + s_0529 / Km0529_111) + (1 + AMP / KmAMP_111) * (1 + s_0633 / Km0633_111) * (1 + s_0816 / Km0816_111) - 1));
    der(s_0539) = (cell * Vmax_82 * (s_0419 * ATP * s_1559 - ADP * s_0539 * PHO / Keq_82) / (Km0419_82 * KmATP_82 * Km1559_82) / ((1 + s_0419 / Km0419_82) * (1 + ATP / KmATP_82) * (1 + s_1559 / Km1559_82) + (1 + ADP / KmADP_82) * (1 + s_0539 / Km0539_82) * (1 + PHO / KmPHO_82) - 1)) - (cell * Vmax_75 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_75) / (Km0539_75 * Km1331_75) / ((1 + s_0539 / Km0539_75) * (1 + s_1331 / Km1331_75) + (1 + s_0471 / Km0471_75) * (1 + s_0633 / Km0633_75) - 1)) - (cell * Vmax_190 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_190) / (Km0028_190 * Km0539_190) / ((1 + s_0028 / Km0028_190) * (1 + s_0539 / Km0539_190) + (1 + s_0019 / Km0019_190) * (1 + s_0467 / Km0467_190) - 1));
    der(s_0542) = (cell * Vmax_86 * (ATP * s_0981 * s_1589 - AMP * s_0542 * s_0633 / Keq_86) / (KmATP_86 * Km0981_86 * Km1589_86) / ((1 + ATP / KmATP_86) * (1 + s_0981 / Km0981_86) * (1 + s_1589 / Km1589_86) + (1 + AMP / KmAMP_86) * (1 + s_0542 / Km0542_86) * (1 + s_0633 / Km0633_86) - 1)) - (0.0066 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0550) = (cell * Vmax_156 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_156) / (Km0312_156 * Km0999_156) / ((1 + s_0312 / Km0312_156) * (1 + s_0999 / Km0999_156) + (1 + s_0403 / Km0403_156) * (1 + s_0550 / Km0550_156) * (1 + s_0991 / Km0991_156) - 1)) - (cell * Vmax_157 * (s_0550 - s_0207 / Keq_157) / Km0550_157 / (1 + s_0550 / Km0550_157 + 1 + s_0207 / Km0207_157 - 1));
    der(s_0551) = (cell * Vmax_265 * (GAP * s_1427 - s_0551 * F6P / Keq_265) / (KmGAP_265 * Km1427_265) / ((1 + GAP / KmGAP_265) * (1 + s_1427 / Km1427_265) + (1 + s_0551 / Km0551_265) * (1 + F6P / KmF6P_265) - 1)) - (cell * Vmax_11 * (s_0551 * PEP - s_0349 * PHO / Keq_11) / (Km0551_11 * KmPEP_11) / ((1 + s_0551 / Km0551_11) * (1 + PEP / KmPEP_11) + (1 + s_0349 / Km0349_11) * (1 + PHO / KmPHO_11) - 1)) - (cell * Vmax_249 * (s_0551 * DHAP - s_1426 / Keq_249) / (Km0551_249 * KmDHAP_249) / ((1 + s_0551 / Km0551_249) * (1 + DHAP / KmDHAP_249) + 1 + s_1426 / Km1426_249 - 1)) - (cell * Vmax_267 * (s_0551 * s_0581 - F6P * GAP / Keq_267) / (Km0551_267 * Km0581_267) / ((1 + s_0551 / Km0551_267) * (1 + s_0581 / Km0581_267) + (1 + F6P / KmF6P_267) * (1 + GAP / KmGAP_267) - 1));
    der(F16bP) = (cell * Vmax_212 * (gR_212 * (F6P / Kf6p_212) * (ATP / Katp_212) * (1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212) / (pow(1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212, 2) + L0_212 * pow((1 + Ciatp_212 * ATP / Kiatp_212) / (1 + ATP / Kiatp_212), 2) * pow((1 + Camp_212 * AMP / Kamp_212) / (1 + AMP / Kamp_212), 2) * pow((1 + Cf26_212 * F26bP / Kf26_212 + Cf16_212 * F16bP / Kf16_212) / (1 + F26bP / Kf26_212 + F16bP / Kf16_212), 2) * pow(1 + Catp_212 * ATP / Katp_212, 2)))) - (cell * (Vmax_120 * (F16bP / Kf16bp_120 - DHAP * GAP / (Kf16bp_120 * Keq_120)) / (1 + F16bP / Kf16bp_120 + DHAP / Kdhap_120 + GAP / Kgap_120 + F16bP * GAP / (Kf16bp_120 * Kigap_120) + DHAP * GAP / (Kdhap_120 * Kgap_120))));
    der(F6P) = (cell * (Vmax_124 * (G6P / Kg6p_124 - F6P / (Kg6p_124 * Keq_124)) / (1 + G6P / Kg6p_124 + F6P / Kf6p_124))) + (cell * Vmax_265 * (GAP * s_1427 - s_0551 * F6P / Keq_265) / (KmGAP_265 * Km1427_265) / ((1 + GAP / KmGAP_265) * (1 + s_1427 / Km1427_265) + (1 + s_0551 / Km0551_265) * (1 + F6P / KmF6P_265) - 1)) + (cell * Vmax_267 * (s_0551 * s_0581 - F6P * GAP / Keq_267) / (Km0551_267 * Km0581_267) / ((1 + s_0551 / Km0551_267) * (1 + s_0581 / Km0581_267) + (1 + F6P / KmF6P_267) * (1 + GAP / KmGAP_267) - 1)) - (cell * Vmax_182 * (F6P - s_0574 / Keq_182) / KmF6P_182 / (1 + F6P / KmF6P_182 + 1 + s_0574 / Km0574_182 - 1)) - (cell * Vmax_212 * (gR_212 * (F6P / Kf6p_212) * (ATP / Katp_212) * (1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212) / (pow(1 + F6P / Kf6p_212 + ATP / Katp_212 + gR_212 * F6P / Kf6p_212 * ATP / Katp_212, 2) + L0_212 * pow((1 + Ciatp_212 * ATP / Kiatp_212) / (1 + ATP / Kiatp_212), 2) * pow((1 + Camp_212 * AMP / Kamp_212) / (1 + AMP / Kamp_212), 2) * pow((1 + Cf26_212 * F26bP / Kf26_212 + Cf16_212 * F16bP / Kf16_212) / (1 + F26bP / Kf26_212 + F16bP / Kf16_212), 2) * pow(1 + Catp_212 * ATP / Katp_212, 2))));
    der(GLC) = (cell * (Vmax_280 * (GLCx - GLC) / Kglc_280 / (1 + GLCx / Kglc_280 + GLC / Kglc_280 + Ki_280 * GLCx / Kglc_280 * GLC / Kglc_280))) - (cell * (Vmax_142 * (GLC * ATP / (Kglc_142 * Katp_142) - G6P * ADP / (Kglc_142 * Katp_142 * Keq_142)) / ((1 + GLC / Kglc_142 + G6P / Kg6p_142) * (1 + ATP / Katp_142 + ADP / Kadp_142))));
    der(GLCx) = 0.0;
    der(s_0567) = (cell * Vmax_213 * (G6P - s_0567 / Keq_213) / KmG6P_213 / (1 + G6P / KmG6P_213 + 1 + s_0567 / Km0567_213 - 1)) - (cell * Vmax_276 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_276) / (Km0567_276 * Km1559_276) / ((1 + s_0567 / Km0567_276) * (1 + s_1559 / Km1559_276) + (1 + s_0633 / Km0633_276) * (1 + s_1543 / Km1543_276) - 1));
    der(G6P) = (cell * (Vmax_142 * (GLC * ATP / (Kglc_142 * Katp_142) - G6P * ADP / (Kglc_142 * Katp_142 * Keq_142)) / ((1 + GLC / Kglc_142 + G6P / Kg6p_142) * (1 + ATP / Katp_142 + ADP / Kadp_142)))) - (cell * Vmax_47 * (G6P * s_1543 - s_0409 * s_1538 / Keq_47) / (KmG6P_47 * Km1543_47) / ((1 + G6P / KmG6P_47) * (1 + s_1543 / Km1543_47) + (1 + s_0409 / Km0409_47) * (1 + s_1538 / Km1538_47) - 1)) - (cell * Vmax_123 * (G6P * s_1207 - s_0335 * s_1212 / Keq_123) / (KmG6P_123 * Km1207_123) / ((1 + G6P / KmG6P_123) * (1 + s_1207 / Km1207_123) + (1 + s_0335 / Km0335_123) * (1 + s_1212 / Km1212_123) - 1)) - (cell * (Vmax_124 * (G6P / Kg6p_124 - F6P / (Kg6p_124 * Keq_124)) / (1 + G6P / Kg6p_124 + F6P / Kf6p_124))) - (cell * Vmax_193 * (G6P - s_0126 / Keq_193) / KmG6P_193 / (1 + G6P / KmG6P_193 + 1 + s_0126 / Km0126_193 - 1)) - (cell * Vmax_213 * (G6P - s_0567 / Keq_213) / KmG6P_213 / (1 + G6P / KmG6P_213 + 1 + s_0567 / Km0567_213 - 1));
    der(s_0573) = (cell * Vmax_219 * (s_0574 - s_0573 / Keq_219) / Km0574_219 / (1 + s_0574 / Km0574_219 + 1 + s_0573 / Km0573_219 - 1)) - (cell * Vmax_181 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_181) / (Km0573_181 * Km0785_181) / ((1 + s_0573 / Km0573_181) * (1 + s_0785 / Km0785_181) + (1 + s_0633 / Km0633_181) * (1 + s_0743 / Km0743_181) - 1));
    der(s_0574) = (cell * Vmax_182 * (F6P - s_0574 / Keq_182) / KmF6P_182 / (1 + F6P / KmF6P_182 + 1 + s_0574 / Km0574_182 - 1)) - (cell * Vmax_219 * (s_0574 - s_0573 / Keq_219) / Km0574_219 / (1 + s_0574 / Km0574_219 + 1 + s_0573 / Km0573_219 - 1));
    der(s_0577) = (cell * Vmax_214 * (s_0340 * s_1207 - CO2 * s_0577 * s_1212 / Keq_214) / (Km0340_214 * Km1207_214) / ((1 + s_0340 / Km0340_214) * (1 + s_1207 / Km1207_214) + (1 + CO2 / KmCO2_214) * (1 + s_0577 / Km0577_214) * (1 + s_1212 / Km1212_214) - 1)) - (cell * Vmax_17 * (s_0577 - s_0158 * s_0722 / Keq_17) / Km0577_17 / (1 + s_0577 / Km0577_17 + (1 + s_0158 / Km0158_17) * (1 + s_0722 / Km0722_17) - 1)) - (cell * Vmax_244 * (s_0577 - s_1408 / Keq_244) / Km0577_244 / (1 + s_0577 / Km0577_244 + 1 + s_1408 / Km1408_244 - 1)) - (cell * Vmax_245 * (s_0577 - s_0581 / Keq_245) / Km0577_245 / (1 + s_0577 / Km0577_245 + 1 + s_0581 / Km0581_245 - 1));
    der(s_0581) = (cell * Vmax_245 * (s_0577 - s_0581 / Keq_245) / Km0577_245 / (1 + s_0577 / Km0577_245 + 1 + s_0581 / Km0581_245 - 1)) - (cell * Vmax_266 * (s_0581 * s_1408 - GAP * s_1427 / Keq_266) / (Km0581_266 * Km1408_266) / ((1 + s_0581 / Km0581_266) * (1 + s_1408 / Km1408_266) + (1 + GAP / KmGAP_266) * (1 + s_1427 / Km1427_266) - 1)) - (cell * Vmax_267 * (s_0551 * s_0581 - F6P * GAP / Keq_267) / (Km0551_267 * Km0581_267) / ((1 + s_0551 / Km0551_267) * (1 + s_0581 / Km0581_267) + (1 + F6P / KmF6P_267) * (1 + GAP / KmGAP_267) - 1));
    der(s_0582) = (cell * Vmax_141 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_141) / (Km0586_141 * Km0782_141) / ((1 + s_0586 / Km0586_141) * (1 + s_0782 / Km0782_141) + (1 + s_0582 / Km0582_141) * (1 + s_0739 / Km0739_141) - 1)) + (cell * Vmax_241 * (ADP * s_1616 - s_0582 * s_1620 / Keq_241) / (KmADP_241 * Km1616_241) / ((1 + ADP / KmADP_241) * (1 + s_1616 / Km1616_241) + (1 + s_0582 / Km0582_241) * (1 + s_1620 / Km1620_241) - 1)) - (cell * Vmax_289 * (ADP * s_0582 - ATP * s_0584 / Keq_289) / (KmADP_289 * Km0582_289) / ((1 + ADP / KmADP_289) * (1 + s_0582 / Km0582_289) + (1 + ATP / KmATP_289) * (1 + s_0584 / Km0584_289) - 1));
    der(s_0584) = (cell * Vmax_289 * (ADP * s_0582 - ATP * s_0584 / Keq_289) / (KmADP_289 * Km0582_289) / ((1 + ADP / KmADP_289) * (1 + s_0582 / Km0582_289) + (1 + ATP / KmATP_289) * (1 + s_0584 / Km0584_289) - 1)) - (0.0036 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0586) = (cell * Vmax_239 * (ATP * s_1616 - s_0586 * s_1620 / Keq_239) / (KmATP_239 * Km1616_239) / ((1 + ATP / KmATP_239) * (1 + s_1616 / Km1616_239) + (1 + s_0586 / Km0586_239) * (1 + s_1620 / Km1620_239) - 1)) - (cell * Vmax_141 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_141) / (Km0586_141 * Km0782_141) / ((1 + s_0586 / Km0586_141) * (1 + s_0782 / Km0782_141) + (1 + s_0582 / Km0582_141) * (1 + s_0739 / Km0739_141) - 1));
    der(s_0587) = (cell * Vmax_242 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_242) / (Km0467_242 * Km1616_242) / ((1 + s_0467 / Km0467_242) * (1 + s_1616 / Km1616_242) + (1 + s_0587 / Km0587_242) * (1 + s_1620 / Km1620_242) - 1)) - (cell * Vmax_288 * (ADP * s_0587 - ATP * s_0589 / Keq_288) / (KmADP_288 * Km0587_288) / ((1 + ADP / KmADP_288) * (1 + s_0587 / Km0587_288) + (1 + ATP / KmATP_288) * (1 + s_0589 / Km0589_288) - 1));
    der(s_0589) = (cell * Vmax_288 * (ADP * s_0587 - ATP * s_0589 / Keq_288) / (KmADP_288 * Km0587_288) / ((1 + ADP / KmADP_288) * (1 + s_0587 / Km0587_288) + (1 + ATP / KmATP_288) * (1 + s_0589 / Km0589_288) - 1)) - (cell * Vmax_88 * (s_0589 - s_0419 * s_0654 / Keq_88) / Km0589_88 / (1 + s_0589 / Km0589_88 + (1 + s_0419 / Km0419_88) * (1 + s_0654 / Km0654_88) - 1)) - (0.0024 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0595) = (cell * Vmax_109 * (AMP * s_0602 * s_0633 - ATP * s_0529 * s_0595 / Keq_109) / (KmAMP_109 * Km0602_109 * Km0633_109) / ((1 + AMP / KmAMP_109) * (1 + s_0602 / Km0602_109) * (1 + s_0633 / Km0633_109) + (1 + ATP / KmATP_109) * (1 + s_0529 / Km0529_109) * (1 + s_0595 / Km0595_109) - 1)) - (cell * Vmax_101 * (s_0595 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_101) / (Km0595_101 * Km1101_101 * pow(Km1212_101, 2)) / ((1 + s_0595 / Km0595_101) * (1 + s_1101 / Km1101_101) * pow(1 + s_1212 / Km1212_101, 2) + (1 + CO2 / KmCO2_101) * (1 + s_0529 / Km0529_101) * (1 + s_1065 / Km1065_101) * pow(1 + s_1207 / Km1207_101, 2) - 1)) - (1.8 * cell * Vmax_256 * (s_0666 * s_0595 - s_0672 / Keq_256) / (Km0666_256 * Km0595_256) / ((1 + s_0666 / Km0666_256) * (1 + s_0595 / Km0595_256) + 1 + s_0672 / Km0672_256 - 1)) - (2.6 * cell * Vmax_269 * (s_0619 * s_0595 - s_1524 / Keq_269) / (Km0619_269 * Km0595_269) / ((1 + s_0619 / Km0619_269) * (1 + s_0595 / Km0595_269) + 1 + s_1524 / Km1524_269 - 1)) - (0.000535599999999999 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0602) = (cell * Vmax_107 * (s_1101 * pow(s_1212, 2) * s_1255 - CO2 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_107) / (Km1101_107 * pow(Km1212_107, 2) * Km1255_107) / ((1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) * (1 + s_1255 / Km1255_107) + (1 + CO2 / KmCO2_107) * (1 + s_0529 / Km0529_107) * (1 + s_0602 / Km0602_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) - (cell * Vmax_109 * (AMP * s_0602 * s_0633 - ATP * s_0529 * s_0595 / Keq_109) / (KmAMP_109 * Km0602_109 * Km0633_109) / ((1 + AMP / KmAMP_109) * (1 + s_0602 / Km0602_109) * (1 + s_0633 / Km0633_109) + (1 + ATP / KmATP_109) * (1 + s_0529 / Km0529_109) * (1 + s_0595 / Km0595_109) - 1)) - (cell * Vmax_113 * (s_0602 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_113) / (Km0602_113 * Km1101_113 * pow(Km1212_113, 2)) / ((1 + s_0602 / Km0602_113) * (1 + s_1101 / Km1101_113) * pow(1 + s_1212 / Km1212_113, 2) + (1 + CO2 / KmCO2_113) * (1 + s_0529 / Km0529_113) * (1 + s_1073 / Km1073_113) * pow(1 + s_1207 / Km1207_113, 2) - 1));
    der(s_0613) = (cell * Vmax_243 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_243) / (Km0739_243 * Km1616_243) / ((1 + s_0739 / Km0739_243) * (1 + s_1616 / Km1616_243) + (1 + s_0613 / Km0613_243) * (1 + s_1620 / Km1620_243) - 1)) - (cell * Vmax_89 * (ADP * s_0613 - ATP * s_0615 / Keq_89) / (KmADP_89 * Km0613_89) / ((1 + ADP / KmADP_89) * (1 + s_0613 / Km0613_89) + (1 + ATP / KmATP_89) * (1 + s_0615 / Km0615_89) - 1));
    der(s_0615) = (cell * Vmax_89 * (ADP * s_0613 - ATP * s_0615 / Keq_89) / (KmADP_89 * Km0613_89) / ((1 + ADP / KmADP_89) * (1 + s_0613 / Km0613_89) + (1 + ATP / KmATP_89) * (1 + s_0615 / Km0615_89) - 1)) - (0.0024 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0619) = (cell * Vmax_90 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_90) / (Km0529_90 * Km1524_90) / ((1 + s_0529 / Km0529_90) * (1 + s_1524 / Km1524_90) + (1 + s_0380 / Km0380_90) * (1 + s_0619 / Km0619_90) - 1)) + (cell * Vmax_91 * (s_1331 - s_0619 * PHO / Keq_91) / Km1331_91 / (1 + s_1331 / Km1331_91 + (1 + s_0619 / Km0619_91) * (1 + PHO / KmPHO_91) - 1)) + (cell * Vmax_162 * (s_0089 * s_0478 - s_0619 * s_0897 / Keq_162) / (Km0089_162 * Km0478_162) / ((1 + s_0089 / Km0089_162) * (1 + s_0478 / Km0478_162) + (1 + s_0619 / Km0619_162) * (1 + s_0897 / Km0897_162) - 1)) - (cell * Vmax_269 * (s_0619 * s_0595 - s_1524 / Keq_269) / (Km0619_269 * Km0595_269) / ((1 + s_0619 / Km0619_269) * (1 + s_0595 / Km0595_269) + 1 + s_1524 / Km1524_269 - 1));
    der(s_0625) = (cell * Vmax_264 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_264) / (Km0306_264 * Km0654_264) / ((1 + s_0306 / Km0306_264) * (1 + s_0654 / Km0654_264) + (1 + s_0625 / Km0625_264) * (1 + s_0649 / Km0649_264) - 1)) - (cell * Vmax_92 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_92) / (Km0625_92 * Km1212_92) / ((1 + s_0625 / Km0625_92) * (1 + s_1212 / Km1212_92) + (1 + s_1207 / Km1207_92) * (1 + s_1487 / Km1487_92) - 1));
    der(DHAP) = (cell * (Vmax_120 * (F16bP / Kf16bp_120 - DHAP * GAP / (Kf16bp_120 * Keq_120)) / (1 + F16bP / Kf16bp_120 + DHAP / Kdhap_120 + GAP / Kgap_120 + F16bP * GAP / (Kf16bp_120 * Kigap_120) + DHAP * GAP / (Kdhap_120 * Kgap_120)))) - (cell * Vmax_131 * (DHAP * NADH - s_0767 * NAD / Keq_131) / (KmDHAP_131 * KmNAD_131H_131) / ((1 + DHAP / KmDHAP_131) * (1 + NADH / KmNAD_131H_131) + (1 + s_0767 / Km0767_131) * (1 + NAD / KmNAD_131) - 1)) - (cell * Vmax_249 * (s_0551 * DHAP - s_1426 / Keq_249) / (Km0551_249 * KmDHAP_249) / ((1 + s_0551 / Km0551_249) * (1 + DHAP / KmDHAP_249) + 1 + s_1426 / Km1426_249 - 1)) - (cell * k_270 * (DHAP - GAP / Keq_270)) - (cell * Vmax_291 * (DHAP - s_1151 * PHO / Keq_291) / KmDHAP_291 / (1 + DHAP / KmDHAP_291 + (1 + s_1151 / Km1151_291) * (1 + PHO / KmPHO_291) - 1));
    der(s_0633) = (cell * Vmax_43 * (ATP * s_0955 * s_1582 - s_0404 * AMP * s_0633 / Keq_43) / (KmATP_43 * Km0955_43 * Km1582_43) / ((1 + ATP / KmATP_43) * (1 + s_0955 / Km0955_43) * (1 + s_1582 / Km1582_43) + (1 + s_0404 / Km0404_43) * (1 + AMP / KmAMP_43) * (1 + s_0633 / Km0633_43) - 1)) + (cell * Vmax_48 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_48) / (Km0427_48 * Km1386_48) / ((1 + s_0427 / Km0427_48) * (1 + s_1386 / Km1386_48) + (1 + s_0633 / Km0633_48) * (1 + s_1187 / Km1187_48) - 1)) + (cell * Vmax_51 * (ATP * s_0973 * s_0979 - s_0015 * AMP * s_0633 / Keq_51) / (KmATP_51 * Km0973_51 * Km0979_51) / ((1 + ATP / KmATP_51) * (1 + s_0973 / Km0973_51) * (1 + s_0979 / Km0979_51) + (1 + s_0015 / Km0015_51) * (1 + AMP / KmAMP_51) * (1 + s_0633 / Km0633_51) - 1)) + (cell * Vmax_52 * (ATP * s_0965 * s_1583 - AMP * s_0428 * s_0633 / Keq_52) / (KmATP_52 * Km0965_52 * Km1583_52) / ((1 + ATP / KmATP_52) * (1 + s_0965 / Km0965_52) * (1 + s_1583 / Km1583_52) + (1 + AMP / KmAMP_52) * (1 + s_0428 / Km0428_52) * (1 + s_0633 / Km0633_52) - 1)) + (cell * Vmax_53 * (ATP * s_0973 * s_0999 - AMP * s_0633 * s_0969 * s_0991 / Keq_53) / (KmATP_53 * Km0973_53 * Km0999_53) / ((1 + ATP / KmATP_53) * (1 + s_0973 / Km0973_53) * (1 + s_0999 / Km0999_53) + (1 + AMP / KmAMP_53) * (1 + s_0633 / Km0633_53) * (1 + s_0969 / Km0969_53) * (1 + s_0991 / Km0991_53) - 1)) + (cell * Vmax_54 * (ATP * s_0969 * s_1585 - AMP * s_0430 * s_0633 / Keq_54) / (KmATP_54 * Km0969_54 * Km1585_54) / ((1 + ATP / KmATP_54) * (1 + s_0969 / Km0969_54) * (1 + s_1585 / Km1585_54) + (1 + AMP / KmAMP_54) * (1 + s_0430 / Km0430_54) * (1 + s_0633 / Km0633_54) - 1)) + (cell * Vmax_59 * (ATP * s_0973 * s_1587 - AMP * s_0432 * s_0633 / Keq_59) / (KmATP_59 * Km0973_59 * Km1587_59) / ((1 + ATP / KmATP_59) * (1 + s_0973 / Km0973_59) * (1 + s_1587 / Km1587_59) + (1 + AMP / KmAMP_59) * (1 + s_0432 / Km0432_59) * (1 + s_0633 / Km0633_59) - 1)) + (cell * Vmax_60 * (ATP * s_1386 - s_0326 * s_0633 / Keq_60) / (KmATP_60 * Km1386_60) / ((1 + ATP / KmATP_60) * (1 + s_1386 / Km1386_60) + (1 + s_0326 / Km0326_60) * (1 + s_0633 / Km0633_60) - 1)) + (cell * Vmax_75 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_75) / (Km0539_75 * Km1331_75) / ((1 + s_0539 / Km0539_75) * (1 + s_1331 / Km1331_75) + (1 + s_0471 / Km0471_75) * (1 + s_0633 / Km0633_75) - 1)) + (cell * Vmax_86 * (ATP * s_0981 * s_1589 - AMP * s_0542 * s_0633 / Keq_86) / (KmATP_86 * Km0981_86 * Km1589_86) / ((1 + ATP / KmATP_86) * (1 + s_0981 / Km0981_86) * (1 + s_1589 / Km1589_86) + (1 + AMP / KmAMP_86) * (1 + s_0542 / Km0542_86) * (1 + s_0633 / Km0633_86) - 1)) + (cell * Vmax_96 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_96) / (Km0943_96 * Km1376_96) / ((1 + s_0943 / Km0943_96) * (1 + s_1376 / Km1376_96) + (1 + s_0633 / Km0633_96) * (1 + s_0745 / Km0745_96) - 1)) + (cell * Vmax_99 * (s_0656 - s_0633 * s_0654 / Keq_99) / Km0656_99 / (1 + s_0656 / Km0656_99 + (1 + s_0633 / Km0633_99) * (1 + s_0654 / Km0654_99) - 1)) + (cell * Vmax_110 * (ATP * s_0529 * s_1065 - AMP * s_0633 * s_1073 / Keq_110) / (KmATP_110 * Km0529_110 * Km1065_110) / ((1 + ATP / KmATP_110) * (1 + s_0529 / Km0529_110) * (1 + s_1065 / Km1065_110) + (1 + AMP / KmAMP_110) * (1 + s_0633 / Km0633_110) * (1 + s_1073 / Km1073_110) - 1)) + (cell * Vmax_111 * (ATP * s_0505 * s_0529 - AMP * s_0633 * s_0816 / Keq_111) / (KmATP_111 * Km0505_111 * Km0529_111) / ((1 + ATP / KmATP_111) * (1 + s_0505 / Km0505_111) * (1 + s_0529 / Km0529_111) + (1 + AMP / KmAMP_111) * (1 + s_0633 / Km0633_111) * (1 + s_0816 / Km0816_111) - 1)) + (cell * Vmax_122 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_122) / (Km0745_122 * Km0943_122) / ((1 + s_0745 / Km0745_122) * (1 + s_0943 / Km0943_122) + (1 + s_0190 / Km0190_122) * (1 + s_0633 / Km0633_122) - 1)) + (cell * Vmax_127 * (ATP * s_0999 * s_1590 - AMP * s_0633 * s_0747 / Keq_127) / (KmATP_127 * Km0999_127 * Km1590_127) / ((1 + ATP / KmATP_127) * (1 + s_0999 / Km0999_127) * (1 + s_1590 / Km1590_127) + (1 + AMP / KmAMP_127) * (1 + s_0633 / Km0633_127) * (1 + s_0747 / Km0747_127) - 1)) + (cell * Vmax_128 * (ATP * s_0991 * s_1591 - AMP * s_0633 * s_0748 / Keq_128) / (KmATP_128 * Km0991_128 * Km1591_128) / ((1 + ATP / KmATP_128) * (1 + s_0991 / Km0991_128) * (1 + s_1591 / Km1591_128) + (1 + AMP / KmAMP_128) * (1 + s_0633 / Km0633_128) * (1 + s_0748 / Km0748_128) - 1)) + (cell * Vmax_137 * (ATP * s_1003 * s_1593 - AMP * s_0633 * s_0757 / Keq_137) / (KmATP_137 * Km1003_137 * Km1593_137) / ((1 + ATP / KmATP_137) * (1 + s_1003 / Km1003_137) * (1 + s_1593 / Km1593_137) + (1 + AMP / KmAMP_137) * (1 + s_0633 / Km0633_137) * (1 + s_0757 / Km0757_137) - 1)) + (cell * Vmax_138 * (ATP * s_0999 * s_1565 - AMP * s_0633 * s_0782 * s_0991 / Keq_138) / (KmATP_138 * Km0999_138 * Km1565_138) / ((1 + ATP / KmATP_138) * (1 + s_0999 / Km0999_138) * (1 + s_1565 / Km1565_138) + (1 + AMP / KmAMP_138) * (1 + s_0633 / Km0633_138) * (1 + s_0782 / Km0782_138) * (1 + s_0991 / Km0991_138) - 1)) + (cell * Vmax_139 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_139) / Km0785_139 / (1 + s_0785 / Km0785_139 + (1 + s_0141 / Km0141_139) * (1 + s_0633 / Km0633_139) * (1 + s_0722 / Km0722_139) - 1)) + (cell * Vmax_146 * (ATP * s_1006 * s_1594 - AMP * s_0633 * s_0832 / Keq_146) / (KmATP_146 * Km1006_146 * Km1594_146) / ((1 + ATP / KmATP_146) * (1 + s_1006 / Km1006_146) * (1 + s_1594 / Km1594_146) + (1 + AMP / KmAMP_146) * (1 + s_0633 / Km0633_146) * (1 + s_0832 / Km0832_146) - 1)) + (cell * Vmax_167 * (ATP * s_1016 * s_1596 - AMP * s_0633 * s_0847 / Keq_167) / (KmATP_167 * Km1016_167 * Km1596_167) / ((1 + ATP / KmATP_167) * (1 + s_1016 / Km1016_167) * (1 + s_1596 / Km1596_167) + (1 + AMP / KmAMP_167) * (1 + s_0633 / Km0633_167) * (1 + s_0847 / Km0847_167) - 1)) + (cell * Vmax_178 * (ATP * s_1021 * s_1598 - AMP * s_0633 * s_1077 / Keq_178) / (KmATP_178 * Km1021_178 * Km1598_178) / ((1 + ATP / KmATP_178) * (1 + s_1021 / Km1021_178) * (1 + s_1598 / Km1598_178) + (1 + AMP / KmAMP_178) * (1 + s_0633 / Km0633_178) * (1 + s_1077 / Km1077_178) - 1)) + (cell * Vmax_179 * (ATP * s_1025 * s_1600 - AMP * s_0633 * s_1099 / Keq_179) / (KmATP_179 * Km1025_179 * Km1600_179) / ((1 + ATP / KmATP_179) * (1 + s_1025 / Km1025_179) * (1 + s_1600 / Km1600_179) + (1 + AMP / KmAMP_179) * (1 + s_0633 / Km0633_179) * (1 + s_1099 / Km1099_179) - 1)) + (cell * Vmax_181 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_181) / (Km0573_181 * Km0785_181) / ((1 + s_0573 / Km0573_181) * (1 + s_0785 / Km0785_181) + (1 + s_0633 / Km0633_181) * (1 + s_0743 / Km0743_181) - 1)) + (cell * Vmax_184 * (ATP * s_1029 - s_0633 * PHO * s_1416 / Keq_184) / (KmATP_184 * Km1029_184) / ((1 + ATP / KmATP_184) * (1 + s_1029 / Km1029_184) + (1 + s_0633 / Km0633_184) * (1 + PHO / KmPHO_184) * (1 + s_1416 / Km1416_184) - 1)) + (cell * Vmax_186 * (ATP * s_1029 * s_1602 - AMP * s_0633 * s_1148 / Keq_186) / (KmATP_186 * Km1029_186 * Km1602_186) / ((1 + ATP / KmATP_186) * (1 + s_1029 / Km1029_186) * (1 + s_1602 / Km1602_186) + (1 + AMP / KmAMP_186) * (1 + s_0633 / Km0633_186) * (1 + s_1148 / Km1148_186) - 1)) + (cell * Vmax_201 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_201) / (Km1269_201 * Km1386_201) / ((1 + s_1269 / Km1269_201) * (1 + s_1386 / Km1386_201) + (1 + s_0633 / Km0633_201) * (1 + s_1270 / Km1270_201) - 1)) + (cell * Vmax_204 * (ATP * s_1032 * s_1604 - AMP * s_0633 * s_1314 / Keq_204) / (KmATP_204 * Km1032_204 * Km1604_204) / ((1 + ATP / KmATP_204) * (1 + s_1032 / Km1032_204) * (1 + s_1604 / Km1604_204) + (1 + AMP / KmAMP_204) * (1 + s_0633 / Km0633_204) * (1 + s_1314 / Km1314_204) - 1)) + (cell * Vmax_223 * (s_0326 - s_0078 * s_0633 / Keq_223) / Km0326_223 / (1 + s_0326 / Km0326_223 + (1 + s_0078 / Km0078_223) * (1 + s_0633 / Km0633_223) - 1)) + (cell * Vmax_228 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_228) / (Km0999_228 * Km1386_228) / ((1 + s_0999 / Km0999_228) * (1 + s_1386 / Km1386_228) + (1 + s_0327 / Km0327_228) * (1 + s_0633 / Km0633_228) * (1 + s_0991 / Km0991_228) - 1)) + (cell * Vmax_232 * (ATP * s_1035 * s_1606 - AMP * s_0633 * s_1379 / Keq_232) / (KmATP_232 * Km1035_232 * Km1606_232) / ((1 + ATP / KmATP_232) * (1 + s_1035 / Km1035_232) * (1 + s_1606 / Km1606_232) + (1 + AMP / KmAMP_232) * (1 + s_0633 / Km0633_232) * (1 + s_1379 / Km1379_232) - 1)) + (cell * Vmax_251 * (ATP * s_1039 * s_1607 - AMP * s_0633 * s_1428 / Keq_251) / (KmATP_251 * Km1039_251 * Km1607_251) / ((1 + ATP / KmATP_251) * (1 + s_1039 / Km1039_251) * (1 + s_1607 / Km1607_251) + (1 + AMP / KmAMP_251) * (1 + s_0633 / Km0633_251) * (1 + s_1428 / Km1428_251) - 1)) + (2.0 * cell * Vmax_255 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_255) / (pow(Km0190_255, 2) * Km1212_255) / (pow(1 + s_0190 / Km0190_255, 2) * (1 + s_1212 / Km1212_255) + pow(1 + s_0633 / Km0633_255, 2) * (1 + s_1207 / Km1207_255) * (1 + s_1447 / Km1447_255) - 1)) + (cell * Vmax_263 * (ATP * s_1045 * s_1608 - AMP * s_0633 * s_1491 / Keq_263) / (KmATP_263 * Km1045_263 * Km1608_263) / ((1 + ATP / KmATP_263) * (1 + s_1045 / Km1045_263) * (1 + s_1608 / Km1608_263) + (1 + AMP / KmAMP_263) * (1 + s_0633 / Km0633_263) * (1 + s_1491 / Km1491_263) - 1)) + (cell * Vmax_272 * (ATP * s_1048 * s_1610 - AMP * s_0633 * s_1527 / Keq_272) / (KmATP_272 * Km1048_272 * Km1610_272) / ((1 + ATP / KmATP_272) * (1 + s_1048 / Km1048_272) * (1 + s_1610 / Km1610_272) + (1 + AMP / KmAMP_272) * (1 + s_0633 / Km0633_272) * (1 + s_1527 / Km1527_272) - 1)) + (cell * Vmax_274 * (ATP * s_1051 * s_1612 - AMP * s_0633 * s_1533 / Keq_274) / (KmATP_274 * Km1051_274 * Km1612_274) / ((1 + ATP / KmATP_274) * (1 + s_1051 / Km1051_274) * (1 + s_1612 / Km1612_274) + (1 + AMP / KmAMP_274) * (1 + s_0633 / Km0633_274) * (1 + s_1533 / Km1533_274) - 1)) + (cell * Vmax_276 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_276) / (Km0567_276 * Km1559_276) / ((1 + s_0567 / Km0567_276) * (1 + s_1559 / Km1559_276) + (1 + s_0633 / Km0633_276) * (1 + s_1543 / Km1543_276) - 1)) + (cell * Vmax_278 * (ATP * s_1056 * s_1614 - AMP * s_0633 * s_1561 / Keq_278) / (KmATP_278 * Km1056_278 * Km1614_278) / ((1 + ATP / KmATP_278) * (1 + s_1056 / Km1056_278) * (1 + s_1614 / Km1614_278) + (1 + AMP / KmAMP_278) * (1 + s_0633 / Km0633_278) * (1 + s_1561 / Km1561_278) - 1)) - (cell * Vmax_109 * (AMP * s_0602 * s_0633 - ATP * s_0529 * s_0595 / Keq_109) / (KmAMP_109 * Km0602_109 * Km0633_109) / ((1 + AMP / KmAMP_109) * (1 + s_0602 / Km0602_109) * (1 + s_0633 / Km0633_109) + (1 + ATP / KmATP_109) * (1 + s_0529 / Km0529_109) * (1 + s_0595 / Km0595_109) - 1)) - (cell * Vmax_112 * (AMP * s_0633 * s_1454 - ATP * s_0529 * s_1449 / Keq_112) / (KmAMP_112 * Km0633_112 * Km1454_112) / ((1 + AMP / KmAMP_112) * (1 + s_0633 / Km0633_112) * (1 + s_1454 / Km1454_112) + (1 + ATP / KmATP_112) * (1 + s_0529 / Km0529_112) * (1 + s_1449 / Km1449_112) - 1)) - (cell * Vmax_160 * (s_0633 - pow(PHO, 2) / Keq_160) / Km0633_160 / (1 + s_0633 / Km0633_160 + pow(1 + PHO / KmPHO_160, 2) - 1));
    der(s_0644) = (cell * Vmax_97 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_97) / (Km0645_97 * Km0743_97) / ((1 + s_0645 / Km0645_97) * (1 + s_0743 / Km0743_97) + (1 + s_0644 / Km0644_97) * (1 + s_0739 / Km0739_97) - 1)) - (cell * Vmax_98 * (s_0644 - s_0645 * s_1107 / Keq_98) / Km0644_98 / (1 + s_0644 / Km0644_98 + (1 + s_0645 / Km0645_98) * (1 + s_1107 / Km1107_98) - 1));
    der(s_0645) = (cell * Vmax_98 * (s_0644 - s_0645 * s_1107 / Keq_98) / Km0644_98 / (1 + s_0644 / Km0644_98 + (1 + s_0645 / Km0645_98) * (1 + s_1107 / Km1107_98) - 1)) - (cell * Vmax_97 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_97) / (Km0645_97 * Km0743_97) / ((1 + s_0645 / Km0645_97) * (1 + s_0743 / Km0743_97) + (1 + s_0644 / Km0644_97) * (1 + s_0739 / Km0739_97) - 1));
    der(s_0649) = (cell * Vmax_264 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_264) / (Km0306_264 * Km0654_264) / ((1 + s_0306 / Km0306_264) * (1 + s_0654 / Km0654_264) + (1 + s_0625 / Km0625_264) * (1 + s_0649 / Km0649_264) - 1)) - (0.0036 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0654) = (cell * Vmax_88 * (s_0589 - s_0419 * s_0654 / Keq_88) / Km0589_88 / (1 + s_0589 / Km0589_88 + (1 + s_0419 / Km0419_88) * (1 + s_0654 / Km0654_88) - 1)) + (cell * Vmax_99 * (s_0656 - s_0633 * s_0654 / Keq_99) / Km0656_99 / (1 + s_0656 / Km0656_99 + (1 + s_0633 / Km0633_99) * (1 + s_0654 / Km0654_99) - 1)) - (cell * Vmax_264 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_264) / (Km0306_264 * Km0654_264) / ((1 + s_0306 / Km0306_264) * (1 + s_0654 / Km0654_264) + (1 + s_0625 / Km0625_264) * (1 + s_0649 / Km0649_264) - 1));
    der(s_0656) = (cell * Vmax_240 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_240) / (Km1559_240 * Km1616_240) / ((1 + s_1559 / Km1559_240) * (1 + s_1616 / Km1616_240) + (1 + s_0656 / Km0656_240) * (1 + s_1620 / Km1620_240) - 1)) - (cell * Vmax_99 * (s_0656 - s_0633 * s_0654 / Keq_99) / Km0656_99 / (1 + s_0656 / Km0656_99 + (1 + s_0633 / Km0633_99) * (1 + s_0654 / Km0654_99) - 1));
    der(s_0657) = (cell * Vmax_72 * (s_0700 - s_0657 / Keq_72) / Km0700_72 / (1 + s_0700 / Km0700_72 + 1 + s_0657 / Km0657_72 - 1)) - (9.6e-05 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0662) = (cell * Vmax_286 * (s_1275 * s_1416 * s_1569 - s_0662 * s_1413 / Keq_286) / (Km1275_286 * Km1416_286 * Km1569_286) / ((1 + s_1275 / Km1275_286) * (1 + s_1416 / Km1416_286) * (1 + s_1569 / Km1569_286) + (1 + s_0662 / Km0662_286) * (1 + s_1413 / Km1413_286) - 1)) - (cell * Vmax_73 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_73) / (Km0662_73 * Km1212_73) / ((1 + s_0662 / Km0662_73) * (1 + s_1212 / Km1212_73) + (1 + s_0666 / Km0666_73) * (1 + s_1207 / Km1207_73) - 1)) - (0.000125 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0666) = (cell * Vmax_73 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_73) / (Km0662_73 * Km1212_73) / ((1 + s_0662 / Km0662_73) * (1 + s_1212 / Km1212_73) + (1 + s_0666 / Km0666_73) * (1 + s_1207 / Km1207_73) - 1)) - (cell * Vmax_256 * (s_0666 * s_0595 - s_0672 / Keq_256) / (Km0666_256 * Km0595_256) / ((1 + s_0666 / Km0666_256) * (1 + s_0595 / Km0595_256) + 1 + s_0672 / Km0672_256 - 1)) - (0.0056 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0672) = (cell * Vmax_256 * (s_0666 * s_0595 - s_0672 / Keq_256) / (Km0666_256 * Km0595_256) / ((1 + s_0666 / Km0666_256) * (1 + s_0595 / Km0595_256) + 1 + s_0672 / Km0672_256 - 1)) - (0.000812 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(EtOH) = (cell * (Vmax_44 * (AcAld * NADH / (Kacald_44 * Kinad_44h) - EtOH * NAD / (Kacald_44 * Kinad_44h * Keq_44)) / (1 + NADH / Kinad_44h + AcAld * Knad_44h / (Kinad_44h * Kacald_44) + EtOH * Knad_44 / (Kinad_44 * Ketoh_44) + NAD / Kinad_44 + AcAld * NADH / (Kinad_44h * Kacald_44) + NADH * EtOH * Knad_44 / (Kinad_44h * Kinad_44 * Ketoh_44) + AcAld * NAD * Knad_44h / (Kinad_44h * Kinad_44 * Kacald_44) + EtOH * NAD / (Ketoh_44 * Kinad_44) + AcAld * NADH * EtOH / (Kinad_44h * Kietoh_44 * Kacald_44) + AcAld * EtOH * NAD / (Kiacald_44 * Kinad_44 * Ketoh_44)))) - (cell * Vmax_290 * EtOH / KmEtOH_290 / (1 + EtOH / KmEtOH_290));
    der(s_0681) = 0.0;
    der(s_0700) = (cell * Vmax_246 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_246) / (Km1416_246 * Km1569_246) / ((1 + s_1416 / Km1416_246) * (1 + s_1569 / Km1569_246) + (1 + s_0700 / Km0700_246) * (1 + s_1413 / Km1413_246) - 1)) - (cell * Vmax_72 * (s_0700 - s_0657 / Keq_72) / Km0700_72 / (1 + s_0700 / Km0700_72 + 1 + s_0657 / Km0657_72 - 1)) - (0.000114 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0709) = (4.0 * cell * Vmax_117 * (pow(s_0710, 4) * s_1275 - pow(s_0709, 4) / Keq_117) / (pow(Km0710_117, 4) * Km1275_117) / (pow(1 + s_0710 / Km0710_117, 4) * (1 + s_1275 / Km1275_117) + pow(1 + s_0709 / Km0709_117, 4) - 1)) - (2.0 * cell * Vmax_0 * (s_0025 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_0) / (Km0025_0 * pow(Km0709_0, 2)) / ((1 + s_0025 / Km0025_0) * pow(1 + s_0709 / Km0709_0, 2) + pow(1 + s_0710 / Km0710_0, 2) * (1 + PYR / KmPYR_0) - 1)) - (2.0 * cell * Vmax_1 * (s_0063 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_1) / (Km0063_1 * pow(Km0709_1, 2)) / ((1 + s_0063 / Km0063_1) * pow(1 + s_0709 / Km0709_1, 2) + pow(1 + s_0710 / Km0710_1, 2) * (1 + PYR / KmPYR_1) - 1)) - (2.0 * cell * Vmax_118 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_118) / (pow(Km0709_118, 2) * Km1535_118) / (pow(1 + s_0709 / Km0709_118, 2) * (1 + s_1535 / Km1535_118) + pow(1 + s_0710 / Km0710_118, 2) * (1 + s_1537 / Km1537_118) - 1));
    der(s_0710) = (2.0 * cell * Vmax_0 * (s_0025 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_0) / (Km0025_0 * pow(Km0709_0, 2)) / ((1 + s_0025 / Km0025_0) * pow(1 + s_0709 / Km0709_0, 2) + pow(1 + s_0710 / Km0710_0, 2) * (1 + PYR / KmPYR_0) - 1)) + (2.0 * cell * Vmax_1 * (s_0063 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_1) / (Km0063_1 * pow(Km0709_1, 2)) / ((1 + s_0063 / Km0063_1) * pow(1 + s_0709 / Km0709_1, 2) + pow(1 + s_0710 / Km0710_1, 2) * (1 + PYR / KmPYR_1) - 1)) + (2.0 * cell * Vmax_118 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_118) / (pow(Km0709_118, 2) * Km1535_118) / (pow(1 + s_0709 / Km0709_118, 2) * (1 + s_1535 / Km1535_118) + pow(1 + s_0710 / Km0710_118, 2) * (1 + s_1537 / Km1537_118) - 1)) - (4.0 * cell * Vmax_117 * (pow(s_0710, 4) * s_1275 - pow(s_0709, 4) / Keq_117) / (pow(Km0710_117, 4) * Km1275_117) / (pow(1 + s_0710 / Km0710_117, 4) * (1 + s_1275 / Km1275_117) + pow(1 + s_0709 / Km0709_117, 4) - 1));
    der(s_0722) = (cell * Vmax_17 * (s_0577 - s_0158 * s_0722 / Keq_17) / Km0577_17 / (1 + s_0577 / Km0577_17 + (1 + s_0158 / Km0158_17) * (1 + s_0722 / Km0722_17) - 1)) + (cell * Vmax_87 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_87) / (Km1059_87 * pow(Km1212_87, 3) * pow(Km1275_87, 3)) / ((1 + s_1059 / Km1059_87) * pow(1 + s_1212 / Km1212_87, 3) * pow(1 + s_1275 / Km1275_87, 3) + (1 + s_0262 / Km0262_87) * (1 + s_0722 / Km0722_87) * pow(1 + s_1207 / Km1207_87, 3) - 1)) + (cell * Vmax_139 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_139) / Km0785_139 / (1 + s_0785 / Km0785_139 + (1 + s_0141 / Km0141_139) * (1 + s_0633 / Km0633_139) * (1 + s_0722 / Km0722_139) - 1)) - (cell * Vmax_119 * (ATP * s_0722 * s_1487 - s_0120 * ADP * PHO / Keq_119) / (KmATP_119 * Km0722_119 * Km1487_119) / ((1 + ATP / KmATP_119) * (1 + s_0722 / Km0722_119) * (1 + s_1487 / Km1487_119) + (1 + s_0120 / Km0120_119) * (1 + ADP / KmADP_119) * (1 + PHO / KmPHO_119) - 1));
    der(s_0725) = (cell * Vmax_38 * (s_0299 - s_0403 * s_0725 / Keq_38) / Km0299_38 / (1 + s_0299 / Km0299_38 + (1 + s_0403 / Km0403_38) * (1 + s_0725 / Km0725_38) - 1)) + (cell * Vmax_39 * (s_0393 - AMP * s_0725 / Keq_39) / Km0393_39 / (1 + s_0393 / Km0393_39 + (1 + AMP / KmAMP_39) * (1 + s_0725 / Km0725_39) - 1)) + (cell * Vmax_50 * (s_0015 - s_0725 * s_0965 / Keq_50) / Km0015_50 / (1 + s_0015 / Km0015_50 + (1 + s_0725 / Km0725_50) * (1 + s_0965 / Km0965_50) - 1)) + (cell * Vmax_257 * (s_1458 * s_1537 - s_0725 * s_1535 / Keq_257) / (Km1458_257 * Km1537_257) / ((1 + s_1458 / Km1458_257) * (1 + s_1537 / Km1537_257) + (1 + s_0725 / Km0725_257) * (1 + s_1535 / Km1535_257) - 1)) - (cell * Vmax_121 * (s_0725 - s_0066 / Keq_121) / Km0725_121 / (1 + s_0725 / Km0725_121 + 1 + s_0066 / Km0066_121 - 1));
    der(s_0739) = (cell * Vmax_37 * (AMP * s_0785 - ADP * s_0739 / Keq_37) / (KmAMP_37 * Km0785_37) / ((1 + AMP / KmAMP_37) * (1 + s_0785 / Km0785_37) + (1 + ADP / KmADP_37) * (1 + s_0739 / Km0739_37) - 1)) + (cell * Vmax_40 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * PHO / Keq_40) / (Km0785_40 * Km0849_40 * Km0973_40) / ((1 + s_0785 / Km0785_40) * (1 + s_0849 / Km0849_40) * (1 + s_0973 / Km0973_40) + (1 + s_0393 / Km0393_40) * (1 + s_0739 / Km0739_40) * (1 + PHO / KmPHO_40) - 1)) + (cell * Vmax_97 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_97) / (Km0645_97 * Km0743_97) / ((1 + s_0645 / Km0645_97) * (1 + s_0743 / Km0743_97) + (1 + s_0644 / Km0644_97) * (1 + s_0739 / Km0739_97) - 1)) + (cell * Vmax_140 * (ATP * s_0782 - ADP * s_0739 / Keq_140) / (KmATP_140 * Km0782_140) / ((1 + ATP / KmATP_140) * (1 + s_0782 / Km0782_140) + (1 + ADP / KmADP_140) * (1 + s_0739 / Km0739_140) - 1)) + (cell * Vmax_141 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_141) / (Km0586_141 * Km0782_141) / ((1 + s_0586 / Km0586_141) * (1 + s_0782 / Km0782_141) + (1 + s_0582 / Km0582_141) * (1 + s_0739 / Km0739_141) - 1)) - (cell * Vmax_196 * (ATP * s_0739 - ADP * s_0785 / Keq_196) / (KmATP_196 * Km0739_196) / ((1 + ATP / KmATP_196) * (1 + s_0739 / Km0739_196) + (1 + ADP / KmADP_196) * (1 + s_0785 / Km0785_196) - 1)) - (cell * Vmax_243 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_243) / (Km0739_243 * Km1616_243) / ((1 + s_0739 / Km0739_243) * (1 + s_1616 / Km1616_243) + (1 + s_0613 / Km0613_243) * (1 + s_1620 / Km1620_243) - 1));
    der(s_0743) = (cell * Vmax_181 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_181) / (Km0573_181 * Km0785_181) / ((1 + s_0573 / Km0573_181) * (1 + s_0785 / Km0785_181) + (1 + s_0633 / Km0633_181) * (1 + s_0743 / Km0743_181) - 1)) - (cell * Vmax_97 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_97) / (Km0645_97 * Km0743_97) / ((1 + s_0645 / Km0645_97) * (1 + s_0743 / Km0743_97) + (1 + s_0644 / Km0644_97) * (1 + s_0739 / Km0739_97) - 1));
    der(s_0745) = (cell * Vmax_96 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_96) / (Km0943_96 * Km1376_96) / ((1 + s_0943 / Km0943_96) * (1 + s_1376 / Km1376_96) + (1 + s_0633 / Km0633_96) * (1 + s_0745 / Km0745_96) - 1)) - (cell * Vmax_122 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_122) / (Km0745_122 * Km0943_122) / ((1 + s_0745 / Km0745_122) * (1 + s_0943 / Km0943_122) + (1 + s_0190 / Km0190_122) * (1 + s_0633 / Km0633_122) - 1));
    der(s_0747) = (cell * Vmax_127 * (ATP * s_0999 * s_1590 - AMP * s_0633 * s_0747 / Keq_127) / (KmATP_127 * Km0999_127 * Km1590_127) / ((1 + ATP / KmATP_127) * (1 + s_0999 / Km0999_127) * (1 + s_1590 / Km1590_127) + (1 + AMP / KmAMP_127) * (1 + s_0633 / Km0633_127) * (1 + s_0747 / Km0747_127) - 1)) - (0.1054 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0748) = (cell * Vmax_128 * (ATP * s_0991 * s_1591 - AMP * s_0633 * s_0748 / Keq_128) / (KmATP_128 * Km0991_128 * Km1591_128) / ((1 + ATP / KmATP_128) * (1 + s_0991 / Km0991_128) * (1 + s_1591 / Km1591_128) + (1 + AMP / KmAMP_128) * (1 + s_0633 / Km0633_128) * (1 + s_0748 / Km0748_128) - 1)) - (0.3018 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0750) = (cell * Vmax_153 * (s_0033 - s_0025 * s_0750 / Keq_153) / Km0033_153 / (1 + s_0033 / Km0033_153 + (1 + s_0025 / Km0025_153) * (1 + s_0750 / Km0750_153) - 1)) - (cell * Vmax_175 * (s_0750 * s_1151 - s_0033 / Keq_175) / (Km0750_175 * Km1151_175) / ((1 + s_0750 / Km0750_175) * (1 + s_1151 / Km1151_175) + 1 + s_0033 / Km0033_175 - 1));
    der(s_0757) = (cell * Vmax_137 * (ATP * s_1003 * s_1593 - AMP * s_0633 * s_0757 / Keq_137) / (KmATP_137 * Km1003_137 * Km1593_137) / ((1 + ATP / KmATP_137) * (1 + s_1003 / Km1003_137) * (1 + s_1593 / Km1593_137) + (1 + AMP / KmAMP_137) * (1 + s_0633 / Km0633_137) * (1 + s_0757 / Km0757_137) - 1)) - (0.2904 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(GAP) = (cell * (Vmax_120 * (F16bP / Kf16bp_120 - DHAP * GAP / (Kf16bp_120 * Keq_120)) / (1 + F16bP / Kf16bp_120 + DHAP / Kdhap_120 + GAP / Kgap_120 + F16bP * GAP / (Kf16bp_120 * Kigap_120) + DHAP * GAP / (Kdhap_120 * Kgap_120)))) + (cell * Vmax_266 * (s_0581 * s_1408 - GAP * s_1427 / Keq_266) / (Km0581_266 * Km1408_266) / ((1 + s_0581 / Km0581_266) * (1 + s_1408 / Km1408_266) + (1 + GAP / KmGAP_266) * (1 + s_1427 / Km1427_266) - 1)) + (cell * Vmax_267 * (s_0551 * s_0581 - F6P * GAP / Keq_267) / (Km0551_267 * Km0581_267) / ((1 + s_0551 / Km0551_267) * (1 + s_0581 / Km0581_267) + (1 + F6P / KmF6P_267) * (1 + GAP / KmGAP_267) - 1)) + (cell * k_270 * (DHAP - GAP / Keq_270)) + (cell * Vmax_271 * (s_0086 * s_1039 - GAP * s_1048 / Keq_271) / (Km0086_271 * Km1039_271) / ((1 + s_0086 / Km0086_271) * (1 + s_1039 / Km1039_271) + (1 + GAP / KmGAP_271) * (1 + s_1048 / Km1048_271) - 1)) - (cell * Vmax_129 / (Kgap_129 * Knad_129 * Kpho_129) * (GAP * NAD * PHO - BPG * NADH / Keq_129) / ((1 + PHO / Kpho_129) * (1 + GAP / Kgap_129 + BPG / Kbpg_129) * (1 + NAD / Knad_129 + NADH / Knad_129h))) - (cell * Vmax_265 * (GAP * s_1427 - s_0551 * F6P / Keq_265) / (KmGAP_265 * Km1427_265) / ((1 + GAP / KmGAP_265) * (1 + s_1427 / Km1427_265) + (1 + s_0551 / Km0551_265) * (1 + F6P / KmF6P_265) - 1));
    der(GLY) = (cell * Vmax_130 * (s_0767 - GLY * PHO / Keq_130) / Km0767_130 / (1 + s_0767 / Km0767_130 + (1 + GLY / KmGLY_130) * (1 + PHO / KmPHO_130) - 1)) - (cell * Vmax_281 * GLY / KmGLY_281 / (1 + GLY / KmGLY_281));
    der(s_0766) = 0.0;
    der(s_0767) = (cell * Vmax_131 * (DHAP * NADH - s_0767 * NAD / Keq_131) / (KmDHAP_131 * KmNAD_131H_131) / ((1 + DHAP / KmDHAP_131) * (1 + NADH / KmNAD_131H_131) + (1 + s_0767 / Km0767_131) * (1 + NAD / KmNAD_131) - 1)) - (cell * Vmax_130 * (s_0767 - GLY * PHO / Keq_130) / Km0767_130 / (1 + s_0767 / Km0767_130 + (1 + GLY / KmGLY_130) * (1 + PHO / KmPHO_130) - 1)) - (cell * Vmax_132 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_132) / (Km0380_132 * Km0767_132) / ((1 + s_0380 / Km0380_132) * (1 + s_0767 / Km0767_132) + (1 + s_0082 / Km0082_132) * (1 + s_0529 / Km0529_132) - 1));
    der(s_0773) = (cell * Vmax_136 * (s_1543 - s_0773 * s_1538 / Keq_136) / Km1543_136 / (1 + s_1543 / Km1543_136 + (1 + s_0773 / Km0773_136) * (1 + s_1538 / Km1538_136) - 1)) - (0.5185 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0779) = (cell * Vmax_165 * (s_0940 - s_0779 * s_1458 / Keq_165) / Km0940_165 / (1 + s_0940 / Km0940_165 + (1 + s_0779 / Km0779_165) * (1 + s_1458 / Km1458_165) - 1)) - (cell * Vmax_42 * (s_0779 * s_0955 - s_1003 * PYR / Keq_42) / (Km0779_42 * Km0955_42) / ((1 + s_0779 / Km0779_42) * (1 + s_0955 / Km0955_42) + (1 + s_1003 / Km1003_42) * (1 + PYR / KmPYR_42) - 1));
    der(s_0782) = (cell * Vmax_138 * (ATP * s_0999 * s_1565 - AMP * s_0633 * s_0782 * s_0991 / Keq_138) / (KmATP_138 * Km0999_138 * Km1565_138) / ((1 + ATP / KmATP_138) * (1 + s_0999 / Km0999_138) * (1 + s_1565 / Km1565_138) + (1 + AMP / KmAMP_138) * (1 + s_0633 / Km0633_138) * (1 + s_0782 / Km0782_138) * (1 + s_0991 / Km0991_138) - 1)) - (cell * Vmax_140 * (ATP * s_0782 - ADP * s_0739 / Keq_140) / (KmATP_140 * Km0782_140) / ((1 + ATP / KmATP_140) * (1 + s_0782 / Km0782_140) + (1 + ADP / KmADP_140) * (1 + s_0739 / Km0739_140) - 1)) - (cell * Vmax_141 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_141) / (Km0586_141 * Km0782_141) / ((1 + s_0586 / Km0586_141) * (1 + s_0782 / Km0782_141) + (1 + s_0582 / Km0582_141) * (1 + s_0739 / Km0739_141) - 1)) - (0.046 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0785) = (cell * Vmax_196 * (ATP * s_0739 - ADP * s_0785 / Keq_196) / (KmATP_196 * Km0739_196) / ((1 + ATP / KmATP_196) * (1 + s_0739 / Km0739_196) + (1 + ADP / KmADP_196) * (1 + s_0785 / Km0785_196) - 1)) - (cell * Vmax_37 * (AMP * s_0785 - ADP * s_0739 / Keq_37) / (KmAMP_37 * Km0785_37) / ((1 + AMP / KmAMP_37) * (1 + s_0785 / Km0785_37) + (1 + ADP / KmADP_37) * (1 + s_0739 / Km0739_37) - 1)) - (cell * Vmax_40 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * PHO / Keq_40) / (Km0785_40 * Km0849_40 * Km0973_40) / ((1 + s_0785 / Km0785_40) * (1 + s_0849 / Km0849_40) * (1 + s_0973 / Km0973_40) + (1 + s_0393 / Km0393_40) * (1 + s_0739 / Km0739_40) * (1 + PHO / KmPHO_40) - 1)) - (cell * Vmax_139 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_139) / Km0785_139 / (1 + s_0785 / Km0785_139 + (1 + s_0141 / Km0141_139) * (1 + s_0633 / Km0633_139) * (1 + s_0722 / Km0722_139) - 1)) - (cell * Vmax_181 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_181) / (Km0573_181 * Km0785_181) / ((1 + s_0573 / Km0573_181) * (1 + s_0785 / Km0785_181) + (1 + s_0633 / Km0633_181) * (1 + s_0743 / Km0743_181) - 1));
    der(s_0816) = (cell * Vmax_111 * (ATP * s_0505 * s_0529 - AMP * s_0633 * s_0816 / Keq_111) / (KmATP_111 * Km0505_111 * Km0529_111) / ((1 + ATP / KmATP_111) * (1 + s_0505 / Km0505_111) * (1 + s_0529 / Km0529_111) + (1 + AMP / KmAMP_111) * (1 + s_0633 / Km0633_111) * (1 + s_0816 / Km0816_111) - 1)) - (cell * Vmax_76 * (s_0816 * s_1445 - s_0478 * s_0529 / Keq_76) / (Km0816_76 * Km1445_76) / ((1 + s_0816 / Km0816_76) * (1 + s_1445 / Km1445_76) + (1 + s_0478 / Km0478_76) * (1 + s_0529 / Km0529_76) - 1));
    der(s_0832) = (cell * Vmax_146 * (ATP * s_1006 * s_1594 - AMP * s_0633 * s_0832 / Keq_146) / (KmATP_146 * Km1006_146 * Km1594_146) / ((1 + ATP / KmATP_146) * (1 + s_1006 / Km1006_146) * (1 + s_1594 / Km1594_146) + (1 + AMP / KmAMP_146) * (1 + s_0633 / Km0633_146) * (1 + s_0832 / Km0832_146) - 1)) - (0.0663 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0835) = (cell * Vmax_148 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_148) / (Km0180_148 * Km0373_148) / ((1 + s_0180 / Km0180_148) * (1 + s_0373 / Km0373_148) + (1 + s_0529 / Km0529_148) * (1 + s_0835 / Km0835_148) - 1)) - (cell * Vmax_14 * (s_0835 - s_0454 / Keq_14) / Km0835_14 / (1 + s_0835 / Km0835_14 + 1 + s_0454 / Km0454_14 - 1));
    der(s_0836) = (cell * Vmax_147 * (s_0454 - s_0836 / Keq_147) / Km0454_147 / (1 + s_0454 / Km0454_147 + 1 + s_0836 / Km0836_147 - 1)) - (cell * Vmax_149 * (s_0836 * NAD - s_0176 * NADH * CO2 / Keq_149) / (Km0836_149 * KmNAD_149) / ((1 + s_0836 / Km0836_149) * (1 + NAD / KmNAD_149) + (1 + s_0176 / Km0176_149) * (1 + NADH / KmNAD_149H) * (1 + CO2 / KmCO2_149) - 1));
    der(s_0841) = (cell * Vmax_259 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_259) / (pow(Km1212_259, 3) * Km1469_259) / (pow(1 + s_1212 / Km1212_259, 3) * (1 + s_1469 / Km1469_259) + (1 + s_0841 / Km0841_259) * pow(1 + s_1207 / Km1207_259, 3) - 1)) - (cell * Vmax_198 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_198) / (Km0841_198 * Km1233_198) / ((1 + s_0841 / Km0841_198) * (1 + s_1233 / Km1233_198) + (1 + s_0362 / Km0362_198) * (1 + s_1012 / Km1012_198) - 1));
    der(s_0847) = (cell * Vmax_167 * (ATP * s_1016 * s_1596 - AMP * s_0633 * s_0847 / Keq_167) / (KmATP_167 * Km1016_167 * Km1596_167) / ((1 + ATP / KmATP_167) * (1 + s_1016 / Km1016_167) * (1 + s_1596 / Km1596_167) + (1 + AMP / KmAMP_167) * (1 + s_0633 / Km0633_167) * (1 + s_0847 / Km0847_167) - 1)) - (0.1927 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0849) = (cell * Vmax_161 * (s_1365 - s_0849 / Keq_161) / Km1365_161 / (1 + s_1365 / Km1365_161 + 1 + s_0849 / Km0849_161 - 1)) - (cell * Vmax_40 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * PHO / Keq_40) / (Km0785_40 * Km0849_40 * Km0973_40) / ((1 + s_0785 / Km0785_40) * (1 + s_0849 / Km0849_40) * (1 + s_0973 / Km0973_40) + (1 + s_0393 / Km0393_40) * (1 + s_0739 / Km0739_40) * (1 + PHO / KmPHO_40) - 1)) - (cell * Vmax_158 * (s_0849 * NAD - NADH * s_1565 / Keq_158) / (Km0849_158 * KmNAD_158) / ((1 + s_0849 / Km0849_158) * (1 + NAD / KmNAD_158) + (1 + NADH / KmNAD_158H) * (1 + s_1565 / Km1565_158) - 1));
    der(s_0897) = (cell * Vmax_162 * (s_0089 * s_0478 - s_0619 * s_0897 / Keq_162) / (Km0089_162 * Km0478_162) / ((1 + s_0089 / Km0089_162) * (1 + s_0478 / Km0478_162) + (1 + s_0619 / Km0619_162) * (1 + s_0897 / Km0897_162) - 1)) - (0.00051708 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_0940) = (cell * Vmax_79 * (s_0516 - s_0940 / Keq_79) / Km0516_79 / (1 + s_0516 / Km0516_79 + 1 + s_0940 / Km0940_79 - 1)) - (cell * Vmax_163 * (s_0940 * NAD - s_0180 * CO2 * NADH / Keq_163) / (Km0940_163 * KmNAD_163) / ((1 + s_0940 / Km0940_163) * (1 + NAD / KmNAD_163) + (1 + s_0180 / Km0180_163) * (1 + CO2 / KmCO2_163) * (1 + NADH / KmNAD_163H) - 1)) - (cell * Vmax_164 * (s_0940 * s_1207 - s_0180 * CO2 * s_1212 / Keq_164) / (Km0940_164 * Km1207_164) / ((1 + s_0940 / Km0940_164) * (1 + s_1207 / Km1207_164) + (1 + s_0180 / Km0180_164) * (1 + CO2 / KmCO2_164) * (1 + s_1212 / Km1212_164) - 1)) - (cell * Vmax_165 * (s_0940 - s_0779 * s_1458 / Keq_165) / Km0940_165 / (1 + s_0940 / Km0940_165 + (1 + s_0779 / Km0779_165) * (1 + s_1458 / Km1458_165) - 1));
    der(s_0943) = (cell * Vmax_191 * (s_0018 * ATP - ADP * CO2 * s_0943 * PHO / Keq_191) / (Km0018_191 * KmATP_191) / ((1 + s_0018 / Km0018_191) * (1 + ATP / KmATP_191) + (1 + ADP / KmADP_191) * (1 + CO2 / KmCO2_191) * (1 + s_0943 / Km0943_191) * (1 + PHO / KmPHO_191) - 1)) - (cell * Vmax_96 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_96) / (Km0943_96 * Km1376_96) / ((1 + s_0943 / Km0943_96) * (1 + s_1376 / Km1376_96) + (1 + s_0633 / Km0633_96) * (1 + s_0745 / Km0745_96) - 1)) - (cell * Vmax_122 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_122) / (Km0745_122 * Km0943_122) / ((1 + s_0745 / Km0745_122) * (1 + s_0943 / Km0943_122) + (1 + s_0190 / Km0190_122) * (1 + s_0633 / Km0633_122) - 1)) - (cell * Vmax_168 * (s_0943 - s_1376 / Keq_168) / Km0943_168 / (1 + s_0943 / Km0943_168 + 1 + s_1376 / Km1376_168 - 1));
    der(s_0951) = (cell * Vmax_230 * (s_1377 - CO2 * s_0951 / Keq_230) / Km1377_230 / (1 + s_1377 / Km1377_230 + (1 + CO2 / KmCO2_230) * (1 + s_0951 / Km0951_230) - 1)) - (cell * Vmax_203 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_203) / (Km0951_203 * Km0991_203) / ((1 + s_0951 / Km0951_203) * (1 + s_0991 / Km0991_203) + (1 + s_0180 / Km0180_203) * (1 + s_1032 / Km1032_203) - 1));
    der(s_0953) = (cell * Vmax_10 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_10) / (Km0176_10 * Km0991_10) / ((1 + s_0176 / Km0176_10) * (1 + s_0991 / Km0991_10) + (1 + s_0180 / Km0180_10) * (1 + s_0953 / Km0953_10) - 1)) - (cell * Vmax_171 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_171) / (Km0953_171 * Km1212_171) / ((1 + s_0953 / Km0953_171) * (1 + s_1212 / Km1212_171) + (1 + s_0959 / Km0959_171) * (1 + s_1207 / Km1207_171) - 1));
    der(s_0955) = (cell * Vmax_170 * (s_0991 * PYR - s_0180 * s_0955 / Keq_170) / (Km0991_170 * KmPYR_170) / ((1 + s_0991 / Km0991_170) * (1 + PYR / KmPYR_170) + (1 + s_0180 / Km0180_170) * (1 + s_0955 / Km0955_170) - 1)) - (cell * Vmax_42 * (s_0779 * s_0955 - s_1003 * PYR / Keq_42) / (Km0779_42 * Km0955_42) / ((1 + s_0779 / Km0779_42) * (1 + s_0955 / Km0955_42) + (1 + s_1003 / Km1003_42) * (1 + PYR / KmPYR_42) - 1)) - (cell * Vmax_43 * (ATP * s_0955 * s_1582 - s_0404 * AMP * s_0633 / Keq_43) / (KmATP_43 * Km0955_43 * Km1582_43) / ((1 + ATP / KmATP_43) * (1 + s_0955 / Km0955_43) * (1 + s_1582 / Km1582_43) + (1 + s_0404 / Km0404_43) * (1 + AMP / KmAMP_43) * (1 + s_0633 / Km0633_43) - 1));
    der(s_0959) = (cell * Vmax_171 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_171) / (Km0953_171 * Km1212_171) / ((1 + s_0953 / Km0953_171) * (1 + s_1212 / Km1212_171) + (1 + s_0959 / Km0959_171) * (1 + s_1207 / Km1207_171) - 1)) - (cell * Vmax_248 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_248) / (Km0959_248 * Km0991_248 * Km1212_248) / ((1 + s_0959 / Km0959_248) * (1 + s_0991 / Km0991_248) * (1 + s_1212 / Km1212_248) + (1 + s_1038 / Km1038_248) * (1 + s_1207 / Km1207_248) - 1));
    der(s_0965) = (cell * Vmax_50 * (s_0015 - s_0725 * s_0965 / Keq_50) / Km0015_50 / (1 + s_0015 / Km0015_50 + (1 + s_0725 / Km0725_50) * (1 + s_0965 / Km0965_50) - 1)) - (cell * Vmax_52 * (ATP * s_0965 * s_1583 - AMP * s_0428 * s_0633 / Keq_52) / (KmATP_52 * Km0965_52 * Km1583_52) / ((1 + ATP / KmATP_52) * (1 + s_0965 / Km0965_52) * (1 + s_1583 / Km1583_52) + (1 + AMP / KmAMP_52) * (1 + s_0428 / Km0428_52) * (1 + s_0633 / Km0633_52) - 1));
    der(s_0969) = (cell * Vmax_53 * (ATP * s_0973 * s_0999 - AMP * s_0633 * s_0969 * s_0991 / Keq_53) / (KmATP_53 * Km0973_53 * Km0999_53) / ((1 + ATP / KmATP_53) * (1 + s_0973 / Km0973_53) * (1 + s_0999 / Km0999_53) + (1 + AMP / KmAMP_53) * (1 + s_0633 / Km0633_53) * (1 + s_0969 / Km0969_53) * (1 + s_0991 / Km0991_53) - 1)) - (cell * Vmax_54 * (ATP * s_0969 * s_1585 - AMP * s_0430 * s_0633 / Keq_54) / (KmATP_54 * Km0969_54 * Km1585_54) / ((1 + ATP / KmATP_54) * (1 + s_0969 / Km0969_54) * (1 + s_1585 / Km1585_54) + (1 + AMP / KmAMP_54) * (1 + s_0430 / Km0430_54) * (1 + s_0633 / Km0633_54) - 1));
    der(s_0973) = (cell * Vmax_57 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_57) / (Km0991_57 * Km1271_57) / ((1 + s_0991 / Km0991_57) * (1 + s_1271 / Km1271_57) + (1 + s_0180 / Km0180_57) * (1 + s_0973 / Km0973_57) - 1)) - (cell * Vmax_40 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * PHO / Keq_40) / (Km0785_40 * Km0849_40 * Km0973_40) / ((1 + s_0785 / Km0785_40) * (1 + s_0849 / Km0849_40) * (1 + s_0973 / Km0973_40) + (1 + s_0393 / Km0393_40) * (1 + s_0739 / Km0739_40) * (1 + PHO / KmPHO_40) - 1)) - (cell * Vmax_51 * (ATP * s_0973 * s_0979 - s_0015 * AMP * s_0633 / Keq_51) / (KmATP_51 * Km0973_51 * Km0979_51) / ((1 + ATP / KmATP_51) * (1 + s_0973 / Km0973_51) * (1 + s_0979 / Km0979_51) + (1 + s_0015 / Km0015_51) * (1 + AMP / KmAMP_51) * (1 + s_0633 / Km0633_51) - 1)) - (cell * Vmax_53 * (ATP * s_0973 * s_0999 - AMP * s_0633 * s_0969 * s_0991 / Keq_53) / (KmATP_53 * Km0973_53 * Km0999_53) / ((1 + ATP / KmATP_53) * (1 + s_0973 / Km0973_53) * (1 + s_0999 / Km0999_53) + (1 + AMP / KmAMP_53) * (1 + s_0633 / Km0633_53) * (1 + s_0969 / Km0969_53) * (1 + s_0991 / Km0991_53) - 1)) - (cell * Vmax_55 * (s_0455 * s_0973 - s_1194 * PHO / Keq_55) / (Km0455_55 * Km0973_55) / ((1 + s_0455 / Km0455_55) * (1 + s_0973 / Km0973_55) + (1 + s_1194 / Km1194_55) * (1 + PHO / KmPHO_55) - 1)) - (cell * Vmax_56 * (ATP * s_0973 - s_0295 * ADP / Keq_56) / (KmATP_56 * Km0973_56) / ((1 + ATP / KmATP_56) * (1 + s_0973 / Km0973_56) + (1 + s_0295 / Km0295_56) * (1 + ADP / KmADP_56) - 1)) - (cell * Vmax_59 * (ATP * s_0973 * s_1587 - AMP * s_0432 * s_0633 / Keq_59) / (KmATP_59 * Km0973_59 * Km1587_59) / ((1 + ATP / KmATP_59) * (1 + s_0973 / Km0973_59) * (1 + s_1587 / Km1587_59) + (1 + AMP / KmAMP_59) * (1 + s_0432 / Km0432_59) * (1 + s_0633 / Km0633_59) - 1)) - (cell * Vmax_221 * (ATP * s_0973 * s_1364 - s_0299 * ADP * PHO / Keq_221) / (KmATP_221 * Km0973_221 * Km1364_221) / ((1 + ATP / KmATP_221) * (1 + s_0973 / Km0973_221) * (1 + s_1364 / Km1364_221) + (1 + s_0299 / Km0299_221) * (1 + ADP / KmADP_221) * (1 + PHO / KmPHO_221) - 1));
    der(s_0978) = (cell * Vmax_58 * (s_0295 * s_1212 - s_0978 * s_1207 * PHO / Keq_58) / (Km0295_58 * Km1212_58) / ((1 + s_0295 / Km0295_58) * (1 + s_1212 / Km1212_58) + (1 + s_0978 / Km0978_58) * (1 + s_1207 / Km1207_58) * (1 + PHO / KmPHO_58) - 1)) - (cell * Vmax_150 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_150) / (Km0978_150 * Km1212_150) / ((1 + s_0978 / Km0978_150) * (1 + s_1212 / Km1212_150) + (1 + s_1014 / Km1014_150) * (1 + s_1207 / Km1207_150) - 1));
    der(s_0979) = (cell * Vmax_199 * (s_0455 * s_1266 - s_0979 * PHO / Keq_199) / (Km0455_199 * Km1266_199) / ((1 + s_0455 / Km0455_199) * (1 + s_1266 / Km1266_199) + (1 + s_0979 / Km0979_199) * (1 + PHO / KmPHO_199) - 1)) - (cell * Vmax_51 * (ATP * s_0973 * s_0979 - s_0015 * AMP * s_0633 / Keq_51) / (KmATP_51 * Km0973_51 * Km0979_51) / ((1 + ATP / KmATP_51) * (1 + s_0973 / Km0973_51) * (1 + s_0979 / Km0979_51) + (1 + s_0015 / Km0015_51) * (1 + AMP / KmAMP_51) * (1 + s_0633 / Km0633_51) - 1));
    der(s_0980) = (cell * Vmax_83 * (s_1012 * s_1039 - s_0980 / Keq_83) / (Km1012_83 * Km1039_83) / ((1 + s_1012 / Km1012_83) * (1 + s_1039 / Km1039_83) + 1 + s_0980 / Km0980_83 - 1)) + (cell * Vmax_85 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_85) / (Km0981_85 * Km1233_85) / ((1 + s_0981 / Km0981_85) * (1 + s_1233 / Km1233_85) + (1 + s_0362 / Km0362_85) * (1 + s_0980 / Km0980_85) - 1)) - (cell * Vmax_84 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_84) / Km0980_84 / (1 + s_0980 / Km0980_84 + (1 + s_0178 / Km0178_84) * (1 + s_0419 / Km0419_84) * (1 + s_0981 / Km0981_84) - 1));
    der(s_0981) = (cell * Vmax_84 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_84) / Km0980_84 / (1 + s_0980 / Km0980_84 + (1 + s_0178 / Km0178_84) * (1 + s_0419 / Km0419_84) * (1 + s_0981 / Km0981_84) - 1)) - (cell * Vmax_85 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_85) / (Km0981_85 * Km1233_85) / ((1 + s_0981 / Km0981_85) * (1 + s_1233 / Km1233_85) + (1 + s_0362 / Km0362_85) * (1 + s_0980 / Km0980_85) - 1)) - (cell * Vmax_86 * (ATP * s_0981 * s_1589 - AMP * s_0542 * s_0633 / Keq_86) / (KmATP_86 * Km0981_86 * Km1589_86) / ((1 + ATP / KmATP_86) * (1 + s_0981 / Km0981_86) * (1 + s_1589 / Km1589_86) + (1 + AMP / KmAMP_86) * (1 + s_0542 / Km0542_86) * (1 + s_0633 / Km0633_86) - 1));
    der(s_0991) = (cell * Vmax_24 * (s_0301 * ATP * s_0999 - s_0302 * ADP * s_0991 * PHO / Keq_24) / (Km0301_24 * KmATP_24 * Km0999_24) / ((1 + s_0301 / Km0301_24) * (1 + ATP / KmATP_24) * (1 + s_0999 / Km0999_24) + (1 + s_0302 / Km0302_24) * (1 + ADP / KmADP_24) * (1 + s_0991 / Km0991_24) * (1 + PHO / KmPHO_24) - 1)) + (cell * Vmax_49 * (s_0515 * s_0999 - s_0427 * s_0991 * PYR / Keq_49) / (Km0515_49 * Km0999_49) / ((1 + s_0515 / Km0515_49) * (1 + s_0999 / Km0999_49) + (1 + s_0427 / Km0427_49) * (1 + s_0991 / Km0991_49) * (1 + PYR / KmPYR_49) - 1)) + (cell * Vmax_53 * (ATP * s_0973 * s_0999 - AMP * s_0633 * s_0969 * s_0991 / Keq_53) / (KmATP_53 * Km0973_53 * Km0999_53) / ((1 + ATP / KmATP_53) * (1 + s_0973 / Km0973_53) * (1 + s_0999 / Km0999_53) + (1 + AMP / KmAMP_53) * (1 + s_0633 / Km0633_53) * (1 + s_0969 / Km0969_53) * (1 + s_0991 / Km0991_53) - 1)) + (cell * Vmax_74 * (pow(ATP, 2) * s_0445 * s_0999 - pow(ADP, 2) * s_0455 * s_0991 * PHO / Keq_74) / (pow(KmATP_74, 2) * Km0445_74 * Km0999_74) / (pow(1 + ATP / KmATP_74, 2) * (1 + s_0445 / Km0445_74) * (1 + s_0999 / Km0999_74) + pow(1 + ADP / KmADP_74, 2) * (1 + s_0455 / Km0455_74) * (1 + s_0991 / Km0991_74) * (1 + PHO / KmPHO_74) - 1)) + (cell * Vmax_125 * (s_0180 * s_0419 * NADH - s_0991 * NAD / Keq_125) / (Km0180_125 * Km0419_125 * KmNAD_125H_125) / ((1 + s_0180 / Km0180_125) * (1 + s_0419 / Km0419_125) * (1 + NADH / KmNAD_125H_125) + (1 + s_0991 / Km0991_125) * (1 + NAD / KmNAD_125) - 1)) + (cell * Vmax_138 * (ATP * s_0999 * s_1565 - AMP * s_0633 * s_0782 * s_0991 / Keq_138) / (KmATP_138 * Km0999_138 * Km1565_138) / ((1 + ATP / KmATP_138) * (1 + s_0999 / Km0999_138) * (1 + s_1565 / Km1565_138) + (1 + AMP / KmAMP_138) * (1 + s_0633 / Km0633_138) * (1 + s_0782 / Km0782_138) * (1 + s_0991 / Km0991_138) - 1)) + (cell * Vmax_156 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_156) / (Km0312_156 * Km0999_156) / ((1 + s_0312 / Km0312_156) * (1 + s_0999 / Km0999_156) + (1 + s_0403 / Km0403_156) * (1 + s_0550 / Km0550_156) * (1 + s_0991 / Km0991_156) - 1)) + (cell * Vmax_228 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_228) / (Km0999_228 * Km1386_228) / ((1 + s_0999 / Km0999_228) * (1 + s_1386 / Km1386_228) + (1 + s_0327 / Km0327_228) * (1 + s_0633 / Km0633_228) * (1 + s_0991 / Km0991_228) - 1)) - (cell * Vmax_6 * (s_0991 * NADH - s_0118 * NAD / Keq_6) / (Km0991_6 * KmNAD_6H_6) / ((1 + s_0991 / Km0991_6) * (1 + NADH / KmNAD_6H_6) + (1 + s_0118 / Km0118_6) * (1 + NAD / KmNAD_6) - 1)) - (cell * Vmax_10 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_10) / (Km0176_10 * Km0991_10) / ((1 + s_0176 / Km0176_10) * (1 + s_0991 / Km0991_10) + (1 + s_0180 / Km0180_10) * (1 + s_0953 / Km0953_10) - 1)) - (cell * Vmax_33 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_33) / (Km0145_33 * Km0991_33) / ((1 + s_0145 / Km0145_33) * (1 + s_0991 / Km0991_33) + (1 + s_0180 / Km0180_33) * (1 + s_1182 / Km1182_33) - 1)) - (cell * Vmax_57 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_57) / (Km0991_57 * Km1271_57) / ((1 + s_0991 / Km0991_57) * (1 + s_1271 / Km1271_57) + (1 + s_0180 / Km0180_57) * (1 + s_0973 / Km0973_57) - 1)) - (cell * Vmax_126 * (s_0419 * ATP * s_0991 - ADP * s_0999 * PHO / Keq_126) / (Km0419_126 * KmATP_126 * Km0991_126) / ((1 + s_0419 / Km0419_126) * (1 + ATP / KmATP_126) * (1 + s_0991 / Km0991_126) + (1 + ADP / KmADP_126) * (1 + s_0999 / Km0999_126) * (1 + PHO / KmPHO_126) - 1)) - (cell * Vmax_128 * (ATP * s_0991 * s_1591 - AMP * s_0633 * s_0748 / Keq_128) / (KmATP_128 * Km0991_128 * Km1591_128) / ((1 + ATP / KmATP_128) * (1 + s_0991 / Km0991_128) * (1 + s_1591 / Km1591_128) + (1 + AMP / KmAMP_128) * (1 + s_0633 / Km0633_128) * (1 + s_0748 / Km0748_128) - 1)) - (cell * Vmax_145 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_145) / (Km0207_145 * Km0991_145) / ((1 + s_0207 / Km0207_145) * (1 + s_0991 / Km0991_145) + (1 + s_0180 / Km0180_145) * (1 + s_1011 / Km1011_145) - 1)) - (cell * Vmax_166 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_166) / (Km0056_166 * Km0991_166) / ((1 + s_0056 / Km0056_166) * (1 + s_0991 / Km0991_166) + (1 + s_0180 / Km0180_166) * (1 + s_1016 / Km1016_166) - 1)) - (cell * Vmax_170 * (s_0991 * PYR - s_0180 * s_0955 / Keq_170) / (Km0991_170 * KmPYR_170) / ((1 + s_0991 / Km0991_170) * (1 + PYR / KmPYR_170) + (1 + s_0180 / Km0180_170) * (1 + s_0955 / Km0955_170) - 1)) - (cell * Vmax_177 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_177) / (Km0291_177 * Km0991_177) / ((1 + s_0291 / Km0291_177) * (1 + s_0991 / Km0991_177) + (1 + s_0180 / Km0180_177) * (1 + s_1021 / Km1021_177) - 1)) - (cell * Vmax_200 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_200) / (Km0991_200 * Km1182_200) / ((1 + s_0991 / Km0991_200) * (1 + s_1182 / Km1182_200) + (1 + s_1192 / Km1192_200) * (1 + s_1266 / Km1266_200) - 1)) - (cell * Vmax_203 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_203) / (Km0951_203 * Km0991_203) / ((1 + s_0951 / Km0951_203) * (1 + s_0991 / Km0991_203) + (1 + s_0180 / Km0180_203) * (1 + s_1032 / Km1032_203) - 1)) - (cell * Vmax_248 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_248) / (Km0959_248 * Km0991_248 * Km1212_248) / ((1 + s_0959 / Km0959_248) * (1 + s_0991 / Km0991_248) * (1 + s_1212 / Km1212_248) + (1 + s_1038 / Km1038_248) * (1 + s_1207 / Km1207_248) - 1)) - (cell * Vmax_273 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_273) / (Km0204_273 * Km0991_273) / ((1 + s_0204 / Km0204_273) * (1 + s_0991 / Km0991_273) + (1 + s_0180 / Km0180_273) * (1 + s_1051 / Km1051_273) - 1)) - (cell * Vmax_277 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_277) / (Km0232_277 * Km0991_277) / ((1 + s_0232 / Km0232_277) * (1 + s_0991 / Km0991_277) + (1 + s_0180 / Km0180_277) * (1 + s_1056 / Km1056_277) - 1));
    der(s_0999) = (cell * Vmax_126 * (s_0419 * ATP * s_0991 - ADP * s_0999 * PHO / Keq_126) / (Km0419_126 * KmATP_126 * Km0991_126) / ((1 + s_0419 / Km0419_126) * (1 + ATP / KmATP_126) * (1 + s_0991 / Km0991_126) + (1 + ADP / KmADP_126) * (1 + s_0999 / Km0999_126) * (1 + PHO / KmPHO_126) - 1)) - (cell * Vmax_24 * (s_0301 * ATP * s_0999 - s_0302 * ADP * s_0991 * PHO / Keq_24) / (Km0301_24 * KmATP_24 * Km0999_24) / ((1 + s_0301 / Km0301_24) * (1 + ATP / KmATP_24) * (1 + s_0999 / Km0999_24) + (1 + s_0302 / Km0302_24) * (1 + ADP / KmADP_24) * (1 + s_0991 / Km0991_24) * (1 + PHO / KmPHO_24) - 1)) - (cell * Vmax_49 * (s_0515 * s_0999 - s_0427 * s_0991 * PYR / Keq_49) / (Km0515_49 * Km0999_49) / ((1 + s_0515 / Km0515_49) * (1 + s_0999 / Km0999_49) + (1 + s_0427 / Km0427_49) * (1 + s_0991 / Km0991_49) * (1 + PYR / KmPYR_49) - 1)) - (cell * Vmax_53 * (ATP * s_0973 * s_0999 - AMP * s_0633 * s_0969 * s_0991 / Keq_53) / (KmATP_53 * Km0973_53 * Km0999_53) / ((1 + ATP / KmATP_53) * (1 + s_0973 / Km0973_53) * (1 + s_0999 / Km0999_53) + (1 + AMP / KmAMP_53) * (1 + s_0633 / Km0633_53) * (1 + s_0969 / Km0969_53) * (1 + s_0991 / Km0991_53) - 1)) - (cell * Vmax_74 * (pow(ATP, 2) * s_0445 * s_0999 - pow(ADP, 2) * s_0455 * s_0991 * PHO / Keq_74) / (pow(KmATP_74, 2) * Km0445_74 * Km0999_74) / (pow(1 + ATP / KmATP_74, 2) * (1 + s_0445 / Km0445_74) * (1 + s_0999 / Km0999_74) + pow(1 + ADP / KmADP_74, 2) * (1 + s_0455 / Km0455_74) * (1 + s_0991 / Km0991_74) * (1 + PHO / KmPHO_74) - 1)) - (cell * Vmax_127 * (ATP * s_0999 * s_1590 - AMP * s_0633 * s_0747 / Keq_127) / (KmATP_127 * Km0999_127 * Km1590_127) / ((1 + ATP / KmATP_127) * (1 + s_0999 / Km0999_127) * (1 + s_1590 / Km1590_127) + (1 + AMP / KmAMP_127) * (1 + s_0633 / Km0633_127) * (1 + s_0747 / Km0747_127) - 1)) - (cell * Vmax_138 * (ATP * s_0999 * s_1565 - AMP * s_0633 * s_0782 * s_0991 / Keq_138) / (KmATP_138 * Km0999_138 * Km1565_138) / ((1 + ATP / KmATP_138) * (1 + s_0999 / Km0999_138) * (1 + s_1565 / Km1565_138) + (1 + AMP / KmAMP_138) * (1 + s_0633 / Km0633_138) * (1 + s_0782 / Km0782_138) * (1 + s_0991 / Km0991_138) - 1)) - (cell * Vmax_156 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_156) / (Km0312_156 * Km0999_156) / ((1 + s_0312 / Km0312_156) * (1 + s_0999 / Km0999_156) + (1 + s_0403 / Km0403_156) * (1 + s_0550 / Km0550_156) * (1 + s_0991 / Km0991_156) - 1)) - (cell * Vmax_228 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_228) / (Km0999_228 * Km1386_228) / ((1 + s_0999 / Km0999_228) * (1 + s_1386 / Km1386_228) + (1 + s_0327 / Km0327_228) * (1 + s_0633 / Km0633_228) * (1 + s_0991 / Km0991_228) - 1));
    der(s_1003) = (cell * Vmax_42 * (s_0779 * s_0955 - s_1003 * PYR / Keq_42) / (Km0779_42 * Km0955_42) / ((1 + s_0779 / Km0779_42) * (1 + s_0955 / Km0955_42) + (1 + s_1003 / Km1003_42) * (1 + PYR / KmPYR_42) - 1)) + (cell * Vmax_261 * (s_1045 - AcAld * s_1003 / Keq_261) / Km1045_261 / (1 + s_1045 / Km1045_261 + (1 + AcAld / KmAcAld_261) * (1 + s_1003 / Km1003_261) - 1)) - (cell * Vmax_134 * (s_1003 * NAD * s_1487 - s_0306 * s_0419 * CO2 * NADH / Keq_134) / (Km1003_134 * KmNAD_134 * Km1487_134) / ((1 + s_1003 / Km1003_134) * (1 + NAD / KmNAD_134) * (1 + s_1487 / Km1487_134) + (1 + s_0306 / Km0306_134) * (1 + s_0419 / Km0419_134) * (1 + CO2 / KmCO2_134) * (1 + NADH / KmNAD_134H) - 1)) - (cell * Vmax_135 * (s_0306 * s_1003 - s_1039 * s_1487 / Keq_135) / (Km0306_135 * Km1003_135) / ((1 + s_0306 / Km0306_135) * (1 + s_1003 / Km1003_135) + (1 + s_1039 / Km1039_135) * (1 + s_1487 / Km1487_135) - 1)) - (cell * Vmax_137 * (ATP * s_1003 * s_1593 - AMP * s_0633 * s_0757 / Keq_137) / (KmATP_137 * Km1003_137 * Km1593_137) / ((1 + ATP / KmATP_137) * (1 + s_1003 / Km1003_137) * (1 + s_1593 / Km1593_137) + (1 + AMP / KmAMP_137) * (1 + s_0633 / Km0633_137) * (1 + s_0757 / Km0757_137) - 1)) - (cell * Vmax_227 * (s_0327 * ATP * s_1003 - s_0325 * ADP * PHO / Keq_227) / (Km0327_227 * KmATP_227 * Km1003_227) / ((1 + s_0327 / Km0327_227) * (1 + ATP / KmATP_227) * (1 + s_1003 / Km1003_227) + (1 + s_0325 / Km0325_227) * (1 + ADP / KmADP_227) * (1 + PHO / KmPHO_227) - 1));
    der(s_1006) = (cell * Vmax_143 * (s_1010 * pow(NAD, 2) - s_1006 * pow(NADH, 2) / Keq_143) / (Km1010_143 * pow(KmNAD_143, 2)) / ((1 + s_1010 / Km1010_143) * pow(1 + NAD / KmNAD_143, 2) + (1 + s_1006 / Km1006_143) * pow(1 + NADH / KmNAD_143H, 2) - 1)) - (cell * Vmax_146 * (ATP * s_1006 * s_1594 - AMP * s_0633 * s_0832 / Keq_146) / (KmATP_146 * Km1006_146 * Km1594_146) / ((1 + ATP / KmATP_146) * (1 + s_1006 / Km1006_146) * (1 + s_1594 / Km1594_146) + (1 + AMP / KmAMP_146) * (1 + s_0633 / Km0633_146) * (1 + s_0832 / Km0832_146) - 1));
    der(s_1010) = (cell * Vmax_144 * (s_1011 - s_1010 * PHO / Keq_144) / Km1011_144 / (1 + s_1011 / Km1011_144 + (1 + s_1010 / Km1010_144) * (1 + PHO / KmPHO_144) - 1)) - (cell * Vmax_143 * (s_1010 * pow(NAD, 2) - s_1006 * pow(NADH, 2) / Keq_143) / (Km1010_143 * pow(KmNAD_143, 2)) / ((1 + s_1010 / Km1010_143) * pow(1 + NAD / KmNAD_143, 2) + (1 + s_1006 / Km1006_143) * pow(1 + NADH / KmNAD_143H, 2) - 1));
    der(s_1011) = (cell * Vmax_145 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_145) / (Km0207_145 * Km0991_145) / ((1 + s_0207 / Km0207_145) * (1 + s_0991 / Km0991_145) + (1 + s_0180 / Km0180_145) * (1 + s_1011 / Km1011_145) - 1)) - (cell * Vmax_144 * (s_1011 - s_1010 * PHO / Keq_144) / Km1011_144 / (1 + s_1011 / Km1011_144 + (1 + s_1010 / Km1010_144) * (1 + PHO / KmPHO_144) - 1));
    der(s_1012) = (cell * Vmax_35 * (s_1413 - s_0386 * s_1012 / Keq_35) / Km1413_35 / (1 + s_1413 / Km1413_35 + (1 + s_0386 / Km0386_35) * (1 + s_1012 / Km1012_35) - 1)) + (cell * Vmax_198 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_198) / (Km0841_198 * Km1233_198) / ((1 + s_0841 / Km0841_198) * (1 + s_1233 / Km1233_198) + (1 + s_0362 / Km0362_198) * (1 + s_1012 / Km1012_198) - 1)) - (cell * Vmax_83 * (s_1012 * s_1039 - s_0980 / Keq_83) / (Km1012_83 * Km1039_83) / ((1 + s_1012 / Km1012_83) * (1 + s_1039 / Km1039_83) + 1 + s_0980 / Km0980_83 - 1)) - (cell * Vmax_185 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_185) / (Km0322_185 * Km1012_185) / ((1 + s_0322 / Km0322_185) * (1 + s_1012 / Km1012_185) + (1 + s_1029 / Km1029_185) * (1 + s_1487 / Km1487_185) - 1));
    der(s_1014) = (cell * Vmax_150 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_150) / (Km0978_150 * Km1212_150) / ((1 + s_0978 / Km0978_150) * (1 + s_1212 / Km1212_150) + (1 + s_1014 / Km1014_150) * (1 + s_1207 / Km1207_150) - 1)) - (cell * Vmax_151 * (ATP * s_1014 - ADP * s_1238 / Keq_151) / (KmATP_151 * Km1014_151) / ((1 + ATP / KmATP_151) * (1 + s_1014 / Km1014_151) + (1 + ADP / KmADP_151) * (1 + s_1238 / Km1238_151) - 1)) - (cell * Vmax_152 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_152) / (Km0373_152 * Km1014_152) / ((1 + s_0373 / Km0373_152) * (1 + s_1014 / Km1014_152) + (1 + s_0529 / Km0529_152) * (1 + s_1233 / Km1233_152) - 1));
    der(s_1016) = (cell * Vmax_166 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_166) / (Km0056_166 * Km0991_166) / ((1 + s_0056 / Km0056_166) * (1 + s_0991 / Km0991_166) + (1 + s_0180 / Km0180_166) * (1 + s_1016 / Km1016_166) - 1)) - (cell * Vmax_167 * (ATP * s_1016 * s_1596 - AMP * s_0633 * s_0847 / Keq_167) / (KmATP_167 * Km1016_167 * Km1596_167) / ((1 + ATP / KmATP_167) * (1 + s_1016 / Km1016_167) * (1 + s_1596 / Km1596_167) + (1 + AMP / KmAMP_167) * (1 + s_0633 / Km0633_167) * (1 + s_0847 / Km0847_167) - 1));
    der(s_1021) = (cell * Vmax_177 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_177) / (Km0291_177 * Km0991_177) / ((1 + s_0291 / Km0291_177) * (1 + s_0991 / Km0991_177) + (1 + s_0180 / Km0180_177) * (1 + s_1021 / Km1021_177) - 1)) - (cell * Vmax_178 * (ATP * s_1021 * s_1598 - AMP * s_0633 * s_1077 / Keq_178) / (KmATP_178 * Km1021_178 * Km1598_178) / ((1 + ATP / KmATP_178) * (1 + s_1021 / Km1021_178) * (1 + s_1598 / Km1598_178) + (1 + AMP / KmAMP_178) * (1 + s_0633 / Km0633_178) * (1 + s_1077 / Km1077_178) - 1));
    der(s_1025) = (cell * Vmax_247 * (s_1038 * NAD - s_0180 * s_1025 * NADH / Keq_247) / (Km1038_247 * KmNAD_247) / ((1 + s_1038 / Km1038_247) * (1 + NAD / KmNAD_247) + (1 + s_0180 / Km0180_247) * (1 + s_1025 / Km1025_247) * (1 + NADH / KmNAD_247H) - 1)) - (cell * Vmax_179 * (ATP * s_1025 * s_1600 - AMP * s_0633 * s_1099 / Keq_179) / (KmATP_179 * Km1025_179 * Km1600_179) / ((1 + ATP / KmATP_179) * (1 + s_1025 / Km1025_179) * (1 + s_1600 / Km1600_179) + (1 + AMP / KmAMP_179) * (1 + s_0633 / Km0633_179) * (1 + s_1099 / Km1099_179) - 1));
    der(s_1029) = (cell * Vmax_185 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_185) / (Km0322_185 * Km1012_185) / ((1 + s_0322 / Km0322_185) * (1 + s_1012 / Km1012_185) + (1 + s_1029 / Km1029_185) * (1 + s_1487 / Km1487_185) - 1)) - (cell * Vmax_184 * (ATP * s_1029 - s_0633 * PHO * s_1416 / Keq_184) / (KmATP_184 * Km1029_184) / ((1 + ATP / KmATP_184) * (1 + s_1029 / Km1029_184) + (1 + s_0633 / Km0633_184) * (1 + PHO / KmPHO_184) * (1 + s_1416 / Km1416_184) - 1)) - (cell * Vmax_186 * (ATP * s_1029 * s_1602 - AMP * s_0633 * s_1148 / Keq_186) / (KmATP_186 * Km1029_186 * Km1602_186) / ((1 + ATP / KmATP_186) * (1 + s_1029 / Km1029_186) * (1 + s_1602 / Km1602_186) + (1 + AMP / KmAMP_186) * (1 + s_0633 / Km0633_186) * (1 + s_1148 / Km1148_186) - 1));
    der(s_1032) = (cell * Vmax_203 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_203) / (Km0951_203 * Km0991_203) / ((1 + s_0951 / Km0951_203) * (1 + s_0991 / Km0991_203) + (1 + s_0180 / Km0180_203) * (1 + s_1032 / Km1032_203) - 1)) - (cell * Vmax_204 * (ATP * s_1032 * s_1604 - AMP * s_0633 * s_1314 / Keq_204) / (KmATP_204 * Km1032_204 * Km1604_204) / ((1 + ATP / KmATP_204) * (1 + s_1032 / Km1032_204) * (1 + s_1604 / Km1604_204) + (1 + AMP / KmAMP_204) * (1 + s_0633 / Km0633_204) * (1 + s_1314 / Km1314_204) - 1));
    der(s_1035) = (cell * Vmax_233 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_233) / (Km0118_233 * Km1212_233) / ((1 + s_0118 / Km0118_233) * (1 + s_1212 / Km1212_233) + (1 + s_1035 / Km1035_233) * (1 + s_1207 / Km1207_233) - 1)) - (cell * Vmax_232 * (ATP * s_1035 * s_1606 - AMP * s_0633 * s_1379 / Keq_232) / (KmATP_232 * Km1035_232 * Km1606_232) / ((1 + ATP / KmATP_232) * (1 + s_1035 / Km1035_232) * (1 + s_1606 / Km1606_232) + (1 + AMP / KmAMP_232) * (1 + s_0633 / Km0633_232) * (1 + s_1379 / Km1379_232) - 1));
    der(s_1038) = (cell * Vmax_248 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_248) / (Km0959_248 * Km0991_248 * Km1212_248) / ((1 + s_0959 / Km0959_248) * (1 + s_0991 / Km0991_248) * (1 + s_1212 / Km1212_248) + (1 + s_1038 / Km1038_248) * (1 + s_1207 / Km1207_248) - 1)) - (cell * Vmax_247 * (s_1038 * NAD - s_0180 * s_1025 * NADH / Keq_247) / (Km1038_247 * KmNAD_247) / ((1 + s_1038 / Km1038_247) * (1 + NAD / KmNAD_247) + (1 + s_0180 / Km0180_247) * (1 + s_1025 / Km1025_247) * (1 + NADH / KmNAD_247H) - 1));
    der(s_1039) = (cell * Vmax_135 * (s_0306 * s_1003 - s_1039 * s_1487 / Keq_135) / (Km0306_135 * Km1003_135) / ((1 + s_0306 / Km0306_135) * (1 + s_1003 / Km1003_135) + (1 + s_1039 / Km1039_135) * (1 + s_1487 / Km1487_135) - 1)) - (cell * Vmax_83 * (s_1012 * s_1039 - s_0980 / Keq_83) / (Km1012_83 * Km1039_83) / ((1 + s_1012 / Km1012_83) * (1 + s_1039 / Km1039_83) + 1 + s_0980 / Km0980_83 - 1)) - (cell * Vmax_209 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_209) / (Km0471_209 * Km1039_209) / ((1 + s_0471 / Km0471_209) * (1 + s_1039 / Km1039_209) + (1 + s_0526 / Km0526_209) * (1 + s_1337 / Km1337_209) - 1)) - (cell * Vmax_250 * (s_1039 * s_1302 - s_0231 * CO2 * s_0529 / Keq_250) / (Km1039_250 * Km1302_250) / ((1 + s_1039 / Km1039_250) * (1 + s_1302 / Km1302_250) + (1 + s_0231 / Km0231_250) * (1 + CO2 / KmCO2_250) * (1 + s_0529 / Km0529_250) - 1)) - (cell * Vmax_251 * (ATP * s_1039 * s_1607 - AMP * s_0633 * s_1428 / Keq_251) / (KmATP_251 * Km1039_251 * Km1607_251) / ((1 + ATP / KmATP_251) * (1 + s_1039 / Km1039_251) * (1 + s_1607 / Km1607_251) + (1 + AMP / KmAMP_251) * (1 + s_0633 / Km0633_251) * (1 + s_1428 / Km1428_251) - 1)) - (cell * Vmax_271 * (s_0086 * s_1039 - GAP * s_1048 / Keq_271) / (Km0086_271 * Km1039_271) / ((1 + s_0086 / Km0086_271) * (1 + s_1039 / Km1039_271) + (1 + GAP / KmGAP_271) * (1 + s_1048 / Km1048_271) - 1));
    der(s_1045) = (cell * Vmax_262 * (s_1238 - s_1045 * PHO / Keq_262) / Km1238_262 / (1 + s_1238 / Km1238_262 + (1 + s_1045 / Km1045_262) * (1 + PHO / KmPHO_262) - 1)) - (cell * Vmax_173 * (s_1045 - s_0178 * s_0419 / Keq_173) / Km1045_173 / (1 + s_1045 / Km1045_173 + (1 + s_0178 / Km0178_173) * (1 + s_0419 / Km0419_173) - 1)) - (cell * Vmax_261 * (s_1045 - AcAld * s_1003 / Keq_261) / Km1045_261 / (1 + s_1045 / Km1045_261 + (1 + AcAld / KmAcAld_261) * (1 + s_1003 / Km1003_261) - 1)) - (cell * Vmax_263 * (ATP * s_1045 * s_1608 - AMP * s_0633 * s_1491 / Keq_263) / (KmATP_263 * Km1045_263 * Km1608_263) / ((1 + ATP / KmATP_263) * (1 + s_1045 / Km1045_263) * (1 + s_1608 / Km1608_263) + (1 + AMP / KmAMP_263) * (1 + s_0633 / Km0633_263) * (1 + s_1491 / Km1491_263) - 1));
    der(s_1048) = (cell * Vmax_271 * (s_0086 * s_1039 - GAP * s_1048 / Keq_271) / (Km0086_271 * Km1039_271) / ((1 + s_0086 / Km0086_271) * (1 + s_1039 / Km1039_271) + (1 + GAP / KmGAP_271) * (1 + s_1048 / Km1048_271) - 1)) - (cell * Vmax_272 * (ATP * s_1048 * s_1610 - AMP * s_0633 * s_1527 / Keq_272) / (KmATP_272 * Km1048_272 * Km1610_272) / ((1 + ATP / KmATP_272) * (1 + s_1048 / Km1048_272) * (1 + s_1610 / Km1610_272) + (1 + AMP / KmAMP_272) * (1 + s_0633 / Km0633_272) * (1 + s_1527 / Km1527_272) - 1));
    der(s_1051) = (cell * Vmax_273 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_273) / (Km0204_273 * Km0991_273) / ((1 + s_0204 / Km0204_273) * (1 + s_0991 / Km0991_273) + (1 + s_0180 / Km0180_273) * (1 + s_1051 / Km1051_273) - 1)) - (cell * Vmax_274 * (ATP * s_1051 * s_1612 - AMP * s_0633 * s_1533 / Keq_274) / (KmATP_274 * Km1051_274 * Km1612_274) / ((1 + ATP / KmATP_274) * (1 + s_1051 / Km1051_274) * (1 + s_1612 / Km1612_274) + (1 + AMP / KmAMP_274) * (1 + s_0633 / Km0633_274) * (1 + s_1533 / Km1533_274) - 1));
    der(s_1056) = (cell * Vmax_277 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_277) / (Km0232_277 * Km0991_277) / ((1 + s_0232 / Km0232_277) * (1 + s_0991 / Km0991_277) + (1 + s_0180 / Km0180_277) * (1 + s_1056 / Km1056_277) - 1)) - (cell * Vmax_278 * (ATP * s_1056 * s_1614 - AMP * s_0633 * s_1561 / Keq_278) / (KmATP_278 * Km1056_278 * Km1614_278) / ((1 + ATP / KmATP_278) * (1 + s_1056 / Km1056_278) * (1 + s_1614 / Km1614_278) + (1 + AMP / KmAMP_278) * (1 + s_0633 / Km0633_278) * (1 + s_1561 / Km1561_278) - 1));
    der(s_1059) = (cell * Vmax_176 * (s_0037 - s_1059 / Keq_176) / Km0037_176 / (1 + s_0037 / Km0037_176 + 1 + s_1059 / Km1059_176 - 1)) - (cell * Vmax_87 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_87) / (Km1059_87 * pow(Km1212_87, 3) * pow(Km1275_87, 3)) / ((1 + s_1059 / Km1059_87) * pow(1 + s_1212 / Km1212_87, 3) * pow(1 + s_1275 / Km1275_87, 3) + (1 + s_0262 / Km0262_87) * (1 + s_0722 / Km0722_87) * pow(1 + s_1207 / Km1207_87, 3) - 1)) - (3.2e-05 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1065) = (cell * Vmax_101 * (s_0595 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_101) / (Km0595_101 * Km1101_101 * pow(Km1212_101, 2)) / ((1 + s_0595 / Km0595_101) * (1 + s_1101 / Km1101_101) * pow(1 + s_1212 / Km1212_101, 2) + (1 + CO2 / KmCO2_101) * (1 + s_0529 / Km0529_101) * (1 + s_1065 / Km1065_101) * pow(1 + s_1207 / Km1207_101, 2) - 1)) - (cell * Vmax_102 * (s_1065 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_102) / (Km1065_102 * Km1101_102 * pow(Km1212_102, 2)) / ((1 + s_1065 / Km1065_102) * (1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) + (1 + CO2 / KmCO2_102) * (1 + s_0529 / Km0529_102) * (1 + s_1161 / Km1161_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) - (cell * Vmax_110 * (ATP * s_0529 * s_1065 - AMP * s_0633 * s_1073 / Keq_110) / (KmATP_110 * Km0529_110 * Km1065_110) / ((1 + ATP / KmATP_110) * (1 + s_0529 / Km0529_110) * (1 + s_1065 / Km1065_110) + (1 + AMP / KmAMP_110) * (1 + s_0633 / Km0633_110) * (1 + s_1073 / Km1073_110) - 1));
    der(s_1073) = (cell * Vmax_110 * (ATP * s_0529 * s_1065 - AMP * s_0633 * s_1073 / Keq_110) / (KmATP_110 * Km0529_110 * Km1065_110) / ((1 + ATP / KmATP_110) * (1 + s_0529 / Km0529_110) * (1 + s_1065 / Km1065_110) + (1 + AMP / KmAMP_110) * (1 + s_0633 / Km0633_110) * (1 + s_1073 / Km1073_110) - 1)) + (cell * Vmax_113 * (s_0602 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_113) / (Km0602_113 * Km1101_113 * pow(Km1212_113, 2)) / ((1 + s_0602 / Km0602_113) * (1 + s_1101 / Km1101_113) * pow(1 + s_1212 / Km1212_113, 2) + (1 + CO2 / KmCO2_113) * (1 + s_0529 / Km0529_113) * (1 + s_1073 / Km1073_113) * pow(1 + s_1207 / Km1207_113, 2) - 1)) - (cell * Vmax_114 * (s_1073 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_114) / (Km1073_114 * Km1101_114 * pow(Km1212_114, 2)) / ((1 + s_1073 / Km1073_114) * (1 + s_1101 / Km1101_114) * pow(1 + s_1212 / Km1212_114, 2) + (1 + CO2 / KmCO2_114) * (1 + s_0529 / Km0529_114) * (1 + s_1176 / Km1176_114) * pow(1 + s_1207 / Km1207_114, 2) - 1));
    der(s_1077) = (cell * Vmax_178 * (ATP * s_1021 * s_1598 - AMP * s_0633 * s_1077 / Keq_178) / (KmATP_178 * Km1021_178 * Km1598_178) / ((1 + ATP / KmATP_178) * (1 + s_1021 / Km1021_178) * (1 + s_1598 / Km1598_178) + (1 + AMP / KmAMP_178) * (1 + s_0633 / Km0633_178) * (1 + s_1077 / Km1077_178) - 1)) - (0.2964 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1084) = (cell * Vmax_105 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(CO2, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_105) / (pow(Km1101_105, 3) * pow(Km1212_105, 6) * Km1449_105) / (pow(1 + s_1101 / Km1101_105, 3) * pow(1 + s_1212 / Km1212_105, 6) * (1 + s_1449 / Km1449_105) + pow(1 + CO2 / KmCO2_105, 3) * pow(1 + s_0529 / Km0529_105, 3) * (1 + s_1084 / Km1084_105) * pow(1 + s_1207 / Km1207_105, 6) - 1)) - (cell * Vmax_106 * (s_1084 * s_1101 * pow(s_1212, 2) - CO2 * s_0505 * s_0529 * pow(s_1207, 2) / Keq_106) / (Km1084_106 * Km1101_106 * pow(Km1212_106, 2)) / ((1 + s_1084 / Km1084_106) * (1 + s_1101 / Km1101_106) * pow(1 + s_1212 / Km1212_106, 2) + (1 + CO2 / KmCO2_106) * (1 + s_0505 / Km0505_106) * (1 + s_0529 / Km0529_106) * pow(1 + s_1207 / Km1207_106, 2) - 1));
    der(s_1099) = (cell * Vmax_179 * (ATP * s_1025 * s_1600 - AMP * s_0633 * s_1099 / Keq_179) / (KmATP_179 * Km1025_179 * Km1600_179) / ((1 + ATP / KmATP_179) * (1 + s_1025 / Km1025_179) * (1 + s_1600 / Km1600_179) + (1 + AMP / KmAMP_179) * (1 + s_0633 / Km0633_179) * (1 + s_1099 / Km1099_179) - 1)) - (0.2862 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1101) = (cell * Vmax_30 * (s_0373 * ATP * s_0445 - ADP * s_1101 * PHO / Keq_30) / (Km0373_30 * KmATP_30 * Km0445_30) / ((1 + s_0373 / Km0373_30) * (1 + ATP / KmATP_30) * (1 + s_0445 / Km0445_30) + (1 + ADP / KmADP_30) * (1 + s_1101 / Km1101_30) * (1 + PHO / KmPHO_30) - 1)) - (cell * Vmax_101 * (s_0595 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_101) / (Km0595_101 * Km1101_101 * pow(Km1212_101, 2)) / ((1 + s_0595 / Km0595_101) * (1 + s_1101 / Km1101_101) * pow(1 + s_1212 / Km1212_101, 2) + (1 + CO2 / KmCO2_101) * (1 + s_0529 / Km0529_101) * (1 + s_1065 / Km1065_101) * pow(1 + s_1207 / Km1207_101, 2) - 1)) - (cell * Vmax_102 * (s_1065 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_102) / (Km1065_102 * Km1101_102 * pow(Km1212_102, 2)) / ((1 + s_1065 / Km1065_102) * (1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) + (1 + CO2 / KmCO2_102) * (1 + s_0529 / Km0529_102) * (1 + s_1161 / Km1161_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) - (cell * Vmax_103 * (s_1101 * s_1161 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_103) / (Km1101_103 * Km1161_103 * pow(Km1212_103, 2)) / ((1 + s_1101 / Km1101_103) * (1 + s_1161 / Km1161_103) * pow(1 + s_1212 / Km1212_103, 2) + (1 + CO2 / KmCO2_103) * (1 + s_0529 / Km0529_103) * pow(1 + s_1207 / Km1207_103, 2) * (1 + s_1286 / Km1286_103) - 1)) - (cell * Vmax_104 * (s_1101 * pow(s_1212, 2) * s_1286 - CO2 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_104) / (Km1101_104 * pow(Km1212_104, 2) * Km1286_104) / ((1 + s_1101 / Km1101_104) * pow(1 + s_1212 / Km1212_104, 2) * (1 + s_1286 / Km1286_104) + (1 + CO2 / KmCO2_104) * (1 + s_0529 / Km0529_104) * pow(1 + s_1207 / Km1207_104, 2) * (1 + s_1449 / Km1449_104) - 1)) - (3.0 * cell * Vmax_105 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(CO2, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_105) / (pow(Km1101_105, 3) * pow(Km1212_105, 6) * Km1449_105) / (pow(1 + s_1101 / Km1101_105, 3) * pow(1 + s_1212 / Km1212_105, 6) * (1 + s_1449 / Km1449_105) + pow(1 + CO2 / KmCO2_105, 3) * pow(1 + s_0529 / Km0529_105, 3) * (1 + s_1084 / Km1084_105) * pow(1 + s_1207 / Km1207_105, 6) - 1)) - (cell * Vmax_106 * (s_1084 * s_1101 * pow(s_1212, 2) - CO2 * s_0505 * s_0529 * pow(s_1207, 2) / Keq_106) / (Km1084_106 * Km1101_106 * pow(Km1212_106, 2)) / ((1 + s_1084 / Km1084_106) * (1 + s_1101 / Km1101_106) * pow(1 + s_1212 / Km1212_106, 2) + (1 + CO2 / KmCO2_106) * (1 + s_0505 / Km0505_106) * (1 + s_0529 / Km0529_106) * pow(1 + s_1207 / Km1207_106, 2) - 1)) - (cell * Vmax_107 * (s_1101 * pow(s_1212, 2) * s_1255 - CO2 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_107) / (Km1101_107 * pow(Km1212_107, 2) * Km1255_107) / ((1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) * (1 + s_1255 / Km1255_107) + (1 + CO2 / KmCO2_107) * (1 + s_0529 / Km0529_107) * (1 + s_0602 / Km0602_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) - (3.0 * cell * Vmax_108 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(CO2, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_108) / (Km0373_108 * pow(Km1101_108, 3) * pow(Km1212_108, 6)) / ((1 + s_0373 / Km0373_108) * pow(1 + s_1101 / Km1101_108, 3) * pow(1 + s_1212 / Km1212_108, 6) + pow(1 + CO2 / KmCO2_108, 3) * pow(1 + s_0529 / Km0529_108, 3) * pow(1 + s_1207 / Km1207_108, 6) * (1 + s_1255 / Km1255_108) - 1)) - (cell * Vmax_113 * (s_0602 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_113) / (Km0602_113 * Km1101_113 * pow(Km1212_113, 2)) / ((1 + s_0602 / Km0602_113) * (1 + s_1101 / Km1101_113) * pow(1 + s_1212 / Km1212_113, 2) + (1 + CO2 / KmCO2_113) * (1 + s_0529 / Km0529_113) * (1 + s_1073 / Km1073_113) * pow(1 + s_1207 / Km1207_113, 2) - 1)) - (cell * Vmax_114 * (s_1073 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_114) / (Km1073_114 * Km1101_114 * pow(Km1212_114, 2)) / ((1 + s_1073 / Km1073_114) * (1 + s_1101 / Km1101_114) * pow(1 + s_1212 / Km1212_114, 2) + (1 + CO2 / KmCO2_114) * (1 + s_0529 / Km0529_114) * (1 + s_1176 / Km1176_114) * pow(1 + s_1207 / Km1207_114, 2) - 1)) - (cell * Vmax_115 * (s_1101 * s_1176 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_115) / (Km1101_115 * Km1176_115 * pow(Km1212_115, 2)) / ((1 + s_1101 / Km1101_115) * (1 + s_1176 / Km1176_115) * pow(1 + s_1212 / Km1212_115, 2) + (1 + CO2 / KmCO2_115) * (1 + s_0529 / Km0529_115) * pow(1 + s_1207 / Km1207_115, 2) * (1 + s_1302 / Km1302_115) - 1)) - (cell * Vmax_116 * (s_1101 * pow(s_1212, 2) * s_1302 - CO2 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_116) / (Km1101_116 * pow(Km1212_116, 2) * Km1302_116) / ((1 + s_1101 / Km1101_116) * pow(1 + s_1212 / Km1212_116, 2) * (1 + s_1302 / Km1302_116) + (1 + CO2 / KmCO2_116) * (1 + s_0529 / Km0529_116) * pow(1 + s_1207 / Km1207_116, 2) * (1 + s_1454 / Km1454_116) - 1));
    der(s_1107) = (cell * Vmax_98 * (s_0644 - s_0645 * s_1107 / Keq_98) / Km0644_98 / (1 + s_0644 / Km0644_98 + (1 + s_0645 / Km0645_98) * (1 + s_1107 / Km1107_98) - 1)) - (0.8079 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1148) = (cell * Vmax_186 * (ATP * s_1029 * s_1602 - AMP * s_0633 * s_1148 / Keq_186) / (KmATP_186 * Km1029_186 * Km1602_186) / ((1 + ATP / KmATP_186) * (1 + s_1029 / Km1029_186) * (1 + s_1602 / Km1602_186) + (1 + AMP / KmAMP_186) * (1 + s_0633 / Km0633_186) * (1 + s_1148 / Km1148_186) - 1)) - (0.0507 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1151) = (cell * Vmax_291 * (DHAP - s_1151 * PHO / Keq_291) / KmDHAP_291 / (1 + DHAP / KmDHAP_291 + (1 + s_1151 / Km1151_291) * (1 + PHO / KmPHO_291) - 1)) - (cell * Vmax_172 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_172) / (Km1151_172 * Km1212_172) / ((1 + s_1151 / Km1151_172) * (1 + s_1212 / Km1212_172) + (1 + s_0062 / Km0062_172) * (1 + s_1207 / Km1207_172) - 1)) - (cell * Vmax_175 * (s_0750 * s_1151 - s_0033 / Keq_175) / (Km0750_175 * Km1151_175) / ((1 + s_0750 / Km0750_175) * (1 + s_1151 / Km1151_175) + 1 + s_0033 / Km0033_175 - 1));
    der(s_1153) = (cell * Vmax_192 * (s_0126 - s_1153 * PHO / Keq_192) / Km0126_192 / (1 + s_0126 / Km0126_192 + (1 + s_1153 / Km1153_192) * (1 + PHO / KmPHO_192) - 1)) - (cell * Vmax_207 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_207) / (Km0471_207 * Km1153_207) / ((1 + s_0471 / Km0471_207) * (1 + s_1153 / Km1153_207) + (1 + s_0089 / Km0089_207) * (1 + s_0526 / Km0526_207) - 1));
    der(s_1161) = (cell * Vmax_102 * (s_1065 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_102) / (Km1065_102 * Km1101_102 * pow(Km1212_102, 2)) / ((1 + s_1065 / Km1065_102) * (1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) + (1 + CO2 / KmCO2_102) * (1 + s_0529 / Km0529_102) * (1 + s_1161 / Km1161_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) - (cell * Vmax_103 * (s_1101 * s_1161 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_103) / (Km1101_103 * Km1161_103 * pow(Km1212_103, 2)) / ((1 + s_1101 / Km1101_103) * (1 + s_1161 / Km1161_103) * pow(1 + s_1212 / Km1212_103, 2) + (1 + CO2 / KmCO2_103) * (1 + s_0529 / Km0529_103) * pow(1 + s_1207 / Km1207_103, 2) * (1 + s_1286 / Km1286_103) - 1));
    der(s_1176) = (cell * Vmax_114 * (s_1073 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_114) / (Km1073_114 * Km1101_114 * pow(Km1212_114, 2)) / ((1 + s_1073 / Km1073_114) * (1 + s_1101 / Km1101_114) * pow(1 + s_1212 / Km1212_114, 2) + (1 + CO2 / KmCO2_114) * (1 + s_0529 / Km0529_114) * (1 + s_1176 / Km1176_114) * pow(1 + s_1207 / Km1207_114, 2) - 1)) - (cell * Vmax_115 * (s_1101 * s_1176 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_115) / (Km1101_115 * Km1176_115 * pow(Km1212_115, 2)) / ((1 + s_1101 / Km1101_115) * (1 + s_1176 / Km1176_115) * pow(1 + s_1212 / Km1212_115, 2) + (1 + CO2 / KmCO2_115) * (1 + s_0529 / Km0529_115) * pow(1 + s_1207 / Km1207_115, 2) * (1 + s_1302 / Km1302_115) - 1));
    der(s_1182) = (cell * Vmax_33 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_33) / (Km0145_33 * Km0991_33) / ((1 + s_0145 / Km0145_33) * (1 + s_0991 / Km0991_33) + (1 + s_0180 / Km0180_33) * (1 + s_1182 / Km1182_33) - 1)) - (cell * Vmax_200 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_200) / (Km0991_200 * Km1182_200) / ((1 + s_0991 / Km0991_200) * (1 + s_1182 / Km1182_200) + (1 + s_1192 / Km1192_200) * (1 + s_1266 / Km1266_200) - 1));
    der(s_1187) = (cell * Vmax_48 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_48) / (Km0427_48 * Km1386_48) / ((1 + s_0427 / Km0427_48) * (1 + s_1386 / Km1386_48) + (1 + s_0633 / Km0633_48) * (1 + s_1187 / Km1187_48) - 1)) - (cell * Vmax_226 * (s_1187 - s_0076 / Keq_226) / Km1187_226 / (1 + s_1187 / Km1187_226 + 1 + s_0076 / Km0076_226 - 1));
    der(s_1191) = (cell * Vmax_32 * (ATP * s_1192 - ADP * s_1191 / Keq_32) / (KmATP_32 * Km1192_32) / ((1 + ATP / KmATP_32) * (1 + s_1192 / Km1192_32) + (1 + ADP / KmADP_32) * (1 + s_1191 / Km1191_32) - 1)) - (cell * Vmax_194 * (s_1191 * s_1212 - s_0145 * s_1207 * PHO / Keq_194) / (Km1191_194 * Km1212_194) / ((1 + s_1191 / Km1191_194) * (1 + s_1212 / Km1212_194) + (1 + s_0145 / Km0145_194) * (1 + s_1207 / Km1207_194) * (1 + PHO / KmPHO_194) - 1));
    der(s_1192) = (cell * Vmax_200 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_200) / (Km0991_200 * Km1182_200) / ((1 + s_0991 / Km0991_200) * (1 + s_1182 / Km1182_200) + (1 + s_1192 / Km1192_200) * (1 + s_1266 / Km1266_200) - 1)) - (cell * Vmax_32 * (ATP * s_1192 - ADP * s_1191 / Keq_32) / (KmATP_32 * Km1192_32) / ((1 + ATP / KmATP_32) * (1 + s_1192 / Km1192_32) + (1 + ADP / KmADP_32) * (1 + s_1191 / Km1191_32) - 1));
    der(s_1194) = (cell * Vmax_55 * (s_0455 * s_0973 - s_1194 * PHO / Keq_55) / (Km0455_55 * Km0973_55) / ((1 + s_0455 / Km0455_55) * (1 + s_0973 / Km0973_55) + (1 + s_1194 / Km1194_55) * (1 + PHO / KmPHO_55) - 1)) - (cell * Vmax_93 * (s_1194 - s_0061 / Keq_93) / Km1194_93 / (1 + s_1194 / Km1194_93 + 1 + s_0061 / Km0061_93 - 1));
    der(NAD) = (cell * Vmax_6 * (s_0991 * NADH - s_0118 * NAD / Keq_6) / (Km0991_6 * KmNAD_6H_6) / ((1 + s_0991 / Km0991_6) * (1 + NADH / KmNAD_6H_6) + (1 + s_0118 / Km0118_6) * (1 + NAD / KmNAD_6) - 1)) + (cell * (Vmax_44 * (AcAld * NADH / (Kacald_44 * Kinad_44h) - EtOH * NAD / (Kacald_44 * Kinad_44h * Keq_44)) / (1 + NADH / Kinad_44h + AcAld * Knad_44h / (Kinad_44h * Kacald_44) + EtOH * Knad_44 / (Kinad_44 * Ketoh_44) + NAD / Kinad_44 + AcAld * NADH / (Kinad_44h * Kacald_44) + NADH * EtOH * Knad_44 / (Kinad_44h * Kinad_44 * Ketoh_44) + AcAld * NAD * Knad_44h / (Kinad_44h * Kinad_44 * Kacald_44) + EtOH * NAD / (Ketoh_44 * Kinad_44) + AcAld * NADH * EtOH / (Kinad_44h * Kietoh_44 * Kacald_44) + AcAld * EtOH * NAD / (Kiacald_44 * Kinad_44 * Ketoh_44)))) + (cell * Vmax_125 * (s_0180 * s_0419 * NADH - s_0991 * NAD / Keq_125) / (Km0180_125 * Km0419_125 * KmNAD_125H_125) / ((1 + s_0180 / Km0180_125) * (1 + s_0419 / Km0419_125) * (1 + NADH / KmNAD_125H_125) + (1 + s_0991 / Km0991_125) * (1 + NAD / KmNAD_125) - 1)) + (cell * Vmax_131 * (DHAP * NADH - s_0767 * NAD / Keq_131) / (KmDHAP_131 * KmNAD_131H_131) / ((1 + DHAP / KmDHAP_131) * (1 + NADH / KmNAD_131H_131) + (1 + s_0767 / Km0767_131) * (1 + NAD / KmNAD_131) - 1)) + (cell * Vmax_187 * (s_0304 * NADH - s_0306 * NAD / Keq_187) / (Km0304_187 * KmNAD_187H_187) / ((1 + s_0304 / Km0304_187) * (1 + NADH / KmNAD_187H_187) + (1 + s_0306 / Km0306_187) * (1 + NAD / KmNAD_187) - 1)) + (cell * Vmax_254 * (NADH * s_1275 * s_1447 - s_0037 * NAD / Keq_254) / (KmNAD_254H_254 * Km1275_254 * Km1447_254) / ((1 + NADH / KmNAD_254H_254) * (1 + s_1275 / Km1275_254) * (1 + s_1447 / Km1447_254) + (1 + s_0037 / Km0037_254) * (1 + NAD / KmNAD_254) - 1)) - (cell * Vmax_22 * (s_0009 * NAD - s_0010 * NADH / Keq_22) / (Km0009_22 * KmNAD_22) / ((1 + s_0009 / Km0009_22) * (1 + NAD / KmNAD_22) + (1 + s_0010 / Km0010_22) * (1 + NADH / KmNAD_22H) - 1)) - (cell * Vmax_46 * (AcAld * NAD - s_0362 * NADH / Keq_46) / (KmAcAld_46 * KmNAD_46) / ((1 + AcAld / KmAcAld_46) * (1 + NAD / KmNAD_46) + (1 + s_0362 / Km0362_46) * (1 + NADH / KmNAD_46H) - 1)) - (cell * Vmax_65 * (s_0297 * NAD - s_0209 * CO2 * NADH / Keq_65) / (Km0297_65 * KmNAD_65) / ((1 + s_0297 / Km0297_65) * (1 + NAD / KmNAD_65) + (1 + s_0209 / Km0209_65) * (1 + CO2 / KmCO2_65) * (1 + NADH / KmNAD_65H) - 1)) - (cell * Vmax_129 / (Kgap_129 * Knad_129 * Kpho_129) * (GAP * NAD * PHO - BPG * NADH / Keq_129) / ((1 + PHO / Kpho_129) * (1 + GAP / Kgap_129 + BPG / Kbpg_129) * (1 + NAD / Knad_129 + NADH / Knad_129h))) - (cell * Vmax_134 * (s_1003 * NAD * s_1487 - s_0306 * s_0419 * CO2 * NADH / Keq_134) / (Km1003_134 * KmNAD_134 * Km1487_134) / ((1 + s_1003 / Km1003_134) * (1 + NAD / KmNAD_134) * (1 + s_1487 / Km1487_134) + (1 + s_0306 / Km0306_134) * (1 + s_0419 / Km0419_134) * (1 + CO2 / KmCO2_134) * (1 + NADH / KmNAD_134H) - 1)) - (2.0 * cell * Vmax_143 * (s_1010 * pow(NAD, 2) - s_1006 * pow(NADH, 2) / Keq_143) / (Km1010_143 * pow(KmNAD_143, 2)) / ((1 + s_1010 / Km1010_143) * pow(1 + NAD / KmNAD_143, 2) + (1 + s_1006 / Km1006_143) * pow(1 + NADH / KmNAD_143H, 2) - 1)) - (cell * Vmax_149 * (s_0836 * NAD - s_0176 * NADH * CO2 / Keq_149) / (Km0836_149 * KmNAD_149) / ((1 + s_0836 / Km0836_149) * (1 + NAD / KmNAD_149) + (1 + s_0176 / Km0176_149) * (1 + NADH / KmNAD_149H) * (1 + CO2 / KmCO2_149) - 1)) - (cell * Vmax_158 * (s_0849 * NAD - NADH * s_1565 / Keq_158) / (Km0849_158 * KmNAD_158) / ((1 + s_0849 / Km0849_158) * (1 + NAD / KmNAD_158) + (1 + NADH / KmNAD_158H) * (1 + s_1565 / Km1565_158) - 1)) - (cell * Vmax_163 * (s_0940 * NAD - s_0180 * CO2 * NADH / Keq_163) / (Km0940_163 * KmNAD_163) / ((1 + s_0940 / Km0940_163) * (1 + NAD / KmNAD_163) + (1 + s_0180 / Km0180_163) * (1 + CO2 / KmCO2_163) * (1 + NADH / KmNAD_163H) - 1)) - (cell * Vmax_174 * (s_0062 * NAD - s_0063 * NADH / Keq_174) / (Km0062_174 * KmNAD_174) / ((1 + s_0062 / Km0062_174) * (1 + NAD / KmNAD_174) + (1 + s_0063 / Km0063_174) * (1 + NADH / KmNAD_174H) - 1)) - (cell * Vmax_180 * (s_0066 * NAD - NADH * s_1271 / Keq_180) / (Km0066_180 * KmNAD_180) / ((1 + s_0066 / Km0066_180) * (1 + NAD / KmNAD_180) + (1 + NADH / KmNAD_180H) * (1 + s_1271 / Km1271_180) - 1)) - (cell * Vmax_247 * (s_1038 * NAD - s_0180 * s_1025 * NADH / Keq_247) / (Km1038_247 * KmNAD_247) / ((1 + s_1038 / Km1038_247) * (1 + NAD / KmNAD_247) + (1 + s_0180 / Km0180_247) * (1 + s_1025 / Km1025_247) * (1 + NADH / KmNAD_247H) - 1)) - (cell * Vmax_297 * (s_0061 * NAD - s_1269 * NADH / Keq_297) / (Km0061_297 * KmNAD_297) / ((1 + s_0061 / Km0061_297) * (1 + NAD / KmNAD_297) + (1 + s_1269 / Km1269_297) * (1 + NADH / KmNAD_297H) - 1));
    der(NADH) = (cell * Vmax_22 * (s_0009 * NAD - s_0010 * NADH / Keq_22) / (Km0009_22 * KmNAD_22) / ((1 + s_0009 / Km0009_22) * (1 + NAD / KmNAD_22) + (1 + s_0010 / Km0010_22) * (1 + NADH / KmNAD_22H) - 1)) + (cell * Vmax_46 * (AcAld * NAD - s_0362 * NADH / Keq_46) / (KmAcAld_46 * KmNAD_46) / ((1 + AcAld / KmAcAld_46) * (1 + NAD / KmNAD_46) + (1 + s_0362 / Km0362_46) * (1 + NADH / KmNAD_46H) - 1)) + (cell * Vmax_65 * (s_0297 * NAD - s_0209 * CO2 * NADH / Keq_65) / (Km0297_65 * KmNAD_65) / ((1 + s_0297 / Km0297_65) * (1 + NAD / KmNAD_65) + (1 + s_0209 / Km0209_65) * (1 + CO2 / KmCO2_65) * (1 + NADH / KmNAD_65H) - 1)) + (cell * Vmax_129 / (Kgap_129 * Knad_129 * Kpho_129) * (GAP * NAD * PHO - BPG * NADH / Keq_129) / ((1 + PHO / Kpho_129) * (1 + GAP / Kgap_129 + BPG / Kbpg_129) * (1 + NAD / Knad_129 + NADH / Knad_129h))) + (cell * Vmax_134 * (s_1003 * NAD * s_1487 - s_0306 * s_0419 * CO2 * NADH / Keq_134) / (Km1003_134 * KmNAD_134 * Km1487_134) / ((1 + s_1003 / Km1003_134) * (1 + NAD / KmNAD_134) * (1 + s_1487 / Km1487_134) + (1 + s_0306 / Km0306_134) * (1 + s_0419 / Km0419_134) * (1 + CO2 / KmCO2_134) * (1 + NADH / KmNAD_134H) - 1)) + (2.0 * cell * Vmax_143 * (s_1010 * pow(NAD, 2) - s_1006 * pow(NADH, 2) / Keq_143) / (Km1010_143 * pow(KmNAD_143, 2)) / ((1 + s_1010 / Km1010_143) * pow(1 + NAD / KmNAD_143, 2) + (1 + s_1006 / Km1006_143) * pow(1 + NADH / KmNAD_143H, 2) - 1)) + (cell * Vmax_149 * (s_0836 * NAD - s_0176 * NADH * CO2 / Keq_149) / (Km0836_149 * KmNAD_149) / ((1 + s_0836 / Km0836_149) * (1 + NAD / KmNAD_149) + (1 + s_0176 / Km0176_149) * (1 + NADH / KmNAD_149H) * (1 + CO2 / KmCO2_149) - 1)) + (cell * Vmax_158 * (s_0849 * NAD - NADH * s_1565 / Keq_158) / (Km0849_158 * KmNAD_158) / ((1 + s_0849 / Km0849_158) * (1 + NAD / KmNAD_158) + (1 + NADH / KmNAD_158H) * (1 + s_1565 / Km1565_158) - 1)) + (cell * Vmax_163 * (s_0940 * NAD - s_0180 * CO2 * NADH / Keq_163) / (Km0940_163 * KmNAD_163) / ((1 + s_0940 / Km0940_163) * (1 + NAD / KmNAD_163) + (1 + s_0180 / Km0180_163) * (1 + CO2 / KmCO2_163) * (1 + NADH / KmNAD_163H) - 1)) + (cell * Vmax_174 * (s_0062 * NAD - s_0063 * NADH / Keq_174) / (Km0062_174 * KmNAD_174) / ((1 + s_0062 / Km0062_174) * (1 + NAD / KmNAD_174) + (1 + s_0063 / Km0063_174) * (1 + NADH / KmNAD_174H) - 1)) + (cell * Vmax_180 * (s_0066 * NAD - NADH * s_1271 / Keq_180) / (Km0066_180 * KmNAD_180) / ((1 + s_0066 / Km0066_180) * (1 + NAD / KmNAD_180) + (1 + NADH / KmNAD_180H) * (1 + s_1271 / Km1271_180) - 1)) + (cell * Vmax_247 * (s_1038 * NAD - s_0180 * s_1025 * NADH / Keq_247) / (Km1038_247 * KmNAD_247) / ((1 + s_1038 / Km1038_247) * (1 + NAD / KmNAD_247) + (1 + s_0180 / Km0180_247) * (1 + s_1025 / Km1025_247) * (1 + NADH / KmNAD_247H) - 1)) + (cell * Vmax_297 * (s_0061 * NAD - s_1269 * NADH / Keq_297) / (Km0061_297 * KmNAD_297) / ((1 + s_0061 / Km0061_297) * (1 + NAD / KmNAD_297) + (1 + s_1269 / Km1269_297) * (1 + NADH / KmNAD_297H) - 1)) - (cell * Vmax_6 * (s_0991 * NADH - s_0118 * NAD / Keq_6) / (Km0991_6 * KmNAD_6H_6) / ((1 + s_0991 / Km0991_6) * (1 + NADH / KmNAD_6H_6) + (1 + s_0118 / Km0118_6) * (1 + NAD / KmNAD_6) - 1)) - (cell * (Vmax_44 * (AcAld * NADH / (Kacald_44 * Kinad_44h) - EtOH * NAD / (Kacald_44 * Kinad_44h * Keq_44)) / (1 + NADH / Kinad_44h + AcAld * Knad_44h / (Kinad_44h * Kacald_44) + EtOH * Knad_44 / (Kinad_44 * Ketoh_44) + NAD / Kinad_44 + AcAld * NADH / (Kinad_44h * Kacald_44) + NADH * EtOH * Knad_44 / (Kinad_44h * Kinad_44 * Ketoh_44) + AcAld * NAD * Knad_44h / (Kinad_44h * Kinad_44 * Kacald_44) + EtOH * NAD / (Ketoh_44 * Kinad_44) + AcAld * NADH * EtOH / (Kinad_44h * Kietoh_44 * Kacald_44) + AcAld * EtOH * NAD / (Kiacald_44 * Kinad_44 * Ketoh_44)))) - (cell * Vmax_125 * (s_0180 * s_0419 * NADH - s_0991 * NAD / Keq_125) / (Km0180_125 * Km0419_125 * KmNAD_125H_125) / ((1 + s_0180 / Km0180_125) * (1 + s_0419 / Km0419_125) * (1 + NADH / KmNAD_125H_125) + (1 + s_0991 / Km0991_125) * (1 + NAD / KmNAD_125) - 1)) - (cell * Vmax_131 * (DHAP * NADH - s_0767 * NAD / Keq_131) / (KmDHAP_131 * KmNAD_131H_131) / ((1 + DHAP / KmDHAP_131) * (1 + NADH / KmNAD_131H_131) + (1 + s_0767 / Km0767_131) * (1 + NAD / KmNAD_131) - 1)) - (cell * Vmax_187 * (s_0304 * NADH - s_0306 * NAD / Keq_187) / (Km0304_187 * KmNAD_187H_187) / ((1 + s_0304 / Km0304_187) * (1 + NADH / KmNAD_187H_187) + (1 + s_0306 / Km0306_187) * (1 + NAD / KmNAD_187) - 1)) - (cell * Vmax_254 * (NADH * s_1275 * s_1447 - s_0037 * NAD / Keq_254) / (KmNAD_254H_254 * Km1275_254 * Km1447_254) / ((1 + NADH / KmNAD_254H_254) * (1 + s_1275 / Km1275_254) * (1 + s_1447 / Km1447_254) + (1 + s_0037 / Km0037_254) * (1 + NAD / KmNAD_254) - 1));
    der(s_1207) = (cell * Vmax_8 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_8) / (Km0141_8 * Km1212_8) / ((1 + s_0141 / Km0141_8) * (1 + s_1212 / Km1212_8) + (1 + s_0142 / Km0142_8) * (1 + s_1207 / Km1207_8) - 1)) + (cell * Vmax_20 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_20) / (Km0231_20 * Km1212_20) / ((1 + s_0231 / Km0231_20) * (1 + s_1212 / Km1212_20) + (1 + s_1207 / Km1207_20) * (1 + s_1445 / Km1445_20) - 1)) + (cell * Vmax_25 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_25) / (Km0306_25 * Km1212_25) / ((1 + s_0306 / Km0306_25) * (1 + s_1212 / Km1212_25) + (1 + s_0322 / Km0322_25) * (1 + s_1207 / Km1207_25) - 1)) + (cell * Vmax_27 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_27) / (Km0146_27 * Km1212_27) / ((1 + s_0146 / Km0146_27) * (1 + s_1212 / Km1212_27) + (1 + s_0016 / Km0016_27) * (1 + s_1207 / Km1207_27) - 1)) + (cell * Vmax_58 * (s_0295 * s_1212 - s_0978 * s_1207 * PHO / Keq_58) / (Km0295_58 * Km1212_58) / ((1 + s_0295 / Km0295_58) * (1 + s_1212 / Km1212_58) + (1 + s_0978 / Km0978_58) * (1 + s_1207 / Km1207_58) * (1 + PHO / KmPHO_58) - 1)) + (cell * Vmax_63 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_63) / (Km0262_63 * Km1212_63) / ((1 + s_0262 / Km0262_63) * (1 + s_1212 / Km1212_63) + (1 + s_0122 / Km0122_63) * (1 + s_1207 / Km1207_63) - 1)) + (cell * Vmax_66 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_66) / (Km0209_66 * Km1212_66) / ((1 + s_0209 / Km0209_66) * (1 + s_1212 / Km1212_66) + (1 + s_0296 / Km0296_66) * (1 + s_1207 / Km1207_66) - 1)) + (cell * Vmax_67 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_67) / (Km1212_67 * Km1579_67) / ((1 + s_1212 / Km1212_67) * (1 + s_1579 / Km1579_67) + (1 + s_1207 / Km1207_67) * (1 + s_1569 / Km1569_67) - 1)) + (cell * Vmax_68 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_68) / (Km0296_68 * Km1212_68 * Km1275_68) / ((1 + s_0296 / Km0296_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_1207 / Km1207_68) * (1 + s_1576 / Km1576_68) - 1)) + (cell * Vmax_69 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_69) / (Km1212_69 * Km1275_69 * Km1576_69) / ((1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) * (1 + s_1576 / Km1576_69) + (1 + s_1207 / Km1207_69) * (1 + s_1577 / Km1577_69) - 1)) + (cell * Vmax_70 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_70) / (Km1212_70 * Km1275_70 * Km1577_70) / ((1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) * (1 + s_1577 / Km1577_70) + (1 + s_1207 / Km1207_70) * (1 + s_1578 / Km1578_70) - 1)) + (3.0 * cell * Vmax_71 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_71) / (Km0122_71 * pow(Km1212_71, 3) * pow(Km1275_71, 3)) / ((1 + s_0122 / Km0122_71) * pow(1 + s_1212 / Km1212_71, 3) * pow(1 + s_1275 / Km1275_71, 3) + (1 + s_0297 / Km0297_71) * pow(1 + s_1207 / Km1207_71, 3) - 1)) + (cell * Vmax_73 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_73) / (Km0662_73 * Km1212_73) / ((1 + s_0662 / Km0662_73) * (1 + s_1212 / Km1212_73) + (1 + s_0666 / Km0666_73) * (1 + s_1207 / Km1207_73) - 1)) + (3.0 * cell * Vmax_87 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_87) / (Km1059_87 * pow(Km1212_87, 3) * pow(Km1275_87, 3)) / ((1 + s_1059 / Km1059_87) * pow(1 + s_1212 / Km1212_87, 3) * pow(1 + s_1275 / Km1275_87, 3) + (1 + s_0262 / Km0262_87) * (1 + s_0722 / Km0722_87) * pow(1 + s_1207 / Km1207_87, 3) - 1)) + (cell * Vmax_92 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_92) / (Km0625_92 * Km1212_92) / ((1 + s_0625 / Km0625_92) * (1 + s_1212 / Km1212_92) + (1 + s_1207 / Km1207_92) * (1 + s_1487 / Km1487_92) - 1)) + (2.0 * cell * Vmax_101 * (s_0595 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_101) / (Km0595_101 * Km1101_101 * pow(Km1212_101, 2)) / ((1 + s_0595 / Km0595_101) * (1 + s_1101 / Km1101_101) * pow(1 + s_1212 / Km1212_101, 2) + (1 + CO2 / KmCO2_101) * (1 + s_0529 / Km0529_101) * (1 + s_1065 / Km1065_101) * pow(1 + s_1207 / Km1207_101, 2) - 1)) + (2.0 * cell * Vmax_102 * (s_1065 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_102) / (Km1065_102 * Km1101_102 * pow(Km1212_102, 2)) / ((1 + s_1065 / Km1065_102) * (1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) + (1 + CO2 / KmCO2_102) * (1 + s_0529 / Km0529_102) * (1 + s_1161 / Km1161_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) + (2.0 * cell * Vmax_103 * (s_1101 * s_1161 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_103) / (Km1101_103 * Km1161_103 * pow(Km1212_103, 2)) / ((1 + s_1101 / Km1101_103) * (1 + s_1161 / Km1161_103) * pow(1 + s_1212 / Km1212_103, 2) + (1 + CO2 / KmCO2_103) * (1 + s_0529 / Km0529_103) * pow(1 + s_1207 / Km1207_103, 2) * (1 + s_1286 / Km1286_103) - 1)) + (2.0 * cell * Vmax_104 * (s_1101 * pow(s_1212, 2) * s_1286 - CO2 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_104) / (Km1101_104 * pow(Km1212_104, 2) * Km1286_104) / ((1 + s_1101 / Km1101_104) * pow(1 + s_1212 / Km1212_104, 2) * (1 + s_1286 / Km1286_104) + (1 + CO2 / KmCO2_104) * (1 + s_0529 / Km0529_104) * pow(1 + s_1207 / Km1207_104, 2) * (1 + s_1449 / Km1449_104) - 1)) + (6.0 * cell * Vmax_105 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(CO2, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_105) / (pow(Km1101_105, 3) * pow(Km1212_105, 6) * Km1449_105) / (pow(1 + s_1101 / Km1101_105, 3) * pow(1 + s_1212 / Km1212_105, 6) * (1 + s_1449 / Km1449_105) + pow(1 + CO2 / KmCO2_105, 3) * pow(1 + s_0529 / Km0529_105, 3) * (1 + s_1084 / Km1084_105) * pow(1 + s_1207 / Km1207_105, 6) - 1)) + (2.0 * cell * Vmax_106 * (s_1084 * s_1101 * pow(s_1212, 2) - CO2 * s_0505 * s_0529 * pow(s_1207, 2) / Keq_106) / (Km1084_106 * Km1101_106 * pow(Km1212_106, 2)) / ((1 + s_1084 / Km1084_106) * (1 + s_1101 / Km1101_106) * pow(1 + s_1212 / Km1212_106, 2) + (1 + CO2 / KmCO2_106) * (1 + s_0505 / Km0505_106) * (1 + s_0529 / Km0529_106) * pow(1 + s_1207 / Km1207_106, 2) - 1)) + (2.0 * cell * Vmax_107 * (s_1101 * pow(s_1212, 2) * s_1255 - CO2 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_107) / (Km1101_107 * pow(Km1212_107, 2) * Km1255_107) / ((1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) * (1 + s_1255 / Km1255_107) + (1 + CO2 / KmCO2_107) * (1 + s_0529 / Km0529_107) * (1 + s_0602 / Km0602_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) + (6.0 * cell * Vmax_108 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(CO2, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_108) / (Km0373_108 * pow(Km1101_108, 3) * pow(Km1212_108, 6)) / ((1 + s_0373 / Km0373_108) * pow(1 + s_1101 / Km1101_108, 3) * pow(1 + s_1212 / Km1212_108, 6) + pow(1 + CO2 / KmCO2_108, 3) * pow(1 + s_0529 / Km0529_108, 3) * pow(1 + s_1207 / Km1207_108, 6) * (1 + s_1255 / Km1255_108) - 1)) + (2.0 * cell * Vmax_113 * (s_0602 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_113) / (Km0602_113 * Km1101_113 * pow(Km1212_113, 2)) / ((1 + s_0602 / Km0602_113) * (1 + s_1101 / Km1101_113) * pow(1 + s_1212 / Km1212_113, 2) + (1 + CO2 / KmCO2_113) * (1 + s_0529 / Km0529_113) * (1 + s_1073 / Km1073_113) * pow(1 + s_1207 / Km1207_113, 2) - 1)) + (2.0 * cell * Vmax_114 * (s_1073 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_114) / (Km1073_114 * Km1101_114 * pow(Km1212_114, 2)) / ((1 + s_1073 / Km1073_114) * (1 + s_1101 / Km1101_114) * pow(1 + s_1212 / Km1212_114, 2) + (1 + CO2 / KmCO2_114) * (1 + s_0529 / Km0529_114) * (1 + s_1176 / Km1176_114) * pow(1 + s_1207 / Km1207_114, 2) - 1)) + (2.0 * cell * Vmax_115 * (s_1101 * s_1176 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_115) / (Km1101_115 * Km1176_115 * pow(Km1212_115, 2)) / ((1 + s_1101 / Km1101_115) * (1 + s_1176 / Km1176_115) * pow(1 + s_1212 / Km1212_115, 2) + (1 + CO2 / KmCO2_115) * (1 + s_0529 / Km0529_115) * pow(1 + s_1207 / Km1207_115, 2) * (1 + s_1302 / Km1302_115) - 1)) + (2.0 * cell * Vmax_116 * (s_1101 * pow(s_1212, 2) * s_1302 - CO2 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_116) / (Km1101_116 * pow(Km1212_116, 2) * Km1302_116) / ((1 + s_1101 / Km1101_116) * pow(1 + s_1212 / Km1212_116, 2) * (1 + s_1302 / Km1302_116) + (1 + CO2 / KmCO2_116) * (1 + s_0529 / Km0529_116) * pow(1 + s_1207 / Km1207_116, 2) * (1 + s_1454 / Km1454_116) - 1)) + (cell * Vmax_150 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_150) / (Km0978_150 * Km1212_150) / ((1 + s_0978 / Km0978_150) * (1 + s_1212 / Km1212_150) + (1 + s_1014 / Km1014_150) * (1 + s_1207 / Km1207_150) - 1)) + (2.0 * cell * Vmax_154 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_154) / (Km0218_154 * pow(Km1212_154, 2)) / ((1 + s_0218 / Km0218_154) * pow(1 + s_1212 / Km1212_154, 2) + (1 + s_0028 / Km0028_154) * (1 + s_0529 / Km0529_154) * pow(1 + s_1207 / Km1207_154, 2) - 1)) + (cell * Vmax_169 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_169) / (Km0039_169 * Km1212_169) / ((1 + s_0039 / Km0039_169) * (1 + s_1212 / Km1212_169) + (1 + s_0008 / Km0008_169) * (1 + s_1207 / Km1207_169) - 1)) + (cell * Vmax_171 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_171) / (Km0953_171 * Km1212_171) / ((1 + s_0953 / Km0953_171) * (1 + s_1212 / Km1212_171) + (1 + s_0959 / Km0959_171) * (1 + s_1207 / Km1207_171) - 1)) + (cell * Vmax_172 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_172) / (Km1151_172 * Km1212_172) / ((1 + s_1151 / Km1151_172) * (1 + s_1212 / Km1212_172) + (1 + s_0062 / Km0062_172) * (1 + s_1207 / Km1207_172) - 1)) + (cell * Vmax_194 * (s_1191 * s_1212 - s_0145 * s_1207 * PHO / Keq_194) / (Km1191_194 * Km1212_194) / ((1 + s_1191 / Km1191_194) * (1 + s_1212 / Km1212_194) + (1 + s_0145 / Km0145_194) * (1 + s_1207 / Km1207_194) * (1 + PHO / KmPHO_194) - 1)) + (cell * Vmax_233 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_233) / (Km0118_233 * Km1212_233) / ((1 + s_0118 / Km0118_233) * (1 + s_1212 / Km1212_233) + (1 + s_1035 / Km1035_233) * (1 + s_1207 / Km1207_233) - 1)) + (cell * Vmax_248 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_248) / (Km0959_248 * Km0991_248 * Km1212_248) / ((1 + s_0959 / Km0959_248) * (1 + s_0991 / Km0991_248) * (1 + s_1212 / Km1212_248) + (1 + s_1038 / Km1038_248) * (1 + s_1207 / Km1207_248) - 1)) + (cell * Vmax_252 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_252) / (Km0211_252 * Km1212_252) / ((1 + s_0211 / Km0211_252) * (1 + s_1212 / Km1212_252) + (1 + s_1207 / Km1207_252) * (1 + s_1429 / Km1429_252) - 1)) + (cell * Vmax_255 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_255) / (pow(Km0190_255, 2) * Km1212_255) / (pow(1 + s_0190 / Km0190_255, 2) * (1 + s_1212 / Km1212_255) + pow(1 + s_0633 / Km0633_255, 2) * (1 + s_1207 / Km1207_255) * (1 + s_1447 / Km1447_255) - 1)) + (3.0 * cell * Vmax_259 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_259) / (pow(Km1212_259, 3) * Km1469_259) / (pow(1 + s_1212 / Km1212_259, 3) * (1 + s_1469 / Km1469_259) + (1 + s_0841 / Km0841_259) * pow(1 + s_1207 / Km1207_259, 3) - 1)) + (cell * Vmax_260 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_260) / (Km1212_260 * Km1620_260) / ((1 + s_1212 / Km1212_260) * (1 + s_1620 / Km1620_260) + (1 + s_1207 / Km1207_260) * (1 + s_1616 / Km1616_260) - 1)) - (cell * Vmax_45 * (AcAld * s_1207 - s_0362 * s_1212 / Keq_45) / (KmAcAld_45 * Km1207_45) / ((1 + AcAld / KmAcAld_45) * (1 + s_1207 / Km1207_45) + (1 + s_0362 / Km0362_45) * (1 + s_1212 / Km1212_45) - 1)) - (cell * Vmax_64 * (s_1207 * s_1578 - CO2 * s_1212 * s_1579 / Keq_64) / (Km1207_64 * Km1578_64) / ((1 + s_1207 / Km1207_64) * (1 + s_1578 / Km1578_64) + (1 + CO2 / KmCO2_64) * (1 + s_1212 / Km1212_64) * (1 + s_1579 / Km1579_64) - 1)) - (cell * Vmax_123 * (G6P * s_1207 - s_0335 * s_1212 / Keq_123) / (KmG6P_123 * Km1207_123) / ((1 + G6P / KmG6P_123) * (1 + s_1207 / Km1207_123) + (1 + s_0335 / Km0335_123) * (1 + s_1212 / Km1212_123) - 1)) - (cell * Vmax_164 * (s_0940 * s_1207 - s_0180 * CO2 * s_1212 / Keq_164) / (Km0940_164 * Km1207_164) / ((1 + s_0940 / Km0940_164) * (1 + s_1207 / Km1207_164) + (1 + s_0180 / Km0180_164) * (1 + CO2 / KmCO2_164) * (1 + s_1212 / Km1212_164) - 1)) - (cell * Vmax_188 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_188) / (Km0306_188 * Km1207_188) / ((1 + s_0306 / Km0306_188) * (1 + s_1207 / Km1207_188) + (1 + s_0304 / Km0304_188) * (1 + s_1212 / Km1212_188) - 1)) - (cell * Vmax_214 * (s_0340 * s_1207 - CO2 * s_0577 * s_1212 / Keq_214) / (Km0340_214 * Km1207_214) / ((1 + s_0340 / Km0340_214) * (1 + s_1207 / Km1207_214) + (1 + CO2 / KmCO2_214) * (1 + s_0577 / Km0577_214) * (1 + s_1212 / Km1212_214) - 1)) - (cell * Vmax_231 * (s_1207 * s_1377 - s_0204 * CO2 * s_1212 / Keq_231) / (Km1207_231 * Km1377_231) / ((1 + s_1207 / Km1207_231) * (1 + s_1377 / Km1377_231) + (1 + s_0204 / Km0204_231) * (1 + CO2 / KmCO2_231) * (1 + s_1212 / Km1212_231) - 1));
    der(s_1212) = (cell * Vmax_45 * (AcAld * s_1207 - s_0362 * s_1212 / Keq_45) / (KmAcAld_45 * Km1207_45) / ((1 + AcAld / KmAcAld_45) * (1 + s_1207 / Km1207_45) + (1 + s_0362 / Km0362_45) * (1 + s_1212 / Km1212_45) - 1)) + (cell * Vmax_64 * (s_1207 * s_1578 - CO2 * s_1212 * s_1579 / Keq_64) / (Km1207_64 * Km1578_64) / ((1 + s_1207 / Km1207_64) * (1 + s_1578 / Km1578_64) + (1 + CO2 / KmCO2_64) * (1 + s_1212 / Km1212_64) * (1 + s_1579 / Km1579_64) - 1)) + (cell * Vmax_123 * (G6P * s_1207 - s_0335 * s_1212 / Keq_123) / (KmG6P_123 * Km1207_123) / ((1 + G6P / KmG6P_123) * (1 + s_1207 / Km1207_123) + (1 + s_0335 / Km0335_123) * (1 + s_1212 / Km1212_123) - 1)) + (cell * Vmax_164 * (s_0940 * s_1207 - s_0180 * CO2 * s_1212 / Keq_164) / (Km0940_164 * Km1207_164) / ((1 + s_0940 / Km0940_164) * (1 + s_1207 / Km1207_164) + (1 + s_0180 / Km0180_164) * (1 + CO2 / KmCO2_164) * (1 + s_1212 / Km1212_164) - 1)) + (cell * Vmax_188 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_188) / (Km0306_188 * Km1207_188) / ((1 + s_0306 / Km0306_188) * (1 + s_1207 / Km1207_188) + (1 + s_0304 / Km0304_188) * (1 + s_1212 / Km1212_188) - 1)) + (cell * Vmax_214 * (s_0340 * s_1207 - CO2 * s_0577 * s_1212 / Keq_214) / (Km0340_214 * Km1207_214) / ((1 + s_0340 / Km0340_214) * (1 + s_1207 / Km1207_214) + (1 + CO2 / KmCO2_214) * (1 + s_0577 / Km0577_214) * (1 + s_1212 / Km1212_214) - 1)) + (cell * Vmax_231 * (s_1207 * s_1377 - s_0204 * CO2 * s_1212 / Keq_231) / (Km1207_231 * Km1377_231) / ((1 + s_1207 / Km1207_231) * (1 + s_1377 / Km1377_231) + (1 + s_0204 / Km0204_231) * (1 + CO2 / KmCO2_231) * (1 + s_1212 / Km1212_231) - 1)) - (cell * Vmax_8 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_8) / (Km0141_8 * Km1212_8) / ((1 + s_0141 / Km0141_8) * (1 + s_1212 / Km1212_8) + (1 + s_0142 / Km0142_8) * (1 + s_1207 / Km1207_8) - 1)) - (cell * Vmax_20 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_20) / (Km0231_20 * Km1212_20) / ((1 + s_0231 / Km0231_20) * (1 + s_1212 / Km1212_20) + (1 + s_1207 / Km1207_20) * (1 + s_1445 / Km1445_20) - 1)) - (cell * Vmax_25 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_25) / (Km0306_25 * Km1212_25) / ((1 + s_0306 / Km0306_25) * (1 + s_1212 / Km1212_25) + (1 + s_0322 / Km0322_25) * (1 + s_1207 / Km1207_25) - 1)) - (cell * Vmax_27 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_27) / (Km0146_27 * Km1212_27) / ((1 + s_0146 / Km0146_27) * (1 + s_1212 / Km1212_27) + (1 + s_0016 / Km0016_27) * (1 + s_1207 / Km1207_27) - 1)) - (cell * Vmax_58 * (s_0295 * s_1212 - s_0978 * s_1207 * PHO / Keq_58) / (Km0295_58 * Km1212_58) / ((1 + s_0295 / Km0295_58) * (1 + s_1212 / Km1212_58) + (1 + s_0978 / Km0978_58) * (1 + s_1207 / Km1207_58) * (1 + PHO / KmPHO_58) - 1)) - (cell * Vmax_63 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_63) / (Km0262_63 * Km1212_63) / ((1 + s_0262 / Km0262_63) * (1 + s_1212 / Km1212_63) + (1 + s_0122 / Km0122_63) * (1 + s_1207 / Km1207_63) - 1)) - (cell * Vmax_66 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_66) / (Km0209_66 * Km1212_66) / ((1 + s_0209 / Km0209_66) * (1 + s_1212 / Km1212_66) + (1 + s_0296 / Km0296_66) * (1 + s_1207 / Km1207_66) - 1)) - (cell * Vmax_67 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_67) / (Km1212_67 * Km1579_67) / ((1 + s_1212 / Km1212_67) * (1 + s_1579 / Km1579_67) + (1 + s_1207 / Km1207_67) * (1 + s_1569 / Km1569_67) - 1)) - (cell * Vmax_68 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_68) / (Km0296_68 * Km1212_68 * Km1275_68) / ((1 + s_0296 / Km0296_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_1207 / Km1207_68) * (1 + s_1576 / Km1576_68) - 1)) - (cell * Vmax_69 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_69) / (Km1212_69 * Km1275_69 * Km1576_69) / ((1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) * (1 + s_1576 / Km1576_69) + (1 + s_1207 / Km1207_69) * (1 + s_1577 / Km1577_69) - 1)) - (cell * Vmax_70 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_70) / (Km1212_70 * Km1275_70 * Km1577_70) / ((1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) * (1 + s_1577 / Km1577_70) + (1 + s_1207 / Km1207_70) * (1 + s_1578 / Km1578_70) - 1)) - (3.0 * cell * Vmax_71 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_71) / (Km0122_71 * pow(Km1212_71, 3) * pow(Km1275_71, 3)) / ((1 + s_0122 / Km0122_71) * pow(1 + s_1212 / Km1212_71, 3) * pow(1 + s_1275 / Km1275_71, 3) + (1 + s_0297 / Km0297_71) * pow(1 + s_1207 / Km1207_71, 3) - 1)) - (cell * Vmax_73 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_73) / (Km0662_73 * Km1212_73) / ((1 + s_0662 / Km0662_73) * (1 + s_1212 / Km1212_73) + (1 + s_0666 / Km0666_73) * (1 + s_1207 / Km1207_73) - 1)) - (3.0 * cell * Vmax_87 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_87) / (Km1059_87 * pow(Km1212_87, 3) * pow(Km1275_87, 3)) / ((1 + s_1059 / Km1059_87) * pow(1 + s_1212 / Km1212_87, 3) * pow(1 + s_1275 / Km1275_87, 3) + (1 + s_0262 / Km0262_87) * (1 + s_0722 / Km0722_87) * pow(1 + s_1207 / Km1207_87, 3) - 1)) - (cell * Vmax_92 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_92) / (Km0625_92 * Km1212_92) / ((1 + s_0625 / Km0625_92) * (1 + s_1212 / Km1212_92) + (1 + s_1207 / Km1207_92) * (1 + s_1487 / Km1487_92) - 1)) - (2.0 * cell * Vmax_101 * (s_0595 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_101) / (Km0595_101 * Km1101_101 * pow(Km1212_101, 2)) / ((1 + s_0595 / Km0595_101) * (1 + s_1101 / Km1101_101) * pow(1 + s_1212 / Km1212_101, 2) + (1 + CO2 / KmCO2_101) * (1 + s_0529 / Km0529_101) * (1 + s_1065 / Km1065_101) * pow(1 + s_1207 / Km1207_101, 2) - 1)) - (2.0 * cell * Vmax_102 * (s_1065 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_102) / (Km1065_102 * Km1101_102 * pow(Km1212_102, 2)) / ((1 + s_1065 / Km1065_102) * (1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) + (1 + CO2 / KmCO2_102) * (1 + s_0529 / Km0529_102) * (1 + s_1161 / Km1161_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) - (2.0 * cell * Vmax_103 * (s_1101 * s_1161 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_103) / (Km1101_103 * Km1161_103 * pow(Km1212_103, 2)) / ((1 + s_1101 / Km1101_103) * (1 + s_1161 / Km1161_103) * pow(1 + s_1212 / Km1212_103, 2) + (1 + CO2 / KmCO2_103) * (1 + s_0529 / Km0529_103) * pow(1 + s_1207 / Km1207_103, 2) * (1 + s_1286 / Km1286_103) - 1)) - (2.0 * cell * Vmax_104 * (s_1101 * pow(s_1212, 2) * s_1286 - CO2 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_104) / (Km1101_104 * pow(Km1212_104, 2) * Km1286_104) / ((1 + s_1101 / Km1101_104) * pow(1 + s_1212 / Km1212_104, 2) * (1 + s_1286 / Km1286_104) + (1 + CO2 / KmCO2_104) * (1 + s_0529 / Km0529_104) * pow(1 + s_1207 / Km1207_104, 2) * (1 + s_1449 / Km1449_104) - 1)) - (6.0 * cell * Vmax_105 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(CO2, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_105) / (pow(Km1101_105, 3) * pow(Km1212_105, 6) * Km1449_105) / (pow(1 + s_1101 / Km1101_105, 3) * pow(1 + s_1212 / Km1212_105, 6) * (1 + s_1449 / Km1449_105) + pow(1 + CO2 / KmCO2_105, 3) * pow(1 + s_0529 / Km0529_105, 3) * (1 + s_1084 / Km1084_105) * pow(1 + s_1207 / Km1207_105, 6) - 1)) - (2.0 * cell * Vmax_106 * (s_1084 * s_1101 * pow(s_1212, 2) - CO2 * s_0505 * s_0529 * pow(s_1207, 2) / Keq_106) / (Km1084_106 * Km1101_106 * pow(Km1212_106, 2)) / ((1 + s_1084 / Km1084_106) * (1 + s_1101 / Km1101_106) * pow(1 + s_1212 / Km1212_106, 2) + (1 + CO2 / KmCO2_106) * (1 + s_0505 / Km0505_106) * (1 + s_0529 / Km0529_106) * pow(1 + s_1207 / Km1207_106, 2) - 1)) - (2.0 * cell * Vmax_107 * (s_1101 * pow(s_1212, 2) * s_1255 - CO2 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_107) / (Km1101_107 * pow(Km1212_107, 2) * Km1255_107) / ((1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) * (1 + s_1255 / Km1255_107) + (1 + CO2 / KmCO2_107) * (1 + s_0529 / Km0529_107) * (1 + s_0602 / Km0602_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) - (6.0 * cell * Vmax_108 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(CO2, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_108) / (Km0373_108 * pow(Km1101_108, 3) * pow(Km1212_108, 6)) / ((1 + s_0373 / Km0373_108) * pow(1 + s_1101 / Km1101_108, 3) * pow(1 + s_1212 / Km1212_108, 6) + pow(1 + CO2 / KmCO2_108, 3) * pow(1 + s_0529 / Km0529_108, 3) * pow(1 + s_1207 / Km1207_108, 6) * (1 + s_1255 / Km1255_108) - 1)) - (2.0 * cell * Vmax_113 * (s_0602 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_113) / (Km0602_113 * Km1101_113 * pow(Km1212_113, 2)) / ((1 + s_0602 / Km0602_113) * (1 + s_1101 / Km1101_113) * pow(1 + s_1212 / Km1212_113, 2) + (1 + CO2 / KmCO2_113) * (1 + s_0529 / Km0529_113) * (1 + s_1073 / Km1073_113) * pow(1 + s_1207 / Km1207_113, 2) - 1)) - (2.0 * cell * Vmax_114 * (s_1073 * s_1101 * pow(s_1212, 2) - CO2 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_114) / (Km1073_114 * Km1101_114 * pow(Km1212_114, 2)) / ((1 + s_1073 / Km1073_114) * (1 + s_1101 / Km1101_114) * pow(1 + s_1212 / Km1212_114, 2) + (1 + CO2 / KmCO2_114) * (1 + s_0529 / Km0529_114) * (1 + s_1176 / Km1176_114) * pow(1 + s_1207 / Km1207_114, 2) - 1)) - (2.0 * cell * Vmax_115 * (s_1101 * s_1176 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_115) / (Km1101_115 * Km1176_115 * pow(Km1212_115, 2)) / ((1 + s_1101 / Km1101_115) * (1 + s_1176 / Km1176_115) * pow(1 + s_1212 / Km1212_115, 2) + (1 + CO2 / KmCO2_115) * (1 + s_0529 / Km0529_115) * pow(1 + s_1207 / Km1207_115, 2) * (1 + s_1302 / Km1302_115) - 1)) - (2.0 * cell * Vmax_116 * (s_1101 * pow(s_1212, 2) * s_1302 - CO2 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_116) / (Km1101_116 * pow(Km1212_116, 2) * Km1302_116) / ((1 + s_1101 / Km1101_116) * pow(1 + s_1212 / Km1212_116, 2) * (1 + s_1302 / Km1302_116) + (1 + CO2 / KmCO2_116) * (1 + s_0529 / Km0529_116) * pow(1 + s_1207 / Km1207_116, 2) * (1 + s_1454 / Km1454_116) - 1)) - (cell * Vmax_150 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_150) / (Km0978_150 * Km1212_150) / ((1 + s_0978 / Km0978_150) * (1 + s_1212 / Km1212_150) + (1 + s_1014 / Km1014_150) * (1 + s_1207 / Km1207_150) - 1)) - (2.0 * cell * Vmax_154 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_154) / (Km0218_154 * pow(Km1212_154, 2)) / ((1 + s_0218 / Km0218_154) * pow(1 + s_1212 / Km1212_154, 2) + (1 + s_0028 / Km0028_154) * (1 + s_0529 / Km0529_154) * pow(1 + s_1207 / Km1207_154, 2) - 1)) - (cell * Vmax_169 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_169) / (Km0039_169 * Km1212_169) / ((1 + s_0039 / Km0039_169) * (1 + s_1212 / Km1212_169) + (1 + s_0008 / Km0008_169) * (1 + s_1207 / Km1207_169) - 1)) - (cell * Vmax_171 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_171) / (Km0953_171 * Km1212_171) / ((1 + s_0953 / Km0953_171) * (1 + s_1212 / Km1212_171) + (1 + s_0959 / Km0959_171) * (1 + s_1207 / Km1207_171) - 1)) - (cell * Vmax_172 * (s_1151 * s_1212 - s_0062 * s_1207 / Keq_172) / (Km1151_172 * Km1212_172) / ((1 + s_1151 / Km1151_172) * (1 + s_1212 / Km1212_172) + (1 + s_0062 / Km0062_172) * (1 + s_1207 / Km1207_172) - 1)) - (cell * Vmax_194 * (s_1191 * s_1212 - s_0145 * s_1207 * PHO / Keq_194) / (Km1191_194 * Km1212_194) / ((1 + s_1191 / Km1191_194) * (1 + s_1212 / Km1212_194) + (1 + s_0145 / Km0145_194) * (1 + s_1207 / Km1207_194) * (1 + PHO / KmPHO_194) - 1)) - (cell * Vmax_233 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_233) / (Km0118_233 * Km1212_233) / ((1 + s_0118 / Km0118_233) * (1 + s_1212 / Km1212_233) + (1 + s_1035 / Km1035_233) * (1 + s_1207 / Km1207_233) - 1)) - (cell * Vmax_248 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_248) / (Km0959_248 * Km0991_248 * Km1212_248) / ((1 + s_0959 / Km0959_248) * (1 + s_0991 / Km0991_248) * (1 + s_1212 / Km1212_248) + (1 + s_1038 / Km1038_248) * (1 + s_1207 / Km1207_248) - 1)) - (cell * Vmax_252 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_252) / (Km0211_252 * Km1212_252) / ((1 + s_0211 / Km0211_252) * (1 + s_1212 / Km1212_252) + (1 + s_1207 / Km1207_252) * (1 + s_1429 / Km1429_252) - 1)) - (cell * Vmax_255 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_255) / (pow(Km0190_255, 2) * Km1212_255) / (pow(1 + s_0190 / Km0190_255, 2) * (1 + s_1212 / Km1212_255) + pow(1 + s_0633 / Km0633_255, 2) * (1 + s_1207 / Km1207_255) * (1 + s_1447 / Km1447_255) - 1)) - (3.0 * cell * Vmax_259 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_259) / (pow(Km1212_259, 3) * Km1469_259) / (pow(1 + s_1212 / Km1212_259, 3) * (1 + s_1469 / Km1469_259) + (1 + s_0841 / Km0841_259) * pow(1 + s_1207 / Km1207_259, 3) - 1)) - (cell * Vmax_260 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_260) / (Km1212_260 * Km1620_260) / ((1 + s_1212 / Km1212_260) * (1 + s_1620 / Km1620_260) + (1 + s_1207 / Km1207_260) * (1 + s_1616 / Km1616_260) - 1));
    der(s_1233) = (cell * Vmax_152 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_152) / (Km0373_152 * Km1014_152) / ((1 + s_0373 / Km0373_152) * (1 + s_1014 / Km1014_152) + (1 + s_0529 / Km0529_152) * (1 + s_1233 / Km1233_152) - 1)) - (cell * Vmax_85 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_85) / (Km0981_85 * Km1233_85) / ((1 + s_0981 / Km0981_85) * (1 + s_1233 / Km1233_85) + (1 + s_0362 / Km0362_85) * (1 + s_0980 / Km0980_85) - 1)) - (cell * Vmax_198 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_198) / (Km0841_198 * Km1233_198) / ((1 + s_0841 / Km0841_198) * (1 + s_1233 / Km1233_198) + (1 + s_0362 / Km0362_198) * (1 + s_1012 / Km1012_198) - 1));
    der(s_1238) = (cell * Vmax_151 * (ATP * s_1014 - ADP * s_1238 / Keq_151) / (KmATP_151 * Km1014_151) / ((1 + ATP / KmATP_151) * (1 + s_1014 / Km1014_151) + (1 + ADP / KmADP_151) * (1 + s_1238 / Km1238_151) - 1)) - (cell * Vmax_262 * (s_1238 - s_1045 * PHO / Keq_262) / Km1238_262 / (1 + s_1238 / Km1238_262 + (1 + s_1045 / Km1045_262) * (1 + PHO / KmPHO_262) - 1));
    der(s_1255) = (cell * Vmax_108 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(CO2, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_108) / (Km0373_108 * pow(Km1101_108, 3) * pow(Km1212_108, 6)) / ((1 + s_0373 / Km0373_108) * pow(1 + s_1101 / Km1101_108, 3) * pow(1 + s_1212 / Km1212_108, 6) + pow(1 + CO2 / KmCO2_108, 3) * pow(1 + s_0529 / Km0529_108, 3) * pow(1 + s_1207 / Km1207_108, 6) * (1 + s_1255 / Km1255_108) - 1)) - (cell * Vmax_107 * (s_1101 * pow(s_1212, 2) * s_1255 - CO2 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_107) / (Km1101_107 * pow(Km1212_107, 2) * Km1255_107) / ((1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) * (1 + s_1255 / Km1255_107) + (1 + CO2 / KmCO2_107) * (1 + s_0529 / Km0529_107) * (1 + s_0602 / Km0602_107) * pow(1 + s_1207 / Km1207_107, 2) - 1));
    der(s_1266) = (cell * Vmax_200 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_200) / (Km0991_200 * Km1182_200) / ((1 + s_0991 / Km0991_200) * (1 + s_1182 / Km1182_200) + (1 + s_1192 / Km1192_200) * (1 + s_1266 / Km1266_200) - 1)) - (cell * Vmax_199 * (s_0455 * s_1266 - s_0979 * PHO / Keq_199) / (Km0455_199 * Km1266_199) / ((1 + s_0455 / Km0455_199) * (1 + s_1266 / Km1266_199) + (1 + s_0979 / Km0979_199) * (1 + PHO / KmPHO_199) - 1));
    der(s_1269) = (cell * Vmax_297 * (s_0061 * NAD - s_1269 * NADH / Keq_297) / (Km0061_297 * KmNAD_297) / ((1 + s_0061 / Km0061_297) * (1 + NAD / KmNAD_297) + (1 + s_1269 / Km1269_297) * (1 + NADH / KmNAD_297H) - 1)) - (cell * Vmax_201 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_201) / (Km1269_201 * Km1386_201) / ((1 + s_1269 / Km1269_201) * (1 + s_1386 / Km1386_201) + (1 + s_0633 / Km0633_201) * (1 + s_1270 / Km1270_201) - 1));
    der(s_1270) = (cell * Vmax_201 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_201) / (Km1269_201 * Km1386_201) / ((1 + s_1269 / Km1269_201) * (1 + s_1386 / Km1386_201) + (1 + s_0633 / Km0633_201) * (1 + s_1270 / Km1270_201) - 1)) - (cell * Vmax_202 * (s_1270 - CO2 * s_1545 / Keq_202) / Km1270_202 / (1 + s_1270 / Km1270_202 + (1 + CO2 / KmCO2_202) * (1 + s_1545 / Km1545_202) - 1));
    der(s_1271) = (cell * Vmax_180 * (s_0066 * NAD - NADH * s_1271 / Keq_180) / (Km0066_180 * KmNAD_180) / ((1 + s_0066 / Km0066_180) * (1 + NAD / KmNAD_180) + (1 + NADH / KmNAD_180H) * (1 + s_1271 / Km1271_180) - 1)) + (cell * Vmax_234 * (ATP * s_0445 * PYR - ADP * s_1271 * PHO / Keq_234) / (KmATP_234 * Km0445_234 * KmPYR_234) / ((1 + ATP / KmATP_234) * (1 + s_0445 / Km0445_234) * (1 + PYR / KmPYR_234) + (1 + ADP / KmADP_234) * (1 + s_1271 / Km1271_234) * (1 + PHO / KmPHO_234) - 1)) - (cell * Vmax_57 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_57) / (Km0991_57 * Km1271_57) / ((1 + s_0991 / Km0991_57) * (1 + s_1271 / Km1271_57) + (1 + s_0180 / Km0180_57) * (1 + s_0973 / Km0973_57) - 1)) - (cell * Vmax_80 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_80) / (Km0373_80 * Km1271_80) / ((1 + s_0373 / Km0373_80) * (1 + s_1271 / Km1271_80) + (1 + s_0522 / Km0522_80) * (1 + s_0529 / Km0529_80) - 1)) - (cell * Vmax_211 * (ATP * s_1271 - ADP * CO2 * PEP / Keq_211) / (KmATP_211 * Km1271_211) / ((1 + ATP / KmATP_211) * (1 + s_1271 / Km1271_211) + (1 + ADP / KmADP_211) * (1 + CO2 / KmCO2_211) * (1 + PEP / KmPEP_211) - 1));
    der(s_1275) = (cell * Vmax_292 * (s_1277 - s_1275) / Km1277_292 / (1 + s_1277 / Km1277_292 + 1 + s_1275 / Km1275_292 - 1)) - (cell * Vmax_68 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_68) / (Km0296_68 * Km1212_68 * Km1275_68) / ((1 + s_0296 / Km0296_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_1207 / Km1207_68) * (1 + s_1576 / Km1576_68) - 1)) - (cell * Vmax_69 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_69) / (Km1212_69 * Km1275_69 * Km1576_69) / ((1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) * (1 + s_1576 / Km1576_69) + (1 + s_1207 / Km1207_69) * (1 + s_1577 / Km1577_69) - 1)) - (cell * Vmax_70 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_70) / (Km1212_70 * Km1275_70 * Km1577_70) / ((1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) * (1 + s_1577 / Km1577_70) + (1 + s_1207 / Km1207_70) * (1 + s_1578 / Km1578_70) - 1)) - (3.0 * cell * Vmax_71 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_71) / (Km0122_71 * pow(Km1212_71, 3) * pow(Km1275_71, 3)) / ((1 + s_0122 / Km0122_71) * pow(1 + s_1212 / Km1212_71, 3) * pow(1 + s_1275 / Km1275_71, 3) + (1 + s_0297 / Km0297_71) * pow(1 + s_1207 / Km1207_71, 3) - 1)) - (3.0 * cell * Vmax_87 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_87) / (Km1059_87 * pow(Km1212_87, 3) * pow(Km1275_87, 3)) / ((1 + s_1059 / Km1059_87) * pow(1 + s_1212 / Km1212_87, 3) * pow(1 + s_1275 / Km1275_87, 3) + (1 + s_0262 / Km0262_87) * (1 + s_0722 / Km0722_87) * pow(1 + s_1207 / Km1207_87, 3) - 1)) - (cell * Vmax_117 * (pow(s_0710, 4) * s_1275 - pow(s_0709, 4) / Keq_117) / (pow(Km0710_117, 4) * Km1275_117) / (pow(1 + s_0710 / Km0710_117, 4) * (1 + s_1275 / Km1275_117) + pow(1 + s_0709 / Km0709_117, 4) - 1)) - (cell * Vmax_254 * (NADH * s_1275 * s_1447 - s_0037 * NAD / Keq_254) / (KmNAD_254H_254 * Km1275_254 * Km1447_254) / ((1 + NADH / KmNAD_254H_254) * (1 + s_1275 / Km1275_254) * (1 + s_1447 / Km1447_254) + (1 + s_0037 / Km0037_254) * (1 + NAD / KmNAD_254) - 1)) - (cell * Vmax_286 * (s_1275 * s_1416 * s_1569 - s_0662 * s_1413 / Keq_286) / (Km1275_286 * Km1416_286 * Km1569_286) / ((1 + s_1275 / Km1275_286) * (1 + s_1416 / Km1416_286) * (1 + s_1569 / Km1569_286) + (1 + s_0662 / Km0662_286) * (1 + s_1413 / Km1413_286) - 1));
    der(s_1277) = 0.0;
    der(s_1286) = (cell * Vmax_103 * (s_1101 * s_1161 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_103) / (Km1101_103 * Km1161_103 * pow(Km1212_103, 2)) / ((1 + s_1101 / Km1101_103) * (1 + s_1161 / Km1161_103) * pow(1 + s_1212 / Km1212_103, 2) + (1 + CO2 / KmCO2_103) * (1 + s_0529 / Km0529_103) * pow(1 + s_1207 / Km1207_103, 2) * (1 + s_1286 / Km1286_103) - 1)) - (cell * Vmax_104 * (s_1101 * pow(s_1212, 2) * s_1286 - CO2 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_104) / (Km1101_104 * pow(Km1212_104, 2) * Km1286_104) / ((1 + s_1101 / Km1101_104) * pow(1 + s_1212 / Km1212_104, 2) * (1 + s_1286 / Km1286_104) + (1 + CO2 / KmCO2_104) * (1 + s_0529 / Km0529_104) * pow(1 + s_1207 / Km1207_104, 2) * (1 + s_1449 / Km1449_104) - 1));
    der(s_1302) = (cell * Vmax_115 * (s_1101 * s_1176 * pow(s_1212, 2) - CO2 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_115) / (Km1101_115 * Km1176_115 * pow(Km1212_115, 2)) / ((1 + s_1101 / Km1101_115) * (1 + s_1176 / Km1176_115) * pow(1 + s_1212 / Km1212_115, 2) + (1 + CO2 / KmCO2_115) * (1 + s_0529 / Km0529_115) * pow(1 + s_1207 / Km1207_115, 2) * (1 + s_1302 / Km1302_115) - 1)) - (cell * Vmax_116 * (s_1101 * pow(s_1212, 2) * s_1302 - CO2 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_116) / (Km1101_116 * pow(Km1212_116, 2) * Km1302_116) / ((1 + s_1101 / Km1101_116) * pow(1 + s_1212 / Km1212_116, 2) * (1 + s_1302 / Km1302_116) + (1 + CO2 / KmCO2_116) * (1 + s_0529 / Km0529_116) * pow(1 + s_1207 / Km1207_116, 2) * (1 + s_1454 / Km1454_116) - 1)) - (cell * Vmax_250 * (s_1039 * s_1302 - s_0231 * CO2 * s_0529 / Keq_250) / (Km1039_250 * Km1302_250) / ((1 + s_1039 / Km1039_250) * (1 + s_1302 / Km1302_250) + (1 + s_0231 / Km0231_250) * (1 + CO2 / KmCO2_250) * (1 + s_0529 / Km0529_250) - 1));
    der(s_1314) = (cell * Vmax_204 * (ATP * s_1032 * s_1604 - AMP * s_0633 * s_1314 / Keq_204) / (KmATP_204 * Km1032_204 * Km1604_204) / ((1 + ATP / KmATP_204) * (1 + s_1032 / Km1032_204) * (1 + s_1604 / Km1604_204) + (1 + AMP / KmAMP_204) * (1 + s_0633 / Km0633_204) * (1 + s_1314 / Km1314_204) - 1)) - (0.1339 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(PHO) = (cell * Vmax_11 * (s_0551 * PEP - s_0349 * PHO / Keq_11) / (Km0551_11 * KmPEP_11) / ((1 + s_0551 / Km0551_11) * (1 + PEP / KmPEP_11) + (1 + s_0349 / Km0349_11) * (1 + PHO / KmPHO_11) - 1)) + (cell * Vmax_16 * (s_0390 - AMP * PHO / Keq_16) / Km0390_16 / (1 + s_0390 / Km0390_16 + (1 + AMP / KmAMP_16) * (1 + PHO / KmPHO_16) - 1)) + (cell * Vmax_19 * (s_0349 - s_0210 * PHO / Keq_19) / Km0349_19 / (1 + s_0349 / Km0349_19 + (1 + s_0210 / Km0210_19) * (1 + PHO / KmPHO_19) - 1)) + (cell * Vmax_23 * (s_0261 * PEP - s_0324 * PHO / Keq_23) / (Km0261_23 * KmPEP_23) / ((1 + s_0261 / Km0261_23) * (1 + PEP / KmPEP_23) + (1 + s_0324 / Km0324_23) * (1 + PHO / KmPHO_23) - 1)) + (cell * Vmax_24 * (s_0301 * ATP * s_0999 - s_0302 * ADP * s_0991 * PHO / Keq_24) / (Km0301_24 * KmATP_24 * Km0999_24) / ((1 + s_0301 / Km0301_24) * (1 + ATP / KmATP_24) * (1 + s_0999 / Km0999_24) + (1 + s_0302 / Km0302_24) * (1 + ADP / KmADP_24) * (1 + s_0991 / Km0991_24) * (1 + PHO / KmPHO_24) - 1)) + (cell * Vmax_30 * (s_0373 * ATP * s_0445 - ADP * s_1101 * PHO / Keq_30) / (Km0373_30 * KmATP_30 * Km0445_30) / ((1 + s_0373 / Km0373_30) * (1 + ATP / KmATP_30) * (1 + s_0445 / Km0445_30) + (1 + ADP / KmADP_30) * (1 + s_1101 / Km1101_30) * (1 + PHO / KmPHO_30) - 1)) + (cell * Vmax_40 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * PHO / Keq_40) / (Km0785_40 * Km0849_40 * Km0973_40) / ((1 + s_0785 / Km0785_40) * (1 + s_0849 / Km0849_40) * (1 + s_0973 / Km0973_40) + (1 + s_0393 / Km0393_40) * (1 + s_0739 / Km0739_40) * (1 + PHO / KmPHO_40) - 1)) + (cell * Vmax_55 * (s_0455 * s_0973 - s_1194 * PHO / Keq_55) / (Km0455_55 * Km0973_55) / ((1 + s_0455 / Km0455_55) * (1 + s_0973 / Km0973_55) + (1 + s_1194 / Km1194_55) * (1 + PHO / KmPHO_55) - 1)) + (cell * Vmax_58 * (s_0295 * s_1212 - s_0978 * s_1207 * PHO / Keq_58) / (Km0295_58 * Km1212_58) / ((1 + s_0295 / Km0295_58) * (1 + s_1212 / Km1212_58) + (1 + s_0978 / Km0978_58) * (1 + s_1207 / Km1207_58) * (1 + PHO / KmPHO_58) - 1)) + (cell * k_62 * ATP) + (cell * Vmax_74 * (pow(ATP, 2) * s_0445 * s_0999 - pow(ADP, 2) * s_0455 * s_0991 * PHO / Keq_74) / (pow(KmATP_74, 2) * Km0445_74 * Km0999_74) / (pow(1 + ATP / KmATP_74, 2) * (1 + s_0445 / Km0445_74) * (1 + s_0999 / Km0999_74) + pow(1 + ADP / KmADP_74, 2) * (1 + s_0455 / Km0455_74) * (1 + s_0991 / Km0991_74) * (1 + PHO / KmPHO_74) - 1)) + (cell * Vmax_78 * (s_0324 - s_0515 * PHO / Keq_78) / Km0324_78 / (1 + s_0324 / Km0324_78 + (1 + s_0515 / Km0515_78) * (1 + PHO / KmPHO_78) - 1)) + (cell * Vmax_82 * (s_0419 * ATP * s_1559 - ADP * s_0539 * PHO / Keq_82) / (Km0419_82 * KmATP_82 * Km1559_82) / ((1 + s_0419 / Km0419_82) * (1 + ATP / KmATP_82) * (1 + s_1559 / Km1559_82) + (1 + ADP / KmADP_82) * (1 + s_0539 / Km0539_82) * (1 + PHO / KmPHO_82) - 1)) + (cell * Vmax_91 * (s_1331 - s_0619 * PHO / Keq_91) / Km1331_91 / (1 + s_1331 / Km1331_91 + (1 + s_0619 / Km0619_91) * (1 + PHO / KmPHO_91) - 1)) + (cell * Vmax_119 * (ATP * s_0722 * s_1487 - s_0120 * ADP * PHO / Keq_119) / (KmATP_119 * Km0722_119 * Km1487_119) / ((1 + ATP / KmATP_119) * (1 + s_0722 / Km0722_119) * (1 + s_1487 / Km1487_119) + (1 + s_0120 / Km0120_119) * (1 + ADP / KmADP_119) * (1 + PHO / KmPHO_119) - 1)) + (cell * Vmax_126 * (s_0419 * ATP * s_0991 - ADP * s_0999 * PHO / Keq_126) / (Km0419_126 * KmATP_126 * Km0991_126) / ((1 + s_0419 / Km0419_126) * (1 + ATP / KmATP_126) * (1 + s_0991 / Km0991_126) + (1 + ADP / KmADP_126) * (1 + s_0999 / Km0999_126) * (1 + PHO / KmPHO_126) - 1)) + (cell * Vmax_130 * (s_0767 - GLY * PHO / Keq_130) / Km0767_130 / (1 + s_0767 / Km0767_130 + (1 + GLY / KmGLY_130) * (1 + PHO / KmPHO_130) - 1)) + (cell * Vmax_144 * (s_1011 - s_1010 * PHO / Keq_144) / Km1011_144 / (1 + s_1011 / Km1011_144 + (1 + s_1010 / Km1010_144) * (1 + PHO / KmPHO_144) - 1)) + (2.0 * cell * Vmax_160 * (s_0633 - pow(PHO, 2) / Keq_160) / Km0633_160 / (1 + s_0633 / Km0633_160 + pow(1 + PHO / KmPHO_160, 2) - 1)) + (cell * Vmax_184 * (ATP * s_1029 - s_0633 * PHO * s_1416 / Keq_184) / (KmATP_184 * Km1029_184) / ((1 + ATP / KmATP_184) * (1 + s_1029 / Km1029_184) + (1 + s_0633 / Km0633_184) * (1 + PHO / KmPHO_184) * (1 + s_1416 / Km1416_184) - 1)) + (cell * Vmax_191 * (s_0018 * ATP - ADP * CO2 * s_0943 * PHO / Keq_191) / (Km0018_191 * KmATP_191) / ((1 + s_0018 / Km0018_191) * (1 + ATP / KmATP_191) + (1 + ADP / KmADP_191) * (1 + CO2 / KmCO2_191) * (1 + s_0943 / Km0943_191) * (1 + PHO / KmPHO_191) - 1)) + (cell * Vmax_192 * (s_0126 - s_1153 * PHO / Keq_192) / Km0126_192 / (1 + s_0126 / Km0126_192 + (1 + s_1153 / Km1153_192) * (1 + PHO / KmPHO_192) - 1)) + (cell * Vmax_194 * (s_1191 * s_1212 - s_0145 * s_1207 * PHO / Keq_194) / (Km1191_194 * Km1212_194) / ((1 + s_1191 / Km1191_194) * (1 + s_1212 / Km1212_194) + (1 + s_0145 / Km0145_194) * (1 + s_1207 / Km1207_194) * (1 + PHO / KmPHO_194) - 1)) + (cell * Vmax_195 * (s_0467 - s_0526 * PHO / Keq_195) / Km0467_195 / (1 + s_0467 / Km0467_195 + (1 + s_0526 / Km0526_195) * (1 + PHO / KmPHO_195) - 1)) + (cell * Vmax_199 * (s_0455 * s_1266 - s_0979 * PHO / Keq_199) / (Km0455_199 * Km1266_199) / ((1 + s_0455 / Km0455_199) * (1 + s_1266 / Km1266_199) + (1 + s_0979 / Km0979_199) * (1 + PHO / KmPHO_199) - 1)) + (cell * Vmax_205 * (s_0302 * ATP - s_0300 * ADP * PHO / Keq_205) / (Km0302_205 * KmATP_205) / ((1 + s_0302 / Km0302_205) * (1 + ATP / KmATP_205) + (1 + s_0300 / Km0300_205) * (1 + ADP / KmADP_205) * (1 + PHO / KmPHO_205) - 1)) + (cell * Vmax_221 * (ATP * s_0973 * s_1364 - s_0299 * ADP * PHO / Keq_221) / (KmATP_221 * Km0973_221 * Km1364_221) / ((1 + ATP / KmATP_221) * (1 + s_0973 / Km0973_221) * (1 + s_1364 / Km1364_221) + (1 + s_0299 / Km0299_221) * (1 + ADP / KmADP_221) * (1 + PHO / KmPHO_221) - 1)) + (cell * Vmax_224 * (s_0300 * CO2 * ATP - s_1364 * ADP * PHO / Keq_224) / (Km0300_224 * KmCO2_224 * KmATP_224) / ((1 + s_0300 / Km0300_224) * (1 + CO2 / KmCO2_224) * (1 + ATP / KmATP_224) + (1 + s_1364 / Km1364_224) * (1 + ADP / KmADP_224) * (1 + PHO / KmPHO_224) - 1)) + (cell * Vmax_227 * (s_0327 * ATP * s_1003 - s_0325 * ADP * PHO / Keq_227) / (Km0327_227 * KmATP_227 * Km1003_227) / ((1 + s_0327 / Km0327_227) * (1 + ATP / KmATP_227) * (1 + s_1003 / Km1003_227) + (1 + s_0325 / Km0325_227) * (1 + ADP / KmADP_227) * (1 + PHO / KmPHO_227) - 1)) + (cell * Vmax_234 * (ATP * s_0445 * PYR - ADP * s_1271 * PHO / Keq_234) / (KmATP_234 * Km0445_234 * KmPYR_234) / ((1 + ATP / KmATP_234) * (1 + s_0445 / Km0445_234) * (1 + PYR / KmPYR_234) + (1 + ADP / KmADP_234) * (1 + s_1271 / Km1271_234) * (1 + PHO / KmPHO_234) - 1)) + (cell * Vmax_237 * (s_0158 * s_0314 - s_0328 * PHO / Keq_237) / (Km0158_237 * Km0314_237) / ((1 + s_0158 / Km0158_237) * (1 + s_0314 / Km0314_237) + (1 + s_0328 / Km0328_237) * (1 + PHO / KmPHO_237) - 1)) + (cell * Vmax_258 * (ADP * s_1467 - s_0298 * PHO / Keq_258) / (KmADP_258 * Km1467_258) / ((1 + ADP / KmADP_258) * (1 + s_1467 / Km1467_258) + (1 + s_0298 / Km0298_258) * (1 + PHO / KmPHO_258) - 1)) + (cell * Vmax_262 * (s_1238 - s_1045 * PHO / Keq_262) / Km1238_262 / (1 + s_1238 / Km1238_262 + (1 + s_1045 / Km1045_262) * (1 + PHO / KmPHO_262) - 1)) + (cell * Vmax_268 * (s_0409 - PHO * s_1520 / Keq_268) / Km0409_268 / (1 + s_0409 / Km0409_268 + (1 + PHO / KmPHO_268) * (1 + s_1520 / Km1520_268) - 1)) + (cell * Vmax_282 * (s_1324 - PHO) / Km1324_282 / (1 + s_1324 / Km1324_282 + 1 + PHO / KmPHO_282 - 1)) + (cell * Vmax_291 * (DHAP - s_1151 * PHO / Keq_291) / KmDHAP_291 / (1 + DHAP / KmDHAP_291 + (1 + s_1151 / Km1151_291) * (1 + PHO / KmPHO_291) - 1)) + (cell * Vmax_293 * (s_0313 - s_0314 * PHO / Keq_293) / Km0313_293 / (1 + s_0313 / Km0313_293 + (1 + s_0314 / Km0314_293) * (1 + PHO / KmPHO_293) - 1)) + (58.70001 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) + (cell * Vmax_296 * (s_1426 - s_1427 * PHO / Keq_296) / Km1426_296 / (1 + s_1426 / Km1426_296 + (1 + s_1427 / Km1427_296) * (1 + PHO / KmPHO_296) - 1)) - (cell * Vmax_61 * (ADP * PHO - ATP / Keq_61) / (KmADP_61 * KmPHO_61) / ((1 + ADP / KmADP_61) * (1 + PHO / KmPHO_61) + 1 + ATP / KmATP_61 - 1)) - (cell * Vmax_129 / (Kgap_129 * Knad_129 * Kpho_129) * (GAP * NAD * PHO - BPG * NADH / Keq_129) / ((1 + PHO / Kpho_129) * (1 + GAP / Kgap_129 + BPG / Kbpg_129) * (1 + NAD / Knad_129 + NADH / Knad_129h)));
    der(s_1324) = 0.0;
    der(s_1331) = (cell * Vmax_5 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_5) / (Km0082_5 * Km0380_5) / ((1 + s_0082 / Km0082_5) * (1 + s_0380 / Km0380_5) + (1 + s_0529 / Km0529_5) * (1 + s_1331 / Km1331_5) - 1)) - (cell * Vmax_75 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_75) / (Km0539_75 * Km1331_75) / ((1 + s_0539 / Km0539_75) * (1 + s_1331 / Km1331_75) + (1 + s_0471 / Km0471_75) * (1 + s_0633 / Km0633_75) - 1)) - (cell * Vmax_91 * (s_1331 - s_0619 * PHO / Keq_91) / Km1331_91 / (1 + s_1331 / Km1331_91 + (1 + s_0619 / Km0619_91) * (1 + PHO / KmPHO_91) - 1));
    der(s_1337) = (cell * Vmax_209 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_209) / (Km0471_209 * Km1039_209) / ((1 + s_0471 / Km0471_209) * (1 + s_1039 / Km1039_209) + (1 + s_0526 / Km0526_209) * (1 + s_1337 / Km1337_209) - 1)) - (cell * Vmax_208 * (s_1337 - CO2 * s_1351 / Keq_208) / Km1337_208 / (1 + s_1337 / Km1337_208 + (1 + CO2 / KmCO2_208) * (1 + s_1351 / Km1351_208) - 1)) - (0.00039 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1342) = (cell * Vmax_218 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_218) / (Km1343_218 * Km1416_218) / ((1 + s_1343 / Km1343_218) * (1 + s_1416 / Km1416_218) + (1 + s_1342 / Km1342_218) * (1 + s_1413 / Km1413_218) - 1)) - (cell * Vmax_217 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_217) / (Km1342_217 * Km1416_217) / ((1 + s_1342 / Km1342_217) * (1 + s_1416 / Km1416_217) + (1 + s_1346 / Km1346_217) * (1 + s_1413 / Km1413_217) - 1));
    der(s_1343) = (cell * Vmax_206 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_206) / (Km1351_206 * Km1416_206) / ((1 + s_1351 / Km1351_206) * (1 + s_1416 / Km1416_206) + (1 + s_1343 / Km1343_206) * (1 + s_1413 / Km1413_206) - 1)) - (cell * Vmax_218 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_218) / (Km1343_218 * Km1416_218) / ((1 + s_1343 / Km1343_218) * (1 + s_1416 / Km1416_218) + (1 + s_1342 / Km1342_218) * (1 + s_1413 / Km1413_218) - 1));
    der(s_1346) = (cell * Vmax_217 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_217) / (Km1342_217 * Km1416_217) / ((1 + s_1342 / Km1342_217) * (1 + s_1416 / Km1416_217) + (1 + s_1346 / Km1346_217) * (1 + s_1413 / Km1413_217) - 1)) - (0.00288 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1351) = (cell * Vmax_208 * (s_1337 - CO2 * s_1351 / Keq_208) / Km1337_208 / (1 + s_1337 / Km1337_208 + (1 + CO2 / KmCO2_208) * (1 + s_1351 / Km1351_208) - 1)) - (cell * Vmax_206 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_206) / (Km1351_206 * Km1416_206) / ((1 + s_1351 / Km1351_206) * (1 + s_1416 / Km1416_206) + (1 + s_1343 / Km1343_206) * (1 + s_1413 / Km1413_206) - 1)) - (0.000697 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(PEP) = (cell * (Vmax_100 * (P2G / Kp2g_100 - PEP / (Kp2g_100 * Keq_100)) / (1 + P2G / Kp2g_100 + PEP / Kpep_100))) + (cell * Vmax_211 * (ATP * s_1271 - ADP * CO2 * PEP / Keq_211) / (KmATP_211 * Km1271_211) / ((1 + ATP / KmATP_211) * (1 + s_1271 / Km1271_211) + (1 + ADP / KmADP_211) * (1 + CO2 / KmCO2_211) * (1 + PEP / KmPEP_211) - 1)) - (cell * Vmax_11 * (s_0551 * PEP - s_0349 * PHO / Keq_11) / (Km0551_11 * KmPEP_11) / ((1 + s_0551 / Km0551_11) * (1 + PEP / KmPEP_11) + (1 + s_0349 / Km0349_11) * (1 + PHO / KmPHO_11) - 1)) - (cell * Vmax_23 * (s_0261 * PEP - s_0324 * PHO / Keq_23) / (Km0261_23 * KmPEP_23) / ((1 + s_0261 / Km0261_23) * (1 + PEP / KmPEP_23) + (1 + s_0324 / Km0324_23) * (1 + PHO / KmPHO_23) - 1)) - (cell * (Vmax_236 * (PEP * ADP / (Kpep_236 * Kadp_236) - PYR * ATP / (Kpep_236 * Kadp_236 * Keq_236)) / ((1 + PEP / Kpep_236 + PYR / Kpyr_236) * (1 + ADP / Kadp_236 + ATP / Katp_236))));
    der(s_1364) = (cell * Vmax_224 * (s_0300 * CO2 * ATP - s_1364 * ADP * PHO / Keq_224) / (Km0300_224 * KmCO2_224 * KmATP_224) / ((1 + s_0300 / Km0300_224) * (1 + CO2 / KmCO2_224) * (1 + ATP / KmATP_224) + (1 + s_1364 / Km1364_224) * (1 + ADP / KmADP_224) * (1 + PHO / KmPHO_224) - 1)) - (cell * Vmax_221 * (ATP * s_0973 * s_1364 - s_0299 * ADP * PHO / Keq_221) / (KmATP_221 * Km0973_221 * Km1364_221) / ((1 + ATP / KmATP_221) * (1 + s_0973 / Km0973_221) * (1 + s_1364 / Km1364_221) + (1 + s_0299 / Km0299_221) * (1 + ADP / KmADP_221) * (1 + PHO / KmPHO_221) - 1));
    der(s_1365) = (cell * Vmax_225 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_225) / (Km0120_225 * Km0403_225) / ((1 + s_0120 / Km0120_225) * (1 + s_0403 / Km0403_225) + (1 + s_1365 / Km1365_225) * (1 + s_1487 / Km1487_225) - 1)) - (cell * Vmax_161 * (s_1365 - s_0849 / Keq_161) / Km1365_161 / (1 + s_1365 / Km1365_161 + 1 + s_0849 / Km0849_161 - 1));
    der(s_1376) = (cell * Vmax_168 * (s_0943 - s_1376 / Keq_168) / Km0943_168 / (1 + s_0943 / Km0943_168 + 1 + s_1376 / Km1376_168 - 1)) - (cell * Vmax_96 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_96) / (Km0943_96 * Km1376_96) / ((1 + s_0943 / Km0943_96) * (1 + s_1376 / Km1376_96) + (1 + s_0633 / Km0633_96) * (1 + s_0745 / Km0745_96) - 1));
    der(s_1377) = (cell * Vmax_77 * (s_0515 - s_1377 / Keq_77) / Km0515_77 / (1 + s_0515 / Km0515_77 + 1 + s_1377 / Km1377_77 - 1)) - (cell * Vmax_230 * (s_1377 - CO2 * s_0951 / Keq_230) / Km1377_230 / (1 + s_1377 / Km1377_230 + (1 + CO2 / KmCO2_230) * (1 + s_0951 / Km0951_230) - 1)) - (cell * Vmax_231 * (s_1207 * s_1377 - s_0204 * CO2 * s_1212 / Keq_231) / (Km1207_231 * Km1377_231) / ((1 + s_1207 / Km1207_231) * (1 + s_1377 / Km1377_231) + (1 + s_0204 / Km0204_231) * (1 + CO2 / KmCO2_231) * (1 + s_1212 / Km1212_231) - 1));
    der(s_1379) = (cell * Vmax_232 * (ATP * s_1035 * s_1606 - AMP * s_0633 * s_1379 / Keq_232) / (KmATP_232 * Km1035_232 * Km1606_232) / ((1 + ATP / KmATP_232) * (1 + s_1035 / Km1035_232) * (1 + s_1606 / Km1606_232) + (1 + AMP / KmAMP_232) * (1 + s_0633 / Km0633_232) * (1 + s_1379 / Km1379_232) - 1)) - (0.1647 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1386) = (cell * Vmax_229 * (ATP * s_1408 - AMP * s_1386 / Keq_229) / (KmATP_229 * Km1408_229) / ((1 + ATP / KmATP_229) * (1 + s_1408 / Km1408_229) + (1 + AMP / KmAMP_229) * (1 + s_1386 / Km1386_229) - 1)) - (cell * Vmax_48 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_48) / (Km0427_48 * Km1386_48) / ((1 + s_0427 / Km0427_48) * (1 + s_1386 / Km1386_48) + (1 + s_0633 / Km0633_48) * (1 + s_1187 / Km1187_48) - 1)) - (cell * Vmax_60 * (ATP * s_1386 - s_0326 * s_0633 / Keq_60) / (KmATP_60 * Km1386_60) / ((1 + ATP / KmATP_60) * (1 + s_1386 / Km1386_60) + (1 + s_0326 / Km0326_60) * (1 + s_0633 / Km0633_60) - 1)) - (cell * Vmax_201 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_201) / (Km1269_201 * Km1386_201) / ((1 + s_1269 / Km1269_201) * (1 + s_1386 / Km1386_201) + (1 + s_0633 / Km0633_201) * (1 + s_1270 / Km1270_201) - 1)) - (cell * Vmax_228 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_228) / (Km0999_228 * Km1386_228) / ((1 + s_0999 / Km0999_228) * (1 + s_1386 / Km1386_228) + (1 + s_0327 / Km0327_228) * (1 + s_0633 / Km0633_228) * (1 + s_0991 / Km0991_228) - 1));
    der(PYR) = (cell * Vmax_0 * (s_0025 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_0) / (Km0025_0 * pow(Km0709_0, 2)) / ((1 + s_0025 / Km0025_0) * pow(1 + s_0709 / Km0709_0, 2) + pow(1 + s_0710 / Km0710_0, 2) * (1 + PYR / KmPYR_0) - 1)) + (cell * Vmax_1 * (s_0063 * pow(s_0709, 2) - pow(s_0710, 2) * PYR / Keq_1) / (Km0063_1 * pow(Km0709_1, 2)) / ((1 + s_0063 / Km0063_1) * pow(1 + s_0709 / Km0709_1, 2) + pow(1 + s_0710 / Km0710_1, 2) * (1 + PYR / KmPYR_1) - 1)) + (cell * Vmax_42 * (s_0779 * s_0955 - s_1003 * PYR / Keq_42) / (Km0779_42 * Km0955_42) / ((1 + s_0779 / Km0779_42) * (1 + s_0955 / Km0955_42) + (1 + s_1003 / Km1003_42) * (1 + PYR / KmPYR_42) - 1)) + (cell * Vmax_49 * (s_0515 * s_0999 - s_0427 * s_0991 * PYR / Keq_49) / (Km0515_49 * Km0999_49) / ((1 + s_0515 / Km0515_49) * (1 + s_0999 / Km0999_49) + (1 + s_0427 / Km0427_49) * (1 + s_0991 / Km0991_49) * (1 + PYR / KmPYR_49) - 1)) + (cell * (Vmax_236 * (PEP * ADP / (Kpep_236 * Kadp_236) - PYR * ATP / (Kpep_236 * Kadp_236 * Keq_236)) / ((1 + PEP / Kpep_236 + PYR / Kpyr_236) * (1 + ADP / Kadp_236 + ATP / Katp_236)))) - (cell * Vmax_9 * (s_0178 * PYR - s_0039 * CO2 / Keq_9) / (Km0178_9 * KmPYR_9) / ((1 + s_0178 / Km0178_9) * (1 + PYR / KmPYR_9) + (1 + s_0039 / Km0039_9) * (1 + CO2 / KmCO2_9) - 1)) - (2.0 * cell * Vmax_28 * (pow(PYR, 2) - s_0146 * CO2 / Keq_28) / pow(KmPYR_28, 2) / (pow(1 + PYR / KmPYR_28, 2) + (1 + s_0146 / Km0146_28) * (1 + CO2 / KmCO2_28) - 1)) - (cell * Vmax_170 * (s_0991 * PYR - s_0180 * s_0955 / Keq_170) / (Km0991_170 * KmPYR_170) / ((1 + s_0991 / Km0991_170) * (1 + PYR / KmPYR_170) + (1 + s_0180 / Km0180_170) * (1 + s_0955 / Km0955_170) - 1)) - (cell * Vmax_234 * (ATP * s_0445 * PYR - ADP * s_1271 * PHO / Keq_234) / (KmATP_234 * Km0445_234 * KmPYR_234) / ((1 + ATP / KmATP_234) * (1 + s_0445 / Km0445_234) * (1 + PYR / KmPYR_234) + (1 + ADP / KmADP_234) * (1 + s_1271 / Km1271_234) * (1 + PHO / KmPHO_234) - 1)) - (cell * (Vmax_235 * pow(PYR / Kpyr_235, nH_235) / (1 + pow(PYR / Kpyr_235, nH_235))));
    der(s_1405) = (cell * Vmax_238 * (pow(s_0328, 2) - s_0314 * s_1405 / Keq_238) / pow(Km0328_238, 2) / (pow(1 + s_0328 / Km0328_238, 2) + (1 + s_0314 / Km0314_238) * (1 + s_1405 / Km1405_238) - 1)) - (0.00099 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1408) = (cell * Vmax_244 * (s_0577 - s_1408 / Keq_244) / Km0577_244 / (1 + s_0577 / Km0577_244 + 1 + s_1408 / Km1408_244 - 1)) - (cell * Vmax_229 * (ATP * s_1408 - AMP * s_1386 / Keq_229) / (KmATP_229 * Km1408_229) / ((1 + ATP / KmATP_229) * (1 + s_1408 / Km1408_229) + (1 + AMP / KmAMP_229) * (1 + s_1386 / Km1386_229) - 1)) - (cell * Vmax_266 * (s_0581 * s_1408 - GAP * s_1427 / Keq_266) / (Km0581_266 * Km1408_266) / ((1 + s_0581 / Km0581_266) * (1 + s_1408 / Km1408_266) + (1 + GAP / KmGAP_266) * (1 + s_1427 / Km1427_266) - 1));
    der(s_1413) = (cell * Vmax_206 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_206) / (Km1351_206 * Km1416_206) / ((1 + s_1351 / Km1351_206) * (1 + s_1416 / Km1416_206) + (1 + s_1343 / Km1343_206) * (1 + s_1413 / Km1413_206) - 1)) + (cell * Vmax_217 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_217) / (Km1342_217 * Km1416_217) / ((1 + s_1342 / Km1342_217) * (1 + s_1416 / Km1416_217) + (1 + s_1346 / Km1346_217) * (1 + s_1413 / Km1413_217) - 1)) + (cell * Vmax_218 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_218) / (Km1343_218 * Km1416_218) / ((1 + s_1343 / Km1343_218) * (1 + s_1416 / Km1416_218) + (1 + s_1342 / Km1342_218) * (1 + s_1413 / Km1413_218) - 1)) + (cell * Vmax_246 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_246) / (Km1416_246 * Km1569_246) / ((1 + s_1416 / Km1416_246) * (1 + s_1569 / Km1569_246) + (1 + s_0700 / Km0700_246) * (1 + s_1413 / Km1413_246) - 1)) + (cell * Vmax_286 * (s_1275 * s_1416 * s_1569 - s_0662 * s_1413 / Keq_286) / (Km1275_286 * Km1416_286 * Km1569_286) / ((1 + s_1275 / Km1275_286) * (1 + s_1416 / Km1416_286) * (1 + s_1569 / Km1569_286) + (1 + s_0662 / Km0662_286) * (1 + s_1413 / Km1413_286) - 1)) - (cell * Vmax_35 * (s_1413 - s_0386 * s_1012 / Keq_35) / Km1413_35 / (1 + s_1413 / Km1413_35 + (1 + s_0386 / Km0386_35) * (1 + s_1012 / Km1012_35) - 1));
    der(s_1416) = (cell * Vmax_184 * (ATP * s_1029 - s_0633 * PHO * s_1416 / Keq_184) / (KmATP_184 * Km1029_184) / ((1 + ATP / KmATP_184) * (1 + s_1029 / Km1029_184) + (1 + s_0633 / Km0633_184) * (1 + PHO / KmPHO_184) * (1 + s_1416 / Km1416_184) - 1)) - (cell * Vmax_206 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_206) / (Km1351_206 * Km1416_206) / ((1 + s_1351 / Km1351_206) * (1 + s_1416 / Km1416_206) + (1 + s_1343 / Km1343_206) * (1 + s_1413 / Km1413_206) - 1)) - (cell * Vmax_217 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_217) / (Km1342_217 * Km1416_217) / ((1 + s_1342 / Km1342_217) * (1 + s_1416 / Km1416_217) + (1 + s_1346 / Km1346_217) * (1 + s_1413 / Km1413_217) - 1)) - (cell * Vmax_218 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_218) / (Km1343_218 * Km1416_218) / ((1 + s_1343 / Km1343_218) * (1 + s_1416 / Km1416_218) + (1 + s_1342 / Km1342_218) * (1 + s_1413 / Km1413_218) - 1)) - (cell * Vmax_246 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_246) / (Km1416_246 * Km1569_246) / ((1 + s_1416 / Km1416_246) * (1 + s_1569 / Km1569_246) + (1 + s_0700 / Km0700_246) * (1 + s_1413 / Km1413_246) - 1)) - (cell * Vmax_286 * (s_1275 * s_1416 * s_1569 - s_0662 * s_1413 / Keq_286) / (Km1275_286 * Km1416_286 * Km1569_286) / ((1 + s_1275 / Km1275_286) * (1 + s_1416 / Km1416_286) * (1 + s_1569 / Km1569_286) + (1 + s_0662 / Km0662_286) * (1 + s_1413 / Km1413_286) - 1));
    der(s_1426) = (cell * Vmax_249 * (s_0551 * DHAP - s_1426 / Keq_249) / (Km0551_249 * KmDHAP_249) / ((1 + s_0551 / Km0551_249) * (1 + DHAP / KmDHAP_249) + 1 + s_1426 / Km1426_249 - 1)) - (cell * Vmax_296 * (s_1426 - s_1427 * PHO / Keq_296) / Km1426_296 / (1 + s_1426 / Km1426_296 + (1 + s_1427 / Km1427_296) * (1 + PHO / KmPHO_296) - 1));
    der(s_1427) = (cell * Vmax_266 * (s_0581 * s_1408 - GAP * s_1427 / Keq_266) / (Km0581_266 * Km1408_266) / ((1 + s_0581 / Km0581_266) * (1 + s_1408 / Km1408_266) + (1 + GAP / KmGAP_266) * (1 + s_1427 / Km1427_266) - 1)) + (cell * Vmax_296 * (s_1426 - s_1427 * PHO / Keq_296) / Km1426_296 / (1 + s_1426 / Km1426_296 + (1 + s_1427 / Km1427_296) * (1 + PHO / KmPHO_296) - 1)) - (cell * Vmax_265 * (GAP * s_1427 - s_0551 * F6P / Keq_265) / (KmGAP_265 * Km1427_265) / ((1 + GAP / KmGAP_265) * (1 + s_1427 / Km1427_265) + (1 + s_0551 / Km0551_265) * (1 + F6P / KmF6P_265) - 1));
    der(s_1428) = (cell * Vmax_251 * (ATP * s_1039 * s_1607 - AMP * s_0633 * s_1428 / Keq_251) / (KmATP_251 * Km1039_251 * Km1607_251) / ((1 + ATP / KmATP_251) * (1 + s_1039 / Km1039_251) * (1 + s_1607 / Km1607_251) + (1 + AMP / KmAMP_251) * (1 + s_0633 / Km0633_251) * (1 + s_1428 / Km1428_251) - 1)) - (0.1854 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1429) = (cell * Vmax_252 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_252) / (Km0211_252 * Km1212_252) / ((1 + s_0211 / Km0211_252) * (1 + s_1212 / Km1212_252) + (1 + s_1207 / Km1207_252) * (1 + s_1429 / Km1429_252) - 1)) - (cell * Vmax_253 * (ATP * s_1429 - s_0261 * ADP / Keq_253) / (KmATP_253 * Km1429_253) / ((1 + ATP / KmATP_253) * (1 + s_1429 / Km1429_253) + (1 + s_0261 / Km0261_253) * (1 + ADP / KmADP_253) - 1));
    der(s_1445) = (cell * Vmax_20 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_20) / (Km0231_20 * Km1212_20) / ((1 + s_0231 / Km0231_20) * (1 + s_1212 / Km1212_20) + (1 + s_1207 / Km1207_20) * (1 + s_1445 / Km1445_20) - 1)) - (cell * Vmax_76 * (s_0816 * s_1445 - s_0478 * s_0529 / Keq_76) / (Km0816_76 * Km1445_76) / ((1 + s_0816 / Km0816_76) * (1 + s_1445 / Km1445_76) + (1 + s_0478 / Km0478_76) * (1 + s_0529 / Km0529_76) - 1));
    der(s_1447) = (cell * Vmax_255 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_255) / (pow(Km0190_255, 2) * Km1212_255) / (pow(1 + s_0190 / Km0190_255, 2) * (1 + s_1212 / Km1212_255) + pow(1 + s_0633 / Km0633_255, 2) * (1 + s_1207 / Km1207_255) * (1 + s_1447 / Km1447_255) - 1)) - (cell * Vmax_254 * (NADH * s_1275 * s_1447 - s_0037 * NAD / Keq_254) / (KmNAD_254H_254 * Km1275_254 * Km1447_254) / ((1 + NADH / KmNAD_254H_254) * (1 + s_1275 / Km1275_254) * (1 + s_1447 / Km1447_254) + (1 + s_0037 / Km0037_254) * (1 + NAD / KmNAD_254) - 1));
    der(s_1449) = (cell * Vmax_104 * (s_1101 * pow(s_1212, 2) * s_1286 - CO2 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_104) / (Km1101_104 * pow(Km1212_104, 2) * Km1286_104) / ((1 + s_1101 / Km1101_104) * pow(1 + s_1212 / Km1212_104, 2) * (1 + s_1286 / Km1286_104) + (1 + CO2 / KmCO2_104) * (1 + s_0529 / Km0529_104) * pow(1 + s_1207 / Km1207_104, 2) * (1 + s_1449 / Km1449_104) - 1)) + (cell * Vmax_112 * (AMP * s_0633 * s_1454 - ATP * s_0529 * s_1449 / Keq_112) / (KmAMP_112 * Km0633_112 * Km1454_112) / ((1 + AMP / KmAMP_112) * (1 + s_0633 / Km0633_112) * (1 + s_1454 / Km1454_112) + (1 + ATP / KmATP_112) * (1 + s_0529 / Km0529_112) * (1 + s_1449 / Km1449_112) - 1)) - (cell * Vmax_105 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(CO2, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_105) / (pow(Km1101_105, 3) * pow(Km1212_105, 6) * Km1449_105) / (pow(1 + s_1101 / Km1101_105, 3) * pow(1 + s_1212 / Km1212_105, 6) * (1 + s_1449 / Km1449_105) + pow(1 + CO2 / KmCO2_105, 3) * pow(1 + s_0529 / Km0529_105, 3) * (1 + s_1084 / Km1084_105) * pow(1 + s_1207 / Km1207_105, 6) - 1));
    der(s_1454) = (cell * Vmax_116 * (s_1101 * pow(s_1212, 2) * s_1302 - CO2 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_116) / (Km1101_116 * pow(Km1212_116, 2) * Km1302_116) / ((1 + s_1101 / Km1101_116) * pow(1 + s_1212 / Km1212_116, 2) * (1 + s_1302 / Km1302_116) + (1 + CO2 / KmCO2_116) * (1 + s_0529 / Km0529_116) * pow(1 + s_1207 / Km1207_116, 2) * (1 + s_1454 / Km1454_116) - 1)) - (cell * Vmax_112 * (AMP * s_0633 * s_1454 - ATP * s_0529 * s_1449 / Keq_112) / (KmAMP_112 * Km0633_112 * Km1454_112) / ((1 + AMP / KmAMP_112) * (1 + s_0633 / Km0633_112) * (1 + s_1454 / Km1454_112) + (1 + ATP / KmATP_112) * (1 + s_0529 / Km0529_112) * (1 + s_1449 / Km1449_112) - 1));
    der(s_1458) = (cell * Vmax_165 * (s_0940 - s_0779 * s_1458 / Keq_165) / Km0940_165 / (1 + s_0940 / Km0940_165 + (1 + s_0779 / Km0779_165) * (1 + s_1458 / Km1458_165) - 1)) - (cell * Vmax_257 * (s_1458 * s_1537 - s_0725 * s_1535 / Keq_257) / (Km1458_257 * Km1537_257) / ((1 + s_1458 / Km1458_257) * (1 + s_1537 / Km1537_257) + (1 + s_0725 / Km0725_257) * (1 + s_1535 / Km1535_257) - 1)) - (cell * Vmax_294 * s_1458 / Km1458_294 / (1 + s_1458 / Km1458_294));
    der(s_1459) = 0.0;
    der(s_1467) = (cell * Vmax_283 * (s_1468 - s_1467) / Km1468_283 / (1 + s_1468 / Km1468_283 + 1 + s_1467 / Km1467_283 - 1)) - (cell * Vmax_258 * (ADP * s_1467 - s_0298 * PHO / Keq_258) / (KmADP_258 * Km1467_258) / ((1 + ADP / KmADP_258) * (1 + s_1467 / Km1467_258) + (1 + s_0298 / Km0298_258) * (1 + PHO / KmPHO_258) - 1)) - (0.02 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1468) = 0.0;
    der(s_1469) = (cell * Vmax_210 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_210) / (Km0201_210 * Km1616_210) / ((1 + s_0201 / Km0201_210) * (1 + s_1616 / Km1616_210) + (1 + s_0390 / Km0390_210) * (1 + s_1469 / Km1469_210) * (1 + s_1620 / Km1620_210) - 1)) - (cell * Vmax_259 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_259) / (pow(Km1212_259, 3) * Km1469_259) / (pow(1 + s_1212 / Km1212_259, 3) * (1 + s_1469 / Km1469_259) + (1 + s_0841 / Km0841_259) * pow(1 + s_1207 / Km1207_259, 3) - 1));
    der(s_1487) = (cell * Vmax_92 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_92) / (Km0625_92 * Km1212_92) / ((1 + s_0625 / Km0625_92) * (1 + s_1212 / Km1212_92) + (1 + s_1207 / Km1207_92) * (1 + s_1487 / Km1487_92) - 1)) + (cell * Vmax_133 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_133) / (Km0120_133 * Km0325_133) / ((1 + s_0120 / Km0120_133) * (1 + s_0325 / Km0325_133) + (1 + s_0301 / Km0301_133) * (1 + s_1487 / Km1487_133) - 1)) + (cell * Vmax_135 * (s_0306 * s_1003 - s_1039 * s_1487 / Keq_135) / (Km0306_135 * Km1003_135) / ((1 + s_0306 / Km0306_135) * (1 + s_1003 / Km1003_135) + (1 + s_1039 / Km1039_135) * (1 + s_1487 / Km1487_135) - 1)) + (cell * Vmax_185 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_185) / (Km0322_185 * Km1012_185) / ((1 + s_0322 / Km0322_185) * (1 + s_1012 / Km1012_185) + (1 + s_1029 / Km1029_185) * (1 + s_1487 / Km1487_185) - 1)) + (cell * Vmax_225 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_225) / (Km0120_225 * Km0403_225) / ((1 + s_0120 / Km0120_225) * (1 + s_0403 / Km0403_225) + (1 + s_1365 / Km1365_225) * (1 + s_1487 / Km1487_225) - 1)) - (cell * Vmax_119 * (ATP * s_0722 * s_1487 - s_0120 * ADP * PHO / Keq_119) / (KmATP_119 * Km0722_119 * Km1487_119) / ((1 + ATP / KmATP_119) * (1 + s_0722 / Km0722_119) * (1 + s_1487 / Km1487_119) + (1 + s_0120 / Km0120_119) * (1 + ADP / KmADP_119) * (1 + PHO / KmPHO_119) - 1)) - (cell * Vmax_134 * (s_1003 * NAD * s_1487 - s_0306 * s_0419 * CO2 * NADH / Keq_134) / (Km1003_134 * KmNAD_134 * Km1487_134) / ((1 + s_1003 / Km1003_134) * (1 + NAD / KmNAD_134) * (1 + s_1487 / Km1487_134) + (1 + s_0306 / Km0306_134) * (1 + s_0419 / Km0419_134) * (1 + CO2 / KmCO2_134) * (1 + NADH / KmNAD_134H) - 1));
    der(s_1491) = (cell * Vmax_263 * (ATP * s_1045 * s_1608 - AMP * s_0633 * s_1491 / Keq_263) / (KmATP_263 * Km1045_263 * Km1608_263) / ((1 + ATP / KmATP_263) * (1 + s_1045 / Km1045_263) * (1 + s_1608 / Km1608_263) + (1 + AMP / KmAMP_263) * (1 + s_0633 / Km0633_263) * (1 + s_1491 / Km1491_263) - 1)) - (0.1914 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1520) = (cell * Vmax_268 * (s_0409 - PHO * s_1520 / Keq_268) / Km0409_268 / (1 + s_0409 / Km0409_268 + (1 + PHO / KmPHO_268) * (1 + s_1520 / Km1520_268) - 1)) - (0.0234 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1524) = (cell * Vmax_269 * (s_0619 * s_0595 - s_1524 / Keq_269) / (Km0619_269 * Km0595_269) / ((1 + s_0619 / Km0619_269) * (1 + s_0595 / Km0595_269) + 1 + s_1524 / Km1524_269 - 1)) - (cell * Vmax_90 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_90) / (Km0529_90 * Km1524_90) / ((1 + s_0529 / Km0529_90) * (1 + s_1524 / Km1524_90) + (1 + s_0380 / Km0380_90) * (1 + s_0619 / Km0619_90) - 1)) - (0.000781 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1527) = (cell * Vmax_272 * (ATP * s_1048 * s_1610 - AMP * s_0633 * s_1527 / Keq_272) / (KmATP_272 * Km1048_272 * Km1610_272) / ((1 + ATP / KmATP_272) * (1 + s_1048 / Km1048_272) * (1 + s_1610 / Km1610_272) + (1 + AMP / KmAMP_272) * (1 + s_0633 / Km0633_272) * (1 + s_1527 / Km1527_272) - 1)) - (0.0284 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1533) = (cell * Vmax_274 * (ATP * s_1051 * s_1612 - AMP * s_0633 * s_1533 / Keq_274) / (KmATP_274 * Km1051_274 * Km1612_274) / ((1 + ATP / KmATP_274) * (1 + s_1051 / Km1051_274) * (1 + s_1612 / Km1612_274) + (1 + AMP / KmAMP_274) * (1 + s_0633 / Km0633_274) * (1 + s_1533 / Km1533_274) - 1)) - (0.102 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1535) = (cell * Vmax_257 * (s_1458 * s_1537 - s_0725 * s_1535 / Keq_257) / (Km1458_257 * Km1537_257) / ((1 + s_1458 / Km1458_257) * (1 + s_1537 / Km1537_257) + (1 + s_0725 / Km0725_257) * (1 + s_1535 / Km1535_257) - 1)) - (cell * Vmax_118 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_118) / (pow(Km0709_118, 2) * Km1535_118) / (pow(1 + s_0709 / Km0709_118, 2) * (1 + s_1535 / Km1535_118) + pow(1 + s_0710 / Km0710_118, 2) * (1 + s_1537 / Km1537_118) - 1));
    der(s_1537) = (cell * Vmax_118 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_118) / (pow(Km0709_118, 2) * Km1535_118) / (pow(1 + s_0709 / Km0709_118, 2) * (1 + s_1535 / Km1535_118) + pow(1 + s_0710 / Km0710_118, 2) * (1 + s_1537 / Km1537_118) - 1)) - (cell * Vmax_257 * (s_1458 * s_1537 - s_0725 * s_1535 / Keq_257) / (Km1458_257 * Km1537_257) / ((1 + s_1458 / Km1458_257) * (1 + s_1537 / Km1537_257) + (1 + s_0725 / Km0725_257) * (1 + s_1535 / Km1535_257) - 1));
    der(s_1538) = (cell * Vmax_2 * (s_1543 - s_0002 * s_1538 / Keq_2) / Km1543_2 / (1 + s_1543 / Km1543_2 + (1 + s_0002 / Km0002_2) * (1 + s_1538 / Km1538_2) - 1)) + (cell * Vmax_3 * (s_1543 - s_0004 * s_1538 / Keq_3) / Km1543_3 / (1 + s_1543 / Km1543_3 + (1 + s_0004 / Km0004_3) * (1 + s_1538 / Km1538_3) - 1)) + (cell * Vmax_47 * (G6P * s_1543 - s_0409 * s_1538 / Keq_47) / (KmG6P_47 * Km1543_47) / ((1 + G6P / KmG6P_47) * (1 + s_1543 / Km1543_47) + (1 + s_0409 / Km0409_47) * (1 + s_1538 / Km1538_47) - 1)) + (cell * Vmax_136 * (s_1543 - s_0773 * s_1538 / Keq_136) / Km1543_136 / (1 + s_1543 / Km1543_136 + (1 + s_0773 / Km0773_136) * (1 + s_1538 / Km1538_136) - 1)) + (cell * Vmax_275 * (ATP * s_1545 - ADP * s_1538 / Keq_275) / (KmATP_275 * Km1545_275) / ((1 + ATP / KmATP_275) * (1 + s_1545 / Km1545_275) + (1 + ADP / KmADP_275) * (1 + s_1538 / Km1538_275) - 1)) - (cell * Vmax_197 * (ATP * s_1538 - ADP * s_1559 / Keq_197) / (KmATP_197 * Km1538_197) / ((1 + ATP / KmATP_197) * (1 + s_1538 / Km1538_197) + (1 + ADP / KmADP_197) * (1 + s_1559 / Km1559_197) - 1));
    der(s_1543) = (cell * Vmax_276 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_276) / (Km0567_276 * Km1559_276) / ((1 + s_0567 / Km0567_276) * (1 + s_1559 / Km1559_276) + (1 + s_0633 / Km0633_276) * (1 + s_1543 / Km1543_276) - 1)) - (cell * Vmax_2 * (s_1543 - s_0002 * s_1538 / Keq_2) / Km1543_2 / (1 + s_1543 / Km1543_2 + (1 + s_0002 / Km0002_2) * (1 + s_1538 / Km1538_2) - 1)) - (cell * Vmax_3 * (s_1543 - s_0004 * s_1538 / Keq_3) / Km1543_3 / (1 + s_1543 / Km1543_3 + (1 + s_0004 / Km0004_3) * (1 + s_1538 / Km1538_3) - 1)) - (cell * Vmax_47 * (G6P * s_1543 - s_0409 * s_1538 / Keq_47) / (KmG6P_47 * Km1543_47) / ((1 + G6P / KmG6P_47) * (1 + s_1543 / Km1543_47) + (1 + s_0409 / Km0409_47) * (1 + s_1538 / Km1538_47) - 1)) - (cell * Vmax_136 * (s_1543 - s_0773 * s_1538 / Keq_136) / Km1543_136 / (1 + s_1543 / Km1543_136 + (1 + s_0773 / Km0773_136) * (1 + s_1538 / Km1538_136) - 1));
    der(s_1545) = (cell * Vmax_202 * (s_1270 - CO2 * s_1545 / Keq_202) / Km1270_202 / (1 + s_1270 / Km1270_202 + (1 + CO2 / KmCO2_202) * (1 + s_1545 / Km1545_202) - 1)) - (cell * Vmax_275 * (ATP * s_1545 - ADP * s_1538 / Keq_275) / (KmATP_275 * Km1545_275) / ((1 + ATP / KmATP_275) * (1 + s_1545 / Km1545_275) + (1 + ADP / KmADP_275) * (1 + s_1538 / Km1538_275) - 1)) - (0.0599 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1559) = (cell * Vmax_197 * (ATP * s_1538 - ADP * s_1559 / Keq_197) / (KmATP_197 * Km1538_197) / ((1 + ATP / KmATP_197) * (1 + s_1538 / Km1538_197) + (1 + ADP / KmADP_197) * (1 + s_1559 / Km1559_197) - 1)) - (cell * Vmax_82 * (s_0419 * ATP * s_1559 - ADP * s_0539 * PHO / Keq_82) / (Km0419_82 * KmATP_82 * Km1559_82) / ((1 + s_0419 / Km0419_82) * (1 + ATP / KmATP_82) * (1 + s_1559 / Km1559_82) + (1 + ADP / KmADP_82) * (1 + s_0539 / Km0539_82) * (1 + PHO / KmPHO_82) - 1)) - (cell * Vmax_240 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_240) / (Km1559_240 * Km1616_240) / ((1 + s_1559 / Km1559_240) * (1 + s_1616 / Km1616_240) + (1 + s_0656 / Km0656_240) * (1 + s_1620 / Km1620_240) - 1)) - (cell * Vmax_276 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_276) / (Km0567_276 * Km1559_276) / ((1 + s_0567 / Km0567_276) * (1 + s_1559 / Km1559_276) + (1 + s_0633 / Km0633_276) * (1 + s_1543 / Km1543_276) - 1));
    der(s_1561) = (cell * Vmax_278 * (ATP * s_1056 * s_1614 - AMP * s_0633 * s_1561 / Keq_278) / (KmATP_278 * Km1056_278 * Km1614_278) / ((1 + ATP / KmATP_278) * (1 + s_1056 / Km1056_278) * (1 + s_1614 / Km1614_278) + (1 + AMP / KmAMP_278) * (1 + s_0633 / Km0633_278) * (1 + s_1561 / Km1561_278) - 1)) - (0.2646 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1565) = (cell * Vmax_158 * (s_0849 * NAD - NADH * s_1565 / Keq_158) / (Km0849_158 * KmNAD_158) / ((1 + s_0849 / Km0849_158) * (1 + NAD / KmNAD_158) + (1 + NADH / KmNAD_158H) * (1 + s_1565 / Km1565_158) - 1)) - (cell * Vmax_138 * (ATP * s_0999 * s_1565 - AMP * s_0633 * s_0782 * s_0991 / Keq_138) / (KmATP_138 * Km0999_138 * Km1565_138) / ((1 + ATP / KmATP_138) * (1 + s_0999 / Km0999_138) * (1 + s_1565 / Km1565_138) + (1 + AMP / KmAMP_138) * (1 + s_0633 / Km0633_138) * (1 + s_0782 / Km0782_138) * (1 + s_0991 / Km0991_138) - 1));
    der(s_1569) = (cell * Vmax_67 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_67) / (Km1212_67 * Km1579_67) / ((1 + s_1212 / Km1212_67) * (1 + s_1579 / Km1579_67) + (1 + s_1207 / Km1207_67) * (1 + s_1569 / Km1569_67) - 1)) - (cell * Vmax_246 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_246) / (Km1416_246 * Km1569_246) / ((1 + s_1416 / Km1416_246) * (1 + s_1569 / Km1569_246) + (1 + s_0700 / Km0700_246) * (1 + s_1413 / Km1413_246) - 1)) - (cell * Vmax_286 * (s_1275 * s_1416 * s_1569 - s_0662 * s_1413 / Keq_286) / (Km1275_286 * Km1416_286 * Km1569_286) / ((1 + s_1275 / Km1275_286) * (1 + s_1416 / Km1416_286) * (1 + s_1569 / Km1569_286) + (1 + s_0662 / Km0662_286) * (1 + s_1413 / Km1413_286) - 1)) - (1.5e-05 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295));
    der(s_1576) = (cell * Vmax_68 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_68) / (Km0296_68 * Km1212_68 * Km1275_68) / ((1 + s_0296 / Km0296_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_1207 / Km1207_68) * (1 + s_1576 / Km1576_68) - 1)) - (cell * Vmax_69 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_69) / (Km1212_69 * Km1275_69 * Km1576_69) / ((1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) * (1 + s_1576 / Km1576_69) + (1 + s_1207 / Km1207_69) * (1 + s_1577 / Km1577_69) - 1));
    der(s_1577) = (cell * Vmax_69 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_69) / (Km1212_69 * Km1275_69 * Km1576_69) / ((1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) * (1 + s_1576 / Km1576_69) + (1 + s_1207 / Km1207_69) * (1 + s_1577 / Km1577_69) - 1)) - (cell * Vmax_70 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_70) / (Km1212_70 * Km1275_70 * Km1577_70) / ((1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) * (1 + s_1577 / Km1577_70) + (1 + s_1207 / Km1207_70) * (1 + s_1578 / Km1578_70) - 1));
    der(s_1578) = (cell * Vmax_70 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_70) / (Km1212_70 * Km1275_70 * Km1577_70) / ((1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) * (1 + s_1577 / Km1577_70) + (1 + s_1207 / Km1207_70) * (1 + s_1578 / Km1578_70) - 1)) - (cell * Vmax_64 * (s_1207 * s_1578 - CO2 * s_1212 * s_1579 / Keq_64) / (Km1207_64 * Km1578_64) / ((1 + s_1207 / Km1207_64) * (1 + s_1578 / Km1578_64) + (1 + CO2 / KmCO2_64) * (1 + s_1212 / Km1212_64) * (1 + s_1579 / Km1579_64) - 1));
    der(s_1579) = (cell * Vmax_64 * (s_1207 * s_1578 - CO2 * s_1212 * s_1579 / Keq_64) / (Km1207_64 * Km1578_64) / ((1 + s_1207 / Km1207_64) * (1 + s_1578 / Km1578_64) + (1 + CO2 / KmCO2_64) * (1 + s_1212 / Km1212_64) * (1 + s_1579 / Km1579_64) - 1)) - (cell * Vmax_67 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_67) / (Km1212_67 * Km1579_67) / ((1 + s_1212 / Km1212_67) * (1 + s_1579 / Km1579_67) + (1 + s_1207 / Km1207_67) * (1 + s_1569 / Km1569_67) - 1));
    der(s_1582) = (0.4588 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_43 * (ATP * s_0955 * s_1582 - s_0404 * AMP * s_0633 / Keq_43) / (KmATP_43 * Km0955_43 * Km1582_43) / ((1 + ATP / KmATP_43) * (1 + s_0955 / Km0955_43) * (1 + s_1582 / Km1582_43) + (1 + s_0404 / Km0404_43) * (1 + AMP / KmAMP_43) * (1 + s_0633 / Km0633_43) - 1));
    der(s_1583) = (0.1607 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_52 * (ATP * s_0965 * s_1583 - AMP * s_0428 * s_0633 / Keq_52) / (KmATP_52 * Km0965_52 * Km1583_52) / ((1 + ATP / KmATP_52) * (1 + s_0965 / Km0965_52) * (1 + s_1583 / Km1583_52) + (1 + AMP / KmAMP_52) * (1 + s_0428 / Km0428_52) * (1 + s_0633 / Km0633_52) - 1));
    der(s_1585) = (0.1017 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_54 * (ATP * s_0969 * s_1585 - AMP * s_0430 * s_0633 / Keq_54) / (KmATP_54 * Km0969_54 * Km1585_54) / ((1 + ATP / KmATP_54) * (1 + s_0969 / Km0969_54) * (1 + s_1585 / Km1585_54) + (1 + AMP / KmAMP_54) * (1 + s_0430 / Km0430_54) * (1 + s_0633 / Km0633_54) - 1));
    der(s_1587) = (0.2975 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_59 * (ATP * s_0973 * s_1587 - AMP * s_0432 * s_0633 / Keq_59) / (KmATP_59 * Km0973_59 * Km1587_59) / ((1 + ATP / KmATP_59) * (1 + s_0973 / Km0973_59) * (1 + s_1587 / Km1587_59) + (1 + AMP / KmAMP_59) * (1 + s_0432 / Km0432_59) * (1 + s_0633 / Km0633_59) - 1));
    der(s_1589) = (0.0066 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_86 * (ATP * s_0981 * s_1589 - AMP * s_0542 * s_0633 / Keq_86) / (KmATP_86 * Km0981_86 * Km1589_86) / ((1 + ATP / KmATP_86) * (1 + s_0981 / Km0981_86) * (1 + s_1589 / Km1589_86) + (1 + AMP / KmAMP_86) * (1 + s_0542 / Km0542_86) * (1 + s_0633 / Km0633_86) - 1));
    der(s_1590) = (0.1054 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_127 * (ATP * s_0999 * s_1590 - AMP * s_0633 * s_0747 / Keq_127) / (KmATP_127 * Km0999_127 * Km1590_127) / ((1 + ATP / KmATP_127) * (1 + s_0999 / Km0999_127) * (1 + s_1590 / Km1590_127) + (1 + AMP / KmAMP_127) * (1 + s_0633 / Km0633_127) * (1 + s_0747 / Km0747_127) - 1));
    der(s_1591) = (0.3018 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_128 * (ATP * s_0991 * s_1591 - AMP * s_0633 * s_0748 / Keq_128) / (KmATP_128 * Km0991_128 * Km1591_128) / ((1 + ATP / KmATP_128) * (1 + s_0991 / Km0991_128) * (1 + s_1591 / Km1591_128) + (1 + AMP / KmAMP_128) * (1 + s_0633 / Km0633_128) * (1 + s_0748 / Km0748_128) - 1));
    der(s_1593) = (0.2904 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_137 * (ATP * s_1003 * s_1593 - AMP * s_0633 * s_0757 / Keq_137) / (KmATP_137 * Km1003_137 * Km1593_137) / ((1 + ATP / KmATP_137) * (1 + s_1003 / Km1003_137) * (1 + s_1593 / Km1593_137) + (1 + AMP / KmAMP_137) * (1 + s_0633 / Km0633_137) * (1 + s_0757 / Km0757_137) - 1));
    der(s_1594) = (0.0663 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_146 * (ATP * s_1006 * s_1594 - AMP * s_0633 * s_0832 / Keq_146) / (KmATP_146 * Km1006_146 * Km1594_146) / ((1 + ATP / KmATP_146) * (1 + s_1006 / Km1006_146) * (1 + s_1594 / Km1594_146) + (1 + AMP / KmAMP_146) * (1 + s_0633 / Km0633_146) * (1 + s_0832 / Km0832_146) - 1));
    der(s_1596) = (0.1927 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_167 * (ATP * s_1016 * s_1596 - AMP * s_0633 * s_0847 / Keq_167) / (KmATP_167 * Km1016_167 * Km1596_167) / ((1 + ATP / KmATP_167) * (1 + s_1016 / Km1016_167) * (1 + s_1596 / Km1596_167) + (1 + AMP / KmAMP_167) * (1 + s_0633 / Km0633_167) * (1 + s_0847 / Km0847_167) - 1));
    der(s_1598) = (0.2964 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_178 * (ATP * s_1021 * s_1598 - AMP * s_0633 * s_1077 / Keq_178) / (KmATP_178 * Km1021_178 * Km1598_178) / ((1 + ATP / KmATP_178) * (1 + s_1021 / Km1021_178) * (1 + s_1598 / Km1598_178) + (1 + AMP / KmAMP_178) * (1 + s_0633 / Km0633_178) * (1 + s_1077 / Km1077_178) - 1));
    der(s_1600) = (0.2862 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_179 * (ATP * s_1025 * s_1600 - AMP * s_0633 * s_1099 / Keq_179) / (KmATP_179 * Km1025_179 * Km1600_179) / ((1 + ATP / KmATP_179) * (1 + s_1025 / Km1025_179) * (1 + s_1600 / Km1600_179) + (1 + AMP / KmAMP_179) * (1 + s_0633 / Km0633_179) * (1 + s_1099 / Km1099_179) - 1));
    der(s_1602) = (0.0507 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_186 * (ATP * s_1029 * s_1602 - AMP * s_0633 * s_1148 / Keq_186) / (KmATP_186 * Km1029_186 * Km1602_186) / ((1 + ATP / KmATP_186) * (1 + s_1029 / Km1029_186) * (1 + s_1602 / Km1602_186) + (1 + AMP / KmAMP_186) * (1 + s_0633 / Km0633_186) * (1 + s_1148 / Km1148_186) - 1));
    der(s_1604) = (0.1339 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_204 * (ATP * s_1032 * s_1604 - AMP * s_0633 * s_1314 / Keq_204) / (KmATP_204 * Km1032_204 * Km1604_204) / ((1 + ATP / KmATP_204) * (1 + s_1032 / Km1032_204) * (1 + s_1604 / Km1604_204) + (1 + AMP / KmAMP_204) * (1 + s_0633 / Km0633_204) * (1 + s_1314 / Km1314_204) - 1));
    der(s_1606) = (0.1647 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_232 * (ATP * s_1035 * s_1606 - AMP * s_0633 * s_1379 / Keq_232) / (KmATP_232 * Km1035_232 * Km1606_232) / ((1 + ATP / KmATP_232) * (1 + s_1035 / Km1035_232) * (1 + s_1606 / Km1606_232) + (1 + AMP / KmAMP_232) * (1 + s_0633 / Km0633_232) * (1 + s_1379 / Km1379_232) - 1));
    der(s_1607) = (0.1854 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_251 * (ATP * s_1039 * s_1607 - AMP * s_0633 * s_1428 / Keq_251) / (KmATP_251 * Km1039_251 * Km1607_251) / ((1 + ATP / KmATP_251) * (1 + s_1039 / Km1039_251) * (1 + s_1607 / Km1607_251) + (1 + AMP / KmAMP_251) * (1 + s_0633 / Km0633_251) * (1 + s_1428 / Km1428_251) - 1));
    der(s_1608) = (0.1914 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_263 * (ATP * s_1045 * s_1608 - AMP * s_0633 * s_1491 / Keq_263) / (KmATP_263 * Km1045_263 * Km1608_263) / ((1 + ATP / KmATP_263) * (1 + s_1045 / Km1045_263) * (1 + s_1608 / Km1608_263) + (1 + AMP / KmAMP_263) * (1 + s_0633 / Km0633_263) * (1 + s_1491 / Km1491_263) - 1));
    der(s_1610) = (0.0284 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_272 * (ATP * s_1048 * s_1610 - AMP * s_0633 * s_1527 / Keq_272) / (KmATP_272 * Km1048_272 * Km1610_272) / ((1 + ATP / KmATP_272) * (1 + s_1048 / Km1048_272) * (1 + s_1610 / Km1610_272) + (1 + AMP / KmAMP_272) * (1 + s_0633 / Km0633_272) * (1 + s_1527 / Km1527_272) - 1));
    der(s_1612) = (0.102 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_274 * (ATP * s_1051 * s_1612 - AMP * s_0633 * s_1533 / Keq_274) / (KmATP_274 * Km1051_274 * Km1612_274) / ((1 + ATP / KmATP_274) * (1 + s_1051 / Km1051_274) * (1 + s_1612 / Km1612_274) + (1 + AMP / KmAMP_274) * (1 + s_0633 / Km0633_274) * (1 + s_1533 / Km1533_274) - 1));
    der(s_1614) = (0.2646 * cell * max(v0_295 * (1 + ep0002_295 * log(s_0002 / ic0002_295) + epAMP_295 * log(AMP / icAMP_295) + epATP_295 * log(ATP / icATP_295) + ep0526_295 * log(s_0526 / ic0526_295) + ep0584_295 * log(s_0584 / ic0584_295) + ep0589_295 * log(s_0589 / ic0589_295) + ep0615_295 * log(s_0615 / ic0615_295) + ep0649_295 * log(s_0649 / ic0649_295) + ep0773_295 * log(s_0773 / ic0773_295) + ep0782_295 * log(s_0782 / ic0782_295) + ep1107_295 * log(s_1107 / ic1107_295) + ep1405_295 * log(s_1405 / ic1405_295) + ep1467_295 * log(s_1467 / ic1467_295) + ep1520_295 * log(s_1520 / ic1520_295) + ep1545_295 * log(s_1545 / ic1545_295) + ep0004_295 * log(s_0004 / ic0004_295) + ep0404_295 * log(s_0404 / ic0404_295) + ep0428_295 * log(s_0428 / ic0428_295) + ep0430_295 * log(s_0430 / ic0430_295) + ep0432_295 * log(s_0432 / ic0432_295) + ep0542_295 * log(s_0542 / ic0542_295) + ep0747_295 * log(s_0747 / ic0747_295) + ep0748_295 * log(s_0748 / ic0748_295) + ep0757_295 * log(s_0757 / ic0757_295) + ep0832_295 * log(s_0832 / ic0832_295) + ep0847_295 * log(s_0847 / ic0847_295) + ep1077_295 * log(s_1077 / ic1077_295) + ep1099_295 * log(s_1099 / ic1099_295) + ep1148_295 * log(s_1148 / ic1148_295) + ep1314_295 * log(s_1314 / ic1314_295) + ep1379_295 * log(s_1379 / ic1379_295) + ep1337_295 * log(s_1337 / ic1337_295) + ep0089_295 * log(s_0089 / ic0089_295) + ep1428_295 * log(s_1428 / ic1428_295) + ep1491_295 * log(s_1491 / ic1491_295) + ep1527_295 * log(s_1527 / ic1527_295) + ep1533_295 * log(s_1533 / ic1533_295) + ep1561_295 * log(s_1561 / ic1561_295) + ep0122_295 * log(s_0122 / ic0122_295) + ep0897_295 * log(s_0897 / ic0897_295) + ep0657_295 * log(s_0657 / ic0657_295) + ep0662_295 * log(s_0662 / ic0662_295) + ep0666_295 * log(s_0666 / ic0666_295) + ep0672_295 * log(s_0672 / ic0672_295) + ep0595_295 * log(s_0595 / ic0595_295) + ep0700_295 * log(s_0700 / ic0700_295) + ep1059_295 * log(s_1059 / ic1059_295) + ep1346_295 * log(s_1346 / ic1346_295) + ep1351_295 * log(s_1351 / ic1351_295) + ep1524_295 * log(s_1524 / ic1524_295) + ep1569_295 * log(s_1569 / ic1569_295)), zero_flux_295)) - (cell * Vmax_278 * (ATP * s_1056 * s_1614 - AMP * s_0633 * s_1561 / Keq_278) / (KmATP_278 * Km1056_278 * Km1614_278) / ((1 + ATP / KmATP_278) * (1 + s_1056 / Km1056_278) * (1 + s_1614 / Km1614_278) + (1 + AMP / KmAMP_278) * (1 + s_0633 / Km0633_278) * (1 + s_1561 / Km1561_278) - 1));
    der(s_1616) = (cell * Vmax_260 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_260) / (Km1212_260 * Km1620_260) / ((1 + s_1212 / Km1212_260) * (1 + s_1620 / Km1620_260) + (1 + s_1207 / Km1207_260) * (1 + s_1616 / Km1616_260) - 1)) - (cell * Vmax_210 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_210) / (Km0201_210 * Km1616_210) / ((1 + s_0201 / Km0201_210) * (1 + s_1616 / Km1616_210) + (1 + s_0390 / Km0390_210) * (1 + s_1469 / Km1469_210) * (1 + s_1620 / Km1620_210) - 1)) - (cell * Vmax_239 * (ATP * s_1616 - s_0586 * s_1620 / Keq_239) / (KmATP_239 * Km1616_239) / ((1 + ATP / KmATP_239) * (1 + s_1616 / Km1616_239) + (1 + s_0586 / Km0586_239) * (1 + s_1620 / Km1620_239) - 1)) - (cell * Vmax_240 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_240) / (Km1559_240 * Km1616_240) / ((1 + s_1559 / Km1559_240) * (1 + s_1616 / Km1616_240) + (1 + s_0656 / Km0656_240) * (1 + s_1620 / Km1620_240) - 1)) - (cell * Vmax_241 * (ADP * s_1616 - s_0582 * s_1620 / Keq_241) / (KmADP_241 * Km1616_241) / ((1 + ADP / KmADP_241) * (1 + s_1616 / Km1616_241) + (1 + s_0582 / Km0582_241) * (1 + s_1620 / Km1620_241) - 1)) - (cell * Vmax_242 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_242) / (Km0467_242 * Km1616_242) / ((1 + s_0467 / Km0467_242) * (1 + s_1616 / Km1616_242) + (1 + s_0587 / Km0587_242) * (1 + s_1620 / Km1620_242) - 1)) - (cell * Vmax_243 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_243) / (Km0739_243 * Km1616_243) / ((1 + s_0739 / Km0739_243) * (1 + s_1616 / Km1616_243) + (1 + s_0613 / Km0613_243) * (1 + s_1620 / Km1620_243) - 1));
    der(s_1620) = (cell * Vmax_210 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_210) / (Km0201_210 * Km1616_210) / ((1 + s_0201 / Km0201_210) * (1 + s_1616 / Km1616_210) + (1 + s_0390 / Km0390_210) * (1 + s_1469 / Km1469_210) * (1 + s_1620 / Km1620_210) - 1)) + (cell * Vmax_239 * (ATP * s_1616 - s_0586 * s_1620 / Keq_239) / (KmATP_239 * Km1616_239) / ((1 + ATP / KmATP_239) * (1 + s_1616 / Km1616_239) + (1 + s_0586 / Km0586_239) * (1 + s_1620 / Km1620_239) - 1)) + (cell * Vmax_240 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_240) / (Km1559_240 * Km1616_240) / ((1 + s_1559 / Km1559_240) * (1 + s_1616 / Km1616_240) + (1 + s_0656 / Km0656_240) * (1 + s_1620 / Km1620_240) - 1)) + (cell * Vmax_241 * (ADP * s_1616 - s_0582 * s_1620 / Keq_241) / (KmADP_241 * Km1616_241) / ((1 + ADP / KmADP_241) * (1 + s_1616 / Km1616_241) + (1 + s_0582 / Km0582_241) * (1 + s_1620 / Km1620_241) - 1)) + (cell * Vmax_242 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_242) / (Km0467_242 * Km1616_242) / ((1 + s_0467 / Km0467_242) * (1 + s_1616 / Km1616_242) + (1 + s_0587 / Km0587_242) * (1 + s_1620 / Km1620_242) - 1)) + (cell * Vmax_243 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_243) / (Km0739_243 * Km1616_243) / ((1 + s_0739 / Km0739_243) * (1 + s_1616 / Km1616_243) + (1 + s_0613 / Km0613_243) * (1 + s_1620 / Km1620_243) - 1)) - (cell * Vmax_260 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_260) / (Km1212_260 * Km1620_260) / ((1 + s_1212 / Km1212_260) * (1 + s_1620 / Km1620_260) + (1 + s_1207 / Km1207_260) * (1 + s_1616 / Km1616_260) - 1));
    der(e_0001) = 0.0;
    der(e_0002) = 0.0;
    der(e_0003) = 0.0;
    der(e_0004) = 0.0;
    der(e_0005) = 0.0;
    der(e_0006) = 0.0;
    der(e_0007) = 0.0;
    der(e_0008) = 0.0;
    der(e_0010) = 0.0;
    der(e_0011) = 0.0;
    der(e_0012) = 0.0;
    der(e_0017) = 0.0;
    der(e_0020) = 0.0;
    der(e_0022) = 0.0;
    der(e_0025) = 0.0;
    der(e_0026) = 0.0;
    der(e_0028) = 0.0;
    der(e_0030) = 0.0;
    der(e_0031) = 0.0;
    der(e_0033) = 0.0;
    der(e_0038) = 0.0;
    der(e_0045) = 0.0;
    der(e_0051) = 0.0;
    der(e_0053) = 0.0;
    der(e_0054) = 0.0;
    der(e_0057) = 0.0;
    der(e_0062) = 0.0;
    der(e_0063) = 0.0;
    der(e_0064) = 0.0;
    der(e_0065) = 0.0;
    der(e_0066) = 0.0;
    der(e_0069) = 0.0;
    der(e_0071) = 0.0;
    der(e_0074) = 0.0;
    der(e_0079) = 0.0;
    der(e_0084) = 0.0;
    der(e_0087) = 0.0;
    der(e_0088) = 0.0;
    der(e_0089) = 0.0;
    der(e_0090) = 0.0;
    der(e_0091) = 0.0;
    der(e_0092) = 0.0;
    der(e_0100) = 0.0;
    der(e_0101) = 0.0;
    der(e_0103) = 0.0;
    der(e_0106) = 0.0;
    der(e_0107) = 0.0;
    der(e_0109) = 0.0;
    der(e_0111) = 0.0;
    der(e_0113) = 0.0;
    der(e_0117) = 0.0;
    der(e_0122) = 0.0;
    der(e_0124) = 0.0;
    der(e_0127) = 0.0;
    der(e_0128) = 0.0;
    der(e_0129) = 0.0;
    der(e_0133) = 0.0;
    der(e_0134) = 0.0;
    der(e_0135) = 0.0;
    der(e_0136) = 0.0;
    der(e_0137) = 0.0;
    der(e_0141) = 0.0;
    der(e_0142) = 0.0;
    der(e_0146) = 0.0;
    der(e_0151) = 0.0;
    der(e_0152) = 0.0;
    der(e_0154) = 0.0;
    der(e_0155) = 0.0;
    der(e_0160) = 0.0;
    der(e_0165) = 0.0;
    der(e_0167) = 0.0;
    der(e_0168) = 0.0;
    der(e_0169) = 0.0;
    der(e_0171) = 0.0;
    der(e_0175) = 0.0;
    der(e_0176) = 0.0;
    der(e_0177) = 0.0;
    der(e_0179) = 0.0;
    der(e_0182) = 0.0;
    der(e_0183) = 0.0;
    der(e_0186) = 0.0;
    der(e_0188) = 0.0;
    der(e_0194) = 0.0;
    der(e_0196) = 0.0;
    der(e_0202) = 0.0;
    der(e_0203) = 0.0;
    der(e_0204) = 0.0;
    der(e_0207) = 0.0;
    der(e_0213) = 0.0;
    der(e_0214) = 0.0;
    der(e_0218) = 0.0;
    der(e_0219) = 0.0;
    der(e_0220) = 0.0;
    der(e_0223) = 0.0;
    der(e_0231) = 0.0;
    der(e_0234) = 0.0;
    der(e_0237) = 0.0;
    der(e_0239) = 0.0;
    der(e_0243) = 0.0;
    der(e_0249) = 0.0;
    der(e_0250) = 0.0;
    der(e_0251) = 0.0;
    der(e_0255) = 0.0;
    der(e_0260) = 0.0;
    der(e_0263) = 0.0;
    der(e_0268) = 0.0;
    der(e_0269) = 0.0;
    der(e_0271) = 0.0;
    der(e_0273) = 0.0;
    der(e_0276) = 0.0;
    der(e_0278) = 0.0;
    der(e_0280) = 0.0;
    der(e_0281) = 0.0;
    der(e_0283) = 0.0;
    der(e_0288) = 0.0;
    der(e_0289) = 0.0;
    der(e_0290) = 0.0;
    der(e_0291) = 0.0;
    der(e_0293) = 0.0;
    der(e_0295) = 0.0;
    der(e_0296) = 0.0;
    der(e_0297) = 0.0;
    der(e_0298) = 0.0;
    der(e_0299) = 0.0;
    der(e_0303) = 0.0;
    der(e_0311) = 0.0;
    der(e_0312) = 0.0;
    der(e_0313) = 0.0;
    der(e_0314) = 0.0;
    der(e_0317) = 0.0;
    der(e_0320) = 0.0;
    der(e_0321) = 0.0;
    der(e_0322) = 0.0;
    der(e_0325) = 0.0;
    der(e_0326) = 0.0;
    der(e_0328) = 0.0;
    der(e_0329) = 0.0;
    der(e_0330) = 0.0;
    der(e_0334) = 0.0;
    der(e_0340) = 0.0;
    der(e_0342) = 0.0;
    der(e_0343) = 0.0;
    der(e_0346) = 0.0;
    der(e_0347) = 0.0;
    der(e_0348) = 0.0;
    der(e_0352) = 0.0;
    der(e_0353) = 0.0;
    der(e_0355) = 0.0;
    der(e_0356) = 0.0;
    der(e_0362) = 0.0;
    der(e_0364) = 0.0;
    der(e_0365) = 0.0;
    der(e_0367) = 0.0;
    der(e_0368) = 0.0;
    der(e_0370) = 0.0;
    der(e_0372) = 0.0;
    der(e_0376) = 0.0;
    der(e_0379) = 0.0;
    der(e_0380) = 0.0;
    der(e_0381) = 0.0;
    der(e_0382) = 0.0;
    der(e_0385) = 0.0;
    der(e_0387) = 0.0;
    der(e_0389) = 0.0;
    der(e_0390) = 0.0;
    der(e_0392) = 0.0;
    der(e_0396) = 0.0;
    der(e_0398) = 0.0;
    der(e_0401) = 0.0;
    der(e_0404) = 0.0;
    der(e_0405) = 0.0;
    der(e_0407) = 0.0;
    der(e_0409) = 0.0;
    der(e_0417) = 0.0;
    der(e_0418) = 0.0;
    der(e_0422) = 0.0;
    der(e_0424) = 0.0;
    der(e_0425) = 0.0;
    der(e_0426) = 0.0;
    der(e_0427) = 0.0;
    der(e_0428) = 0.0;
    der(e_0429) = 0.0;
    der(e_0431) = 0.0;
    der(e_0432) = 0.0;
    der(e_0434) = 0.0;
    der(e_0435) = 0.0;
    der(e_0436) = 0.0;
    der(e_0440) = 0.0;
    der(e_0447) = 0.0;
    der(e_0448) = 0.0;
    der(e_0452) = 0.0;
    der(e_0453) = 0.0;
    der(e_0454) = 0.0;
    der(e_0455) = 0.0;
    der(e_0456) = 0.0;
    der(e_0457) = 0.0;
    der(e_0458) = 0.0;
    der(e_0462) = 0.0;
    der(e_0465) = 0.0;
    der(e_0466) = 0.0;
    der(e_0467) = 0.0;
    der(e_0470) = 0.0;
    der(e_0472) = 0.0;
    der(e_0475) = 0.0;
    der(e_0476) = 0.0;
    der(e_0489) = 0.0;
    der(e_0492) = 0.0;
    der(e_0494) = 0.0;
    der(e_0495) = 0.0;
    der(e_0496) = 0.0;
    der(e_0499) = 0.0;
    der(e_0506) = 0.0;
    der(e_0508) = 0.0;
    der(e_0510) = 0.0;
    der(e_0512) = 0.0;
    der(e_0514) = 0.0;
    der(e_0515) = 0.0;
    der(e_0525) = 0.0;
    der(e_0528) = 0.0;
    der(e_0531) = 0.0;
    der(e_0536) = 0.0;
    der(e_0540) = 0.0;
    der(e_0541) = 0.0;
    der(e_0542) = 0.0;
    der(e_0544) = 0.0;
    der(e_0545) = 0.0;
    der(e_0547) = 0.0;
    der(e_0548) = 0.0;
    der(e_0549) = 0.0;
    der(e_0550) = 0.0;
    der(e_0556) = 0.0;
    der(e_0557) = 0.0;
    der(e_0558) = 0.0;
    der(e_0559) = 0.0;
    der(e_0561) = 0.0;
    der(e_0565) = 0.0;
    der(e_0567) = 0.0;
    der(e_0568) = 0.0;
    der(e_0569) = 0.0;
    der(e_0571) = 0.0;
    der(e_0574) = 0.0;
    der(e_0576) = 0.0;
    der(e_0578) = 0.0;
    der(e_0579) = 0.0;
    der(e_0581) = 0.0;
    der(e_0582) = 0.0;
    der(e_0585) = 0.0;
    der(e_0586) = 0.0;
    der(e_0588) = 0.0;
    der(e_0591) = 0.0;
    der(e_0594) = 0.0;
    der(e_0601) = 0.0;
    der(e_0603) = 0.0;
    der(e_0607) = 0.0;
    der(e_0610) = 0.0;
    der(e_0611) = 0.0;
    der(e_0612) = 0.0;
    der(e_0613) = 0.0;
    der(e_0615) = 0.0;
    der(e_0619) = 0.0;
    der(e_0621) = 0.0;
    der(e_0629) = 0.0;
    der(e_0631) = 0.0;
    der(e_0632) = 0.0;
    der(e_0633) = 0.0;
    der(e_0636) = 0.0;
    der(e_0638) = 0.0;
    der(e_0639) = 0.0;
    der(e_0642) = 0.0;
    der(e_0644) = 0.0;
    der(e_0647) = 0.0;
    der(e_0658) = 0.0;
    der(e_0667) = 0.0;
    der(e_0671) = 0.0;
    der(e_0674) = 0.0;
    der(e_0675) = 0.0;
    der(e_0682) = 0.0;
    der(e_0684) = 0.0;
    der(e_0685) = 0.0;
    der(e_0686) = 0.0;
    der(e_0687) = 0.0;
    der(e_0690) = 0.0;
    der(e_0692) = 0.0;
    der(e_0693) = 0.0;
    der(e_0695) = 0.0;
    der(e_0697) = 0.0;
    der(e_0698) = 0.0;
    der(e_0699) = 0.0;
    der(e_0704) = 0.0;
    der(e_0705) = 0.0;
    der(e_0708) = 0.0;
    der(e_0709) = 0.0;
    der(e_0711) = 0.0;
    der(e_0712) = 0.0;
    der(e_0716) = 0.0;
    der(e_0727) = 0.0;
    der(e_0729) = 0.0;
    der(e_0730) = 0.0;
    der(e_0733) = 0.0;
    der(e_0734) = 0.0;
    der(e_0736) = 0.0;
    der(e_0740) = 0.0;
    der(e_0741) = 0.0;
    der(e_0742) = 0.0;
    der(e_0743) = 0.0;
    der(e_0744) = 0.0;
    der(e_0745) = 0.0;
    der(e_0746) = 0.0;
    der(e_0747) = 0.0;
    der(e_0750) = 0.0;
    der(e_0752) = 0.0;
    der(e_0753) = 0.0;
    der(e_0754) = 0.0;
    der(e_0755) = 0.0;
    der(e_0757) = 0.0;
    der(e_0761) = 0.0;
    der(e_0762) = 0.0;
    der(e_0763) = 0.0;
    der(e_0765) = 0.0;
    der(e_0769) = 0.0;
    der(e_0771) = 0.0;
    der(e_0774) = 0.0;
    der(e_0778) = 0.0;
    der(e_0788) = 0.0;
    der(e_0791) = 0.0;
    der(e_0792) = 0.0;
    der(e_0793) = 0.0;
    der(e_0799) = 0.0;
    der(e_0800) = 0.0;
    der(e_0802) = 0.0;
    der(e_0805) = 0.0;
    der(e_0808) = 0.0;
    der(e_0812) = 0.0;
    der(e_0813) = 0.0;
    der(e_0826) = 0.0;
    der(e_0827) = 0.0;
    der(e_0829) = 0.0;
    der(e_0830) = 0.0;
    der(e_0832) = 0.0;
    der(e_0834) = 0.0;
    der(e_0836) = 0.0;
    der(e_0838) = 0.0;
    der(e_0840) = 0.0;
    der(e_0841) = 0.0;
    der(e_0842) = 0.0;
    der(e_0846) = 0.0;
    der(e_0848) = 0.0;
    der(e_0850) = 0.0;
    der(e_0851) = 0.0;
    der(e_0852) = 0.0;
    der(e_0855) = 0.0;
    der(e_0860) = 0.0;
    der(e_0862) = 0.0;
    der(e_0867) = 0.0;
    der(e_0869) = 0.0;
    der(e_0875) = 0.0;
    der(e_0880) = 0.0;
    der(e_0883) = 0.0;
    der(e_0884) = 0.0;
    der(e_0888) = 0.0;
    der(e_0889) = 0.0;
    der(e_0890) = 0.0;
    der(e_0892) = 0.0;
    der(e_0894) = 0.0;
    der(e_0895) = 0.0;
    der(e_0898) = 0.0;
    der(e_0903) = 0.0;
    der(e_0904) = 0.0;
    der(e_0911) = 0.0;
    der(e_0913) = 0.0;
    der(e_0915) = 0.0;
    der(e_0922) = 0.0;
    der(e_0924) = 0.0;
    der(e_0926) = 0.0;
    der(e_0934) = 0.0;
    der(e_0935) = 0.0;
    der(e_0940) = 0.0;
    der(e_0944) = 0.0;
    der(e_0947) = 0.0;
    der(e_0950) = 0.0;
    der(e_0953) = 0.0;
    der(e_0955) = 0.0;
    der(e_0956) = 0.0;
    der(e_0959) = 0.0;
    der(e_0962) = 0.0;
    der(e_0963) = 0.0;
    der(e_0964) = 0.0;
    der(e_0970) = 0.0;
    der(e_0973) = 0.0;
    der(e_0975) = 0.0;
    der(e_0976) = 0.0;
    der(e_0978) = 0.0;
    der(e_0980) = 0.0;
    der(F26bP) = 0.0;




end BIOMD473;
