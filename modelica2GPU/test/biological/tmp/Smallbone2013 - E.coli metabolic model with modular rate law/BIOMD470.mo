
model BIOMD470 "Smallbone2013 - E.coli metabolic model with modular rate law"

    function pow
        input  Real x;
        input  Real power;
        output Real y;
        algorithm
            y := x^power;
    end pow;
    
    function piecewise
        input Real x;
        input Boolean condition;
        input Real y;
        output Real z;
        algorithm
            z := if condition then x else y;
    end piecewise;


    function max
        	input Real x;
	input Real y;
        output Real y;
    algorithm
        y :=  (x + y + abs(x - y)) / 2;
    end max;


    parameter Real FLUX_VALUE_0 = 6.20554969142397e-05;
    parameter Real Vmax_0 = 0.000372332981485438;
    parameter Real Keq_0 = 2.0;
    parameter Real Km0004_0 = 0.1;
    parameter Real Km0003_0 = 0.1;
    parameter Real FLUX_VALUE_1 = 0.0131230753965474;
    parameter Real Vmax_1 = 0.0787384523792844;
    parameter Real Keq_1 = 2.0;
    parameter Real Km0097_1 = 0.1;
    parameter Real Km0341_1 = 0.1;
    parameter Real FLUX_VALUE_2 = 0.000392694941408386;
    parameter Real Vmax_2 = 0.0054977291797174;
    parameter Real Keq_2 = 2.0;
    parameter Real Km0913_2 = 0.1;
    parameter Real Km1531_2 = 0.1;
    parameter Real Km0543_2 = 0.1;
    parameter Real Km0116_2 = 0.1;
    parameter Real FLUX_VALUE_3 = 0.000330916477964549;
    parameter Real Vmax_3 = 0.00463283069150369;
    parameter Real Keq_3 = 2.0;
    parameter Real Km0116_3 = 0.1;
    parameter Real Km1336_3 = 0.1;
    parameter Real Km0194_3 = 0.1;
    parameter Real Km1335_3 = 0.1;
    parameter Real FLUX_VALUE_4 = 0.0104178435779621;
    parameter Real Vmax_4 = 0.145849810091469;
    parameter Real Keq_4 = 2.0;
    parameter Real Km0119_4 = 0.1;
    parameter Real Km0533_4 = 0.1;
    parameter Real Km0397_4 = 0.1;
    parameter Real Km0073_4 = 0.1;
    parameter Real FLUX_VALUE_5 = 0.00884013797559913;
    parameter Real Vmax_5 = 0.123761931658388;
    parameter Real Keq_5 = 2.0;
    parameter Real Km0121_5 = 0.1;
    parameter Real Km1411_5 = 0.1;
    parameter Real Km0397_5 = 0.1;
    parameter Real Km0075_5 = 0.1;
    parameter Real FLUX_VALUE_6 = 3.85076520790662e-05;
    parameter Real Vmax_6 = 0.000539107129106927;
    parameter Real Keq_6 = 2.0;
    parameter Real Km0123_6 = 0.1;
    parameter Real Km1334_6 = 0.1;
    parameter Real Km0779_6 = 0.1;
    parameter Real Km1333_6 = 0.1;
    parameter Real FLUX_VALUE_7 = 0.000292408825885483;
    parameter Real Vmax_7 = 0.00409372356239676;
    parameter Real Keq_7 = 2.0;
    parameter Real Km0123_7 = 0.1;
    parameter Real Km1334_7 = 0.1;
    parameter Real Km1028_7 = 0.1;
    parameter Real Km1333_7 = 0.1;
    parameter Real FLUX_VALUE_8 = 0.0402391112803253;
    parameter Real Vmax_8 = 0.563347557924554;
    parameter Real Keq_8 = 2.0;
    parameter Real Km0232_8 = 0.1;
    parameter Real Km1531_8 = 0.1;
    parameter Real Km0041_8 = 0.1;
    parameter Real Km0543_8 = 0.1;
    parameter Real FLUX_VALUE_9 = 0.000330916477964549;
    parameter Real Vmax_9 = 0.00330916477964549;
    parameter Real Keq_9 = 0.2;
    parameter Real Km0237_9 = 0.1;
    parameter Real Km0193_9 = 0.1;
    parameter Real Km0539_9 = 0.1;
    parameter Real FLUX_VALUE_10 = 0.000330916477964549;
    parameter Real Vmax_10 = 0.00463283069150369;
    parameter Real Keq_10 = 2.0;
    parameter Real Km0194_10 = 0.1;
    parameter Real Km0575_10 = 0.1;
    parameter Real Km0312_10 = 0.1;
    parameter Real Km0783_10 = 0.1;
    parameter Real FLUX_VALUE_11 = 0.87986351299776;
    parameter Real Vmax_11 = 8.7986351299776;
    parameter Real Keq_11 = 0.2;
    parameter Real Km0201_11 = 0.1;
    parameter Real Km0913_11 = 0.1;
    parameter Real Km1531_11 = 0.1;
    parameter Real FLUX_VALUE_12 = 7.97856388884133e-05;
    parameter Real Vmax_12 = 0.00111699894443779;
    parameter Real Keq_12 = 2.0;
    parameter Real Km0203_12 = 0.1;
    parameter Real Km1336_12 = 0.1;
    parameter Real Km1335_12 = 0.1;
    parameter Real Km0032_12 = 0.1;
    parameter Real FLUX_VALUE_13 = 0.0624017887496972;
    parameter Real Vmax_13 = 0.374410732498183;
    parameter Real Keq_13 = 2.0;
    parameter Real Km0266_13 = 0.1;
    parameter Real Km0217_13 = 0.1;
    parameter Real FLUX_VALUE_14 = 0.0624017887496972;
    parameter Real Vmax_14 = 0.873625042495761;
    parameter Real Keq_14 = 2.0;
    parameter Real Km0282_14 = 0.1;
    parameter Real Km0395_14 = 0.1;
    parameter Real Km0266_14 = 0.1;
    parameter Real Km0555_14 = 0.1;
    parameter Real FLUX_VALUE_15 = 0.0624017887496972;
    parameter Real Vmax_15 = 0.624017887496972;
    parameter Real Keq_15 = 0.2;
    parameter Real Km0267_15 = 0.1;
    parameter Real Km0328_15 = 0.1;
    parameter Real Km0543_15 = 0.1;
    parameter Real FLUX_VALUE_16 = 0.000330916477964549;
    parameter Real Vmax_16 = 0.00992749433893647;
    parameter Real Keq_16 = 2.0;
    parameter Real Km0193_16 = 0.1;
    parameter Real Km0861_16 = 0.1;
    parameter Real Km0862_16 = 0.1;
    parameter Real Km0123_16 = 0.1;
    parameter Real FLUX_VALUE_17 = 0.0343363591697952;
    parameter Real Vmax_17 = 0.343363591697952;
    parameter Real Keq_17 = 0.2;
    parameter Real Km0411_17 = 0.1;
    parameter Real Km0454_17 = 0.1;
    parameter Real Km1430_17 = 0.1;
    parameter Real FLUX_VALUE_18 = 0.000123556926891731;
    parameter Real Vmax_18 = 0.00123556926891731;
    parameter Real Keq_18 = 0.2;
    parameter Real Km0704_18 = 0.1;
    parameter Real Km0255_18 = 0.1;
    parameter Real Km0867_18 = 0.1;
    parameter Real FLUX_VALUE_19 = 0.0208356871558827;
    parameter Real Vmax_19 = 0.125014122935296;
    parameter Real Keq_19 = 2.0;
    parameter Real Km1674_19 = 0.1;
    parameter Real Km0979_19 = 0.1;
    parameter Real FLUX_VALUE_20 = 0.052796345817737;
    parameter Real Vmax_20 = 0.316778074906422;
    parameter Real Keq_20 = 2.0;
    parameter Real Km0269_20 = 0.1;
    parameter Real Km0270_20 = 0.1;
    parameter Real FLUX_VALUE_21 = 0.052796345817737;
    parameter Real Vmax_21 = 0.52796345817737;
    parameter Real Keq_21 = 0.2;
    parameter Real Km0195_21 = 0.1;
    parameter Real Km0269_21 = 0.1;
    parameter Real Km1430_21 = 0.1;
    parameter Real FLUX_VALUE_22 = 0.00539107129442444;
    parameter Real Vmax_22 = 0.0754749981219422;
    parameter Real Keq_22 = 2.0;
    parameter Real Km0611_22 = 0.1;
    parameter Real Km1484_22 = 0.1;
    parameter Real Km0272_22 = 0.1;
    parameter Real Km1430_22 = 0.1;
    parameter Real FLUX_VALUE_23 = 0.052796345817737;
    parameter Real Vmax_23 = 0.739148841448318;
    parameter Real Keq_23 = 2.0;
    parameter Real Km0621_23 = 0.1;
    parameter Real Km1484_23 = 0.1;
    parameter Real Km0195_23 = 0.1;
    parameter Real Km1430_23 = 0.1;
    parameter Real FLUX_VALUE_24 = 0.00269553564721213;
    parameter Real Vmax_24 = 0.0377374990609698;
    parameter Real Keq_24 = 2.0;
    parameter Real Km0542_24 = 0.1;
    parameter Real Km0147_24 = 0.1;
    parameter Real Km0539_24 = 0.1;
    parameter Real Km1038_24 = 0.1;
    parameter Real FLUX_VALUE_25 = 0.00269553564721213;
    parameter Real Vmax_25 = 0.0377374990609698;
    parameter Real Keq_25 = 2.0;
    parameter Real Km0542_25 = 0.1;
    parameter Real Km1038_25 = 0.1;
    parameter Real Km0539_25 = 0.1;
    parameter Real Km1033_25 = 0.1;
    parameter Real FLUX_VALUE_26 = 0.00539107129442444;
    parameter Real Vmax_26 = 0.0754749981219422;
    parameter Real Keq_26 = 2.0;
    parameter Real Km0575_26 = 0.1;
    parameter Real Km0271_26 = 0.1;
    parameter Real Km0542_26 = 0.1;
    parameter Real Km0783_26 = 0.1;
    parameter Real FLUX_VALUE_27 = 0.00539107129442444;
    parameter Real Vmax_27 = 0.0539107129442444;
    parameter Real Keq_27 = 0.2;
    parameter Real Km0272_27 = 0.1;
    parameter Real Km0271_27 = 0.1;
    parameter Real Km1430_27 = 0.1;
    parameter Real FLUX_VALUE_28 = 0.0492981056959303;
    parameter Real Vmax_28 = 0.295788634175582;
    parameter Real Keq_28 = 2.0;
    parameter Real Km0043_28 = 0.1;
    parameter Real Km0574_28 = 0.1;
    parameter Real FLUX_VALUE_29 = 0.0492981056959448;
    parameter Real Vmax_29 = 0.295788634175669;
    parameter Real Keq_29 = 2.0;
    parameter Real Km0044_29 = 0.1;
    parameter Real Km1668_29 = 0.1;
    parameter Real FLUX_VALUE_30 = 0.0492981056959429;
    parameter Real Vmax_30 = 0.295788634175657;
    parameter Real Keq_30 = 2.0;
    parameter Real Km0045_30 = 0.1;
    parameter Real Km1670_30 = 0.1;
    parameter Real FLUX_VALUE_31 = 0.0385159631070915;
    parameter Real Vmax_31 = 0.231095778642549;
    parameter Real Keq_31 = 2.0;
    parameter Real Km0046_31 = 0.1;
    parameter Real Km1674_31 = 0.1;
    parameter Real FLUX_VALUE_32 = 0.0492981056959303;
    parameter Real Vmax_32 = 0.295788634175582;
    parameter Real Keq_32 = 2.0;
    parameter Real Km0047_32 = 0.1;
    parameter Real Km1672_32 = 0.1;
    parameter Real FLUX_VALUE_33 = 0.0492981056959303;
    parameter Real Vmax_33 = 0.295788634175582;
    parameter Real Keq_33 = 2.0;
    parameter Real Km0049_33 = 0.1;
    parameter Real Km1676_33 = 0.1;
    parameter Real FLUX_VALUE_34 = 0.0385159631070598;
    parameter Real Vmax_34 = 0.231095778642359;
    parameter Real Keq_34 = 2.0;
    parameter Real Km0050_34 = 0.1;
    parameter Real Km1680_34 = 0.1;
    parameter Real FLUX_VALUE_35 = 0.0492981056959448;
    parameter Real Vmax_35 = 0.690173479743227;
    parameter Real Keq_35 = 2.0;
    parameter Real Km0293_35 = 0.1;
    parameter Real Km1334_35 = 0.1;
    parameter Real Km0044_35 = 0.1;
    parameter Real Km1333_35 = 0.1;
    parameter Real FLUX_VALUE_36 = 0.0492981056959429;
    parameter Real Vmax_36 = 0.690173479743201;
    parameter Real Keq_36 = 2.0;
    parameter Real Km0295_36 = 0.1;
    parameter Real Km1334_36 = 0.1;
    parameter Real Km0045_36 = 0.1;
    parameter Real Km1333_36 = 0.1;
    parameter Real FLUX_VALUE_37 = 0.0385159631070915;
    parameter Real Vmax_37 = 0.539223483499281;
    parameter Real Keq_37 = 2.0;
    parameter Real Km0297_37 = 0.1;
    parameter Real Km1334_37 = 0.1;
    parameter Real Km0046_37 = 0.1;
    parameter Real Km1333_37 = 0.1;
    parameter Real FLUX_VALUE_38 = 0.0492981056959303;
    parameter Real Vmax_38 = 0.690173479743024;
    parameter Real Keq_38 = 2.0;
    parameter Real Km0299_38 = 0.1;
    parameter Real Km1334_38 = 0.1;
    parameter Real Km0047_38 = 0.1;
    parameter Real Km1333_38 = 0.1;
    parameter Real FLUX_VALUE_39 = 0.0492981056959303;
    parameter Real Vmax_39 = 0.690173479743024;
    parameter Real Keq_39 = 2.0;
    parameter Real Km0303_39 = 0.1;
    parameter Real Km1334_39 = 0.1;
    parameter Real Km0049_39 = 0.1;
    parameter Real Km1333_39 = 0.1;
    parameter Real FLUX_VALUE_40 = 0.0385159631070598;
    parameter Real Vmax_40 = 0.539223483498837;
    parameter Real Keq_40 = 2.0;
    parameter Real Km0305_40 = 0.1;
    parameter Real Km1334_40 = 0.1;
    parameter Real Km0050_40 = 0.1;
    parameter Real Km1333_40 = 0.1;
    parameter Real FLUX_VALUE_41 = 0.0492981056959303;
    parameter Real Vmax_41 = 0.690173479743024;
    parameter Real Keq_41 = 2.0;
    parameter Real Km0391_41 = 0.1;
    parameter Real Km1334_41 = 0.1;
    parameter Real Km0043_41 = 0.1;
    parameter Real Km1333_41 = 0.1;
    parameter Real FLUX_VALUE_42 = 0.0624017887496972;
    parameter Real Vmax_42 = 0.374410732498183;
    parameter Real Keq_42 = 2.0;
    parameter Real Km0217_42 = 0.1;
    parameter Real Km0265_42 = 0.1;
    parameter Real FLUX_VALUE_43 = 0.0624017887496972;
    parameter Real Vmax_43 = 0.873625042495761;
    parameter Real Keq_43 = 2.0;
    parameter Real Km0265_43 = 0.1;
    parameter Real Km1333_43 = 0.1;
    parameter Real Km0267_43 = 0.1;
    parameter Real Km1334_43 = 0.1;
    parameter Real FLUX_VALUE_44 = 7.97856388884133e-05;
    parameter Real Vmax_44 = 0.00111699894443779;
    parameter Real Keq_44 = 2.0;
    parameter Real Km0282_44 = 0.1;
    parameter Real Km0336_44 = 0.1;
    parameter Real Km0203_44 = 0.1;
    parameter Real Km0337_44 = 0.1;
    parameter Real FLUX_VALUE_45 = 2.77033467884759e-07;
    parameter Real Vmax_45 = 1.66220080730855e-06;
    parameter Real Keq_45 = 2.0;
    parameter Real Km0276_45 = 0.1;
    parameter Real Km0812_45 = 0.1;
    parameter Real FLUX_VALUE_46 = 2.77033467884759e-07;
    parameter Real Vmax_46 = 3.87846855038663e-06;
    parameter Real Keq_46 = 2.0;
    parameter Real Km1336_46 = 0.1;
    parameter Real Km0289_46 = 0.1;
    parameter Real Km0276_46 = 0.1;
    parameter Real Km1335_46 = 0.1;
    parameter Real FLUX_VALUE_47 = 2.77033467884759e-07;
    parameter Real Vmax_47 = 6.0947362934647e-06;
    parameter Real Keq_47 = 0.2;
    parameter Real Km1216_47 = 0.1;
    parameter Real Km1218_47 = 0.1;
    parameter Real Km0543_47 = 0.1;
    parameter Real Km0555_47 = 0.1;
    parameter Real Km0289_47 = 0.1;
    parameter Real FLUX_VALUE_48 = 2.77033467884759e-07;
    parameter Real Vmax_48 = 1.66220080730855e-06;
    parameter Real Keq_48 = 2.0;
    parameter Real Km0277_48 = 0.1;
    parameter Real Km0813_48 = 0.1;
    parameter Real FLUX_VALUE_49 = 2.77033467884759e-07;
    parameter Real Vmax_49 = 3.87846855038663e-06;
    parameter Real Keq_49 = 2.0;
    parameter Real Km1336_49 = 0.1;
    parameter Real Km0290_49 = 0.1;
    parameter Real Km0277_49 = 0.1;
    parameter Real Km1335_49 = 0.1;
    parameter Real FLUX_VALUE_50 = 2.77033467884759e-07;
    parameter Real Vmax_50 = 6.0947362934647e-06;
    parameter Real Keq_50 = 0.2;
    parameter Real Km0910_50 = 0.1;
    parameter Real Km1216_50 = 0.1;
    parameter Real Km0397_50 = 0.1;
    parameter Real Km0543_50 = 0.1;
    parameter Real Km0290_50 = 0.1;
    parameter Real FLUX_VALUE_51 = 0.0107821425888488;
    parameter Real Vmax_51 = 0.150949996243883;
    parameter Real Keq_51 = 2.0;
    parameter Real Km0304_51 = 0.1;
    parameter Real Km1336_51 = 0.1;
    parameter Real Km0028_51 = 0.1;
    parameter Real Km1335_51 = 0.1;
    parameter Real FLUX_VALUE_52 = 0.0107821425888488;
    parameter Real Vmax_52 = 0.237207136954674;
    parameter Real Keq_52 = 0.2;
    parameter Real Km0789_52 = 0.1;
    parameter Real Km1216_52 = 0.1;
    parameter Real Km0304_52 = 0.1;
    parameter Real Km0397_52 = 0.1;
    parameter Real Km0543_52 = 0.1;
    parameter Real FLUX_VALUE_53 = 0.0527963458177373;
    parameter Real Vmax_53 = 0.739148841448322;
    parameter Real Keq_53 = 2.0;
    parameter Real Km1484_53 = 0.1;
    parameter Real Km1574_53 = 0.1;
    parameter Real Km0359_53 = 0.1;
    parameter Real Km1430_53 = 0.1;
    parameter Real FLUX_VALUE_54 = 6.20554969142397e-05;
    parameter Real Vmax_54 = 0.000372332981485438;
    parameter Real Keq_54 = 2.0;
    parameter Real Km0310_54 = 0.1;
    parameter Real Km0004_54 = 0.1;
    parameter Real FLUX_VALUE_55 = 0.000330916477964549;
    parameter Real Vmax_55 = 0.00463283069150369;
    parameter Real Keq_55 = 2.0;
    parameter Real Km0312_55 = 0.1;
    parameter Real Km0467_55 = 0.1;
    parameter Real Km0237_55 = 0.1;
    parameter Real Km0421_55 = 0.1;
    parameter Real FLUX_VALUE_56 = 3.08892317229363e-05;
    parameter Real Vmax_56 = 0.00117379080547158;
    parameter Real Keq_56 = 0.02;
    parameter Real Km0342_56 = 0.1;
    parameter Real Km1333_56 = 0.1;
    parameter Real Km0313_56 = 0.1;
    parameter Real Km0867_56 = 0.1;
    parameter Real Km1334_56 = 0.1;
    parameter Real FLUX_VALUE_57 = 9.26676951688061e-05;
    parameter Real Vmax_57 = 0.00129734773236329;
    parameter Real Keq_57 = 2.0;
    parameter Real Km0526_57 = 0.1;
    parameter Real Km1101_57 = 0.1;
    parameter Real Km0316_57 = 0.1;
    parameter Real Km1095_57 = 0.1;
    parameter Real FLUX_VALUE_58 = 9.26676951688061e-05;
    parameter Real Vmax_58 = 0.000926676951688061;
    parameter Real Keq_58 = 0.2;
    parameter Real Km0316_58 = 0.1;
    parameter Real Km0318_58 = 0.1;
    parameter Real Km1531_58 = 0.1;
    parameter Real FLUX_VALUE_59 = 3.11662651885034e-05;
    parameter Real Vmax_59 = 0.000311662651885034;
    parameter Real Keq_59 = 0.2;
    parameter Real Km0333_59 = 0.1;
    parameter Real Km0334_59 = 0.1;
    parameter Real Km0405_59 = 0.1;
    parameter Real FLUX_VALUE_60 = 0.0213832438061183;
    parameter Real Vmax_60 = 0.299365413285656;
    parameter Real Keq_60 = 2.0;
    parameter Real Km0336_60 = 0.1;
    parameter Real Km1334_60 = 0.1;
    parameter Real Km0354_60 = 0.1;
    parameter Real Km1333_60 = 0.1;
    parameter Real FLUX_VALUE_61 = 6.17784634458656e-05;
    parameter Real Vmax_61 = 0.000864898488242119;
    parameter Real Keq_61 = 2.0;
    parameter Real Km0347_61 = 0.1;
    parameter Real Km1336_61 = 0.1;
    parameter Real Km0346_61 = 0.1;
    parameter Real Km1335_61 = 0.1;
    parameter Real FLUX_VALUE_62 = 9.26676951688061e-05;
    parameter Real Vmax_62 = 0.00129734773236329;
    parameter Real Keq_62 = 2.0;
    parameter Real Km0367_62 = 0.1;
    parameter Real Km0467_62 = 0.1;
    parameter Real Km0368_62 = 0.1;
    parameter Real Km0454_62 = 0.1;
    parameter Real FLUX_VALUE_63 = 0.87986351299775;
    parameter Real Vmax_63 = 5.2791810779865;
    parameter Real Keq_63 = 2.0;
    parameter Real Km0369_63 = 0.1;
    parameter Real Km0201_63 = 0.1;
    parameter Real FLUX_VALUE_64 = 0.879863512997714;
    parameter Real Vmax_64 = 5.27918107798628;
    parameter Real Keq_64 = 2.0;
    parameter Real Km0370_64 = 0.1;
    parameter Real Km0369_64 = 0.1;
    parameter Real FLUX_VALUE_65 = 2.77033467884759e-07;
    parameter Real Vmax_65 = 6.0947362934647e-06;
    parameter Real Keq_65 = 0.2;
    parameter Real Km1041_65 = 0.1;
    parameter Real Km1491_65 = 0.1;
    parameter Real Km0376_65 = 0.1;
    parameter Real Km0397_65 = 0.1;
    parameter Real Km0543_65 = 0.1;
    parameter Real FLUX_VALUE_66 = 0.0414265806134143;
    parameter Real Vmax_66 = 0.911384773495115;
    parameter Real Keq_66 = 20.0;
    parameter Real Km0381_66 = 0.1;
    parameter Real Km0555_66 = 0.1;
    parameter Real Km1333_66 = 0.1;
    parameter Real Km0395_66 = 0.1;
    parameter Real Km1334_66 = 0.1;
    parameter Real FLUX_VALUE_67 = 0.0807006804356794;
    parameter Real Vmax_67 = 1.12980952609951;
    parameter Real Keq_67 = 2.0;
    parameter Real Km0384_67 = 0.1;
    parameter Real Km0467_67 = 0.1;
    parameter Real Km0393_67 = 0.1;
    parameter Real Km0421_67 = 0.1;
    parameter Real FLUX_VALUE_68 = 0.121101856295072;
    parameter Real Vmax_68 = 1.69542598813101;
    parameter Real Keq_68 = 2.0;
    parameter Real Km1531_68 = 0.1;
    parameter Real Km0042_68 = 0.1;
    parameter Real Km0543_68 = 0.1;
    parameter Real FLUX_VALUE_69 = 0.0492981056959303;
    parameter Real Vmax_69 = 0.690173479743024;
    parameter Real Keq_69 = 2.0;
    parameter Real Km0395_69 = 0.1;
    parameter Real Km0391_69 = 0.1;
    parameter Real Km0555_69 = 0.1;
    parameter Real FLUX_VALUE_70 = 0.0492981056959303;
    parameter Real Vmax_70 = 0.690173479743024;
    parameter Real Keq_70 = 2.0;
    parameter Real Km0395_70 = 0.1;
    parameter Real Km0488_70 = 0.1;
    parameter Real Km0299_70 = 0.1;
    parameter Real Km0555_70 = 0.1;
    parameter Real FLUX_VALUE_71 = 0.0492981056959429;
    parameter Real Vmax_71 = 0.690173479743201;
    parameter Real Keq_71 = 2.0;
    parameter Real Km0395_71 = 0.1;
    parameter Real Km0737_71 = 0.1;
    parameter Real Km0295_71 = 0.1;
    parameter Real Km0555_71 = 0.1;
    parameter Real FLUX_VALUE_72 = 0.0385159631070598;
    parameter Real Vmax_72 = 0.539223483498837;
    parameter Real Keq_72 = 2.0;
    parameter Real Km0395_72 = 0.1;
    parameter Real Km0790_72 = 0.1;
    parameter Real Km0305_72 = 0.1;
    parameter Real Km0555_72 = 0.1;
    parameter Real FLUX_VALUE_73 = 0.0492981056959303;
    parameter Real Vmax_73 = 0.690173479743024;
    parameter Real Keq_73 = 2.0;
    parameter Real Km0395_73 = 0.1;
    parameter Real Km0984_73 = 0.1;
    parameter Real Km0303_73 = 0.1;
    parameter Real Km0555_73 = 0.1;
    parameter Real FLUX_VALUE_74 = 0.0492981056959448;
    parameter Real Vmax_74 = 0.690173479743227;
    parameter Real Keq_74 = 2.0;
    parameter Real Km0395_74 = 0.1;
    parameter Real Km1390_74 = 0.1;
    parameter Real Km0293_74 = 0.1;
    parameter Real Km0555_74 = 0.1;
    parameter Real FLUX_VALUE_75 = 0.0385159631070916;
    parameter Real Vmax_75 = 0.539223483499282;
    parameter Real Keq_75 = 2.0;
    parameter Real Km0395_75 = 0.1;
    parameter Real Km1632_75 = 0.1;
    parameter Real Km0297_75 = 0.1;
    parameter Real Km0555_75 = 0.1;
    parameter Real FLUX_VALUE_76 = 0.0107829736892899;
    parameter Real Vmax_76 = 0.323489210678697;
    parameter Real Keq_76 = 2.0;
    parameter Real Km0395_76 = 0.1;
    parameter Real Km0467_76 = 0.1;
    parameter Real Km0474_76 = 0.1;
    parameter Real Km0421_76 = 0.1;
    parameter Real Km1217_76 = 0.1;
    parameter Real Km1430_76 = 0.1;
    parameter Real FLUX_VALUE_77 = 0.0409732499715063;
    parameter Real Vmax_77 = 0.573625499601088;
    parameter Real Keq_77 = 2.0;
    parameter Real Km1302_77 = 0.1;
    parameter Real Km0467_77 = 0.1;
    parameter Real Km1304_77 = 0.1;
    parameter Real Km0421_77 = 0.1;
    parameter Real FLUX_VALUE_78 = 0.040973249971501;
    parameter Real Vmax_78 = 0.40973249971501;
    parameter Real Keq_78 = 0.2;
    parameter Real Km1321_78 = 0.1;
    parameter Real Km0384_78 = 0.1;
    parameter Real Km1391_78 = 0.1;
    parameter Real FLUX_VALUE_79 = 0.040973249971501;
    parameter Real Vmax_79 = 0.573625499601014;
    parameter Real Keq_79 = 2.0;
    parameter Real Km1303_79 = 0.1;
    parameter Real Km1095_79 = 0.1;
    parameter Real Km1321_79 = 0.1;
    parameter Real Km0233_79 = 0.1;
    parameter Real FLUX_VALUE_80 = 0.148949399052035;
    parameter Real Vmax_80 = 0.89369639431221;
    parameter Real Keq_80 = 2.0;
    parameter Real Km0536_80 = 0.1;
    parameter Real Km0530_80 = 0.1;
    parameter Real FLUX_VALUE_81 = 0.148949399052035;
    parameter Real Vmax_81 = 0.89369639431221;
    parameter Real Keq_81 = 2.0;
    parameter Real Km0530_81 = 0.1;
    parameter Real Km1027_81 = 0.1;
    parameter Real FLUX_VALUE_82 = 0.0107821425888425;
    parameter Real Vmax_82 = 0.323464277665275;
    parameter Real Keq_82 = 2.0;
    parameter Real Km0397_82 = 0.1;
    parameter Real Km0467_82 = 0.1;
    parameter Real Km0785_82 = 0.1;
    parameter Real Km0454_82 = 0.1;
    parameter Real Km0789_82 = 0.1;
    parameter Real Km0783_82 = 0.1;
    parameter Real FLUX_VALUE_83 = 0.0176802759511862;
    parameter Real Vmax_83 = 0.530408278535586;
    parameter Real Keq_83 = 2.0;
    parameter Real Km0397_83 = 0.1;
    parameter Real Km0467_83 = 0.1;
    parameter Real Km0971_83 = 0.1;
    parameter Real Km0454_83 = 0.1;
    parameter Real Km1411_83 = 0.1;
    parameter Real Km0783_83 = 0.1;
    parameter Real FLUX_VALUE_84 = 0.0208356871559117;
    parameter Real Vmax_84 = 0.625070614677351;
    parameter Real Keq_84 = 2.0;
    parameter Real Km0397_84 = 0.1;
    parameter Real Km0467_84 = 0.1;
    parameter Real Km0976_84 = 0.1;
    parameter Real Km0454_84 = 0.1;
    parameter Real Km0533_84 = 0.1;
    parameter Real Km0783_84 = 0.1;
    parameter Real FLUX_VALUE_85 = 0.0492981056959303;
    parameter Real Vmax_85 = 0.690173479743024;
    parameter Real Keq_85 = 2.0;
    parameter Real Km0574_85 = 0.1;
    parameter Real Km0860_85 = 0.1;
    parameter Real Km0488_85 = 0.1;
    parameter Real Km0859_85 = 0.1;
    parameter Real FLUX_VALUE_86 = 0.0492981056959448;
    parameter Real Vmax_86 = 0.690173479743227;
    parameter Real Keq_86 = 2.0;
    parameter Real Km1668_86 = 0.1;
    parameter Real Km0860_86 = 0.1;
    parameter Real Km0737_86 = 0.1;
    parameter Real Km0859_86 = 0.1;
    parameter Real FLUX_VALUE_87 = 0.0492981056959429;
    parameter Real Vmax_87 = 0.690173479743201;
    parameter Real Keq_87 = 2.0;
    parameter Real Km1670_87 = 0.1;
    parameter Real Km0860_87 = 0.1;
    parameter Real Km0790_87 = 0.1;
    parameter Real Km0859_87 = 0.1;
    parameter Real FLUX_VALUE_88 = 0.0176802759511649;
    parameter Real Vmax_88 = 0.247523863316309;
    parameter Real Keq_88 = 2.0;
    parameter Real Km0860_88 = 0.1;
    parameter Real Km1674_88 = 0.1;
    parameter Real Km0859_88 = 0.1;
    parameter Real Km1412_88 = 0.1;
    parameter Real FLUX_VALUE_89 = 0.0492981056959303;
    parameter Real Vmax_89 = 0.690173479743024;
    parameter Real Keq_89 = 2.0;
    parameter Real Km0860_89 = 0.1;
    parameter Real Km1672_89 = 0.1;
    parameter Real Km0859_89 = 0.1;
    parameter Real Km0984_89 = 0.1;
    parameter Real FLUX_VALUE_90 = 0.0492981056959303;
    parameter Real Vmax_90 = 0.690173479743024;
    parameter Real Keq_90 = 2.0;
    parameter Real Km0860_90 = 0.1;
    parameter Real Km1676_90 = 0.1;
    parameter Real Km0859_90 = 0.1;
    parameter Real Km1390_90 = 0.1;
    parameter Real FLUX_VALUE_91 = 0.0385159631070833;
    parameter Real Vmax_91 = 0.539223483499166;
    parameter Real Keq_91 = 2.0;
    parameter Real Km0860_91 = 0.1;
    parameter Real Km1680_91 = 0.1;
    parameter Real Km0859_91 = 0.1;
    parameter Real Km1632_91 = 0.1;
    parameter Real FLUX_VALUE_92 = 9.32217621027432e-05;
    parameter Real Vmax_92 = 0.0013051046694384;
    parameter Real Keq_92 = 2.0;
    parameter Real Km0408_92 = 0.1;
    parameter Real Km0467_92 = 0.1;
    parameter Real Km0421_92 = 0.1;
    parameter Real Km0454_92 = 0.1;
    parameter Real FLUX_VALUE_93 = 2.77033467884759e-07;
    parameter Real Vmax_93 = 3.87846855038663e-06;
    parameter Real Keq_93 = 2.0;
    parameter Real Km0376_93 = 0.1;
    parameter Real Km1552_93 = 0.1;
    parameter Real Km1550_93 = 0.1;
    parameter Real Km0371_93 = 0.1;
    parameter Real FLUX_VALUE_94 = 0.362277497683991;
    parameter Real Vmax_94 = 5.07188496757587;
    parameter Real Keq_94 = 2.0;
    parameter Real Km0454_94 = 0.1;
    parameter Real Km0467_94 = 0.1;
    parameter Real Km0421_94 = 0.1;
    parameter Real FLUX_VALUE_95 = 0.0613899240064973;
    parameter Real Vmax_95 = 0.613899240064973;
    parameter Real Keq_95 = 0.2;
    parameter Real Km0040_95 = 0.1;
    parameter Real Km0343_95 = 0.1;
    parameter Real Km0875_95 = 0.1;
    parameter Real FLUX_VALUE_96 = 0.0407532853976299;
    parameter Real Vmax_96 = 1.2225985619289;
    parameter Real Keq_96 = 2.0;
    parameter Real Km1072_96 = 0.1;
    parameter Real Km0945_96 = 0.1;
    parameter Real Km1006_96 = 0.1;
    parameter Real Km1327_96 = 0.1;
    parameter Real Km0896_96 = 0.1;
    parameter Real Km1430_96 = 0.1;
    parameter Real FLUX_VALUE_97 = 0.0407532853976299;
    parameter Real Vmax_97 = 0.407532853976299;
    parameter Real Keq_97 = 0.2;
    parameter Real Km1327_97 = 0.1;
    parameter Real Km0454_97 = 0.1;
    parameter Real Km0875_97 = 0.1;
    parameter Real FLUX_VALUE_98 = 0.0343363591697952;
    parameter Real Vmax_98 = 0.480709028377133;
    parameter Real Keq_98 = 2.0;
    parameter Real Km0412_98 = 0.1;
    parameter Real Km0467_98 = 0.1;
    parameter Real Km0421_98 = 0.1;
    parameter Real Km0252_98 = 0.1;
    parameter Real FLUX_VALUE_99 = 0.00577199231356107;
    parameter Real Vmax_99 = 0.0346319538813664;
    parameter Real Keq_99 = 2.0;
    parameter Real Km1041_99 = 0.1;
    parameter Real Km0600_99 = 0.1;
    parameter Real FLUX_VALUE_100 = 0.00787329117099325;
    parameter Real Vmax_100 = 0.110226076393905;
    parameter Real Keq_100 = 2.0;
    parameter Real Km0457_100 = 0.1;
    parameter Real Km0360_100 = 0.1;
    parameter Real Km0783_100 = 0.1;
    parameter Real Km1278_100 = 0.1;
    parameter Real FLUX_VALUE_101 = 0.00787329117099325;
    parameter Real Vmax_101 = 0.173212405761852;
    parameter Real Keq_101 = 0.2;
    parameter Real Km0526_101 = 0.1;
    parameter Real Km1101_101 = 0.1;
    parameter Real Km0457_101 = 0.1;
    parameter Real Km1095_101 = 0.1;
    parameter Real Km1531_101 = 0.1;
    parameter Real FLUX_VALUE_102 = 0.00539107129442444;
    parameter Real Vmax_102 = 0.0323464277665466;
    parameter Real Keq_102 = 2.0;
    parameter Real Km0704_102 = 0.1;
    parameter Real Km0611_102 = 0.1;
    parameter Real FLUX_VALUE_103 = 0.0409732499715002;
    parameter Real Vmax_103 = 0.409732499715002;
    parameter Real Keq_103 = 0.2;
    parameter Real Km1274_103 = 0.1;
    parameter Real Km1061_103 = 0.1;
    parameter Real Km0875_103 = 0.1;
    parameter Real FLUX_VALUE_104 = 0.040973249971501;
    parameter Real Vmax_104 = 1.22919749914503;
    parameter Real Keq_104 = 2.0;
    parameter Real Km1072_104 = 0.1;
    parameter Real Km0467_104 = 0.1;
    parameter Real Km1081_104 = 0.1;
    parameter Real Km0454_104 = 0.1;
    parameter Real Km1274_104 = 0.1;
    parameter Real Km0783_104 = 0.1;
    parameter Real FLUX_VALUE_105 = 0.033396384611683;
    parameter Real Vmax_105 = 1.00189153835049;
    parameter Real Keq_105 = 2.0;
    parameter Real Km1072_105 = 0.1;
    parameter Real Km0467_105 = 0.1;
    parameter Real Km0451_105 = 0.1;
    parameter Real Km0454_105 = 0.1;
    parameter Real Km1068_105 = 0.1;
    parameter Real Km0783_105 = 0.1;
    parameter Real FLUX_VALUE_106 = 7.97856388811725e-05;
    parameter Real Vmax_106 = 0.000797856388811725;
    parameter Real Keq_106 = 0.2;
    parameter Real Km1072_106 = 0.1;
    parameter Real Km0470_106 = 0.1;
    parameter Real Km0543_106 = 0.1;
    parameter Real FLUX_VALUE_107 = 0.0458199505005817;
    parameter Real Vmax_107 = 0.641479307008144;
    parameter Real Keq_107 = 2.0;
    parameter Real Km1072_107 = 0.1;
    parameter Real Km0502_107 = 0.1;
    parameter Real Km1312_107 = 0.1;
    parameter Real Km1430_107 = 0.1;
    parameter Real FLUX_VALUE_108 = 0.230942094325926;
    parameter Real Vmax_108 = 3.23318932056296;
    parameter Real Keq_108 = 2.0;
    parameter Real Km1072_108 = 0.1;
    parameter Real Km0467_108 = 0.1;
    parameter Real Km0332_108 = 0.1;
    parameter Real Km0421_108 = 0.1;
    parameter Real FLUX_VALUE_109 = 0.487066600184804;
    parameter Real Vmax_109 = 6.81893240258726;
    parameter Real Keq_109 = 2.0;
    parameter Real Km1095_109 = 0.1;
    parameter Real Km1399_109 = 0.1;
    parameter Real Km0233_109 = 0.1;
    parameter Real Km1072_109 = 0.1;
    parameter Real FLUX_VALUE_110 = 0.230942094325926;
    parameter Real Vmax_110 = 5.08072607517037;
    parameter Real Keq_110 = 0.2;
    parameter Real Km0332_110 = 0.1;
    parameter Real Km1336_110 = 0.1;
    parameter Real Km1075_110 = 0.1;
    parameter Real Km1335_110 = 0.1;
    parameter Real Km1430_110 = 0.1;
    parameter Real FLUX_VALUE_111 = 0.0131230753965474;
    parameter Real Vmax_111 = 0.183723055551664;
    parameter Real Keq_111 = 2.0;
    parameter Real Km0467_111 = 0.1;
    parameter Real Km0360_111 = 0.1;
    parameter Real Km0783_111 = 0.1;
    parameter Real Km0099_111 = 0.1;
    parameter Real FLUX_VALUE_112 = 2.77033467884759e-07;
    parameter Real Vmax_112 = 1.27435395226989e-05;
    parameter Real Keq_112 = 0.2;
    parameter Real Km0378_112 = 0.1;
    parameter Real Km1552_112 = 0.1;
    parameter Real Km0755_112 = 0.1;
    parameter Real Km0377_112 = 0.1;
    parameter Real Km0476_112 = 0.1;
    parameter Real Km0333_112 = 0.1;
    parameter Real Km1141_112 = 0.1;
    parameter Real FLUX_VALUE_113 = 1.68990415703956e-05;
    parameter Real Vmax_113 = 0.000371778914548703;
    parameter Real Keq_113 = 0.2;
    parameter Real Km1264_113 = 0.1;
    parameter Real Km0420_113 = 0.1;
    parameter Real Km0454_113 = 0.1;
    parameter Real Km0479_113 = 0.1;
    parameter Real Km0579_113 = 0.1;
    parameter Real FLUX_VALUE_114 = 1.68990415703956e-05;
    parameter Real Vmax_114 = 0.000236586581985538;
    parameter Real Keq_114 = 2.0;
    parameter Real Km0481_114 = 0.1;
    parameter Real Km0945_114 = 0.1;
    parameter Real Km0480_114 = 0.1;
    parameter Real Km0783_114 = 0.1;
    parameter Real FLUX_VALUE_115 = 1.68990415703956e-05;
    parameter Real Vmax_115 = 0.000236586581985538;
    parameter Real Keq_115 = 2.0;
    parameter Real Km0479_115 = 0.1;
    parameter Real Km0945_115 = 0.1;
    parameter Real Km0481_115 = 0.1;
    parameter Real Km0783_115 = 0.1;
    parameter Real FLUX_VALUE_116 = 0.0867932004720827;
    parameter Real Vmax_116 = 1.90945041038582;
    parameter Real Keq_116 = 20.0;
    parameter Real Km0467_116 = 0.1;
    parameter Real Km0543_116 = 0.1;
    parameter Real Km0451_116 = 0.1;
    parameter Real Km0421_116 = 0.1;
    parameter Real Km0502_116 = 0.1;
    parameter Real FLUX_VALUE_117 = 0.00884013797559549;
    parameter Real Vmax_117 = 0.123761931658337;
    parameter Real Keq_117 = 2.0;
    parameter Real Km0575_117 = 0.1;
    parameter Real Km0075_117 = 0.1;
    parameter Real Km0513_117 = 0.1;
    parameter Real Km0783_117 = 0.1;
    parameter Real FLUX_VALUE_118 = 0.0104178435779464;
    parameter Real Vmax_118 = 0.14584981009125;
    parameter Real Keq_118 = 2.0;
    parameter Real Km0575_118 = 0.1;
    parameter Real Km0073_118 = 0.1;
    parameter Real Km0512_118 = 0.1;
    parameter Real Km0783_118 = 0.1;
    parameter Real FLUX_VALUE_119 = 0.0447994977198517;
    parameter Real Vmax_119 = 0.26879698631911;
    parameter Real Keq_119 = 2.0;
    parameter Real Km0526_119 = 0.1;
    parameter Real Km1497_119 = 0.1;
    parameter Real FLUX_VALUE_120 = 3.08892317229363e-05;
    parameter Real Vmax_120 = 0.000308892317229363;
    parameter Real Keq_120 = 0.2;
    parameter Real Km0526_120 = 0.1;
    parameter Real Km0325_120 = 0.1;
    parameter Real Km1531_120 = 0.1;
    parameter Real FLUX_VALUE_121 = 0.0527963458177373;
    parameter Real Vmax_121 = 0.527963458177373;
    parameter Real Keq_121 = 0.2;
    parameter Real Km0359_121 = 0.1;
    parameter Real Km0526_121 = 0.1;
    parameter Real Km1430_121 = 0.1;
    parameter Real FLUX_VALUE_122 = 0.148949399052133;
    parameter Real Vmax_122 = 2.08529158672986;
    parameter Real Keq_122 = 2.0;
    parameter Real Km0395_122 = 0.1;
    parameter Real Km1399_122 = 0.1;
    parameter Real Km0536_122 = 0.1;
    parameter Real Km0555_122 = 0.1;
    parameter Real FLUX_VALUE_123 = 3.08892317225085e-05;
    parameter Real Vmax_123 = 0.000679563097895187;
    parameter Real Keq_123 = 0.2;
    parameter Real Km0565_123 = 0.1;
    parameter Real Km1372_123 = 0.1;
    parameter Real Km0543_123 = 0.1;
    parameter Real Km1512_123 = 0.1;
    parameter Real FLUX_VALUE_124 = 0.0222347061711993;
    parameter Real Vmax_124 = 1.02279648387517;
    parameter Real Keq_124 = 0.2;
    parameter Real Km0467_124 = 0.1;
    parameter Real Km1101_124 = 0.1;
    parameter Real Km1792_124 = 0.1;
    parameter Real Km0421_124 = 0.1;
    parameter Real Km0575_124 = 0.1;
    parameter Real Km1095_124 = 0.1;
    parameter Real Km1430_124 = 0.1;
    parameter Real FLUX_VALUE_125 = 3.37980831407913e-05;
    parameter Real Vmax_125 = 0.000337980831407913;
    parameter Real Keq_125 = 0.2;
    parameter Real Km0945_125 = 0.1;
    parameter Real Km0585_125 = 0.1;
    parameter Real Km0783_125 = 0.1;
    parameter Real FLUX_VALUE_126 = 0.0213211883092039;
    parameter Real Vmax_126 = 0.38378138956567;
    parameter Real Keq_126 = 0.02;
    parameter Real Km1082_126 = 0.1;
    parameter Real Km1112_126 = 0.1;
    parameter Real Km0451_126 = 0.1;
    parameter Real Km1531_126 = 0.1;
    parameter Real FLUX_VALUE_127 = 0.0343363591698377;
    parameter Real Vmax_127 = 0.480709028377728;
    parameter Real Keq_127 = 2.0;
    parameter Real Km1358_127 = 0.1;
    parameter Real Km0994_127 = 0.1;
    parameter Real Km0384_127 = 0.1;
    parameter Real Km1083_127 = 0.1;
    parameter Real FLUX_VALUE_128 = 0.0250597549648415;
    parameter Real Vmax_128 = 0.350836569507781;
    parameter Real Keq_128 = 2.0;
    parameter Real Km0467_128 = 0.1;
    parameter Real Km0539_128 = 0.1;
    parameter Real Km0421_128 = 0.1;
    parameter Real Km0510_128 = 0.1;
    parameter Real FLUX_VALUE_129 = 0.00384799487561516;
    parameter Real Vmax_129 = 0.115439846268455;
    parameter Real Keq_129 = 2.0;
    parameter Real Km0600_129 = 0.1;
    parameter Real Km0467_129 = 0.1;
    parameter Real Km0421_129 = 0.1;
    parameter Real Km0603_129 = 0.1;
    parameter Real Km1430_129 = 0.1;
    parameter Real FLUX_VALUE_130 = 7.97856388897518e-05;
    parameter Real Vmax_130 = 0.00111699894445653;
    parameter Real Keq_130 = 2.0;
    parameter Real Km0467_130 = 0.1;
    parameter Real Km0754_130 = 0.1;
    parameter Real Km0421_130 = 0.1;
    parameter Real Km0555_130 = 0.1;
    parameter Real FLUX_VALUE_131 = 2.77033467884759e-07;
    parameter Real Vmax_131 = 8.31100403654277e-06;
    parameter Real Keq_131 = 2.0;
    parameter Real Km0467_131 = 0.1;
    parameter Real Km0543_131 = 0.1;
    parameter Real Km0371_131 = 0.1;
    parameter Real Km0421_131 = 0.1;
    parameter Real Km0755_131 = 0.1;
    parameter Real Km1430_131 = 0.1;
    parameter Real FLUX_VALUE_132 = 6.17784634458656e-05;
    parameter Real Vmax_132 = 0.000617784634458656;
    parameter Real Keq_132 = 0.2;
    parameter Real Km0160_132 = 0.1;
    parameter Real Km0347_132 = 0.1;
    parameter Real Km0451_132 = 0.1;
    parameter Real FLUX_VALUE_133 = 0.0475389431717989;
    parameter Real Vmax_133 = 0.475389431717989;
    parameter Real Keq_133 = 0.2;
    parameter Real Km1242_133 = 0.1;
    parameter Real Km0543_133 = 0.1;
    parameter Real Km1131_133 = 0.1;
    parameter Real FLUX_VALUE_134 = 0.0513869380474194;
    parameter Real Vmax_134 = 0.308321628284516;
    parameter Real Keq_134 = 2.0;
    parameter Real Km1211_134 = 0.1;
    parameter Real Km1242_134 = 0.1;
    parameter Real FLUX_VALUE_135 = 0.0229099752504581;
    parameter Real Vmax_135 = 0.320739653506413;
    parameter Real Keq_135 = 2.0;
    parameter Real Km0052_135 = 0.1;
    parameter Real Km1732_135 = 0.1;
    parameter Real Km1394_135 = 0.1;
    parameter Real Km1731_135 = 0.1;
    parameter Real FLUX_VALUE_136 = 0.0513869380474194;
    parameter Real Vmax_136 = 0.719417132663872;
    parameter Real Keq_136 = 2.0;
    parameter Real Km0155_136 = 0.1;
    parameter Real Km1336_136 = 0.1;
    parameter Real Km1335_136 = 0.1;
    parameter Real Km0148_136 = 0.1;
    parameter Real FLUX_VALUE_137 = 0.0513869380474194;
    parameter Real Vmax_137 = 0.513869380474194;
    parameter Real Keq_137 = 20.0;
    parameter Real Km1075_137 = 0.1;
    parameter Real Km1531_137 = 0.1;
    parameter Real Km0155_137 = 0.1;
    parameter Real FLUX_VALUE_138 = 0.00371765062874906;
    parameter Real Vmax_138 = 0.0520471088024868;
    parameter Real Keq_138 = 2.0;
    parameter Real Km0372_138 = 0.1;
    parameter Real Km1336_138 = 0.1;
    parameter Real Km1335_138 = 0.1;
    parameter Real Km0337_138 = 0.1;
    parameter Real FLUX_VALUE_139 = 9.26676951688061e-05;
    parameter Real Vmax_139 = 0.00278003085506418;
    parameter Real Keq_139 = 2.0;
    parameter Real Km0467_139 = 0.1;
    parameter Real Km0767_139 = 0.1;
    parameter Real Km1095_139 = 0.1;
    parameter Real Km0421_139 = 0.1;
    parameter Real Km0372_139 = 0.1;
    parameter Real Km1430_139 = 0.1;
    parameter Real FLUX_VALUE_140 = 9.26676951688061e-05;
    parameter Real Vmax_140 = 0.000926676951688061;
    parameter Real Keq_140 = 0.2;
    parameter Real Km0765_140 = 0.1;
    parameter Real Km0367_140 = 0.1;
    parameter Real Km0936_140 = 0.1;
    parameter Real FLUX_VALUE_141 = 9.26676951688061e-05;
    parameter Real Vmax_141 = 0.000926676951688061;
    parameter Real Keq_141 = 0.2;
    parameter Real Km0191_141 = 0.1;
    parameter Real Km0766_141 = 0.1;
    parameter Real Km0783_141 = 0.1;
    parameter Real FLUX_VALUE_142 = 0.0458199505005817;
    parameter Real Vmax_142 = 0.27491970300349;
    parameter Real Keq_142 = 2.0;
    parameter Real Km1312_142 = 0.1;
    parameter Real Km0052_142 = 0.1;
    parameter Real FLUX_VALUE_143 = 0.0229099752501236;
    parameter Real Vmax_143 = 0.32073965350173;
    parameter Real Keq_143 = 2.0;
    parameter Real Km0052_143 = 0.1;
    parameter Real Km1240_143 = 0.1;
    parameter Real Km1239_143 = 0.1;
    parameter Real Km1394_143 = 0.1;
    parameter Real FLUX_VALUE_144 = 9.26676951688061e-05;
    parameter Real Vmax_144 = 0.00129734773236329;
    parameter Real Keq_144 = 2.0;
    parameter Real Km0318_144 = 0.1;
    parameter Real Km0368_144 = 0.1;
    parameter Real Km0767_144 = 0.1;
    parameter Real Km0783_144 = 0.1;
    parameter Real FLUX_VALUE_145 = 0.121101856295072;
    parameter Real Vmax_145 = 0.726611137770432;
    parameter Real Keq_145 = 2.0;
    parameter Real Km0017_145 = 0.1;
    parameter Real Km0282_145 = 0.1;
    parameter Real FLUX_VALUE_146 = 0.0402391112803253;
    parameter Real Vmax_146 = 0.241434667681952;
    parameter Real Keq_146 = 2.0;
    parameter Real Km0018_146 = 0.1;
    parameter Real Km0051_146 = 0.1;
    parameter Real FLUX_VALUE_147 = 3.85076521030325e-05;
    parameter Real Vmax_147 = 0.000539107129442455;
    parameter Real Keq_147 = 2.0;
    parameter Real Km0779_147 = 0.1;
    parameter Real Km1028_147 = 0.1;
    parameter Real Km0903_147 = 0.1;
    parameter Real Km0783_147 = 0.1;
    parameter Real FLUX_VALUE_148 = 0.00362498293358209;
    parameter Real Vmax_148 = 0.0507497610701493;
    parameter Real Keq_148 = 2.0;
    parameter Real Km0467_148 = 0.1;
    parameter Real Km0802_148 = 0.1;
    parameter Real Km0421_148 = 0.1;
    parameter Real Km0795_148 = 0.1;
    parameter Real FLUX_VALUE_149 = 0.00362498293355932;
    parameter Real Vmax_149 = 0.0362498293355932;
    parameter Real Keq_149 = 0.2;
    parameter Real Km0810_149 = 0.1;
    parameter Real Km0807_149 = 0.1;
    parameter Real Km0783_149 = 0.1;
    parameter Real FLUX_VALUE_150 = 0.640969334565238;
    parameter Real Vmax_150 = 3.84581600739143;
    parameter Real Keq_150 = 2.0;
    parameter Real Km0675_150 = 0.1;
    parameter Real Km1484_150 = 0.1;
    parameter Real FLUX_VALUE_151 = 2.77033467884759e-07;
    parameter Real Vmax_151 = 3.87846855038663e-06;
    parameter Real Keq_151 = 2.0;
    parameter Real Km0812_151 = 0.1;
    parameter Real Km1336_151 = 0.1;
    parameter Real Km0910_151 = 0.1;
    parameter Real Km1335_151 = 0.1;
    parameter Real FLUX_VALUE_152 = 2.77033467884759e-07;
    parameter Real Vmax_152 = 3.87846855038663e-06;
    parameter Real Keq_152 = 2.0;
    parameter Real Km0813_152 = 0.1;
    parameter Real Km1336_152 = 0.1;
    parameter Real Km1335_152 = 0.1;
    parameter Real Km1492_152 = 0.1;
    parameter Real FLUX_VALUE_153 = 3.08892317222495e-05;
    parameter Real Vmax_153 = 0.000432449244111493;
    parameter Real Keq_153 = 2.0;
    parameter Real Km0331_153 = 0.1;
    parameter Real Km1333_153 = 0.1;
    parameter Real Km1334_153 = 0.1;
    parameter Real Km0231_153 = 0.1;
    parameter Real FLUX_VALUE_154 = 3.08892317222495e-05;
    parameter Real Vmax_154 = 0.000432449244111493;
    parameter Real Keq_154 = 2.0;
    parameter Real Km0621_154 = 0.1;
    parameter Real Km1333_154 = 0.1;
    parameter Real Km0331_154 = 0.1;
    parameter Real Km1334_154 = 0.1;
    parameter Real FLUX_VALUE_155 = 0.302798412025661;
    parameter Real Vmax_155 = 4.23917776835925;
    parameter Real Keq_155 = 2.0;
    parameter Real Km0859_155 = 0.1;
    parameter Real Km1334_155 = 0.1;
    parameter Real Km0860_155 = 0.1;
    parameter Real Km1333_155 = 0.1;
    parameter Real FLUX_VALUE_156 = 0.0107821425888423;
    parameter Real Vmax_156 = 0.107821425888423;
    parameter Real Keq_156 = 0.2;
    parameter Real Km0790_156 = 0.1;
    parameter Real Km0555_156 = 0.1;
    parameter Real Km0785_156 = 0.1;
    parameter Real FLUX_VALUE_157 = 0.0176802759511998;
    parameter Real Vmax_157 = 0.176802759511998;
    parameter Real Keq_157 = 0.2;
    parameter Real Km1412_157 = 0.1;
    parameter Real Km0555_157 = 0.1;
    parameter Real Km0971_157 = 0.1;
    parameter Real FLUX_VALUE_158 = 0.0208356871558925;
    parameter Real Vmax_158 = 0.208356871558925;
    parameter Real Keq_158 = 0.2;
    parameter Real Km0979_158 = 0.1;
    parameter Real Km0555_158 = 0.1;
    parameter Real Km0976_158 = 0.1;
    parameter Real FLUX_VALUE_159 = 3.08892317225085e-05;
    parameter Real Vmax_159 = 0.000308892317225085;
    parameter Real Keq_159 = 20.0;
    parameter Real Km0838_159 = 0.1;
    parameter Real Km1511_159 = 0.1;
    parameter Real Km1508_159 = 0.1;
    parameter Real FLUX_VALUE_160 = 3.08892317229329e-05;
    parameter Real Vmax_160 = 0.000432449244121061;
    parameter Real Keq_160 = 2.0;
    parameter Real Km0467_160 = 0.1;
    parameter Real Km0863_160 = 0.1;
    parameter Real Km0859_160 = 0.1;
    parameter Real Km0783_160 = 0.1;
    parameter Real FLUX_VALUE_161 = 0.0362397868726823;
    parameter Real Vmax_161 = 1.08719360618047;
    parameter Real Keq_161 = 2.0;
    parameter Real Km0467_161 = 0.1;
    parameter Real Km0867_161 = 0.1;
    parameter Real Km0337_161 = 0.1;
    parameter Real Km0133_161 = 0.1;
    parameter Real Km0421_161 = 0.1;
    parameter Real Km1430_161 = 0.1;
    parameter Real FLUX_VALUE_162 = 0.143116459375637;
    parameter Real Vmax_162 = 0.858698756253822;
    parameter Real Keq_162 = 2.0;
    parameter Real Km0875_162 = 0.1;
    parameter Real Km1138_162 = 0.1;
    parameter Real FLUX_VALUE_163 = 0.0614208132382477;
    parameter Real Vmax_163 = 1.84262439714743;
    parameter Real Keq_163 = 2.0;
    parameter Real Km0467_163 = 0.1;
    parameter Real Km0867_163 = 0.1;
    parameter Real Km1318_163 = 0.1;
    parameter Real Km0421_163 = 0.1;
    parameter Real Km1322_163 = 0.1;
    parameter Real Km1430_163 = 0.1;
    parameter Real FLUX_VALUE_164 = 3.85076521030325e-05;
    parameter Real Vmax_164 = 0.000539107129442455;
    parameter Real Keq_164 = 2.0;
    parameter Real Km0903_164 = 0.1;
    parameter Real Km1028_164 = 0.1;
    parameter Real Km0826_164 = 0.1;
    parameter Real Km0783_164 = 0.1;
    parameter Real FLUX_VALUE_165 = 0.0130870610456735;
    parameter Real Vmax_165 = 0.183218854639429;
    parameter Real Keq_165 = 2.0;
    parameter Real Km0395_165 = 0.1;
    parameter Real Km0653_165 = 0.1;
    parameter Real Km1287_165 = 0.1;
    parameter Real Km0555_165 = 0.1;
    parameter Real FLUX_VALUE_166 = 0.879863512997714;
    parameter Real Vmax_166 = 12.318089181968;
    parameter Real Keq_166 = 2.0;
    parameter Real Km0663_166 = 0.1;
    parameter Real Km1335_166 = 0.1;
    parameter Real Km0370_166 = 0.1;
    parameter Real Km1336_166 = 0.1;
    parameter Real FLUX_VALUE_167 = 0.0545285720060003;
    parameter Real Vmax_167 = 0.327171432036002;
    parameter Real Keq_167 = 2.0;
    parameter Real Km0663_167 = 0.1;
    parameter Real Km0627_167 = 0.1;
    parameter Real FLUX_VALUE_168 = 0.0306260499279916;
    parameter Real Vmax_168 = 0.428764698991882;
    parameter Real Keq_168 = 2.0;
    parameter Real Km0467_168 = 0.1;
    parameter Real Km1095_168 = 0.1;
    parameter Real Km0421_168 = 0.1;
    parameter Real Km1099_168 = 0.1;
    parameter Real FLUX_VALUE_169 = 1.17502637474065;
    parameter Real Vmax_169 = 25.8505802442943;
    parameter Real Keq_169 = 20.0;
    parameter Real Km0233_169 = 0.1;
    parameter Real Km1336_169 = 0.1;
    parameter Real Km0451_169 = 0.1;
    parameter Real Km1095_169 = 0.1;
    parameter Real Km1335_169 = 0.1;
    parameter Real FLUX_VALUE_170 = 0.00384799487562186;
    parameter Real Vmax_170 = 0.0230879692537312;
    parameter Real Keq_170 = 2.0;
    parameter Real Km1095_170 = 0.1;
    parameter Real Km0671_170 = 0.1;
    parameter Real FLUX_VALUE_171 = 0.000494227707563336;
    parameter Real Vmax_171 = 0.00296536624538002;
    parameter Real Keq_171 = 2.0;
    parameter Real Km1098_171 = 0.1;
    parameter Real Km0345_171 = 0.1;
    parameter Real FLUX_VALUE_172 = 0.0306260499279916;
    parameter Real Vmax_172 = 0.673773098415815;
    parameter Real Keq_172 = 0.2;
    parameter Real Km1099_172 = 0.1;
    parameter Real Km1336_172 = 0.1;
    parameter Real Km1100_172 = 0.1;
    parameter Real Km1335_172 = 0.1;
    parameter Real Km1430_172 = 0.1;
    parameter Real FLUX_VALUE_173 = 0.0614208132382202;
    parameter Real Vmax_173 = 1.35125789124084;
    parameter Real Keq_173 = 0.2;
    parameter Real Km1101_173 = 0.1;
    parameter Real Km0360_173 = 0.1;
    parameter Real Km1095_173 = 0.1;
    parameter Real Km0783_173 = 0.1;
    parameter Real Km0361_173 = 0.1;
    parameter Real FLUX_VALUE_174 = 0.249469746398485;
    parameter Real Vmax_174 = 7.48409239195455;
    parameter Real Keq_174 = 2.0;
    parameter Real Km0467_174 = 0.1;
    parameter Real Km1095_174 = 0.1;
    parameter Real Km0451_174 = 0.1;
    parameter Real Km0421_174 = 0.1;
    parameter Real Km1101_174 = 0.1;
    parameter Real Km1430_174 = 0.1;
    parameter Real FLUX_VALUE_175 = 0.0130870610456636;
    parameter Real Vmax_175 = 0.18321885463929;
    parameter Real Keq_175 = 2.0;
    parameter Real Km0627_175 = 0.1;
    parameter Real Km1101_175 = 0.1;
    parameter Real Km0654_175 = 0.1;
    parameter Real Km1095_175 = 0.1;
    parameter Real FLUX_VALUE_176 = 0.000494227707563336;
    parameter Real Vmax_176 = 0.0108730095663934;
    parameter Real Keq_176 = 0.2;
    parameter Real Km1105_176 = 0.1;
    parameter Real Km1336_176 = 0.1;
    parameter Real Km1098_176 = 0.1;
    parameter Real Km1335_176 = 0.1;
    parameter Real Km1690_176 = 0.1;
    parameter Real FLUX_VALUE_177 = 0.000494227707563336;
    parameter Real Vmax_177 = 0.0148268312269001;
    parameter Real Keq_177 = 2.0;
    parameter Real Km0467_177 = 0.1;
    parameter Real Km1095_177 = 0.1;
    parameter Real Km1690_177 = 0.1;
    parameter Real Km0454_177 = 0.1;
    parameter Real Km1105_177 = 0.1;
    parameter Real Km0783_177 = 0.1;
    parameter Real FLUX_VALUE_178 = 0.787832256050213;
    parameter Real Vmax_178 = 17.3323096331047;
    parameter Real Keq_178 = 20.0;
    parameter Real Km0913_178 = 0.1;
    parameter Real Km1333_178 = 0.1;
    parameter Real Km1430_178 = 0.1;
    parameter Real Km0307_178 = 0.1;
    parameter Real Km1334_178 = 0.1;
    parameter Real FLUX_VALUE_179 = 4.63338475844011e-05;
    parameter Real Vmax_179 = 0.000648673866181615;
    parameter Real Keq_179 = 2.0;
    parameter Real Km0467_179 = 0.1;
    parameter Real Km0029_179 = 0.1;
    parameter Real Km0675_179 = 0.1;
    parameter Real Km0421_179 = 0.1;
    parameter Real FLUX_VALUE_180 = 0.00884013797513179;
    parameter Real Vmax_180 = 0.123761931651845;
    parameter Real Keq_180 = 2.0;
    parameter Real Km0920_180 = 0.1;
    parameter Real Km1411_180 = 0.1;
    parameter Real Km0121_180 = 0.1;
    parameter Real Km0397_180 = 0.1;
    parameter Real FLUX_VALUE_181 = 0.0104178435776096;
    parameter Real Vmax_181 = 0.145849810086534;
    parameter Real Keq_181 = 2.0;
    parameter Real Km0920_181 = 0.1;
    parameter Real Km0533_181 = 0.1;
    parameter Real Km0119_181 = 0.1;
    parameter Real Km0397_181 = 0.1;
    parameter Real FLUX_VALUE_182 = 0.0192579815535505;
    parameter Real Vmax_182 = 0.269611741749707;
    parameter Real Keq_182 = 2.0;
    parameter Real Km0772_182 = 0.1;
    parameter Real Km1336_182 = 0.1;
    parameter Real Km0920_182 = 0.1;
    parameter Real Km1335_182 = 0.1;
    parameter Real FLUX_VALUE_183 = 0.0414265806134066;
    parameter Real Vmax_183 = 0.579972128587692;
    parameter Real Keq_183 = 2.0;
    parameter Real Km1040_183 = 0.1;
    parameter Real Km0555_183 = 0.1;
    parameter Real Km0395_183 = 0.1;
    parameter Real Km0929_183 = 0.1;
    parameter Real FLUX_VALUE_184 = 0.0634230033724642;
    parameter Real Vmax_184 = 0.887922047214499;
    parameter Real Keq_184 = 2.0;
    parameter Real Km1170_184 = 0.1;
    parameter Real Km0337_184 = 0.1;
    parameter Real Km0929_184 = 0.1;
    parameter Real Km0336_184 = 0.1;
    parameter Real FLUX_VALUE_185 = 9.26676951688061e-05;
    parameter Real Vmax_185 = 0.00129734773236329;
    parameter Real Keq_185 = 2.0;
    parameter Real Km0936_185 = 0.1;
    parameter Real Km1333_185 = 0.1;
    parameter Real Km0937_185 = 0.1;
    parameter Real Km1334_185 = 0.1;
    parameter Real FLUX_VALUE_186 = 4.63338477495988e-05;
    parameter Real Vmax_186 = 0.000648673868494383;
    parameter Real Keq_186 = 2.0;
    parameter Real Km0937_186 = 0.1;
    parameter Real Km1732_186 = 0.1;
    parameter Real Km0941_186 = 0.1;
    parameter Real Km1731_186 = 0.1;
    parameter Real FLUX_VALUE_187 = 4.63338474145563e-05;
    parameter Real Vmax_187 = 0.000648673863803788;
    parameter Real Keq_187 = 2.0;
    parameter Real Km0937_187 = 0.1;
    parameter Real Km1240_187 = 0.1;
    parameter Real Km0941_187 = 0.1;
    parameter Real Km1239_187 = 0.1;
    parameter Real FLUX_VALUE_188 = 4.63338475820775e-05;
    parameter Real Vmax_188 = 0.000648673866149085;
    parameter Real Keq_188 = 2.0;
    parameter Real Km0941_188 = 0.1;
    parameter Real Km0214_188 = 0.1;
    parameter Real Km0543_188 = 0.1;
    parameter Real FLUX_VALUE_189 = 0.0337597140054242;
    parameter Real Vmax_189 = 1.55294684424951;
    parameter Real Keq_189 = 0.2;
    parameter Real Km0467_189 = 0.1;
    parameter Real Km1101_189 = 0.1;
    parameter Real Km1799_189 = 0.1;
    parameter Real Km0454_189 = 0.1;
    parameter Real Km1095_189 = 0.1;
    parameter Real Km0942_189 = 0.1;
    parameter Real Km0783_189 = 0.1;
    parameter Real FLUX_VALUE_190 = 9.26676951688061e-05;
    parameter Real Vmax_190 = 0.000926676951688061;
    parameter Real Keq_190 = 0.2;
    parameter Real Km0945_190 = 0.1;
    parameter Real Km0191_190 = 0.1;
    parameter Real Km0867_190 = 0.1;
    parameter Real FLUX_VALUE_191 = 6.17784634458656e-05;
    parameter Real Vmax_191 = 0.00111201234202558;
    parameter Real Keq_191 = 0.02;
    parameter Real Km0945_191 = 0.1;
    parameter Real Km0160_191 = 0.1;
    parameter Real Km0867_191 = 0.1;
    parameter Real Km0783_191 = 0.1;
    parameter Real FLUX_VALUE_192 = 0.0337597140054224;
    parameter Real Vmax_192 = 0.472635996075914;
    parameter Real Keq_192 = 2.0;
    parameter Real Km0467_192 = 0.1;
    parameter Real Km0942_192 = 0.1;
    parameter Real Km0421_192 = 0.1;
    parameter Real Km0896_192 = 0.1;
    parameter Real FLUX_VALUE_193 = 0.0721728976957654;
    parameter Real Vmax_193 = 0.433037386174592;
    parameter Real Keq_193 = 2.0;
    parameter Real Km0543_193 = 0.1;
    parameter Real Km0474_193 = 0.1;
    parameter Real FLUX_VALUE_194 = 0.0545285700240656;
    parameter Real Vmax_194 = 0.763399980336918;
    parameter Real Keq_194 = 2.0;
    parameter Real Km0467_194 = 0.1;
    parameter Real Km0622_194 = 0.1;
    parameter Real Km0421_194 = 0.1;
    parameter Real Km0627_194 = 0.1;
    parameter Real FLUX_VALUE_195 = 0.912233393077452;
    parameter Real Vmax_195 = 12.7712675030843;
    parameter Real Keq_195 = 2.0;
    parameter Real Km0467_195 = 0.1;
    parameter Real Km0657_195 = 0.1;
    parameter Real Km0421_195 = 0.1;
    parameter Real Km0663_195 = 0.1;
    parameter Real FLUX_VALUE_196 = 0.0131230753965474;
    parameter Real Vmax_196 = 0.393692261896422;
    parameter Real Keq_196 = 2.0;
    parameter Real Km1109_196 = 0.1;
    parameter Real Km1333_196 = 0.1;
    parameter Real Km1106_196 = 0.1;
    parameter Real Km1334_196 = 0.1;
    parameter Real FLUX_VALUE_197 = 0.0131230753965474;
    parameter Real Vmax_197 = 0.131230753965474;
    parameter Real Keq_197 = 0.2;
    parameter Real Km1110_197 = 0.1;
    parameter Real Km1109_197 = 0.1;
    parameter Real Km1430_197 = 0.1;
    parameter Real FLUX_VALUE_198 = 0.0131230753965474;
    parameter Real Vmax_198 = 0.183723055551664;
    parameter Real Keq_198 = 2.0;
    parameter Real Km1095_198 = 0.1;
    parameter Real Km0263_198 = 0.1;
    parameter Real Km0233_198 = 0.1;
    parameter Real Km1110_198 = 0.1;
    parameter Real FLUX_VALUE_199 = 0.179555156278507;
    parameter Real Vmax_199 = 2.5137721878991;
    parameter Real Keq_199 = 2.0;
    parameter Real Km1075_199 = 0.1;
    parameter Real Km1336_199 = 0.1;
    parameter Real Km1113_199 = 0.1;
    parameter Real Km1335_199 = 0.1;
    parameter Real FLUX_VALUE_200 = 0.158233967969303;
    parameter Real Vmax_200 = 2.21527555157024;
    parameter Real Keq_200 = 2.0;
    parameter Real Km0467_200 = 0.1;
    parameter Real Km1113_200 = 0.1;
    parameter Real Km0421_200 = 0.1;
    parameter Real Km1363_200 = 0.1;
    parameter Real FLUX_VALUE_201 = 0.0213211883092039;
    parameter Real Vmax_201 = 0.298496636328855;
    parameter Real Keq_201 = 2.0;
    parameter Real Km1113_201 = 0.1;
    parameter Real Km1599_201 = 0.1;
    parameter Real Km0555_201 = 0.1;
    parameter Real Km1367_201 = 0.1;
    parameter Real FLUX_VALUE_202 = 3.08892317229363e-05;
    parameter Real Vmax_202 = 0.000432449244121108;
    parameter Real Keq_202 = 2.0;
    parameter Real Km0325_202 = 0.1;
    parameter Real Km0435_202 = 0.1;
    parameter Real Km0283_202 = 0.1;
    parameter Real Km0783_202 = 0.1;
    parameter Real FLUX_VALUE_203 = 6.1778463445417e-05;
    parameter Real Vmax_203 = 0.0058071755638692;
    parameter Real Keq_203 = 0.2;
    parameter Real Km1493_203 = 0.1;
    parameter Real Km0998_203 = 0.1;
    parameter Real Km0451_203 = 0.1;
    parameter Real FLUX_VALUE_204 = 0.0131230753965474;
    parameter Real Vmax_204 = 0.288707658724043;
    parameter Real Keq_204 = 0.2;
    parameter Real Km1101_204 = 0.1;
    parameter Real Km0341_204 = 0.1;
    parameter Real Km0343_204 = 0.1;
    parameter Real Km0620_204 = 0.1;
    parameter Real Km1095_204 = 0.1;
    parameter Real FLUX_VALUE_205 = 0.0131230753965474;
    parameter Real Vmax_205 = 0.0787384523792844;
    parameter Real Keq_205 = 2.0;
    parameter Real Km0620_205 = 0.1;
    parameter Real Km0263_205 = 0.1;
    parameter Real FLUX_VALUE_206 = 0.0745129994030467;
    parameter Real Vmax_206 = 0.44707799641828;
    parameter Real Keq_206 = 2.0;
    parameter Real Km0352_206 = 0.1;
    parameter Real Km1006_206 = 0.1;
    parameter Real FLUX_VALUE_207 = 0.0337597140054643;
    parameter Real Vmax_207 = 0.4726359960765;
    parameter Real Keq_207 = 2.0;
    parameter Real Km1006_207 = 0.1;
    parameter Real Km1333_207 = 0.1;
    parameter Real Km1334_207 = 0.1;
    parameter Real Km1799_207 = 0.1;
    parameter Real FLUX_VALUE_208 = 0.00787329117099325;
    parameter Real Vmax_208 = 0.0787329117099325;
    parameter Real Keq_208 = 0.2;
    parameter Real Km0096_208 = 0.1;
    parameter Real Km0493_208 = 0.1;
    parameter Real Km0543_208 = 0.1;
    parameter Real FLUX_VALUE_209 = 2.77033467753811e-07;
    parameter Real Vmax_209 = 6.09473629058384e-06;
    parameter Real Keq_209 = 20.0;
    parameter Real Km0377_209 = 0.1;
    parameter Real Km1018_209 = 0.1;
    parameter Real Km1019_209 = 0.1;
    parameter Real Km1017_209 = 0.1;
    parameter Real Km1020_209 = 0.1;
    parameter Real FLUX_VALUE_210 = 3.96157859771697e-05;
    parameter Real Vmax_210 = 0.00625929418439281;
    parameter Real Keq_210 = 200.0;
    parameter Real Km0860_210 = 0.1;
    parameter Real Km0838_210 = 0.1;
    parameter Real Km1018_210 = 0.1;
    parameter Real Km1019_210 = 0.1;
    parameter Real Km0859_210 = 0.1;
    parameter Real Km1017_210 = 0.1;
    parameter Real Km1020_210 = 0.1;
    parameter Real FLUX_VALUE_211 = 3.60143508877284e-05;
    parameter Real Vmax_211 = 0.00569026744026109;
    parameter Real Keq_211 = 200.0;
    parameter Real Km0860_211 = 0.1;
    parameter Real Km0838_211 = 0.1;
    parameter Real Km1018_211 = 0.1;
    parameter Real Km1020_211 = 0.1;
    parameter Real Km0859_211 = 0.1;
    parameter Real Km1017_211 = 0.1;
    parameter Real Km1022_211 = 0.1;
    parameter Real FLUX_VALUE_212 = 3.87846855703637e-06;
    parameter Real Vmax_212 = 3.87846855703637e-05;
    parameter Real Keq_212 = 0.2;
    parameter Real Km1020_212 = 0.1;
    parameter Real Km0378_212 = 0.1;
    parameter Real Km1019_212 = 0.1;
    parameter Real FLUX_VALUE_213 = 3.60143508877284e-05;
    parameter Real Vmax_213 = 0.000504200912428198;
    parameter Real Keq_213 = 2.0;
    parameter Real Km0860_213 = 0.1;
    parameter Real Km1022_213 = 0.1;
    parameter Real Km0859_213 = 0.1;
    parameter Real Km1021_213 = 0.1;
    parameter Real FLUX_VALUE_214 = 3.60143508877284e-05;
    parameter Real Vmax_214 = 0.000360143508877284;
    parameter Real Keq_214 = 0.2;
    parameter Real Km1021_214 = 0.1;
    parameter Real Km0380_214 = 0.1;
    parameter Real Km1019_214 = 0.1;
    parameter Real FLUX_VALUE_215 = 0.000250022705200688;
    parameter Real Vmax_215 = 0.00350031787280963;
    parameter Real Keq_215 = 2.0;
    parameter Real Km1083_215 = 0.1;
    parameter Real Km1017_215 = 0.1;
    parameter Real Km1041_215 = 0.1;
    parameter Real Km1018_215 = 0.1;
    parameter Real FLUX_VALUE_216 = 0.148949399052035;
    parameter Real Vmax_216 = 3.27688677914477;
    parameter Real Keq_216 = 0.2;
    parameter Real Km1027_216 = 0.1;
    parameter Real Km1335_216 = 0.1;
    parameter Real Km0233_216 = 0.1;
    parameter Real Km0543_216 = 0.1;
    parameter Real Km1336_216 = 0.1;
    parameter Real FLUX_VALUE_217 = 0.0402391112803253;
    parameter Real Vmax_217 = 0.563347557924554;
    parameter Real Keq_217 = 2.0;
    parameter Real Km0051_217 = 0.1;
    parameter Real Km1095_217 = 0.1;
    parameter Real Km0233_217 = 0.1;
    parameter Real Km1119_217 = 0.1;
    parameter Real FLUX_VALUE_218 = 0.121101856295072;
    parameter Real Vmax_218 = 1.69542598813101;
    parameter Real Keq_218 = 2.0;
    parameter Real Km0042_218 = 0.1;
    parameter Real Km1336_218 = 0.1;
    parameter Real Km0017_218 = 0.1;
    parameter Real Km1335_218 = 0.1;
    parameter Real FLUX_VALUE_219 = 0.0402391112803253;
    parameter Real Vmax_219 = 0.563347557924554;
    parameter Real Keq_219 = 2.0;
    parameter Real Km0041_219 = 0.1;
    parameter Real Km1336_219 = 0.1;
    parameter Real Km0018_219 = 0.1;
    parameter Real Km1335_219 = 0.1;
    parameter Real FLUX_VALUE_220 = 0.0805262878673574;
    parameter Real Vmax_220 = 1.127368030143;
    parameter Real Keq_220 = 2.0;
    parameter Real Km1095_220 = 0.1;
    parameter Real Km1531_220 = 0.1;
    parameter Real Km0233_220 = 0.1;
    parameter Real Km1041_220 = 0.1;
    parameter Real FLUX_VALUE_221 = 0.000315541120488056;
    parameter Real Vmax_221 = 0.00441757568683278;
    parameter Real Keq_221 = 2.0;
    parameter Real Km1072_221 = 0.1;
    parameter Real Km1372_221 = 0.1;
    parameter Real Km0991_221 = 0.1;
    parameter Real Km1005_221 = 0.1;
    parameter Real FLUX_VALUE_222 = 0.0306260499280044;
    parameter Real Vmax_222 = 0.183756299568026;
    parameter Real Keq_222 = 2.0;
    parameter Real Km1100_222 = 0.1;
    parameter Real Km0128_222 = 0.1;
    parameter Real FLUX_VALUE_223 = 0.0402391112802679;
    parameter Real Vmax_223 = 0.402391112802679;
    parameter Real Keq_223 = 0.2;
    parameter Real Km1179_223 = 0.1;
    parameter Real Km0232_223 = 0.1;
    parameter Real Km0451_223 = 0.1;
    parameter Real FLUX_VALUE_224 = 0.0414265806134066;
    parameter Real Vmax_224 = 0.579972128587692;
    parameter Real Keq_224 = 2.0;
    parameter Real Km1333_224 = 0.1;
    parameter Real Km1179_224 = 0.1;
    parameter Real Km1040_224 = 0.1;
    parameter Real Km1334_224 = 0.1;
    parameter Real FLUX_VALUE_225 = 0.0624017887496972;
    parameter Real Vmax_225 = 0.873625042495761;
    parameter Real Keq_225 = 2.0;
    parameter Real Km0328_225 = 0.1;
    parameter Real Km1095_225 = 0.1;
    parameter Real Km0233_225 = 0.1;
    parameter Real Km1127_225 = 0.1;
    parameter Real FLUX_VALUE_226 = 0.00269553564721213;
    parameter Real Vmax_226 = 0.0377374990609698;
    parameter Real Keq_226 = 2.0;
    parameter Real Km0149_226 = 0.1;
    parameter Real Km1734_226 = 0.1;
    parameter Real Km1204_226 = 0.1;
    parameter Real Km1733_226 = 0.1;
    parameter Real FLUX_VALUE_227 = 0.143432000495696;
    parameter Real Vmax_227 = 2.00804800693974;
    parameter Real Keq_227 = 2.0;
    parameter Real Km1138_227 = 0.1;
    parameter Real Km1333_227 = 0.1;
    parameter Real Km1334_227 = 0.1;
    parameter Real Km1399_227 = 0.1;
    parameter Real FLUX_VALUE_228 = 0.000315541120779209;
    parameter Real Vmax_228 = 0.00441757569090893;
    parameter Real Keq_228 = 2.0;
    parameter Real Km0991_228 = 0.1;
    parameter Real Km1399_228 = 0.1;
    parameter Real Km1138_228 = 0.1;
    parameter Real Km1372_228 = 0.1;
    parameter Real FLUX_VALUE_229 = 2.77033467884759e-07;
    parameter Real Vmax_229 = 3.87846855038663e-06;
    parameter Real Keq_229 = 2.0;
    parameter Real Km1552_229 = 0.1;
    parameter Real Km1217_229 = 0.1;
    parameter Real Km1551_229 = 0.1;
    parameter Real Km1218_229 = 0.1;
    parameter Real FLUX_VALUE_230 = 0.0107826966558221;
    parameter Real Vmax_230 = 0.150957753181509;
    parameter Real Keq_230 = 2.0;
    parameter Real Km0397_230 = 0.1;
    parameter Real Km1217_230 = 0.1;
    parameter Real Km0555_230 = 0.1;
    parameter Real Km1216_230 = 0.1;
    parameter Real FLUX_VALUE_231 = 0.0383041017619642;
    parameter Real Vmax_231 = 0.229824610571785;
    parameter Real Keq_231 = 2.0;
    parameter Real Km0335_231 = 0.1;
    parameter Real Km0133_231 = 0.1;
    parameter Real FLUX_VALUE_232 = 0.000124388027294171;
    parameter Real Vmax_232 = 0.00273653660047176;
    parameter Real Keq_232 = 0.2;
    parameter Real Km0467_232 = 0.1;
    parameter Real Km1141_232 = 0.1;
    parameter Real Km1552_232 = 0.1;
    parameter Real Km1430_232 = 0.1;
    parameter Real Km0783_232 = 0.1;
    parameter Real FLUX_VALUE_233 = 0.0213832438061183;
    parameter Real Vmax_233 = 0.299365413285656;
    parameter Real Keq_233 = 2.0;
    parameter Real Km0354_233 = 0.1;
    parameter Real Km1112_233 = 0.1;
    parameter Real Km1141_233 = 0.1;
    parameter Real Km0337_233 = 0.1;
    parameter Real FLUX_VALUE_234 = 0.0383041017619642;
    parameter Real Vmax_234 = 0.536257424667499;
    parameter Real Keq_234 = 2.0;
    parameter Real Km0336_234 = 0.1;
    parameter Real Km1335_234 = 0.1;
    parameter Real Km0335_234 = 0.1;
    parameter Real Km1336_234 = 0.1;
    parameter Real FLUX_VALUE_235 = 6.75961662815825e-05;
    parameter Real Vmax_235 = 0.0031094236489528;
    parameter Real Keq_235 = 0.2;
    parameter Real Km1018_235 = 0.1;
    parameter Real Km1258_235 = 0.1;
    parameter Real Km1334_235 = 0.1;
    parameter Real Km0454_235 = 0.1;
    parameter Real Km1017_235 = 0.1;
    parameter Real Km1260_235 = 0.1;
    parameter Real Km1333_235 = 0.1;
    parameter Real FLUX_VALUE_236 = 1.68990415703956e-05;
    parameter Real Vmax_236 = 0.000371778914548703;
    parameter Real Keq_236 = 0.2;
    parameter Real Km1261_236 = 0.1;
    parameter Real Km0420_236 = 0.1;
    parameter Real Km0454_236 = 0.1;
    parameter Real Km0579_236 = 0.1;
    parameter Real Km1264_236 = 0.1;
    parameter Real FLUX_VALUE_237 = 3.37980831407913e-05;
    parameter Real Vmax_237 = 0.000473173163971078;
    parameter Real Keq_237 = 2.0;
    parameter Real Km0467_237 = 0.1;
    parameter Real Km1265_237 = 0.1;
    parameter Real Km0420_237 = 0.1;
    parameter Real Km0783_237 = 0.1;
    parameter Real FLUX_VALUE_238 = 3.37980831407913e-05;
    parameter Real Vmax_238 = 0.0015547118244764;
    parameter Real Keq_238 = 20.0;
    parameter Real Km0585_238 = 0.1;
    parameter Real Km0579_238 = 0.1;
    parameter Real Km1260_238 = 0.1;
    parameter Real Km1259_238 = 0.1;
    parameter Real Km1265_238 = 0.1;
    parameter Real FLUX_VALUE_239 = 6.75961662815825e-05;
    parameter Real Vmax_239 = 0.000946346327942155;
    parameter Real Keq_239 = 2.0;
    parameter Real Km0467_239 = 0.1;
    parameter Real Km1259_239 = 0.1;
    parameter Real Km1258_239 = 0.1;
    parameter Real Km0783_239 = 0.1;
    parameter Real FLUX_VALUE_240 = 0.0019239974378098;
    parameter Real Vmax_240 = 0.019239974378098;
    parameter Real Keq_240 = 0.2;
    parameter Real Km1725_240 = 0.1;
    parameter Real Km0600_240 = 0.1;
    parameter Real Km1719_240 = 0.1;
    parameter Real FLUX_VALUE_241 = 0.0409732499715063;
    parameter Real Vmax_241 = 0.901411499373139;
    parameter Real Keq_241 = 0.2;
    parameter Real Km1304_241 = 0.1;
    parameter Real Km1336_241 = 0.1;
    parameter Real Km1303_241 = 0.1;
    parameter Real Km1335_241 = 0.1;
    parameter Real Km1430_241 = 0.1;
    parameter Real FLUX_VALUE_242 = 0.0409732499715063;
    parameter Real Vmax_242 = 0.573625499601088;
    parameter Real Keq_242 = 2.0;
    parameter Real Km0395_242 = 0.1;
    parameter Real Km1095_242 = 0.1;
    parameter Real Km1302_242 = 0.1;
    parameter Real Km0555_242 = 0.1;
    parameter Real FLUX_VALUE_243 = 6.1916980210075e-05;
    parameter Real Vmax_243 = 0.00086683772294105;
    parameter Real Keq_243 = 2.0;
    parameter Real Km0467_243 = 0.1;
    parameter Real Km1333_243 = 0.1;
    parameter Real Km0421_243 = 0.1;
    parameter Real Km1335_243 = 0.1;
    parameter Real FLUX_VALUE_244 = 0.000315541120476312;
    parameter Real Vmax_244 = 0.00946623361428936;
    parameter Real Keq_244 = 2.0;
    parameter Real Km0467_244 = 0.1;
    parameter Real Km0732_244 = 0.1;
    parameter Real Km0451_244 = 0.1;
    parameter Real Km0454_244 = 0.1;
    parameter Real Km1333_244 = 0.1;
    parameter Real Km0783_244 = 0.1;
    parameter Real FLUX_VALUE_245 = 0.000315541120469206;
    parameter Real Vmax_245 = 0.00441757568656888;
    parameter Real Keq_245 = 2.0;
    parameter Real Km0467_245 = 0.1;
    parameter Real Km1340_245 = 0.1;
    parameter Real Km0732_245 = 0.1;
    parameter Real Km0783_245 = 0.1;
    parameter Real FLUX_VALUE_246 = 0.000315541120467916;
    parameter Real Vmax_246 = 0.00694190465029415;
    parameter Real Keq_246 = 0.2;
    parameter Real Km0360_246 = 0.1;
    parameter Real Km1537_246 = 0.1;
    parameter Real Km0543_246 = 0.1;
    parameter Real Km1340_246 = 0.1;
    parameter Real Km0783_246 = 0.1;
    parameter Real FLUX_VALUE_247 = 0.0250597549647999;
    parameter Real Vmax_247 = 0.350836569507199;
    parameter Real Keq_247 = 2.0;
    parameter Real Km0467_247 = 0.1;
    parameter Real Km0510_247 = 0.1;
    parameter Real Km0421_247 = 0.1;
    parameter Real Km0575_247 = 0.1;
    parameter Real FLUX_VALUE_248 = 0.00362498293358405;
    parameter Real Vmax_248 = 0.0507497610701767;
    parameter Real Keq_248 = 2.0;
    parameter Real Km0467_248 = 0.1;
    parameter Real Km0795_248 = 0.1;
    parameter Real Km0421_248 = 0.1;
    parameter Real Km0805_248 = 0.1;
    parameter Real FLUX_VALUE_249 = 0.10884935857298;
    parameter Real Vmax_249 = 1.52389102002172;
    parameter Real Keq_249 = 2.0;
    parameter Real Km0467_249 = 0.1;
    parameter Real Km0896_249 = 0.1;
    parameter Real Km0421_249 = 0.1;
    parameter Real Km0945_249 = 0.1;
    parameter Real FLUX_VALUE_250 = 0.0589070115461784;
    parameter Real Vmax_250 = 0.824698161646498;
    parameter Real Keq_250 = 2.0;
    parameter Real Km0467_250 = 0.1;
    parameter Real Km1733_250 = 0.1;
    parameter Real Km0421_250 = 0.1;
    parameter Real Km1792_250 = 0.1;
    parameter Real FLUX_VALUE_251 = 3.15000000000004;
    parameter Real Vmax_251 = 31.5000000000004;
    parameter Real Keq_251 = 0.2;
    parameter Real Km0467_251 = 0.1;
    parameter Real Km0421_251 = 0.1;
    parameter Real Km1430_251 = 0.1;
    parameter Real FLUX_VALUE_252 = 3.08892317222495e-05;
    parameter Real Vmax_252 = 0.000432449244111493;
    parameter Real Keq_252 = 2.0;
    parameter Real Km1095_252 = 0.1;
    parameter Real Km0231_252 = 0.1;
    parameter Real Km0233_252 = 0.1;
    parameter Real Km1362_252 = 0.1;
    parameter Real FLUX_VALUE_253 = 0.0213211883092039;
    parameter Real Vmax_253 = 0.298496636328855;
    parameter Real Keq_253 = 2.0;
    parameter Real Km1083_253 = 0.1;
    parameter Real Km1367_253 = 0.1;
    parameter Real Km1082_253 = 0.1;
    parameter Real Km1595_253 = 0.1;
    parameter Real FLUX_VALUE_254 = 3.08892317229362e-05;
    parameter Real Vmax_254 = 0.00784586485762579;
    parameter Real Keq_254 = 2.0;
    parameter Real Km0826_254 = 0.1;
    parameter Real Km1028_254 = 0.1;
    parameter Real Km0435_254 = 0.1;
    parameter Real Km0783_254 = 0.1;
    parameter Real FLUX_VALUE_255 = 3.08892317229363e-05;
    parameter Real Vmax_255 = 0.000308892317229363;
    parameter Real Keq_255 = 0.2;
    parameter Real Km0283_255 = 0.1;
    parameter Real Km0229_255 = 0.1;
    parameter Real Km0543_255 = 0.1;
    parameter Real FLUX_VALUE_256 = 0.040973249971501;
    parameter Real Vmax_256 = 0.573625499601014;
    parameter Real Keq_256 = 2.0;
    parameter Real Km0502_256 = 0.1;
    parameter Real Km1391_256 = 0.1;
    parameter Real Km1081_256 = 0.1;
    parameter Real Km1430_256 = 0.1;
    parameter Real FLUX_VALUE_257 = 0.0458199505005801;
    parameter Real Vmax_257 = 0.641479307008121;
    parameter Real Keq_257 = 2.0;
    parameter Real Km1394_257 = 0.1;
    parameter Real Km0360_257 = 0.1;
    parameter Real Km1397_257 = 0.1;
    parameter Real Km0783_257 = 0.1;
    parameter Real FLUX_VALUE_258 = 0.0458199505005801;
    parameter Real Vmax_258 = 0.458199505005801;
    parameter Real Keq_258 = 0.2;
    parameter Real Km1397_258 = 0.1;
    parameter Real Km0543_258 = 0.1;
    parameter Real Km1762_258 = 0.1;
    parameter Real FLUX_VALUE_259 = 7.97856388897518e-05;
    parameter Real Vmax_259 = 0.00111699894445653;
    parameter Real Keq_259 = 2.0;
    parameter Real Km0467_259 = 0.1;
    parameter Real Km1413_259 = 0.1;
    parameter Real Km0754_259 = 0.1;
    parameter Real Km0783_259 = 0.1;
    parameter Real FLUX_VALUE_260 = 7.97856388897518e-05;
    parameter Real Vmax_260 = 0.00111699894445653;
    parameter Real Keq_260 = 2.0;
    parameter Real Km0467_260 = 0.1;
    parameter Real Km0033_260 = 0.1;
    parameter Real Km0599_260 = 0.1;
    parameter Real Km0421_260 = 0.1;
    parameter Real FLUX_VALUE_261 = 7.97856388884133e-05;
    parameter Real Vmax_261 = 0.0023935691666524;
    parameter Real Keq_261 = 2.0;
    parameter Real Km0470_261 = 0.1;
    parameter Real Km0467_261 = 0.1;
    parameter Real Km0032_261 = 0.1;
    parameter Real Km0454_261 = 0.1;
    parameter Real Km0033_261 = 0.1;
    parameter Real Km0783_261 = 0.1;
    parameter Real FLUX_VALUE_262 = 0.0256671508442138;
    parameter Real Vmax_262 = 0.359340111818993;
    parameter Real Keq_262 = 2.0;
    parameter Real Km1095_262 = 0.1;
    parameter Real Km1429_262 = 0.1;
    parameter Real Km0233_262 = 0.1;
    parameter Real Km1151_262 = 0.1;
    parameter Real FLUX_VALUE_263 = 0.00884013797559549;
    parameter Real Vmax_263 = 0.0884013797559549;
    parameter Real Keq_263 = 0.2;
    parameter Real Km1477_263 = 0.1;
    parameter Real Km0543_263 = 0.1;
    parameter Real Km1437_263 = 0.1;
    parameter Real FLUX_VALUE_264 = 0.0104178435779464;
    parameter Real Vmax_264 = 0.104178435779464;
    parameter Real Keq_264 = 0.2;
    parameter Real Km1476_264 = 0.1;
    parameter Real Km0543_264 = 0.1;
    parameter Real Km1435_264 = 0.1;
    parameter Real FLUX_VALUE_265 = 0.00884013797559936;
    parameter Real Vmax_265 = 0.123761931658391;
    parameter Real Keq_265 = 2.0;
    parameter Real Km0513_265 = 0.1;
    parameter Real Km1170_265 = 0.1;
    parameter Real Km0539_265 = 0.1;
    parameter Real Km1477_265 = 0.1;
    parameter Real FLUX_VALUE_266 = 0.0104178435779464;
    parameter Real Vmax_266 = 0.14584981009125;
    parameter Real Keq_266 = 2.0;
    parameter Real Km0512_266 = 0.1;
    parameter Real Km1170_266 = 0.1;
    parameter Real Km0539_266 = 0.1;
    parameter Real Km1476_266 = 0.1;
    parameter Real FLUX_VALUE_267 = 0.146909255332631;
    parameter Real Vmax_267 = 1.46909255332631;
    parameter Real Keq_267 = 0.2;
    parameter Real Km1364_267 = 0.1;
    parameter Real Km1430_267 = 0.1;
    parameter Real Km1170_267 = 0.1;
    parameter Real FLUX_VALUE_268 = 0.0038479948756196;
    parameter Real Vmax_268 = 0.0538719282586744;
    parameter Real Keq_268 = 2.0;
    parameter Real Km1768_268 = 0.1;
    parameter Real Km1755_268 = 0.1;
    parameter Real Km1777_268 = 0.1;
    parameter Real Km1762_268 = 0.1;
    parameter Real FLUX_VALUE_269 = 0.0343363591697112;
    parameter Real Vmax_269 = 0.755399901733646;
    parameter Real Keq_269 = 0.2;
    parameter Real Km0252_269 = 0.1;
    parameter Real Km1544_269 = 0.1;
    parameter Real Km0411_269 = 0.1;
    parameter Real Km1612_269 = 0.1;
    parameter Real Km1406_269 = 0.1;
    parameter Real FLUX_VALUE_270 = 0.492899539861318;
    parameter Real Vmax_270 = 6.90059355805845;
    parameter Real Keq_270 = 2.0;
    parameter Real Km0543_270 = 0.1;
    parameter Real Km1484_270 = 0.1;
    parameter Real Km1399_270 = 0.1;
    parameter Real Km1430_270 = 0.1;
    parameter Real FLUX_VALUE_271 = 0.0130870610456735;
    parameter Real Vmax_271 = 0.078522366274041;
    parameter Real Keq_271 = 2.0;
    parameter Real Km0654_271 = 0.1;
    parameter Real Km0653_271 = 0.1;
    parameter Real FLUX_VALUE_272 = 0.146909255332631;
    parameter Real Vmax_272 = 2.05672957465683;
    parameter Real Keq_272 = 2.0;
    parameter Real Km0306_272 = 0.1;
    parameter Real Km1333_272 = 0.1;
    parameter Real Km0308_272 = 0.1;
    parameter Real Km1334_272 = 0.1;
    parameter Real FLUX_VALUE_273 = 0.787832256050213;
    parameter Real Vmax_273 = 11.029651584703;
    parameter Real Keq_273 = 2.0;
    parameter Real Km0307_273 = 0.1;
    parameter Real Km0421_273 = 0.1;
    parameter Real Km0306_273 = 0.1;
    parameter Real Km0467_273 = 0.1;
    parameter Real FLUX_VALUE_274 = 0.64092300071826;
    parameter Real Vmax_274 = 3.84553800430956;
    parameter Real Keq_274 = 2.0;
    parameter Real Km0306_274 = 0.1;
    parameter Real Km0675_274 = 0.1;
    parameter Real FLUX_VALUE_275 = 3.08892317229363e-05;
    parameter Real Vmax_275 = 0.000432449244121108;
    parameter Real Keq_275 = 2.0;
    parameter Real Km0313_275 = 0.1;
    parameter Real Km0467_275 = 0.1;
    parameter Real Km0218_275 = 0.1;
    parameter Real Km0421_275 = 0.1;
    parameter Real FLUX_VALUE_276 = 7.97856388897518e-05;
    parameter Real Vmax_276 = 0.00239356916669255;
    parameter Real Keq_276 = 2.0;
    parameter Real Km0599_276 = 0.1;
    parameter Real Km0575_276 = 0.1;
    parameter Real Km1083_276 = 0.1;
    parameter Real Km1277_276 = 0.1;
    parameter Real Km0539_276 = 0.1;
    parameter Real Km0783_276 = 0.1;
    parameter Real FLUX_VALUE_277 = 7.97856388897518e-05;
    parameter Real Vmax_277 = 0.000797856388897518;
    parameter Real Keq_277 = 0.2;
    parameter Real Km1277_277 = 0.1;
    parameter Real Km0543_277 = 0.1;
    parameter Real Km1413_277 = 0.1;
    parameter Real FLUX_VALUE_278 = 9.32217621775477e-05;
    parameter Real Vmax_278 = 0.000559330573065286;
    parameter Real Keq_278 = 2.0;
    parameter Real Km0446_278 = 0.1;
    parameter Real Km0445_278 = 0.1;
    parameter Real FLUX_VALUE_279 = 0.0131230753965474;
    parameter Real Vmax_279 = 0.0787384523792844;
    parameter Real Keq_279 = 2.0;
    parameter Real Km0098_279 = 0.1;
    parameter Real Km0097_279 = 0.1;
    parameter Real FLUX_VALUE_280 = 0.0131230753965474;
    parameter Real Vmax_280 = 0.131230753965474;
    parameter Real Keq_280 = 0.2;
    parameter Real Km0099_280 = 0.1;
    parameter Real Km0783_280 = 0.1;
    parameter Real Km0098_280 = 0.1;
    parameter Real FLUX_VALUE_281 = 0.0613899240064973;
    parameter Real Vmax_281 = 1.84169772019492;
    parameter Real Keq_281 = 2.0;
    parameter Real Km0342_281 = 0.1;
    parameter Real Km0467_281 = 0.1;
    parameter Real Km0474_281 = 0.1;
    parameter Real Km0362_281 = 0.1;
    parameter Real Km0421_281 = 0.1;
    parameter Real Km1430_281 = 0.1;
    parameter Real FLUX_VALUE_282 = 0.0613899240064973;
    parameter Real Vmax_282 = 0.368339544038984;
    parameter Real Keq_282 = 2.0;
    parameter Real Km0362_282 = 0.1;
    parameter Real Km0344_282 = 0.1;
    parameter Real FLUX_VALUE_283 = 0.0614208132382202;
    parameter Real Vmax_283 = 1.35125789124084;
    parameter Real Keq_283 = 0.2;
    parameter Real Km0467_283 = 0.1;
    parameter Real Km0162_283 = 0.1;
    parameter Real Km0421_283 = 0.1;
    parameter Real Km0342_283 = 0.1;
    parameter Real Km1430_283 = 0.1;
    parameter Real FLUX_VALUE_284 = 0.0745129994030467;
    parameter Real Vmax_284 = 1.04318199164265;
    parameter Real Keq_284 = 2.0;
    parameter Real Km0133_284 = 0.1;
    parameter Real Km0343_284 = 0.1;
    parameter Real Km0352_284 = 0.1;
    parameter Real Km0337_284 = 0.1;
    parameter Real FLUX_VALUE_285 = 0.0613899240064973;
    parameter Real Vmax_285 = 1.84169772019492;
    parameter Real Keq_285 = 2.0;
    parameter Real Km0344_285 = 0.1;
    parameter Real Km1072_285 = 0.1;
    parameter Real Km0467_285 = 0.1;
    parameter Real Km0040_285 = 0.1;
    parameter Real Km0421_285 = 0.1;
    parameter Real Km1430_285 = 0.1;
    parameter Real FLUX_VALUE_286 = 0.00787329117099325;
    parameter Real Vmax_286 = 0.0472397470259595;
    parameter Real Keq_286 = 2.0;
    parameter Real Km1278_286 = 0.1;
    parameter Real Km0096_286 = 0.1;
    parameter Real FLUX_VALUE_287 = 0.0614208132382202;
    parameter Real Vmax_287 = 2.82535740895813;
    parameter Real Keq_287 = 0.2;
    parameter Real Km0467_287 = 0.1;
    parameter Real Km1322_287 = 0.1;
    parameter Real Km1101_287 = 0.1;
    parameter Real Km0421_287 = 0.1;
    parameter Real Km0162_287 = 0.1;
    parameter Real Km1095_287 = 0.1;
    parameter Real Km1430_287 = 0.1;
    parameter Real FLUX_VALUE_288 = 0.0614208132382202;
    parameter Real Vmax_288 = 1.84262439714661;
    parameter Real Keq_288 = 2.0;
    parameter Real Km0467_288 = 0.1;
    parameter Real Km0929_288 = 0.1;
    parameter Real Km0361_288 = 0.1;
    parameter Real Km0421_288 = 0.1;
    parameter Real Km1318_288 = 0.1;
    parameter Real Km1430_288 = 0.1;
    parameter Real FLUX_VALUE_289 = 0.128552671426845;
    parameter Real Vmax_289 = 1.79973739997583;
    parameter Real Keq_289 = 2.0;
    parameter Real Km0467_289 = 0.1;
    parameter Real Km0446_289 = 0.1;
    parameter Real Km0454_289 = 0.1;
    parameter Real Km0360_289 = 0.1;
    parameter Real FLUX_VALUE_290 = 0.146909255332631;
    parameter Real Vmax_290 = 2.05672957465683;
    parameter Real Keq_290 = 2.0;
    parameter Real Km0308_290 = 0.1;
    parameter Real Km1095_290 = 0.1;
    parameter Real Km0233_290 = 0.1;
    parameter Real Km1364_290 = 0.1;
    parameter Real FLUX_VALUE_291 = 0.0807006804356794;
    parameter Real Vmax_291 = 1.12980952609951;
    parameter Real Keq_291 = 2.0;
    parameter Real Km0393_291 = 0.1;
    parameter Real Km0555_291 = 0.1;
    parameter Real Km0395_291 = 0.1;
    parameter Real Km1430_291 = 0.1;
    parameter Real FLUX_VALUE_292 = 2.77033467884759e-07;
    parameter Real Vmax_292 = 2.77033467884759e-06;
    parameter Real Keq_292 = 0.2;
    parameter Real Km1492_292 = 0.1;
    parameter Real Km1248_292 = 0.1;
    parameter Real Km1491_292 = 0.1;
    parameter Real FLUX_VALUE_293 = 0.484650799082247;
    parameter Real Vmax_293 = 6.78511118715146;
    parameter Real Keq_293 = 2.0;
    parameter Real Km0421_293 = 0.1;
    parameter Real Km0783_293 = 0.1;
    parameter Real Km0467_293 = 0.1;
    parameter Real Km1430_293 = 0.1;
    parameter Real FLUX_VALUE_294 = 0.000247113853781668;
    parameter Real Vmax_294 = 0.00247113853781668;
    parameter Real Keq_294 = 20.0;
    parameter Real Km0345_294 = 0.1;
    parameter Real Km1493_294 = 0.1;
    parameter Real FLUX_VALUE_295 = 0.0256671508442138;
    parameter Real Vmax_295 = 0.256671508442138;
    parameter Real Keq_295 = 0.2;
    parameter Real Km1497_295 = 0.1;
    parameter Real Km0543_295 = 0.1;
    parameter Real Km1429_295 = 0.1;
    parameter Real FLUX_VALUE_296 = 0.0191323468756361;
    parameter Real Vmax_296 = 0.420911631263994;
    parameter Real Keq_296 = 0.2;
    parameter Real Km1333_296 = 0.1;
    parameter Real Km1497_296 = 0.1;
    parameter Real Km0262_296 = 0.1;
    parameter Real Km0543_296 = 0.1;
    parameter Real Km1334_296 = 0.1;
    parameter Real FLUX_VALUE_297 = 3.08892317222945e-05;
    parameter Real Vmax_297 = 0.000308892317222945;
    parameter Real Keq_297 = 20.0;
    parameter Real Km1372_297 = 0.1;
    parameter Real Km1512_297 = 0.1;
    parameter Real Km1511_297 = 0.1;
    parameter Real FLUX_VALUE_298 = 9.32217619764956e-05;
    parameter Real Vmax_298 = 0.00130510466767094;
    parameter Real Keq_298 = 2.0;
    parameter Real Km0405_298 = 0.1;
    parameter Real Km0445_298 = 0.1;
    parameter Real Km0408_298 = 0.1;
    parameter Real Km1430_298 = 0.1;
    parameter Real FLUX_VALUE_299 = 3.08892317222495e-05;
    parameter Real Vmax_299 = 0.00142090465922348;
    parameter Real Keq_299 = 0.2;
    parameter Real Km0116_299 = 0.1;
    parameter Real Km1333_299 = 0.1;
    parameter Real Km1362_299 = 0.1;
    parameter Real Km0543_299 = 0.1;
    parameter Real Km1334_299 = 0.1;
    parameter Real Km1530_299 = 0.1;
    parameter Real Km1430_299 = 0.1;
    parameter Real FLUX_VALUE_300 = 0.0306260499280495;
    parameter Real Vmax_300 = 0.428764698992693;
    parameter Real Keq_300 = 2.0;
    parameter Real Km0128_300 = 0.1;
    parameter Real Km1336_300 = 0.1;
    parameter Real Km1335_300 = 0.1;
    parameter Real Km1155_300 = 0.1;
    parameter Real FLUX_VALUE_301 = 0.407410405183232;
    parameter Real Vmax_301 = 12.222312155497;
    parameter Real Keq_301 = 2.0;
    parameter Real Km0555_301 = 0.1;
    parameter Real Km1333_301 = 0.1;
    parameter Real Km1531_301 = 0.1;
    parameter Real Km0395_301 = 0.1;
    parameter Real Km0543_301 = 0.1;
    parameter Real Km1334_301 = 0.1;
    parameter Real FLUX_VALUE_302 = 0.0973208185619302;
    parameter Real Vmax_302 = 1.36249145986702;
    parameter Real Keq_302 = 2.0;
    parameter Real Km0555_302 = 0.1;
    parameter Real Km1531_302 = 0.1;
    parameter Real Km0395_302 = 0.1;
    parameter Real Km0867_302 = 0.1;
    parameter Real FLUX_VALUE_303 = 0.0150663266603607;
    parameter Real Vmax_303 = 0.934112252942364;
    parameter Real Keq_303 = 2.0;
    parameter Real Km0555_303 = 0.1;
    parameter Real Km0862_303 = 0.1;
    parameter Real Km1531_303 = 0.1;
    parameter Real Km0395_303 = 0.1;
    parameter Real Km0543_303 = 0.1;
    parameter Real Km0861_303 = 0.1;
    parameter Real FLUX_VALUE_304 = 0.000315541120467916;
    parameter Real Vmax_304 = 0.00441757568655082;
    parameter Real Keq_304 = 2.0;
    parameter Real Km0772_304 = 0.1;
    parameter Real Km1005_304 = 0.1;
    parameter Real Km1430_304 = 0.1;
    parameter Real Km1537_304 = 0.1;
    parameter Real FLUX_VALUE_305 = 3.08892317229329e-05;
    parameter Real Vmax_305 = 0.000432449244121061;
    parameter Real Keq_305 = 2.0;
    parameter Real Km0467_305 = 0.1;
    parameter Real Km1546_305 = 0.1;
    parameter Real Km0421_305 = 0.1;
    parameter Real Km0863_305 = 0.1;
    parameter Real FLUX_VALUE_306 = 0.000123556926891731;
    parameter Real Vmax_306 = 0.00172979697648423;
    parameter Real Keq_306 = 2.0;
    parameter Real Km0311_306 = 0.1;
    parameter Real Km0255_306 = 0.1;
    parameter Real Km0364_306 = 0.1;
    parameter Real Km1430_306 = 0.1;
    parameter Real FLUX_VALUE_307 = 6.17784634458656e-05;
    parameter Real Vmax_307 = 0.000864898488242119;
    parameter Real Keq_307 = 2.0;
    parameter Real Km0364_307 = 0.1;
    parameter Real Km0311_307 = 0.1;
    parameter Real Km1546_307 = 0.1;
    parameter Real FLUX_VALUE_308 = 0.0036249829336045;
    parameter Real Vmax_308 = 0.108749488008135;
    parameter Real Keq_308 = 2.0;
    parameter Real Km0467_308 = 0.1;
    parameter Real Km0861_308 = 0.1;
    parameter Real Km0726_308 = 0.1;
    parameter Real Km0862_308 = 0.1;
    parameter Real FLUX_VALUE_309 = 0.00374272215765511;
    parameter Real Vmax_309 = 0.112281664729653;
    parameter Real Keq_309 = 2.0;
    parameter Real Km0575_309 = 0.1;
    parameter Real Km0861_309 = 0.1;
    parameter Real Km0731_309 = 0.1;
    parameter Real Km0862_309 = 0.1;
    parameter Real FLUX_VALUE_310 = 0.00374272215760098;
    parameter Real Vmax_310 = 0.112281664728029;
    parameter Real Keq_310 = 2.0;
    parameter Real Km0861_310 = 0.1;
    parameter Real Km0945_310 = 0.1;
    parameter Real Km0760_310 = 0.1;
    parameter Real Km0862_310 = 0.1;
    parameter Real FLUX_VALUE_311 = 0.00362498293356975;
    parameter Real Vmax_311 = 0.108749488007092;
    parameter Real Keq_311 = 2.0;
    parameter Real Km0861_311 = 0.1;
    parameter Real Km1792_311 = 0.1;
    parameter Real Km0810_311 = 0.1;
    parameter Real Km0862_311 = 0.1;
    parameter Real FLUX_VALUE_312 = 0.101534797735323;
    parameter Real Vmax_312 = 0.609208786411938;
    parameter Real Keq_312 = 2.0;
    parameter Real Km0704_312 = 0.1;
    parameter Real Km0446_312 = 0.1;
    parameter Real FLUX_VALUE_313 = 0.107049425956634;
    parameter Real Vmax_313 = 0.642296555739804;
    parameter Real Keq_313 = 2.0;
    parameter Real Km0721_313 = 0.1;
    parameter Real Km0704_313 = 0.1;
    parameter Real FLUX_VALUE_314 = 6.20554969142397e-05;
    parameter Real Vmax_314 = 0.000620554969142397;
    parameter Real Keq_314 = 0.2;
    parameter Real Km1551_314 = 0.1;
    parameter Real Km0405_314 = 0.1;
    parameter Real Km1558_314 = 0.1;
    parameter Real FLUX_VALUE_315 = 6.20554969142397e-05;
    parameter Real Vmax_315 = 0.000620554969142397;
    parameter Real Keq_315 = 0.2;
    parameter Real Km1558_315 = 0.1;
    parameter Real Km0310_315 = 0.1;
    parameter Real Km1112_315 = 0.1;
    parameter Real FLUX_VALUE_316 = 0.0343363591698377;
    parameter Real Vmax_316 = 0.480709028377728;
    parameter Real Keq_316 = 2.0;
    parameter Real Km0395_316 = 0.1;
    parameter Real Km1170_316 = 0.1;
    parameter Real Km1358_316 = 0.1;
    parameter Real Km0555_316 = 0.1;
    parameter Real FLUX_VALUE_317 = 0.052796345817737;
    parameter Real Vmax_317 = 0.739148841448318;
    parameter Real Keq_317 = 2.0;
    parameter Real Km0270_317 = 0.1;
    parameter Real Km1336_317 = 0.1;
    parameter Real Km1335_317 = 0.1;
    parameter Real Km1571_317 = 0.1;
    parameter Real FLUX_VALUE_318 = 0.0527963458177373;
    parameter Real Vmax_318 = 0.739148841448322;
    parameter Real Keq_318 = 2.0;
    parameter Real Km0467_318 = 0.1;
    parameter Real Km1571_318 = 0.1;
    parameter Real Km0421_318 = 0.1;
    parameter Real Km1574_318 = 0.1;
    parameter Real FLUX_VALUE_319 = 3.08892317229363e-05;
    parameter Real Vmax_319 = 0.000432449244121108;
    parameter Real Keq_319 = 2.0;
    parameter Real Km0768_319 = 0.1;
    parameter Real Km1333_319 = 0.1;
    parameter Real Km1334_319 = 0.1;
    parameter Real Km1578_319 = 0.1;
    parameter Real FLUX_VALUE_320 = 3.08892317229363e-05;
    parameter Real Vmax_320 = 0.000308892317229363;
    parameter Real Keq_320 = 20.0;
    parameter Real Km0838_320 = 0.1;
    parameter Real Km1578_320 = 0.1;
    parameter Real Km1577_320 = 0.1;
    parameter Real FLUX_VALUE_321 = 0.0727081263565024;
    parameter Real Vmax_321 = 2.18124379069507;
    parameter Real Keq_321 = 2.0;
    parameter Real Km0467_321 = 0.1;
    parameter Real Km0555_321 = 0.1;
    parameter Real Km1595_321 = 0.1;
    parameter Real Km0421_321 = 0.1;
    parameter Real Km1430_321 = 0.1;
    parameter Real Km1599_321 = 0.1;
    parameter Real FLUX_VALUE_322 = 0.0513869380474194;
    parameter Real Vmax_322 = 0.513869380474194;
    parameter Real Keq_322 = 0.2;
    parameter Real Km1316_322 = 0.1;
    parameter Real Km1211_322 = 0.1;
    parameter Real Km1595_322 = 0.1;
    parameter Real FLUX_VALUE_323 = 0.0513869380474194;
    parameter Real Vmax_323 = 0.719417132663872;
    parameter Real Keq_323 = 2.0;
    parameter Real Km1095_323 = 0.1;
    parameter Real Km1315_323 = 0.1;
    parameter Real Km0233_323 = 0.1;
    parameter Real Km1316_323 = 0.1;
    parameter Real FLUX_VALUE_324 = 0.0343363591697952;
    parameter Real Vmax_324 = 1.57947252181058;
    parameter Real Keq_324 = 0.2;
    parameter Real Km0467_324 = 0.1;
    parameter Real Km0945_324 = 0.1;
    parameter Real Km1609_324 = 0.1;
    parameter Real Km0412_324 = 0.1;
    parameter Real Km0896_324 = 0.1;
    parameter Real Km1430_324 = 0.1;
    parameter Real Km0783_324 = 0.1;
    parameter Real FLUX_VALUE_325 = 0.0343363591698208;
    parameter Real Vmax_325 = 2.12885426852889;
    parameter Real Keq_325 = 2.0;
    parameter Real Km1336_325 = 0.1;
    parameter Real Km1612_325 = 0.1;
    parameter Real Km0994_325 = 0.1;
    parameter Real Km1335_325 = 0.1;
    parameter Real FLUX_VALUE_326 = 4.63338474645892e-05;
    parameter Real Vmax_326 = 0.000648673864504249;
    parameter Real Keq_326 = 2.0;
    parameter Real Km0214_326 = 0.1;
    parameter Real Km1334_326 = 0.1;
    parameter Real Km0029_326 = 0.1;
    parameter Real Km1333_326 = 0.1;
    parameter Real FLUX_VALUE_327 = 0.00269553564721213;
    parameter Real Vmax_327 = 0.0377374990609698;
    parameter Real Keq_327 = 2.0;
    parameter Real Km0467_327 = 0.1;
    parameter Real Km1204_327 = 0.1;
    parameter Real Km0421_327 = 0.1;
    parameter Real Km0147_327 = 0.1;
    parameter Real FLUX_VALUE_328 = 0.0513869380474194;
    parameter Real Vmax_328 = 0.719417132663872;
    parameter Real Keq_328 = 2.0;
    parameter Real Km1599_328 = 0.1;
    parameter Real Km0148_328 = 0.1;
    parameter Real Km0555_328 = 0.1;
    parameter Real Km1315_328 = 0.1;
    parameter Real FLUX_VALUE_329 = 3.08892317229363e-05;
    parameter Real Vmax_329 = 0.000432449244121108;
    parameter Real Keq_329 = 2.0;
    parameter Real Km0218_329 = 0.1;
    parameter Real Km0330_329 = 0.1;
    parameter Real Km0783_329 = 0.1;
    parameter Real Km1643_329 = 0.1;
    parameter Real FLUX_VALUE_330 = 3.08892317229363e-05;
    parameter Real Vmax_330 = 0.000432449244121108;
    parameter Real Keq_330 = 2.0;
    parameter Real Km0467_330 = 0.1;
    parameter Real Km1643_330 = 0.1;
    parameter Real Km0421_330 = 0.1;
    parameter Real Km1644_330 = 0.1;
    parameter Real FLUX_VALUE_331 = 3.08892317229363e-05;
    parameter Real Vmax_331 = 0.0058689540273579;
    parameter Real Keq_331 = 0.2;
    parameter Real Km0467_331 = 0.1;
    parameter Real Km0738_331 = 0.1;
    parameter Real Km0116_331 = 0.1;
    parameter Real Km1018_331 = 0.1;
    parameter Real Km1336_331 = 0.1;
    parameter Real Km0330_331 = 0.1;
    parameter Real Km0454_331 = 0.1;
    parameter Real Km0543_331 = 0.1;
    parameter Real Km1017_331 = 0.1;
    parameter Real Km1335_331 = 0.1;
    parameter Real Km0783_331 = 0.1;
    parameter Real FLUX_VALUE_332 = 0.034336359169748;
    parameter Real Vmax_332 = 0.480709028376472;
    parameter Real Keq_332 = 2.0;
    parameter Real Km1336_332 = 0.1;
    parameter Real Km1406_332 = 0.1;
    parameter Real Km1335_332 = 0.1;
    parameter Real Km1544_332 = 0.1;
    parameter Real FLUX_VALUE_333 = 0.0414265806134143;
    parameter Real Vmax_333 = 0.414265806134143;
    parameter Real Keq_333 = 0.2;
    parameter Real Km1179_333 = 0.1;
    parameter Real Km0381_333 = 0.1;
    parameter Real Km0929_333 = 0.1;
    parameter Real FLUX_VALUE_334 = 0.158233967969303;
    parameter Real Vmax_334 = 1.58233967969303;
    parameter Real Keq_334 = 0.2;
    parameter Real Km1363_334 = 0.1;
    parameter Real Km1430_334 = 0.1;
    parameter Real Km1179_334 = 0.1;
    parameter Real FLUX_VALUE_335 = 0.00362498293358012;
    parameter Real Vmax_335 = 0.0507497610701217;
    parameter Real Keq_335 = 2.0;
    parameter Real Km0807_335 = 0.1;
    parameter Real Km0336_335 = 0.1;
    parameter Real Km0372_335 = 0.1;
    parameter Real Km0802_335 = 0.1;
    parameter Real FLUX_VALUE_336 = 0.0271110954536016;
    parameter Real Vmax_336 = 0.379555336350422;
    parameter Real Keq_336 = 2.0;
    parameter Real Km0621_336 = 0.1;
    parameter Real Km0627_336 = 0.1;
    parameter Real Km0913_336 = 0.1;
    parameter Real Km1561_336 = 0.1;
    parameter Real FLUX_VALUE_337 = 0.0271110954535792;
    parameter Real Vmax_337 = 0.379555336350109;
    parameter Real Keq_337 = 2.0;
    parameter Real Km0913_337 = 0.1;
    parameter Real Km1561_337 = 0.1;
    parameter Real Km0446_337 = 0.1;
    parameter Real Km0721_337 = 0.1;
    parameter Real FLUX_VALUE_338 = 0.0799383305030384;
    parameter Real Vmax_338 = 1.11913662704254;
    parameter Real Keq_338 = 2.0;
    parameter Real Km0627_338 = 0.1;
    parameter Real Km0913_338 = 0.1;
    parameter Real Km0621_338 = 0.1;
    parameter Real Km0721_338 = 0.1;
    parameter Real FLUX_VALUE_339 = 0.0195735226740616;
    parameter Real Vmax_339 = 0.11744113604437;
    parameter Real Keq_339 = 2.0;
    parameter Real Km0913_339 = 0.1;
    parameter Real Km0772_339 = 0.1;
    parameter Real FLUX_VALUE_340 = 0.00787329117099211;
    parameter Real Vmax_340 = 0.0787329117099211;
    parameter Real Keq_340 = 0.2;
    parameter Real Km0493_340 = 0.1;
    parameter Real Km0913_340 = 0.1;
    parameter Real Km1009_340 = 0.1;
    parameter Real FLUX_VALUE_341 = 0.00787329117099173;
    parameter Real Vmax_341 = 0.141719241077851;
    parameter Real Keq_341 = 200.0;
    parameter Real Km1009_341 = 0.1;
    parameter Real Km0451_341 = 0.1;
    parameter Real Km1531_341 = 0.1;
    parameter Real Km1185_341 = 0.1;
    parameter Real FLUX_VALUE_342 = 3.08892317229363e-05;
    parameter Real Vmax_342 = 0.00240936007438903;
    parameter Real Keq_342 = 0.02;
    parameter Real Km1552_342 = 0.1;
    parameter Real Km1336_342 = 0.1;
    parameter Real Km1189_342 = 0.1;
    parameter Real Km1407_342 = 0.1;
    parameter Real Km0333_342 = 0.1;
    parameter Real Km0738_342 = 0.1;
    parameter Real Km1141_342 = 0.1;
    parameter Real Km1335_342 = 0.1;
    parameter Real FLUX_VALUE_343 = 0.0191323468756361;
    parameter Real Vmax_343 = 0.267852856258905;
    parameter Real Keq_343 = 2.0;
    parameter Real Km0262_343 = 0.1;
    parameter Real Km1095_343 = 0.1;
    parameter Real Km0233_343 = 0.1;
    parameter Real Km1189_343 = 0.1;
    parameter Real FLUX_VALUE_344 = 0.00539107129442425;
    parameter Real Vmax_344 = 0.0754749981219395;
    parameter Real Keq_344 = 2.0;
    parameter Real Km0028_344 = 0.1;
    parameter Real Km1735_344 = 0.1;
    parameter Real Km0397_344 = 0.1;
    parameter Real Km1734_344 = 0.1;
    parameter Real FLUX_VALUE_345 = 0.00539107129442425;
    parameter Real Vmax_345 = 0.0539107129442425;
    parameter Real Keq_345 = 0.2;
    parameter Real Km1736_345 = 0.1;
    parameter Real Km0384_345 = 0.1;
    parameter Real Km1735_345 = 0.1;
    parameter Real FLUX_VALUE_346 = 0.0038479948756196;
    parameter Real Vmax_346 = 0.0538719282586744;
    parameter Real Keq_346 = 2.0;
    parameter Real Km1336_346 = 0.1;
    parameter Real Km1742_346 = 0.1;
    parameter Real Km1335_346 = 0.1;
    parameter Real Km1750_346 = 0.1;
    parameter Real FLUX_VALUE_347 = 0.0038479948756196;
    parameter Real Vmax_347 = 0.0538719282586744;
    parameter Real Keq_347 = 2.0;
    parameter Real Km1484_347 = 0.1;
    parameter Real Km1745_347 = 0.1;
    parameter Real Km1430_347 = 0.1;
    parameter Real Km1742_347 = 0.1;
    parameter Real FLUX_VALUE_348 = 0.00539107129442425;
    parameter Real Vmax_348 = 0.0754749981219395;
    parameter Real Keq_348 = 2.0;
    parameter Real Km0028_348 = 0.1;
    parameter Real Km1745_348 = 0.1;
    parameter Real Km0397_348 = 0.1;
    parameter Real Km1736_348 = 0.1;
    parameter Real FLUX_VALUE_349 = 0.0130870610456636;
    parameter Real Vmax_349 = 0.18321885463929;
    parameter Real Keq_349 = 2.0;
    parameter Real Km1287_349 = 0.1;
    parameter Real Km1792_349 = 0.1;
    parameter Real Km0783_349 = 0.1;
    parameter Real Km1745_349 = 0.1;
    parameter Real FLUX_VALUE_350 = 0.0038479948756196;
    parameter Real Vmax_350 = 0.0538719282586744;
    parameter Real Keq_350 = 2.0;
    parameter Real Km1745_350 = 0.1;
    parameter Real Km1777_350 = 0.1;
    parameter Real Km1776_350 = 0.1;
    parameter Real Km1733_350 = 0.1;
    parameter Real FLUX_VALUE_351 = 0.00384799487562186;
    parameter Real Vmax_351 = 0.115439846268656;
    parameter Real Keq_351 = 2.0;
    parameter Real Km1041_351 = 0.1;
    parameter Real Km0467_351 = 0.1;
    parameter Real Km1750_351 = 0.1;
    parameter Real Km0421_351 = 0.1;
    parameter Real Km1430_351 = 0.1;
    parameter Real Km1751_351 = 0.1;
    parameter Real FLUX_VALUE_352 = 0.00384799487562186;
    parameter Real Vmax_352 = 0.115439846268656;
    parameter Real Keq_352 = 2.0;
    parameter Real Km0467_352 = 0.1;
    parameter Real Km0671_352 = 0.1;
    parameter Real Km1751_352 = 0.1;
    parameter Real Km0421_352 = 0.1;
    parameter Real Km1430_352 = 0.1;
    parameter Real Km1754_352 = 0.1;
    parameter Real FLUX_VALUE_353 = 0.00384799487562186;
    parameter Real Vmax_353 = 0.115439846268656;
    parameter Real Keq_353 = 2.0;
    parameter Real Km1242_353 = 0.1;
    parameter Real Km0467_353 = 0.1;
    parameter Real Km1754_353 = 0.1;
    parameter Real Km0421_353 = 0.1;
    parameter Real Km1430_353 = 0.1;
    parameter Real Km1752_353 = 0.1;
    parameter Real FLUX_VALUE_354 = 0.0038479948756196;
    parameter Real Vmax_354 = 0.115439846268588;
    parameter Real Keq_354 = 2.0;
    parameter Real Km0603_354 = 0.1;
    parameter Real Km0467_354 = 0.1;
    parameter Real Km1752_354 = 0.1;
    parameter Real Km0421_354 = 0.1;
    parameter Real Km1430_354 = 0.1;
    parameter Real Km1755_354 = 0.1;
    parameter Real FLUX_VALUE_355 = 0.00269553564721213;
    parameter Real Vmax_355 = 0.0269553564721213;
    parameter Real Keq_355 = 0.2;
    parameter Real Km1734_355 = 0.1;
    parameter Real Km0149_355 = 0.1;
    parameter Real Km1762_355 = 0.1;
    parameter Real FLUX_VALUE_356 = 0.0523634810234329;
    parameter Real Vmax_356 = 0.733088734328061;
    parameter Real Keq_356 = 2.0;
    parameter Real Km0467_356 = 0.1;
    parameter Real Km1762_356 = 0.1;
    parameter Real Km0421_356 = 0.1;
    parameter Real Km1733_356 = 0.1;
    parameter Real FLUX_VALUE_357 = 7.61842038009631e-06;
    parameter Real Vmax_357 = 0.015587288097677;
    parameter Real Keq_357 = 2.0;
    parameter Real Km0826_357 = 0.1;
    parameter Real Km1028_357 = 0.1;
    parameter Real Km0783_357 = 0.1;
    parameter Real Km1765_357 = 0.1;
    parameter Real FLUX_VALUE_358 = 0.0038479948756196;
    parameter Real Vmax_358 = 0.038479948756196;
    parameter Real Keq_358 = 0.2;
    parameter Real Km1765_358 = 0.1;
    parameter Real Km1430_358 = 0.1;
    parameter Real Km1768_358 = 0.1;
    parameter Real FLUX_VALUE_359 = 3.08892317225085e-05;
    parameter Real Vmax_359 = 0.00203868929368556;
    parameter Real Keq_359 = 0.0002;
    parameter Real Km1791_359 = 0.1;
    parameter Real Km0543_359 = 0.1;
    parameter Real Km0565_359 = 0.1;
    parameter Real FLUX_VALUE_360 = 3.08892317229363e-05;
    parameter Real Vmax_360 = 0.000926676951688089;
    parameter Real Keq_360 = 2.0;
    parameter Real Km1552_360 = 0.1;
    parameter Real Km1791_360 = 0.1;
    parameter Real Km1551_360 = 0.1;
    parameter Real Km0768_360 = 0.1;
    parameter Real FLUX_VALUE_361 = 6.1778463445417e-05;
    parameter Real Vmax_361 = 0.000370670780672502;
    parameter Real Keq_361 = 2.0;
    parameter Real Km0998_361 = 0.1;
    parameter Real Km1791_361 = 0.1;
    parameter Real FLUX_VALUE_362 = 0.0586202819065749;
    parameter Real Vmax_362 = 0.820683946692049;
    parameter Real Keq_362 = 2.0;
    parameter Real Km0282_362 = 0.1;
    parameter Real Km1095_362 = 0.1;
    parameter Real Km0233_362 = 0.1;
    parameter Real Km1193_362 = 0.1;
    parameter Real FLUX_VALUE_363 = 0.0656079149963033;
    parameter Real Vmax_363 = 0.39364748997782;
    parameter Real Keq_363 = 2.0;
    parameter Real Km0657_363 = 0.1;
    parameter Real Km0622_363 = 0.1;
    parameter Real FLUX_VALUE_364 = 1.49280744931915;
    parameter Real Vmax_364 = 4.97602483106383;
    parameter Real Km0453_364 = 1.0;
    parameter Real Km0451_364 = 0.1;
    parameter Real FLUX_VALUE_365 = 12.8512360032879;
    parameter Real Vmax_365 = 128.512360032879;
    parameter Real Keq_365 = 20.0;
    parameter Real Km0421_365 = 0.1;
    parameter Real Km1430_365 = 0.1;
    parameter Real Km0467_365 = 0.1;
    parameter Real FLUX_VALUE_366 = 0.000720979601425486;
    parameter Real Vmax_366 = 0.00240326533808495;
    parameter Real Km0499_366 = 1.0;
    parameter Real Km0497_366 = 0.1;
    parameter Real FLUX_VALUE_367 = 0.000720979601425486;
    parameter Real Vmax_367 = 0.00240326533808495;
    parameter Real Km0522_367 = 1.0;
    parameter Real Km0520_367 = 0.1;
    parameter Real FLUX_VALUE_368 = 0.320567754236931;
    parameter Real Vmax_368 = 0.641135508473862;
    parameter Real Km0543_368 = 0.1;
    parameter Real FLUX_VALUE_369 = 3.46291835458927e-06;
    parameter Real Vmax_369 = 1.15430611819642e-05;
    parameter Real Km0548_369 = 1.0;
    parameter Real Km0546_369 = 0.1;
    parameter Real FLUX_VALUE_370 = 9.82083645361517e-05;
    parameter Real Vmax_370 = 0.000327361215120506;
    parameter Real Km0581_370 = 1.0;
    parameter Real Km0579_370 = 0.1;
    parameter Real FLUX_VALUE_371 = 0.0229563090982916;
    parameter Real Vmax_371 = 0.229563090982916;
    parameter Real Keq_371 = 20.0;
    parameter Real Km1239_371 = 0.1;
    parameter Real Km1372_371 = 0.1;
    parameter Real Km1240_371 = 0.1;
    parameter Real FLUX_VALUE_372 = 0.0229563090980402;
    parameter Real Vmax_372 = 0.229563090980402;
    parameter Real Keq_372 = 20.0;
    parameter Real Km1372_372 = 0.1;
    parameter Real Km1731_372 = 0.1;
    parameter Real Km1732_372 = 0.1;
    parameter Real FLUX_VALUE_373 = 1.0;
    parameter Real Vmax_373 = 3.33333333333333;
    parameter Real Km0659_373 = 1.0;
    parameter Real Km0657_373 = 0.1;
    parameter Real FLUX_VALUE_374 = 0.0221586919261637;
    parameter Real Vmax_374 = 0.310221686966292;
    parameter Real Keq_374 = 2.0;
    parameter Real Km1484_374 = 0.1;
    parameter Real Km0657_374 = 0.1;
    parameter Real Km0663_374 = 0.1;
    parameter Real Km1531_374 = 0.1;
    parameter Real FLUX_VALUE_375 = 0.0110793449722376;
    parameter Real Vmax_375 = 0.155110829611326;
    parameter Real Keq_375 = 2.0;
    parameter Real Km1484_375 = 0.1;
    parameter Real Km0622_375 = 0.1;
    parameter Real Km0627_375 = 0.1;
    parameter Real Km1531_375 = 0.1;
    parameter Real FLUX_VALUE_376 = 0.001143178607316;
    parameter Real Vmax_376 = 0.00381059535772;
    parameter Real Km0840_376 = 1.0;
    parameter Real Km0838_376 = 0.1;
    parameter Real FLUX_VALUE_377 = 0.00108153866040612;
    parameter Real Vmax_377 = 0.0036051288680204;
    parameter Real Km0843_377 = 1.0;
    parameter Real Km0841_377 = 0.1;
    parameter Real FLUX_VALUE_378 = 0.00120163266904248;
    parameter Real Vmax_378 = 0.0040054422301416;
    parameter Real Km1214_378 = 1.0;
    parameter Real Km1212_378 = 0.1;
    parameter Real FLUX_VALUE_379 = 9.57150633208474e-05;
    parameter Real Vmax_379 = 0.000319050211069491;
    parameter Real Km1257_379 = 1.0;
    parameter Real Km1255_379 = 0.1;
    parameter Real FLUX_VALUE_380 = 2.77033467884759e-07;
    parameter Real Vmax_380 = 5.54066935769518e-07;
    parameter Real Km1248_380 = 0.1;
    parameter Real FLUX_VALUE_381 = 1.78686587096806e-05;
    parameter Real Vmax_381 = 5.95621956989353e-05;
    parameter Real Km1263_381 = 1.0;
    parameter Real Km1261_381 = 0.1;
    parameter Real FLUX_VALUE_382 = 0.0019239974378098;
    parameter Real Vmax_382 = 0.0423279436318156;
    parameter Real Keq_382 = 0.2;
    parameter Real Km1776_382 = 0.1;
    parameter Real Km1765_382 = 0.1;
    parameter Real Km1725_382 = 0.1;
    parameter Real FLUX_VALUE_383 = 1.06213701401227;
    parameter Real Vmax_383 = 14.8699181961718;
    parameter Real Keq_383 = 2.0;
    parameter Real Km1334_383 = 0.1;
    parameter Real Km1335_383 = 0.1;
    parameter Real Km1333_383 = 0.1;
    parameter Real Km1336_383 = 0.1;
    parameter Real FLUX_VALUE_384 = 4.47409051412934e-05;
    parameter Real Vmax_384 = 0.000149136350470978;
    parameter Real Km1331_384 = 1.0;
    parameter Real Km1329_384 = 0.1;
    parameter Real FLUX_VALUE_385 = 0.0230335321771807;
    parameter Real Vmax_385 = 0.0767784405906023;
    parameter Real Km1374_385 = 1.0;
    parameter Real Km1372_385 = 0.1;
    parameter Real FLUX_VALUE_386 = 0.131013836759781;
    parameter Real Vmax_386 = 0.43671278919927;
    parameter Real Km1432_386 = 1.0;
    parameter Real Km1430_386 = 0.1;
    parameter Real FLUX_VALUE_387 = 0.027038466512633;
    parameter Real Vmax_387 = 0.0901282217087767;
    parameter Real Km1496_387 = 1.0;
    parameter Real Km1494_387 = 0.1;
    parameter Real FLUX_VALUE_388 = 0.0349372447626834;
    parameter Real Vmax_388 = 0.116457482542278;
    parameter Real Km1611_388 = 1.0;
    parameter Real Km1609_388 = 0.1;
    parameter Real FLUX_VALUE_389 = 4.72342063565976e-05;
    parameter Real Vmax_389 = 0.000157447354521992;
    parameter Real Km1806_389 = 1.0;
    parameter Real Km1804_389 = 0.1;
    parameter Real FLUX_VALUE_390 = 3.08892317453432e-05;
    parameter Real Vmax_390 = 0.00488049861576423;
    parameter Real Keq_390 = 0.02;
    parameter Real Km0229_390 = 0.1;
    parameter Real Km0467_390 = 0.1;
    parameter Real Km1333_390 = 0.1;
    parameter Real Km0226_390 = 0.1;
    parameter Real Km0421_390 = 0.1;
    parameter Real Km1334_390 = 0.1;
    parameter Real Km1430_390 = 0.1;
    parameter Real FLUX_VALUE_391 = 9.26676951688061e-05;
    parameter Real Vmax_391 = 0.000926676951688061;
    parameter Real Keq_391 = 0.2;
    parameter Real Km0766_391 = 0.1;
    parameter Real Km0765_391 = 0.1;
    parameter Real Km1430_391 = 0.1;
    parameter Real FLUX_VALUE_392 = 3.08892316991383e-05;
    parameter Real Vmax_392 = 0.000432449243787936;
    parameter Real Keq_392 = 2.0;
    parameter Real Km1333_392 = 0.1;
    parameter Real Km1530_392 = 0.1;
    parameter Real Km1334_392 = 0.1;
    parameter Real Km1522_392 = 0.1;
    parameter Real FLUX_VALUE_393 = 6.17784634458656e-05;
    parameter Real Vmax_393 = 0.000617784634458656;
    parameter Real Keq_393 = 0.2;
    parameter Real Km0346_393 = 0.1;
    parameter Real Km0311_393 = 0.1;
    parameter Real Km1430_393 = 0.1;
    parameter Real FLUX_VALUE_394 = 6.20554969142397e-05;
    parameter Real Vmax_394 = 0.000124110993828479;
    parameter Real Km0003_394 = 0.1;
    parameter Real FLUX_VALUE_395 = 3.11662651885034e-05;
    parameter Real Vmax_395 = 6.23325303770068e-05;
    parameter Real Km0334_395 = 0.1;
    parameter Real FLUX_VALUE_396 = 3.08892317229363e-05;
    parameter Real Vmax_396 = 6.17784634458726e-05;
    parameter Real Km1407_396 = 0.1;
    parameter Real FLUX_VALUE_397 = 2.77033467995043e-07;
    parameter Real Vmax_397 = 5.54066935990086e-07;
    parameter Real Km1550_397 = 0.1;
    parameter Real FLUX_VALUE_398 = 0.138516734183571;
    parameter Real zero_flux_398 = 0.0;
    parameter Real V0_398 = 0.138516734183142;
    parameter Real ic0133_398 = 0.1;
    parameter Real ep0133_398 = 0.000223;
    parameter Real ic0378_398 = 0.1;
    parameter Real ep0378_398 = 2.6e-05;
    parameter Real ic0226_398 = 0.1;
    parameter Real ep0226_398 = 0.000223;
    parameter Real ic0380_398 = 0.1;
    parameter Real ep0380_398 = 0.00026;
    parameter Real ic1041_398 = 0.1;
    parameter Real ep1041_398 = 0.5137;
    parameter Real ic1552_398 = 0.1;
    parameter Real ep1552_398 = 0.000223;
    parameter Real ic1061_398 = 0.1;
    parameter Real ep1061_398 = 0.2958;
    parameter Real ic1068_398 = 0.1;
    parameter Real ep1068_398 = 0.2411;
    parameter Real ic1072_398 = 0.1;
    parameter Real ep1072_398 = 0.2411;
    parameter Real ic0467_398 = 0.1;
    parameter Real ep0467_398 = 54.12;
    parameter Real ic0480_398 = 0.1;
    parameter Real ep0480_398 = 0.000122;
    parameter Real ic0476_398 = 0.1;
    parameter Real ep0476_398 = 2e-06;
    parameter Real ic0497_398 = 0.1;
    parameter Real ep0497_398 = 0.005205;
    parameter Real ic0520_398 = 0.1;
    parameter Real ep0520_398 = 0.005205;
    parameter Real ic0555_398 = 0.1;
    parameter Real ep0555_398 = 0.000576;
    parameter Real ic0546_398 = 0.1;
    parameter Real ep0546_398 = 2.5e-05;
    parameter Real ic0575_398 = 0.1;
    parameter Real ep0575_398 = 0.1335;
    parameter Real ic0579_398 = 0.1;
    parameter Real ep0579_398 = 0.000709;
    parameter Real ic1083_398 = 0.1;
    parameter Real ep1083_398 = 0.09158;
    parameter Real ic0726_398 = 0.1;
    parameter Real ep0726_398 = 0.02617;
    parameter Real ic0731_398 = 0.1;
    parameter Real ep0731_398 = 0.02702;
    parameter Real ic0760_398 = 0.1;
    parameter Real ep0760_398 = 0.02702;
    parameter Real ic0805_398 = 0.1;
    parameter Real ep0805_398 = 0.02617;
    parameter Real ic0859_398 = 0.1;
    parameter Real ep0859_398 = 0.000223;
    parameter Real ic0838_398 = 0.1;
    parameter Real ep0838_398 = 0.006715;
    parameter Real ic0841_398 = 0.1;
    parameter Real ep0841_398 = 0.007808;
    parameter Real ic1101_398 = 0.1;
    parameter Real ep1101_398 = 0.2632;
    parameter Real ic1095_398 = 0.1;
    parameter Real ep1095_398 = 0.2632;
    parameter Real ic0929_398 = 0.1;
    parameter Real ep0929_398 = 0.6126;
    parameter Real ic0945_398 = 0.1;
    parameter Real ep0945_398 = 0.2151;
    parameter Real ic1106_398 = 0.1;
    parameter Real ep1106_398 = 0.09474;
    parameter Real ic1119_398 = 0.1;
    parameter Real ep1119_398 = 0.2905;
    parameter Real ic1494_398 = 0.1;
    parameter Real ep1494_398 = 0.1952;
    parameter Real ic1127_398 = 0.1;
    parameter Real ep1127_398 = 0.4505;
    parameter Real ic1131_398 = 0.1;
    parameter Real ep1131_398 = 0.3432;
    parameter Real ic1141_398 = 0.1;
    parameter Real ep1141_398 = 0.1537;
    parameter Real ic1212_398 = 0.1;
    parameter Real ep1212_398 = 0.008675;
    parameter Real ic0336_398 = 0.1;
    parameter Real ep0336_398 = 0.000223;
    parameter Real ic1255_398 = 0.1;
    parameter Real ep1255_398 = 0.000691;
    parameter Real ic1261_398 = 0.1;
    parameter Real ep1261_398 = 7e-06;
    parameter Real ic1333_398 = 0.1;
    parameter Real ep1333_398 = 0.001831;
    parameter Real ic1335_398 = 0.1;
    parameter Real ep1335_398 = 0.000447;
    parameter Real ic0451_398 = 0.1;
    parameter Real ep0451_398 = 0.01301;
    parameter Real ic1329_398 = 0.1;
    parameter Real ep1329_398 = 0.000323;
    parameter Real ic1437_398 = 0.1;
    parameter Real ep1437_398 = 0.06382;
    parameter Real ic1435_398 = 0.1;
    parameter Real ep1435_398 = 0.07521;
    parameter Real ic1151_398 = 0.1;
    parameter Real ep1151_398 = 0.1853;
    parameter Real ic1508_398 = 0.1;
    parameter Real ep1508_398 = 0.000223;
    parameter Real ic1155_398 = 0.1;
    parameter Real ep1155_398 = 0.2211;
    parameter Real ic1522_398 = 0.1;
    parameter Real ep1522_398 = 0.000223;
    parameter Real ic1546_398 = 0.1;
    parameter Real ep1546_398 = 0.000223;
    parameter Real ic1170_398 = 0.1;
    parameter Real ep1170_398 = 0.2158;
    parameter Real ic1577_398 = 0.1;
    parameter Real ep1577_398 = 0.000223;
    parameter Real ic1609_398 = 0.1;
    parameter Real ep1609_398 = 0.004338;
    parameter Real ic0337_398 = 0.1;
    parameter Real ep0337_398 = 0.000223;
    parameter Real ic1644_398 = 0.1;
    parameter Real ep1644_398 = 0.000223;
    parameter Real ic1179_398 = 0.1;
    parameter Real ep1179_398 = 0.2537;
    parameter Real ic1185_398 = 0.1;
    parameter Real ep1185_398 = 0.05684;
    parameter Real ic1189_398 = 0.1;
    parameter Real ep1189_398 = 0.1379;
    parameter Real ic1765_398 = 0.1;
    parameter Real ep1765_398 = 5.5e-05;
    parameter Real ic1792_398 = 0.1;
    parameter Real ep1792_398 = 0.1441;
    parameter Real ic1193_398 = 0.1;
    parameter Real ep1193_398 = 0.4232;
    parameter Real ic1804_398 = 0.1;
    parameter Real ep1804_398 = 0.000341;
    parameter Real ic1033_398 = 0.1;
    parameter Real ep1033_398 = 0.01946;
    parameter Real ic1719_398 = 0.1;
    parameter Real ep1719_398 = 0.01389;
    parameter Real cell = 1.0;
    parameter Real extracellular = 1.0;



    Real s_0003;
    Real s_0004;
    Real s_0017;
    Real s_0018;
    Real s_0028;
    Real s_0029;
    Real s_0032;
    Real s_0033;
    Real s_0040;
    Real s_0041;
    Real s_0042;
    Real s_0043;
    Real s_0044;
    Real s_0045;
    Real s_0046;
    Real s_0047;
    Real s_0049;
    Real s_0050;
    Real s_0051;
    Real s_0052;
    Real s_0073;
    Real s_0075;
    Real s_0096;
    Real s_0097;
    Real s_0098;
    Real s_0099;
    Real s_0116;
    Real s_0119;
    Real s_0121;
    Real s_0123;
    Real s_0128;
    Real s_0133;
    Real s_0147;
    Real s_0148;
    Real s_0149;
    Real s_0155;
    Real s_0160;
    Real s_0162;
    Real s_0191;
    Real s_0193;
    Real s_0194;
    Real s_0195;
    Real s_0201;
    Real s_0203;
    Real s_0214;
    Real s_0217;
    Real s_0218;
    Real s_0226;
    Real s_0229;
    Real s_0231;
    Real s_0232;
    Real s_0233;
    Real s_0237;
    Real s_0252;
    Real s_0255;
    Real s_0262;
    Real s_0263;
    Real s_0265;
    Real s_0266;
    Real s_0267;
    Real s_0269;
    Real s_0270;
    Real s_0271;
    Real s_0272;
    Real s_0276;
    Real s_0277;
    Real s_0282;
    Real s_0283;
    Real s_0289;
    Real s_0290;
    Real s_0293;
    Real s_0295;
    Real s_0297;
    Real s_0299;
    Real s_0303;
    Real s_0304;
    Real s_0305;
    Real s_0306;
    Real s_0307;
    Real s_0308;
    Real s_0310;
    Real s_0311;
    Real s_0312;
    Real s_0313;
    Real s_0316;
    Real s_0318;
    Real s_0325;
    Real s_0328;
    Real s_0330;
    Real s_0331;
    Real s_0332;
    Real s_0333;
    Real s_0334;
    Real s_0335;
    Real s_0336;
    Real s_0337;
    Real s_0341;
    Real s_0342;
    Real s_0343;
    Real s_0344;
    Real s_0345;
    Real s_0346;
    Real s_0347;
    Real s_0352;
    Real s_0354;
    Real s_0359;
    Real s_0360;
    Real s_0361;
    Real s_0362;
    Real s_0364;
    Real s_0367;
    Real s_0368;
    Real s_0369;
    Real s_0370;
    Real s_0371;
    Real s_0372;
    Real s_0376;
    Real s_0377;
    Real s_0378;
    Real s_0380;
    Real s_0381;
    Real s_0384;
    Real s_0391;
    Real s_0393;
    Real s_0395;
    Real s_0397;
    Real s_0405;
    Real s_0408;
    Real s_0411;
    Real s_0412;
    Real s_0420;
    Real s_0421;
    Real s_0435;
    Real s_0445;
    Real s_0446;
    Real s_0451;
    Real s_0453;
    Real s_0454;
    Real s_0457;
    Real s_0467;
    Real s_0470;
    Real s_0474;
    Real s_0476;
    Real s_0479;
    Real s_0480;
    Real s_0481;
    Real s_0488;
    Real s_0493;
    Real s_0497;
    Real s_0499;
    Real s_0502;
    Real s_0510;
    Real s_0512;
    Real s_0513;
    Real s_0520;
    Real s_0522;
    Real s_0526;
    Real s_0530;
    Real s_0533;
    Real s_0536;
    Real s_0539;
    Real s_0542;
    Real s_0543;
    Real s_0545;
    Real s_0546;
    Real s_0548;
    Real s_0555;
    Real s_0565;
    Real s_0574;
    Real s_0575;
    Real s_0579;
    Real s_0581;
    Real s_0585;
    Real s_0599;
    Real s_0600;
    Real s_0603;
    Real s_0611;
    Real s_0620;
    Real s_0621;
    Real s_0622;
    Real s_0627;
    Real s_0653;
    Real s_0654;
    Real s_0657;
    Real s_0659;
    Real s_0663;
    Real s_0671;
    Real s_0675;
    Real s_0704;
    Real s_0721;
    Real s_0726;
    Real s_0731;
    Real s_0732;
    Real s_0737;
    Real s_0738;
    Real s_0754;
    Real s_0755;
    Real s_0760;
    Real s_0765;
    Real s_0766;
    Real s_0767;
    Real s_0768;
    Real s_0772;
    Real s_0779;
    Real s_0783;
    Real s_0785;
    Real s_0789;
    Real s_0790;
    Real s_0795;
    Real s_0802;
    Real s_0805;
    Real s_0807;
    Real s_0810;
    Real s_0812;
    Real s_0813;
    Real s_0826;
    Real s_0838;
    Real s_0840;
    Real s_0841;
    Real s_0843;
    Real s_0859;
    Real s_0860;
    Real s_0861;
    Real s_0862;
    Real s_0863;
    Real s_0867;
    Real s_0875;
    Real s_0896;
    Real s_0903;
    Real s_0910;
    Real s_0913;
    Real s_0920;
    Real s_0929;
    Real s_0936;
    Real s_0937;
    Real s_0941;
    Real s_0942;
    Real s_0945;
    Real s_0971;
    Real s_0976;
    Real s_0979;
    Real s_0984;
    Real s_0991;
    Real s_0994;
    Real s_0998;
    Real s_1005;
    Real s_1006;
    Real s_1009;
    Real s_1017;
    Real s_1018;
    Real s_1019;
    Real s_1020;
    Real s_1021;
    Real s_1022;
    Real s_1027;
    Real s_1028;
    Real s_1033;
    Real s_1038;
    Real s_1040;
    Real s_1041;
    Real s_1061;
    Real s_1068;
    Real s_1072;
    Real s_1075;
    Real s_1081;
    Real s_1082;
    Real s_1083;
    Real s_1095;
    Real s_1098;
    Real s_1099;
    Real s_1100;
    Real s_1101;
    Real s_1105;
    Real s_1106;
    Real s_1109;
    Real s_1110;
    Real s_1112;
    Real s_1113;
    Real s_1119;
    Real s_1127;
    Real s_1131;
    Real s_1138;
    Real s_1141;
    Real s_1151;
    Real s_1155;
    Real s_1170;
    Real s_1179;
    Real s_1185;
    Real s_1189;
    Real s_1193;
    Real s_1204;
    Real s_1211;
    Real s_1212;
    Real s_1214;
    Real s_1216;
    Real s_1217;
    Real s_1218;
    Real s_1239;
    Real s_1240;
    Real s_1242;
    Real s_1248;
    Real s_1250;
    Real s_1255;
    Real s_1257;
    Real s_1258;
    Real s_1259;
    Real s_1260;
    Real s_1261;
    Real s_1263;
    Real s_1264;
    Real s_1265;
    Real s_1274;
    Real s_1277;
    Real s_1278;
    Real s_1287;
    Real s_1302;
    Real s_1303;
    Real s_1304;
    Real s_1312;
    Real s_1315;
    Real s_1316;
    Real s_1318;
    Real s_1321;
    Real s_1322;
    Real s_1327;
    Real s_1329;
    Real s_1331;
    Real s_1333;
    Real s_1334;
    Real s_1335;
    Real s_1336;
    Real s_1340;
    Real s_1358;
    Real s_1362;
    Real s_1363;
    Real s_1364;
    Real s_1367;
    Real s_1372;
    Real s_1374;
    Real s_1390;
    Real s_1391;
    Real s_1394;
    Real s_1397;
    Real s_1399;
    Real s_1406;
    Real s_1407;
    Real s_1411;
    Real s_1412;
    Real s_1413;
    Real s_1429;
    Real s_1430;
    Real s_1432;
    Real s_1435;
    Real s_1437;
    Real s_1476;
    Real s_1477;
    Real s_1484;
    Real s_1491;
    Real s_1492;
    Real s_1493;
    Real s_1494;
    Real s_1496;
    Real s_1497;
    Real s_1508;
    Real s_1511;
    Real s_1512;
    Real s_1522;
    Real s_1530;
    Real s_1531;
    Real s_1537;
    Real s_1544;
    Real s_1546;
    Real s_1550;
    Real s_1551;
    Real s_1552;
    Real s_1558;
    Real s_1561;
    Real s_1571;
    Real s_1574;
    Real s_1577;
    Real s_1578;
    Real s_1595;
    Real s_1599;
    Real s_1609;
    Real s_1611;
    Real s_1612;
    Real s_1632;
    Real s_1643;
    Real s_1644;
    Real s_1668;
    Real s_1670;
    Real s_1672;
    Real s_1674;
    Real s_1676;
    Real s_1680;
    Real s_1690;
    Real s_1719;
    Real s_1725;
    Real s_1731;
    Real s_1732;
    Real s_1733;
    Real s_1734;
    Real s_1735;
    Real s_1736;
    Real s_1742;
    Real s_1745;
    Real s_1750;
    Real s_1751;
    Real s_1752;
    Real s_1754;
    Real s_1755;
    Real s_1762;
    Real s_1765;
    Real s_1768;
    Real s_1776;
    Real s_1777;
    Real s_1791;
    Real s_1792;
    Real s_1799;
    Real s_1804;
    Real s_1806;
    Real s_1807;
    Real s_1835;
    Real s_2072;
    Real s_2093;
    Real e_0001;
    Real e_0002;
    Real e_0003;
    Real e_0005;
    Real e_0006;
    Real e_0008;
    Real e_0010;
    Real e_0012;
    Real e_0020;
    Real e_0022;
    Real e_0030;
    Real e_0031;
    Real e_0032;
    Real e_0033;
    Real e_0034;
    Real e_0035;
    Real e_0036;
    Real e_0037;
    Real e_0038;
    Real e_0039;
    Real e_0040;
    Real e_0041;
    Real e_0042;
    Real e_0043;
    Real e_0044;
    Real e_0045;
    Real e_0046;
    Real e_0048;
    Real e_0051;
    Real e_0052;
    Real e_0053;
    Real e_0054;
    Real e_0060;
    Real e_0061;
    Real e_0062;
    Real e_0063;
    Real e_0064;
    Real e_0065;
    Real e_0071;
    Real e_0074;
    Real e_0076;
    Real e_0077;
    Real e_0078;
    Real e_0079;
    Real e_0080;
    Real e_0081;
    Real e_0082;
    Real e_0083;
    Real e_0084;
    Real e_0085;
    Real e_0094;
    Real e_0099;
    Real e_0100;
    Real e_0103;
    Real e_0110;
    Real e_0116;
    Real e_0125;
    Real e_0134;
    Real e_0135;
    Real e_0137;
    Real e_0138;
    Real e_0139;
    Real e_0144;
    Real e_0145;
    Real e_0146;
    Real e_0149;
    Real e_0150;
    Real e_0151;
    Real e_0152;
    Real e_0162;
    Real e_0167;
    Real e_0168;
    Real e_0175;
    Real e_0177;
    Real e_0183;
    Real e_0184;
    Real e_0185;
    Real e_0186;
    Real e_0188;
    Real e_0221;
    Real e_0223;
    Real e_0225;
    Real e_0238;
    Real e_0246;
    Real e_0253;
    Real e_0254;
    Real e_0260;
    Real e_0263;
    Real e_0264;
    Real e_0273;
    Real e_0274;
    Real e_0275;
    Real e_0276;
    Real e_0277;
    Real e_0278;
    Real e_0279;
    Real e_0280;
    Real e_0281;
    Real e_0282;
    Real e_0291;
    Real e_0292;
    Real e_0300;
    Real e_0313;
    Real e_0318;
    Real e_0323;
    Real e_0324;
    Real e_0326;
    Real e_0327;
    Real e_0328;
    Real e_0330;
    Real e_0331;
    Real e_0332;
    Real e_0342;
    Real e_0368;
    Real e_0372;
    Real e_0373;
    Real e_0374;
    Real e_0375;
    Real e_0376;
    Real e_0377;
    Real e_0378;
    Real e_0389;
    Real e_0391;
    Real e_0395;
    Real e_0403;
    Real e_0404;
    Real e_0405;
    Real e_0406;
    Real e_0416;
    Real e_0425;
    Real e_0426;
    Real e_0427;
    Real e_0428;
    Real e_0429;
    Real e_0431;
    Real e_0432;
    Real e_0433;
    Real e_0435;
    Real e_0436;
    Real e_0439;
    Real e_0451;
    Real e_0466;
    Real e_0514;
    Real e_0515;
    Real e_0516;
    Real e_0519;
    Real e_0531;
    Real e_0540;
    Real e_0541;
    Real e_0544;
    Real e_0554;
    Real e_0559;
    Real e_0561;
    Real e_0567;
    Real e_0572;
    Real e_0577;
    Real e_0578;
    Real e_0579;
    Real e_0580;
    Real e_0586;
    Real e_0605;
    Real e_0606;
    Real e_0607;
    Real e_0608;
    Real e_0609;
    Real e_0610;
    Real e_0611;
    Real e_0612;
    Real e_0641;
    Real e_0657;
    Real e_0682;
    Real e_0691;
    Real e_0717;
    Real e_0719;
    Real e_0720;
    Real e_0727;
    Real e_0728;
    Real e_0729;
    Real e_0730;
    Real e_0731;
    Real e_0732;
    Real e_0734;
    Real e_0735;
    Real e_0736;
    Real e_0742;
    Real e_0743;
    Real e_0746;
    Real e_0750;
    Real e_0757;
    Real e_0765;
    Real e_0768;
    Real e_0770;
    Real e_0771;
    Real e_0774;
    Real e_0775;
    Real e_0776;
    Real e_0791;
    Real e_0793;
    Real e_0795;
    Real e_0796;
    Real e_0798;
    Real e_0799;
    Real e_0803;
    Real e_0804;
    Real e_0805;
    Real e_0813;
    Real e_0815;
    Real e_0818;
    Real e_0819;
    Real e_0821;
    Real e_0822;
    Real e_0823;
    Real e_0825;
    Real e_0826;
    Real e_0827;
    Real e_0828;
    Real e_0839;
    Real e_0848;
    Real e_0866;
    Real e_0867;
    Real e_0868;
    Real e_0869;
    Real e_0870;
    Real e_0871;
    Real e_0872;
    Real e_0873;
    Real e_0875;
    Real e_0876;
    Real e_0893;
    Real e_0894;
    Real e_0896;
    Real e_0897;
    Real e_0903;
    Real e_0911;
    Real e_0918;
    Real e_0919;
    Real e_0925;
    Real e_0926;
    Real e_0928;
    Real e_0931;
    Real e_0941;
    Real e_0951;
    Real e_0953;
    Real e_0960;
    Real e_0962;
    Real e_0964;
    Real e_0974;
    Real e_0975;
    Real e_0977;
    Real e_0978;
    Real e_0979;
    Real e_0986;
    Real e_0987;
    Real e_0988;
    Real e_0990;
    Real e_0991;
    Real e_0993;
    Real e_0994;
    Real e_1004;
    Real e_1005;
    Real e_1006;
    Real e_1010;
    Real e_1014;
    Real e_1015;
    Real e_1019;
    Real e_1023;
    Real e_1026;
    Real e_1027;
    Real e_1028;
    Real e_1029;
    Real e_1034;
    Real e_1045;
    Real e_1086;
    Real e_1105;
    Real e_1106;
    Real e_1108;
    Real e_1109;
    Real e_1110;
    Real e_1125;
    Real e_1126;
    Real e_1127;
    Real e_1128;
    Real e_1129;
    Real e_1130;
    Real e_1136;
    Real e_1137;
    Real e_1141;
    Real e_1149;
    Real e_1150;
    Real e_1160;
    Real e_1167;
    Real e_1168;
    Real e_1169;
    Real e_1170;
    Real e_1172;
    Real e_1184;
    Real e_1185;
    Real e_1186;
    Real e_1188;
    Real e_1189;
    Real e_1196;
    Real e_1200;
    Real e_1201;
    Real e_1202;
    Real e_1203;
    Real e_1205;
    Real e_1206;
    Real e_1207;
    Real e_1210;
    Real e_1226;
    Real e_1227;
    Real e_1232;
    Real e_1233;
    Real e_1234;
    Real e_1238;
    Real e_1239;
    Real e_1240;
    Real e_1241;
    Real e_1242;
    Real e_1243;
    Real e_1244;
    Real e_1247;
    Real e_1248;
    Real e_1249;
    Real e_1250;
    Real e_1251;
    Real e_1252;
    Real e_1253;
    Real e_1254;
    Real e_1256;
    Real e_1257;
    Real e_1258;
    Real e_1259;
    Real e_1262;
    Real e_1263;
    Real e_1264;
    Real e_1271;
    Real e_1272;
    Real e_1273;
    Real e_1275;
    Real e_1276;
    Real e_1277;
    Real e_1291;
    Real e_1298;
    Real e_1312;
    Real e_1313;
    Real e_1315;
    Real e_1326;
    Real e_1334;
    Real e_1335;
    Real e_1339;
    Real e_1340;
    Real e_1341;
    Real e_1355;
    Real e_1366;
    Real e_1367;
    Real e_1369;
    Real e_1373;
    Real e_1374;
    Real e_1376;
    Real e_1377;

initial equation
    s_0003 = 0.1;
    s_0004 = 0.1;
    s_0017 = 0.1;
    s_0018 = 0.1;
    s_0028 = 0.1;
    s_0029 = 0.1;
    s_0032 = 0.1;
    s_0033 = 0.1;
    s_0040 = 0.1;
    s_0041 = 0.1;
    s_0042 = 0.1;
    s_0043 = 0.1;
    s_0044 = 0.1;
    s_0045 = 0.1;
    s_0046 = 0.1;
    s_0047 = 0.1;
    s_0049 = 0.1;
    s_0050 = 0.1;
    s_0051 = 0.1;
    s_0052 = 0.1;
    s_0073 = 0.1;
    s_0075 = 0.1;
    s_0096 = 0.1;
    s_0097 = 0.1;
    s_0098 = 0.1;
    s_0099 = 0.1;
    s_0116 = 0.1;
    s_0119 = 0.1;
    s_0121 = 0.1;
    s_0123 = 0.1;
    s_0128 = 0.1;
    s_0133 = 0.1;
    s_0147 = 0.1;
    s_0148 = 0.1;
    s_0149 = 0.1;
    s_0155 = 0.1;
    s_0160 = 0.1;
    s_0162 = 0.1;
    s_0191 = 0.1;
    s_0193 = 0.1;
    s_0194 = 0.1;
    s_0195 = 0.1;
    s_0201 = 0.1;
    s_0203 = 0.1;
    s_0214 = 0.1;
    s_0217 = 0.1;
    s_0218 = 0.1;
    s_0226 = 0.1;
    s_0229 = 0.1;
    s_0231 = 0.1;
    s_0232 = 0.1;
    s_0233 = 0.1;
    s_0237 = 0.1;
    s_0252 = 0.1;
    s_0255 = 0.1;
    s_0262 = 0.1;
    s_0263 = 0.1;
    s_0265 = 0.1;
    s_0266 = 0.1;
    s_0267 = 0.1;
    s_0269 = 0.1;
    s_0270 = 0.1;
    s_0271 = 0.1;
    s_0272 = 0.1;
    s_0276 = 0.1;
    s_0277 = 0.1;
    s_0282 = 0.1;
    s_0283 = 0.1;
    s_0289 = 0.1;
    s_0290 = 0.1;
    s_0293 = 0.1;
    s_0295 = 0.1;
    s_0297 = 0.1;
    s_0299 = 0.1;
    s_0303 = 0.1;
    s_0304 = 0.1;
    s_0305 = 0.1;
    s_0306 = 0.1;
    s_0307 = 0.1;
    s_0308 = 0.1;
    s_0310 = 0.1;
    s_0311 = 0.1;
    s_0312 = 0.1;
    s_0313 = 0.1;
    s_0316 = 0.1;
    s_0318 = 0.1;
    s_0325 = 0.1;
    s_0328 = 0.1;
    s_0330 = 0.1;
    s_0331 = 0.1;
    s_0332 = 0.1;
    s_0333 = 0.1;
    s_0334 = 0.1;
    s_0335 = 0.1;
    s_0336 = 0.1;
    s_0337 = 0.1;
    s_0341 = 0.1;
    s_0342 = 0.1;
    s_0343 = 0.1;
    s_0344 = 0.1;
    s_0345 = 0.1;
    s_0346 = 0.1;
    s_0347 = 0.1;
    s_0352 = 0.1;
    s_0354 = 0.1;
    s_0359 = 0.1;
    s_0360 = 0.1;
    s_0361 = 0.1;
    s_0362 = 0.1;
    s_0364 = 0.1;
    s_0367 = 0.1;
    s_0368 = 0.1;
    s_0369 = 0.1;
    s_0370 = 0.1;
    s_0371 = 0.1;
    s_0372 = 0.1;
    s_0376 = 0.1;
    s_0377 = 0.1;
    s_0378 = 0.1;
    s_0380 = 0.1;
    s_0381 = 0.1;
    s_0384 = 0.1;
    s_0391 = 0.1;
    s_0393 = 0.1;
    s_0395 = 0.1;
    s_0397 = 0.1;
    s_0405 = 0.1;
    s_0408 = 0.1;
    s_0411 = 0.1;
    s_0412 = 0.1;
    s_0420 = 0.1;
    s_0421 = 0.1;
    s_0435 = 0.1;
    s_0445 = 0.1;
    s_0446 = 0.1;
    s_0451 = 0.1;
    s_0453 = 1.0;
    s_0454 = 0.1;
    s_0457 = 0.1;
    s_0467 = 0.1;
    s_0470 = 0.1;
    s_0474 = 0.1;
    s_0476 = 0.1;
    s_0479 = 0.1;
    s_0480 = 0.1;
    s_0481 = 0.1;
    s_0488 = 0.1;
    s_0493 = 0.1;
    s_0497 = 0.1;
    s_0499 = 1.0;
    s_0502 = 0.1;
    s_0510 = 0.1;
    s_0512 = 0.1;
    s_0513 = 0.1;
    s_0520 = 0.1;
    s_0522 = 1.0;
    s_0526 = 0.1;
    s_0530 = 0.1;
    s_0533 = 0.1;
    s_0536 = 0.1;
    s_0539 = 0.1;
    s_0542 = 0.1;
    s_0543 = 0.1;
    s_0545 = 0.0;
    s_0546 = 0.1;
    s_0548 = 1.0;
    s_0555 = 0.1;
    s_0565 = 0.1;
    s_0574 = 0.1;
    s_0575 = 0.1;
    s_0579 = 0.1;
    s_0581 = 1.0;
    s_0585 = 0.1;
    s_0599 = 0.1;
    s_0600 = 0.1;
    s_0603 = 0.1;
    s_0611 = 0.1;
    s_0620 = 0.1;
    s_0621 = 0.1;
    s_0622 = 0.1;
    s_0627 = 0.1;
    s_0653 = 0.1;
    s_0654 = 0.1;
    s_0657 = 0.1;
    s_0659 = 1.0;
    s_0663 = 0.1;
    s_0671 = 0.1;
    s_0675 = 0.1;
    s_0704 = 0.1;
    s_0721 = 0.1;
    s_0726 = 0.1;
    s_0731 = 0.1;
    s_0732 = 0.1;
    s_0737 = 0.1;
    s_0738 = 0.1;
    s_0754 = 0.1;
    s_0755 = 0.1;
    s_0760 = 0.1;
    s_0765 = 0.1;
    s_0766 = 0.1;
    s_0767 = 0.1;
    s_0768 = 0.1;
    s_0772 = 0.1;
    s_0779 = 0.1;
    s_0783 = 0.1;
    s_0785 = 0.1;
    s_0789 = 0.1;
    s_0790 = 0.1;
    s_0795 = 0.1;
    s_0802 = 0.1;
    s_0805 = 0.1;
    s_0807 = 0.1;
    s_0810 = 0.1;
    s_0812 = 0.1;
    s_0813 = 0.1;
    s_0826 = 0.1;
    s_0838 = 0.1;
    s_0840 = 1.0;
    s_0841 = 0.1;
    s_0843 = 1.0;
    s_0859 = 0.1;
    s_0860 = 0.1;
    s_0861 = 0.1;
    s_0862 = 0.1;
    s_0863 = 0.1;
    s_0867 = 0.1;
    s_0875 = 0.1;
    s_0896 = 0.1;
    s_0903 = 0.1;
    s_0910 = 0.1;
    s_0913 = 0.1;
    s_0920 = 0.1;
    s_0929 = 0.1;
    s_0936 = 0.1;
    s_0937 = 0.1;
    s_0941 = 0.1;
    s_0942 = 0.1;
    s_0945 = 0.1;
    s_0971 = 0.1;
    s_0976 = 0.1;
    s_0979 = 0.1;
    s_0984 = 0.1;
    s_0991 = 0.1;
    s_0994 = 0.1;
    s_0998 = 0.1;
    s_1005 = 0.1;
    s_1006 = 0.1;
    s_1009 = 0.1;
    s_1017 = 0.1;
    s_1018 = 0.1;
    s_1019 = 0.1;
    s_1020 = 0.1;
    s_1021 = 0.1;
    s_1022 = 0.1;
    s_1027 = 0.1;
    s_1028 = 0.1;
    s_1033 = 0.1;
    s_1038 = 0.1;
    s_1040 = 0.1;
    s_1041 = 0.1;
    s_1061 = 0.1;
    s_1068 = 0.1;
    s_1072 = 0.1;
    s_1075 = 0.1;
    s_1081 = 0.1;
    s_1082 = 0.1;
    s_1083 = 0.1;
    s_1095 = 0.1;
    s_1098 = 0.1;
    s_1099 = 0.1;
    s_1100 = 0.1;
    s_1101 = 0.1;
    s_1105 = 0.1;
    s_1106 = 0.1;
    s_1109 = 0.1;
    s_1110 = 0.1;
    s_1112 = 0.1;
    s_1113 = 0.1;
    s_1119 = 0.1;
    s_1127 = 0.1;
    s_1131 = 0.1;
    s_1138 = 0.1;
    s_1141 = 0.1;
    s_1151 = 0.1;
    s_1155 = 0.1;
    s_1170 = 0.1;
    s_1179 = 0.1;
    s_1185 = 0.1;
    s_1189 = 0.1;
    s_1193 = 0.1;
    s_1204 = 0.1;
    s_1211 = 0.1;
    s_1212 = 0.1;
    s_1214 = 1.0;
    s_1216 = 0.1;
    s_1217 = 0.1;
    s_1218 = 0.1;
    s_1239 = 0.1;
    s_1240 = 0.1;
    s_1242 = 0.1;
    s_1248 = 0.1;
    s_1250 = 0.0;
    s_1255 = 0.1;
    s_1257 = 1.0;
    s_1258 = 0.1;
    s_1259 = 0.1;
    s_1260 = 0.1;
    s_1261 = 0.1;
    s_1263 = 1.0;
    s_1264 = 0.1;
    s_1265 = 0.1;
    s_1274 = 0.1;
    s_1277 = 0.1;
    s_1278 = 0.1;
    s_1287 = 0.1;
    s_1302 = 0.1;
    s_1303 = 0.1;
    s_1304 = 0.1;
    s_1312 = 0.1;
    s_1315 = 0.1;
    s_1316 = 0.1;
    s_1318 = 0.1;
    s_1321 = 0.1;
    s_1322 = 0.1;
    s_1327 = 0.1;
    s_1329 = 0.1;
    s_1331 = 1.0;
    s_1333 = 0.1;
    s_1334 = 0.1;
    s_1335 = 0.1;
    s_1336 = 0.1;
    s_1340 = 0.1;
    s_1358 = 0.1;
    s_1362 = 0.1;
    s_1363 = 0.1;
    s_1364 = 0.1;
    s_1367 = 0.1;
    s_1372 = 0.1;
    s_1374 = 1.0;
    s_1390 = 0.1;
    s_1391 = 0.1;
    s_1394 = 0.1;
    s_1397 = 0.1;
    s_1399 = 0.1;
    s_1406 = 0.1;
    s_1407 = 0.1;
    s_1411 = 0.1;
    s_1412 = 0.1;
    s_1413 = 0.1;
    s_1429 = 0.1;
    s_1430 = 0.1;
    s_1432 = 1.0;
    s_1435 = 0.1;
    s_1437 = 0.1;
    s_1476 = 0.1;
    s_1477 = 0.1;
    s_1484 = 0.1;
    s_1491 = 0.1;
    s_1492 = 0.1;
    s_1493 = 0.1;
    s_1494 = 0.1;
    s_1496 = 1.0;
    s_1497 = 0.1;
    s_1508 = 0.1;
    s_1511 = 0.1;
    s_1512 = 0.1;
    s_1522 = 0.1;
    s_1530 = 0.1;
    s_1531 = 0.1;
    s_1537 = 0.1;
    s_1544 = 0.1;
    s_1546 = 0.1;
    s_1550 = 0.1;
    s_1551 = 0.1;
    s_1552 = 0.1;
    s_1558 = 0.1;
    s_1561 = 0.1;
    s_1571 = 0.1;
    s_1574 = 0.1;
    s_1577 = 0.1;
    s_1578 = 0.1;
    s_1595 = 0.1;
    s_1599 = 0.1;
    s_1609 = 0.1;
    s_1611 = 1.0;
    s_1612 = 0.1;
    s_1632 = 0.1;
    s_1643 = 0.1;
    s_1644 = 0.1;
    s_1668 = 0.1;
    s_1670 = 0.1;
    s_1672 = 0.1;
    s_1674 = 0.1;
    s_1676 = 0.1;
    s_1680 = 0.1;
    s_1690 = 0.1;
    s_1719 = 0.1;
    s_1725 = 0.1;
    s_1731 = 0.1;
    s_1732 = 0.1;
    s_1733 = 0.1;
    s_1734 = 0.1;
    s_1735 = 0.1;
    s_1736 = 0.1;
    s_1742 = 0.1;
    s_1745 = 0.1;
    s_1750 = 0.1;
    s_1751 = 0.1;
    s_1752 = 0.1;
    s_1754 = 0.1;
    s_1755 = 0.1;
    s_1762 = 0.1;
    s_1765 = 0.1;
    s_1768 = 0.1;
    s_1776 = 0.1;
    s_1777 = 0.1;
    s_1791 = 0.1;
    s_1792 = 0.1;
    s_1799 = 0.1;
    s_1804 = 0.1;
    s_1806 = 1.0;
    s_1807 = 0.0;
    s_1835 = 0.0;
    s_2072 = 0.0;
    s_2093 = 0.0;
    e_0001 = 0.001;
    e_0002 = 0.001;
    e_0003 = 0.001;
    e_0005 = 0.001;
    e_0006 = 0.001;
    e_0008 = 0.001;
    e_0010 = 0.001;
    e_0012 = 0.001;
    e_0020 = 0.001;
    e_0022 = 0.001;
    e_0030 = 0.001;
    e_0031 = 0.001;
    e_0032 = 0.001;
    e_0033 = 0.001;
    e_0034 = 0.001;
    e_0035 = 0.001;
    e_0036 = 0.001;
    e_0037 = 0.001;
    e_0038 = 0.001;
    e_0039 = 0.001;
    e_0040 = 0.001;
    e_0041 = 0.001;
    e_0042 = 0.001;
    e_0043 = 0.001;
    e_0044 = 0.001;
    e_0045 = 0.001;
    e_0046 = 0.001;
    e_0048 = 0.001;
    e_0051 = 0.001;
    e_0052 = 0.001;
    e_0053 = 0.001;
    e_0054 = 0.001;
    e_0060 = 0.001;
    e_0061 = 0.001;
    e_0062 = 0.001;
    e_0063 = 0.001;
    e_0064 = 0.001;
    e_0065 = 0.001;
    e_0071 = 0.001;
    e_0074 = 0.001;
    e_0076 = 0.001;
    e_0077 = 0.001;
    e_0078 = 0.001;
    e_0079 = 0.001;
    e_0080 = 0.001;
    e_0081 = 0.001;
    e_0082 = 0.001;
    e_0083 = 0.001;
    e_0084 = 0.001;
    e_0085 = 0.001;
    e_0094 = 0.001;
    e_0099 = 0.001;
    e_0100 = 0.001;
    e_0103 = 0.001;
    e_0110 = 0.001;
    e_0116 = 0.001;
    e_0125 = 0.001;
    e_0134 = 0.001;
    e_0135 = 0.001;
    e_0137 = 0.001;
    e_0138 = 0.001;
    e_0139 = 0.001;
    e_0144 = 0.001;
    e_0145 = 0.001;
    e_0146 = 0.001;
    e_0149 = 0.001;
    e_0150 = 0.001;
    e_0151 = 0.001;
    e_0152 = 0.001;
    e_0162 = 0.001;
    e_0167 = 0.001;
    e_0168 = 0.001;
    e_0175 = 0.001;
    e_0177 = 0.001;
    e_0183 = 0.001;
    e_0184 = 0.001;
    e_0185 = 0.001;
    e_0186 = 0.001;
    e_0188 = 0.001;
    e_0221 = 0.001;
    e_0223 = 0.001;
    e_0225 = 0.001;
    e_0238 = 0.001;
    e_0246 = 0.001;
    e_0253 = 0.001;
    e_0254 = 0.001;
    e_0260 = 0.001;
    e_0263 = 0.001;
    e_0264 = 0.001;
    e_0273 = 0.001;
    e_0274 = 0.001;
    e_0275 = 0.001;
    e_0276 = 0.001;
    e_0277 = 0.001;
    e_0278 = 0.001;
    e_0279 = 0.001;
    e_0280 = 0.001;
    e_0281 = 0.001;
    e_0282 = 0.001;
    e_0291 = 0.001;
    e_0292 = 0.001;
    e_0300 = 0.001;
    e_0313 = 0.001;
    e_0318 = 0.001;
    e_0323 = 0.001;
    e_0324 = 0.001;
    e_0326 = 0.001;
    e_0327 = 0.001;
    e_0328 = 0.001;
    e_0330 = 0.001;
    e_0331 = 0.001;
    e_0332 = 0.001;
    e_0342 = 0.001;
    e_0368 = 0.001;
    e_0372 = 0.001;
    e_0373 = 0.001;
    e_0374 = 0.001;
    e_0375 = 0.001;
    e_0376 = 0.001;
    e_0377 = 0.001;
    e_0378 = 0.001;
    e_0389 = 0.001;
    e_0391 = 0.001;
    e_0395 = 0.001;
    e_0403 = 0.001;
    e_0404 = 0.001;
    e_0405 = 0.001;
    e_0406 = 0.001;
    e_0416 = 0.001;
    e_0425 = 0.001;
    e_0426 = 0.001;
    e_0427 = 0.001;
    e_0428 = 0.001;
    e_0429 = 0.001;
    e_0431 = 0.001;
    e_0432 = 0.001;
    e_0433 = 0.001;
    e_0435 = 0.001;
    e_0436 = 0.001;
    e_0439 = 0.001;
    e_0451 = 0.001;
    e_0466 = 0.001;
    e_0514 = 0.001;
    e_0515 = 0.001;
    e_0516 = 0.001;
    e_0519 = 0.001;
    e_0531 = 0.001;
    e_0540 = 0.001;
    e_0541 = 0.001;
    e_0544 = 0.001;
    e_0554 = 0.001;
    e_0559 = 0.001;
    e_0561 = 0.001;
    e_0567 = 0.001;
    e_0572 = 0.001;
    e_0577 = 0.001;
    e_0578 = 0.001;
    e_0579 = 0.001;
    e_0580 = 0.001;
    e_0586 = 0.001;
    e_0605 = 0.001;
    e_0606 = 0.001;
    e_0607 = 0.001;
    e_0608 = 0.001;
    e_0609 = 0.001;
    e_0610 = 0.001;
    e_0611 = 0.001;
    e_0612 = 0.001;
    e_0641 = 0.001;
    e_0657 = 0.001;
    e_0682 = 0.001;
    e_0691 = 0.001;
    e_0717 = 0.001;
    e_0719 = 0.001;
    e_0720 = 0.001;
    e_0727 = 0.001;
    e_0728 = 0.001;
    e_0729 = 0.001;
    e_0730 = 0.001;
    e_0731 = 0.001;
    e_0732 = 0.001;
    e_0734 = 0.001;
    e_0735 = 0.001;
    e_0736 = 0.001;
    e_0742 = 0.001;
    e_0743 = 0.001;
    e_0746 = 0.001;
    e_0750 = 0.001;
    e_0757 = 0.001;
    e_0765 = 0.001;
    e_0768 = 0.001;
    e_0770 = 0.001;
    e_0771 = 0.001;
    e_0774 = 0.001;
    e_0775 = 0.001;
    e_0776 = 0.001;
    e_0791 = 0.001;
    e_0793 = 0.001;
    e_0795 = 0.001;
    e_0796 = 0.001;
    e_0798 = 0.001;
    e_0799 = 0.001;
    e_0803 = 0.001;
    e_0804 = 0.001;
    e_0805 = 0.001;
    e_0813 = 0.001;
    e_0815 = 0.001;
    e_0818 = 0.001;
    e_0819 = 0.001;
    e_0821 = 0.001;
    e_0822 = 0.001;
    e_0823 = 0.001;
    e_0825 = 0.001;
    e_0826 = 0.001;
    e_0827 = 0.001;
    e_0828 = 0.001;
    e_0839 = 0.001;
    e_0848 = 0.001;
    e_0866 = 0.001;
    e_0867 = 0.001;
    e_0868 = 0.001;
    e_0869 = 0.001;
    e_0870 = 0.001;
    e_0871 = 0.001;
    e_0872 = 0.001;
    e_0873 = 0.001;
    e_0875 = 0.001;
    e_0876 = 0.001;
    e_0893 = 0.001;
    e_0894 = 0.001;
    e_0896 = 0.001;
    e_0897 = 0.001;
    e_0903 = 0.001;
    e_0911 = 0.001;
    e_0918 = 0.001;
    e_0919 = 0.001;
    e_0925 = 0.001;
    e_0926 = 0.001;
    e_0928 = 0.001;
    e_0931 = 0.001;
    e_0941 = 0.001;
    e_0951 = 0.001;
    e_0953 = 0.001;
    e_0960 = 0.001;
    e_0962 = 0.001;
    e_0964 = 0.001;
    e_0974 = 0.001;
    e_0975 = 0.001;
    e_0977 = 0.001;
    e_0978 = 0.001;
    e_0979 = 0.001;
    e_0986 = 0.001;
    e_0987 = 0.001;
    e_0988 = 0.001;
    e_0990 = 0.001;
    e_0991 = 0.001;
    e_0993 = 0.001;
    e_0994 = 0.001;
    e_1004 = 0.001;
    e_1005 = 0.001;
    e_1006 = 0.001;
    e_1010 = 0.001;
    e_1014 = 0.001;
    e_1015 = 0.001;
    e_1019 = 0.001;
    e_1023 = 0.001;
    e_1026 = 0.001;
    e_1027 = 0.001;
    e_1028 = 0.001;
    e_1029 = 0.001;
    e_1034 = 0.001;
    e_1045 = 0.001;
    e_1086 = 0.001;
    e_1105 = 0.001;
    e_1106 = 0.001;
    e_1108 = 0.001;
    e_1109 = 0.001;
    e_1110 = 0.001;
    e_1125 = 0.001;
    e_1126 = 0.001;
    e_1127 = 0.001;
    e_1128 = 0.001;
    e_1129 = 0.001;
    e_1130 = 0.001;
    e_1136 = 0.001;
    e_1137 = 0.001;
    e_1141 = 0.001;
    e_1149 = 0.001;
    e_1150 = 0.001;
    e_1160 = 0.001;
    e_1167 = 0.001;
    e_1168 = 0.001;
    e_1169 = 0.001;
    e_1170 = 0.001;
    e_1172 = 0.001;
    e_1184 = 0.001;
    e_1185 = 0.001;
    e_1186 = 0.001;
    e_1188 = 0.001;
    e_1189 = 0.001;
    e_1196 = 0.001;
    e_1200 = 0.001;
    e_1201 = 0.001;
    e_1202 = 0.001;
    e_1203 = 0.001;
    e_1205 = 0.001;
    e_1206 = 0.001;
    e_1207 = 0.001;
    e_1210 = 0.001;
    e_1226 = 0.001;
    e_1227 = 0.001;
    e_1232 = 0.001;
    e_1233 = 0.001;
    e_1234 = 0.001;
    e_1238 = 0.001;
    e_1239 = 0.001;
    e_1240 = 0.001;
    e_1241 = 0.001;
    e_1242 = 0.001;
    e_1243 = 0.001;
    e_1244 = 0.001;
    e_1247 = 0.001;
    e_1248 = 0.001;
    e_1249 = 0.001;
    e_1250 = 0.001;
    e_1251 = 0.001;
    e_1252 = 0.001;
    e_1253 = 0.001;
    e_1254 = 0.001;
    e_1256 = 0.001;
    e_1257 = 0.001;
    e_1258 = 0.001;
    e_1259 = 0.001;
    e_1262 = 0.001;
    e_1263 = 0.001;
    e_1264 = 0.001;
    e_1271 = 0.001;
    e_1272 = 0.001;
    e_1273 = 0.001;
    e_1275 = 0.001;
    e_1276 = 0.001;
    e_1277 = 0.001;
    e_1291 = 0.001;
    e_1298 = 0.001;
    e_1312 = 0.001;
    e_1313 = 0.001;
    e_1315 = 0.001;
    e_1326 = 0.001;
    e_1334 = 0.001;
    e_1335 = 0.001;
    e_1339 = 0.001;
    e_1340 = 0.001;
    e_1341 = 0.001;
    e_1355 = 0.001;
    e_1366 = 0.001;
    e_1367 = 0.001;
    e_1369 = 0.001;
    e_1373 = 0.001;
    e_1374 = 0.001;
    e_1376 = 0.001;
    e_1377 = 0.001;

equation

    der(s_0003) = (cell * Vmax_0 * (s_0004 - s_0003 / Keq_0) / Km0004_0 / (1 + s_0004 / Km0004_0 + 1 + s_0003 / Km0003_0 - 1)) - (cell * Vmax_394 * s_0003 / Km0003_394 / (1 + s_0003 / Km0003_394));
    der(s_0004) = (cell * Vmax_54 * (s_0310 - s_0004 / Keq_54) / Km0310_54 / (1 + s_0310 / Km0310_54 + 1 + s_0004 / Km0004_54 - 1)) - (cell * Vmax_0 * (s_0004 - s_0003 / Keq_0) / Km0004_0 / (1 + s_0004 / Km0004_0 + 1 + s_0003 / Km0003_0 - 1));
    der(s_0017) = (cell * Vmax_218 * (s_0042 * s_1336 - s_0017 * s_1335 / Keq_218) / (Km0042_218 * Km1336_218) / ((1 + s_0042 / Km0042_218) * (1 + s_1336 / Km1336_218) + (1 + s_0017 / Km0017_218) * (1 + s_1335 / Km1335_218) - 1)) - (cell * Vmax_145 * (s_0017 - s_0282 / Keq_145) / Km0017_145 / (1 + s_0017 / Km0017_145 + 1 + s_0282 / Km0282_145 - 1));
    der(s_0018) = (cell * Vmax_219 * (s_0041 * s_1336 - s_0018 * s_1335 / Keq_219) / (Km0041_219 * Km1336_219) / ((1 + s_0041 / Km0041_219) * (1 + s_1336 / Km1336_219) + (1 + s_0018 / Km0018_219) * (1 + s_1335 / Km1335_219) - 1)) - (cell * Vmax_146 * (s_0018 - s_0051 / Keq_146) / Km0018_146 / (1 + s_0018 / Km0018_146 + 1 + s_0051 / Km0051_146 - 1));
    der(s_0028) = (cell * Vmax_51 * (s_0304 * s_1336 - s_0028 * s_1335 / Keq_51) / (Km0304_51 * Km1336_51) / ((1 + s_0304 / Km0304_51) * (1 + s_1336 / Km1336_51) + (1 + s_0028 / Km0028_51) * (1 + s_1335 / Km1335_51) - 1)) - (cell * Vmax_344 * (s_0028 * s_1735 - s_0397 * s_1734 / Keq_344) / (Km0028_344 * Km1735_344) / ((1 + s_0028 / Km0028_344) * (1 + s_1735 / Km1735_344) + (1 + s_0397 / Km0397_344) * (1 + s_1734 / Km1734_344) - 1)) - (cell * Vmax_348 * (s_0028 * s_1745 - s_0397 * s_1736 / Keq_348) / (Km0028_348 * Km1745_348) / ((1 + s_0028 / Km0028_348) * (1 + s_1745 / Km1745_348) + (1 + s_0397 / Km0397_348) * (1 + s_1736 / Km1736_348) - 1));
    der(s_0029) = (cell * Vmax_326 * (s_0214 * s_1334 - s_0029 * s_1333 / Keq_326) / (Km0214_326 * Km1334_326) / ((1 + s_0214 / Km0214_326) * (1 + s_1334 / Km1334_326) + (1 + s_0029 / Km0029_326) * (1 + s_1333 / Km1333_326) - 1)) - (cell * Vmax_179 * (s_0467 * s_0029 - s_0675 * s_0421 / Keq_179) / (Km0467_179 * Km0029_179) / ((1 + s_0467 / Km0467_179) * (1 + s_0029 / Km0029_179) + (1 + s_0675 / Km0675_179) * (1 + s_0421 / Km0421_179) - 1));
    der(s_0032) = (cell * Vmax_12 * (s_0203 * s_1336 - s_1335 * s_0032 / Keq_12) / (Km0203_12 * Km1336_12) / ((1 + s_0203 / Km0203_12) * (1 + s_1336 / Km1336_12) + (1 + s_1335 / Km1335_12) * (1 + s_0032 / Km0032_12) - 1)) - (cell * Vmax_261 * (s_0470 * s_0467 * s_0032 - s_0454 * s_0033 * s_0783 / Keq_261) / (Km0470_261 * Km0467_261 * Km0032_261) / ((1 + s_0470 / Km0470_261) * (1 + s_0467 / Km0467_261) * (1 + s_0032 / Km0032_261) + (1 + s_0454 / Km0454_261) * (1 + s_0033 / Km0033_261) * (1 + s_0783 / Km0783_261) - 1));
    der(s_0033) = (cell * Vmax_261 * (s_0470 * s_0467 * s_0032 - s_0454 * s_0033 * s_0783 / Keq_261) / (Km0470_261 * Km0467_261 * Km0032_261) / ((1 + s_0470 / Km0470_261) * (1 + s_0467 / Km0467_261) * (1 + s_0032 / Km0032_261) + (1 + s_0454 / Km0454_261) * (1 + s_0033 / Km0033_261) * (1 + s_0783 / Km0783_261) - 1)) - (cell * Vmax_260 * (s_0467 * s_0033 - s_0599 * s_0421 / Keq_260) / (Km0467_260 * Km0033_260) / ((1 + s_0467 / Km0467_260) * (1 + s_0033 / Km0033_260) + (1 + s_0599 / Km0599_260) * (1 + s_0421 / Km0421_260) - 1));
    der(s_0040) = (cell * Vmax_285 * (s_0344 * s_1072 * s_0467 - s_0040 * s_0421 * s_1430 / Keq_285) / (Km0344_285 * Km1072_285 * Km0467_285) / ((1 + s_0344 / Km0344_285) * (1 + s_1072 / Km1072_285) * (1 + s_0467 / Km0467_285) + (1 + s_0040 / Km0040_285) * (1 + s_0421 / Km0421_285) * (1 + s_1430 / Km1430_285) - 1)) - (cell * Vmax_95 * (s_0040 - s_0343 * s_0875 / Keq_95) / Km0040_95 / (1 + s_0040 / Km0040_95 + (1 + s_0343 / Km0343_95) * (1 + s_0875 / Km0875_95) - 1));
    der(s_0041) = (cell * Vmax_8 * (s_0232 * s_1531 - s_0041 * s_0543 / Keq_8) / (Km0232_8 * Km1531_8) / ((1 + s_0232 / Km0232_8) * (1 + s_1531 / Km1531_8) + (1 + s_0041 / Km0041_8) * (1 + s_0543 / Km0543_8) - 1)) - (cell * Vmax_219 * (s_0041 * s_1336 - s_0018 * s_1335 / Keq_219) / (Km0041_219 * Km1336_219) / ((1 + s_0041 / Km0041_219) * (1 + s_1336 / Km1336_219) + (1 + s_0018 / Km0018_219) * (1 + s_1335 / Km1335_219) - 1));
    der(s_0042) = (cell * Vmax_68 * (pow(s_1531, 2) - s_0042 * s_0543 / Keq_68) / pow(Km1531_68, 2) / (pow(1 + s_1531 / Km1531_68, 2) + (1 + s_0042 / Km0042_68) * (1 + s_0543 / Km0543_68) - 1)) - (cell * Vmax_218 * (s_0042 * s_1336 - s_0017 * s_1335 / Keq_218) / (Km0042_218 * Km1336_218) / ((1 + s_0042 / Km0042_218) * (1 + s_1336 / Km1336_218) + (1 + s_0017 / Km0017_218) * (1 + s_1335 / Km1335_218) - 1));
    der(s_0043) = (cell * Vmax_41 * (s_0391 * s_1334 - s_0043 * s_1333 / Keq_41) / (Km0391_41 * Km1334_41) / ((1 + s_0391 / Km0391_41) * (1 + s_1334 / Km1334_41) + (1 + s_0043 / Km0043_41) * (1 + s_1333 / Km1333_41) - 1)) - (cell * Vmax_28 * (s_0043 - s_0574 / Keq_28) / Km0043_28 / (1 + s_0043 / Km0043_28 + 1 + s_0574 / Km0574_28 - 1));
    der(s_0044) = (cell * Vmax_35 * (s_0293 * s_1334 - s_0044 * s_1333 / Keq_35) / (Km0293_35 * Km1334_35) / ((1 + s_0293 / Km0293_35) * (1 + s_1334 / Km1334_35) + (1 + s_0044 / Km0044_35) * (1 + s_1333 / Km1333_35) - 1)) - (cell * Vmax_29 * (s_0044 - s_1668 / Keq_29) / Km0044_29 / (1 + s_0044 / Km0044_29 + 1 + s_1668 / Km1668_29 - 1));
    der(s_0045) = (cell * Vmax_36 * (s_0295 * s_1334 - s_0045 * s_1333 / Keq_36) / (Km0295_36 * Km1334_36) / ((1 + s_0295 / Km0295_36) * (1 + s_1334 / Km1334_36) + (1 + s_0045 / Km0045_36) * (1 + s_1333 / Km1333_36) - 1)) - (cell * Vmax_30 * (s_0045 - s_1670 / Keq_30) / Km0045_30 / (1 + s_0045 / Km0045_30 + 1 + s_1670 / Km1670_30 - 1));
    der(s_0046) = (cell * Vmax_37 * (s_0297 * s_1334 - s_0046 * s_1333 / Keq_37) / (Km0297_37 * Km1334_37) / ((1 + s_0297 / Km0297_37) * (1 + s_1334 / Km1334_37) + (1 + s_0046 / Km0046_37) * (1 + s_1333 / Km1333_37) - 1)) - (cell * Vmax_31 * (s_0046 - s_1674 / Keq_31) / Km0046_31 / (1 + s_0046 / Km0046_31 + 1 + s_1674 / Km1674_31 - 1));
    der(s_0047) = (cell * Vmax_38 * (s_0299 * s_1334 - s_0047 * s_1333 / Keq_38) / (Km0299_38 * Km1334_38) / ((1 + s_0299 / Km0299_38) * (1 + s_1334 / Km1334_38) + (1 + s_0047 / Km0047_38) * (1 + s_1333 / Km1333_38) - 1)) - (cell * Vmax_32 * (s_0047 - s_1672 / Keq_32) / Km0047_32 / (1 + s_0047 / Km0047_32 + 1 + s_1672 / Km1672_32 - 1));
    der(s_0049) = (cell * Vmax_39 * (s_0303 * s_1334 - s_0049 * s_1333 / Keq_39) / (Km0303_39 * Km1334_39) / ((1 + s_0303 / Km0303_39) * (1 + s_1334 / Km1334_39) + (1 + s_0049 / Km0049_39) * (1 + s_1333 / Km1333_39) - 1)) - (cell * Vmax_33 * (s_0049 - s_1676 / Keq_33) / Km0049_33 / (1 + s_0049 / Km0049_33 + 1 + s_1676 / Km1676_33 - 1));
    der(s_0050) = (cell * Vmax_40 * (s_0305 * s_1334 - s_0050 * s_1333 / Keq_40) / (Km0305_40 * Km1334_40) / ((1 + s_0305 / Km0305_40) * (1 + s_1334 / Km1334_40) + (1 + s_0050 / Km0050_40) * (1 + s_1333 / Km1333_40) - 1)) - (cell * Vmax_34 * (s_0050 - s_1680 / Keq_34) / Km0050_34 / (1 + s_0050 / Km0050_34 + 1 + s_1680 / Km1680_34 - 1));
    der(s_0051) = (cell * Vmax_146 * (s_0018 - s_0051 / Keq_146) / Km0018_146 / (1 + s_0018 / Km0018_146 + 1 + s_0051 / Km0051_146 - 1)) - (cell * Vmax_217 * (s_0051 * s_1095 - s_0233 * s_1119 / Keq_217) / (Km0051_217 * Km1095_217) / ((1 + s_0051 / Km0051_217) * (1 + s_1095 / Km1095_217) + (1 + s_0233 / Km0233_217) * (1 + s_1119 / Km1119_217) - 1));
    der(s_0052) = (cell * Vmax_142 * (s_1312 - s_0052 / Keq_142) / Km1312_142 / (1 + s_1312 / Km1312_142 + 1 + s_0052 / Km0052_142 - 1)) - (cell * Vmax_135 * (s_0052 * s_1732 - s_1394 * s_1731 / Keq_135) / (Km0052_135 * Km1732_135) / ((1 + s_0052 / Km0052_135) * (1 + s_1732 / Km1732_135) + (1 + s_1394 / Km1394_135) * (1 + s_1731 / Km1731_135) - 1)) - (cell * Vmax_143 * (s_0052 * s_1240 - s_1239 * s_1394 / Keq_143) / (Km0052_143 * Km1240_143) / ((1 + s_0052 / Km0052_143) * (1 + s_1240 / Km1240_143) + (1 + s_1239 / Km1239_143) * (1 + s_1394 / Km1394_143) - 1));
    der(s_0073) = (cell * Vmax_4 * (s_0119 * s_0533 - s_0397 * s_0073 / Keq_4) / (Km0119_4 * Km0533_4) / ((1 + s_0119 / Km0119_4) * (1 + s_0533 / Km0533_4) + (1 + s_0397 / Km0397_4) * (1 + s_0073 / Km0073_4) - 1)) - (cell * Vmax_118 * (s_0575 * s_0073 - s_0512 * s_0783 / Keq_118) / (Km0575_118 * Km0073_118) / ((1 + s_0575 / Km0575_118) * (1 + s_0073 / Km0073_118) + (1 + s_0512 / Km0512_118) * (1 + s_0783 / Km0783_118) - 1));
    der(s_0075) = (cell * Vmax_5 * (s_0121 * s_1411 - s_0397 * s_0075 / Keq_5) / (Km0121_5 * Km1411_5) / ((1 + s_0121 / Km0121_5) * (1 + s_1411 / Km1411_5) + (1 + s_0397 / Km0397_5) * (1 + s_0075 / Km0075_5) - 1)) - (cell * Vmax_117 * (s_0575 * s_0075 - s_0513 * s_0783 / Keq_117) / (Km0575_117 * Km0075_117) / ((1 + s_0575 / Km0575_117) * (1 + s_0075 / Km0075_117) + (1 + s_0513 / Km0513_117) * (1 + s_0783 / Km0783_117) - 1));
    der(s_0096) = (cell * Vmax_286 * (s_1278 - s_0096 / Keq_286) / Km1278_286 / (1 + s_1278 / Km1278_286 + 1 + s_0096 / Km0096_286 - 1)) - (cell * Vmax_208 * (s_0096 - s_0493 * s_0543 / Keq_208) / Km0096_208 / (1 + s_0096 / Km0096_208 + (1 + s_0493 / Km0493_208) * (1 + s_0543 / Km0543_208) - 1));
    der(s_0097) = (cell * Vmax_279 * (s_0098 - s_0097 / Keq_279) / Km0098_279 / (1 + s_0098 / Km0098_279 + 1 + s_0097 / Km0097_279 - 1)) - (cell * Vmax_1 * (s_0097 - s_0341 / Keq_1) / Km0097_1 / (1 + s_0097 / Km0097_1 + 1 + s_0341 / Km0341_1 - 1));
    der(s_0098) = (cell * Vmax_280 * (s_0099 - s_0783 * s_0098 / Keq_280) / Km0099_280 / (1 + s_0099 / Km0099_280 + (1 + s_0783 / Km0783_280) * (1 + s_0098 / Km0098_280) - 1)) - (cell * Vmax_279 * (s_0098 - s_0097 / Keq_279) / Km0098_279 / (1 + s_0098 / Km0098_279 + 1 + s_0097 / Km0097_279 - 1));
    der(s_0099) = (cell * Vmax_111 * (s_0467 * s_0360 - s_0783 * s_0099 / Keq_111) / (Km0467_111 * Km0360_111) / ((1 + s_0467 / Km0467_111) * (1 + s_0360 / Km0360_111) + (1 + s_0783 / Km0783_111) * (1 + s_0099 / Km0099_111) - 1)) - (cell * Vmax_280 * (s_0099 - s_0783 * s_0098 / Keq_280) / Km0099_280 / (1 + s_0099 / Km0099_280 + (1 + s_0783 / Km0783_280) * (1 + s_0098 / Km0098_280) - 1));
    der(s_0116) = (cell * Vmax_2 * (s_0913 * s_1531 - s_0543 * s_0116 / Keq_2) / (Km0913_2 * Km1531_2) / ((1 + s_0913 / Km0913_2) * (1 + s_1531 / Km1531_2) + (1 + s_0543 / Km0543_2) * (1 + s_0116 / Km0116_2) - 1)) - (cell * Vmax_3 * (s_0116 * s_1336 - s_0194 * s_1335 / Keq_3) / (Km0116_3 * Km1336_3) / ((1 + s_0116 / Km0116_3) * (1 + s_1336 / Km1336_3) + (1 + s_0194 / Km0194_3) * (1 + s_1335 / Km1335_3) - 1)) - (cell * Vmax_299 * (s_0116 * s_1333 * s_1362 - s_0543 * s_1334 * s_1530 * s_1430 / Keq_299) / (Km0116_299 * Km1333_299 * Km1362_299) / ((1 + s_0116 / Km0116_299) * (1 + s_1333 / Km1333_299) * (1 + s_1362 / Km1362_299) + (1 + s_0543 / Km0543_299) * (1 + s_1334 / Km1334_299) * (1 + s_1530 / Km1530_299) * (1 + s_1430 / Km1430_299) - 1)) - (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1));
    der(s_0119) = (cell * Vmax_181 * (s_0920 * s_0533 - s_0119 * s_0397 / Keq_181) / (Km0920_181 * Km0533_181) / ((1 + s_0920 / Km0920_181) * (1 + s_0533 / Km0533_181) + (1 + s_0119 / Km0119_181) * (1 + s_0397 / Km0397_181) - 1)) - (cell * Vmax_4 * (s_0119 * s_0533 - s_0397 * s_0073 / Keq_4) / (Km0119_4 * Km0533_4) / ((1 + s_0119 / Km0119_4) * (1 + s_0533 / Km0533_4) + (1 + s_0397 / Km0397_4) * (1 + s_0073 / Km0073_4) - 1));
    der(s_0121) = (cell * Vmax_180 * (s_0920 * s_1411 - s_0121 * s_0397 / Keq_180) / (Km0920_180 * Km1411_180) / ((1 + s_0920 / Km0920_180) * (1 + s_1411 / Km1411_180) + (1 + s_0121 / Km0121_180) * (1 + s_0397 / Km0397_180) - 1)) - (cell * Vmax_5 * (s_0121 * s_1411 - s_0397 * s_0075 / Keq_5) / (Km0121_5 * Km1411_5) / ((1 + s_0121 / Km0121_5) * (1 + s_1411 / Km1411_5) + (1 + s_0397 / Km0397_5) * (1 + s_0075 / Km0075_5) - 1));
    der(s_0123) = (cell * Vmax_16 * (s_0193 * pow(s_0861, 2) - pow(s_0862, 2) * s_0123 / Keq_16) / (Km0193_16 * pow(Km0861_16, 2)) / ((1 + s_0193 / Km0193_16) * pow(1 + s_0861 / Km0861_16, 2) + pow(1 + s_0862 / Km0862_16, 2) * (1 + s_0123 / Km0123_16) - 1)) - (cell * Vmax_6 * (s_0123 * s_1334 - s_0779 * s_1333 / Keq_6) / (Km0123_6 * Km1334_6) / ((1 + s_0123 / Km0123_6) * (1 + s_1334 / Km1334_6) + (1 + s_0779 / Km0779_6) * (1 + s_1333 / Km1333_6) - 1)) - (cell * Vmax_7 * (s_0123 * s_1334 - s_1028 * s_1333 / Keq_7) / (Km0123_7 * Km1334_7) / ((1 + s_0123 / Km0123_7) * (1 + s_1334 / Km1334_7) + (1 + s_1028 / Km1028_7) * (1 + s_1333 / Km1333_7) - 1));
    der(s_0128) = (cell * Vmax_222 * (s_1100 - s_0128 / Keq_222) / Km1100_222 / (1 + s_1100 / Km1100_222 + 1 + s_0128 / Km0128_222 - 1)) - (cell * Vmax_300 * (s_0128 * s_1336 - s_1335 * s_1155 / Keq_300) / (Km0128_300 * Km1336_300) / ((1 + s_0128 / Km0128_300) * (1 + s_1336 / Km1336_300) + (1 + s_1335 / Km1335_300) * (1 + s_1155 / Km1155_300) - 1));
    der(s_0133) = (cell * Vmax_161 * (s_0467 * s_0867 * s_0337 - s_0133 * s_0421 * s_1430 / Keq_161) / (Km0467_161 * Km0867_161 * Km0337_161) / ((1 + s_0467 / Km0467_161) * (1 + s_0867 / Km0867_161) * (1 + s_0337 / Km0337_161) + (1 + s_0133 / Km0133_161) * (1 + s_0421 / Km0421_161) * (1 + s_1430 / Km1430_161) - 1)) + (cell * Vmax_231 * (s_0335 - s_0133 / Keq_231) / Km0335_231 / (1 + s_0335 / Km0335_231 + 1 + s_0133 / Km0133_231 - 1)) - (cell * Vmax_284 * (s_0133 * s_0343 - s_0352 * s_0337 / Keq_284) / (Km0133_284 * Km0343_284) / ((1 + s_0133 / Km0133_284) * (1 + s_0343 / Km0343_284) + (1 + s_0352 / Km0352_284) * (1 + s_0337 / Km0337_284) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0147) = (cell * Vmax_327 * (s_0467 * s_1204 - s_0421 * s_0147 / Keq_327) / (Km0467_327 * Km1204_327) / ((1 + s_0467 / Km0467_327) * (1 + s_1204 / Km1204_327) + (1 + s_0421 / Km0421_327) * (1 + s_0147 / Km0147_327) - 1)) - (cell * Vmax_24 * (s_0542 * s_0147 - s_0539 * s_1038 / Keq_24) / (Km0542_24 * Km0147_24) / ((1 + s_0542 / Km0542_24) * (1 + s_0147 / Km0147_24) + (1 + s_0539 / Km0539_24) * (1 + s_1038 / Km1038_24) - 1));
    der(s_0148) = (cell * Vmax_136 * (s_0155 * s_1336 - s_1335 * s_0148 / Keq_136) / (Km0155_136 * Km1336_136) / ((1 + s_0155 / Km0155_136) * (1 + s_1336 / Km1336_136) + (1 + s_1335 / Km1335_136) * (1 + s_0148 / Km0148_136) - 1)) - (cell * Vmax_328 * (s_1599 * s_0148 - s_0555 * s_1315 / Keq_328) / (Km1599_328 * Km0148_328) / ((1 + s_1599 / Km1599_328) * (1 + s_0148 / Km0148_328) + (1 + s_0555 / Km0555_328) * (1 + s_1315 / Km1315_328) - 1));
    der(s_0149) = (cell * Vmax_355 * (s_1734 - s_0149 * s_1762 / Keq_355) / Km1734_355 / (1 + s_1734 / Km1734_355 + (1 + s_0149 / Km0149_355) * (1 + s_1762 / Km1762_355) - 1)) - (cell * Vmax_226 * (s_0149 * s_1734 - s_1204 * s_1733 / Keq_226) / (Km0149_226 * Km1734_226) / ((1 + s_0149 / Km0149_226) * (1 + s_1734 / Km1734_226) + (1 + s_1204 / Km1204_226) * (1 + s_1733 / Km1733_226) - 1));
    der(s_0155) = (cell * Vmax_137 * (s_1075 * s_1531 - s_0155 / Keq_137) / (Km1075_137 * Km1531_137) / ((1 + s_1075 / Km1075_137) * (1 + s_1531 / Km1531_137) + 1 + s_0155 / Km0155_137 - 1)) - (cell * Vmax_136 * (s_0155 * s_1336 - s_1335 * s_0148 / Keq_136) / (Km0155_136 * Km1336_136) / ((1 + s_0155 / Km0155_136) * (1 + s_1336 / Km1336_136) + (1 + s_1335 / Km1335_136) * (1 + s_0148 / Km0148_136) - 1));
    der(s_0160) = (cell * Vmax_191 * (s_0945 - s_0160 * s_0867 * s_0783 / Keq_191) / Km0945_191 / (1 + s_0945 / Km0945_191 + (1 + s_0160 / Km0160_191) * (1 + s_0867 / Km0867_191) * (1 + s_0783 / Km0783_191) - 1)) - (cell * Vmax_132 * (s_0160 - s_0347 * s_0451 / Keq_132) / Km0160_132 / (1 + s_0160 / Km0160_132 + (1 + s_0347 / Km0347_132) * (1 + s_0451 / Km0451_132) - 1));
    der(s_0162) = (cell * Vmax_287 * (s_0467 * s_1322 * s_1101 - s_0421 * s_0162 * s_1095 * s_1430 / Keq_287) / (Km0467_287 * Km1322_287 * Km1101_287) / ((1 + s_0467 / Km0467_287) * (1 + s_1322 / Km1322_287) * (1 + s_1101 / Km1101_287) + (1 + s_0421 / Km0421_287) * (1 + s_0162 / Km0162_287) * (1 + s_1095 / Km1095_287) * (1 + s_1430 / Km1430_287) - 1)) - (cell * Vmax_283 * (s_0467 * s_0162 - s_0421 * s_0342 * s_1430 / Keq_283) / (Km0467_283 * Km0162_283) / ((1 + s_0467 / Km0467_283) * (1 + s_0162 / Km0162_283) + (1 + s_0421 / Km0421_283) * (1 + s_0342 / Km0342_283) * (1 + s_1430 / Km1430_283) - 1));
    der(s_0191) = (cell * Vmax_190 * (s_0945 - s_0191 * s_0867 / Keq_190) / Km0945_190 / (1 + s_0945 / Km0945_190 + (1 + s_0191 / Km0191_190) * (1 + s_0867 / Km0867_190) - 1)) - (cell * Vmax_141 * (s_0191 - s_0766 * s_0783 / Keq_141) / Km0191_141 / (1 + s_0191 / Km0191_141 + (1 + s_0766 / Km0766_141) * (1 + s_0783 / Km0783_141) - 1));
    der(s_0193) = (cell * Vmax_9 * (s_0237 - s_0193 * s_0539 / Keq_9) / Km0237_9 / (1 + s_0237 / Km0237_9 + (1 + s_0193 / Km0193_9) * (1 + s_0539 / Km0539_9) - 1)) - (cell * Vmax_16 * (s_0193 * pow(s_0861, 2) - pow(s_0862, 2) * s_0123 / Keq_16) / (Km0193_16 * pow(Km0861_16, 2)) / ((1 + s_0193 / Km0193_16) * pow(1 + s_0861 / Km0861_16, 2) + pow(1 + s_0862 / Km0862_16, 2) * (1 + s_0123 / Km0123_16) - 1));
    der(s_0194) = (cell * Vmax_3 * (s_0116 * s_1336 - s_0194 * s_1335 / Keq_3) / (Km0116_3 * Km1336_3) / ((1 + s_0116 / Km0116_3) * (1 + s_1336 / Km1336_3) + (1 + s_0194 / Km0194_3) * (1 + s_1335 / Km1335_3) - 1)) - (cell * Vmax_10 * (s_0194 * s_0575 - s_0312 * s_0783 / Keq_10) / (Km0194_10 * Km0575_10) / ((1 + s_0194 / Km0194_10) * (1 + s_0575 / Km0575_10) + (1 + s_0312 / Km0312_10) * (1 + s_0783 / Km0783_10) - 1));
    der(s_0195) = (cell * Vmax_23 * (s_0621 * s_1484 - s_0195 * s_1430 / Keq_23) / (Km0621_23 * Km1484_23) / ((1 + s_0621 / Km0621_23) * (1 + s_1484 / Km1484_23) + (1 + s_0195 / Km0195_23) * (1 + s_1430 / Km1430_23) - 1)) - (cell * Vmax_21 * (s_0195 - s_0269 * s_1430 / Keq_21) / Km0195_21 / (1 + s_0195 / Km0195_21 + (1 + s_0269 / Km0269_21) * (1 + s_1430 / Km1430_21) - 1));
    der(s_0201) = (cell * Vmax_63 * (s_0369 - s_0201 / Keq_63) / Km0369_63 / (1 + s_0369 / Km0369_63 + 1 + s_0201 / Km0201_63 - 1)) - (cell * Vmax_11 * (s_0201 - s_0913 * s_1531 / Keq_11) / Km0201_11 / (1 + s_0201 / Km0201_11 + (1 + s_0913 / Km0913_11) * (1 + s_1531 / Km1531_11) - 1));
    der(s_0203) = (cell * Vmax_44 * (s_0282 * s_0336 - s_0203 * s_0337 / Keq_44) / (Km0282_44 * Km0336_44) / ((1 + s_0282 / Km0282_44) * (1 + s_0336 / Km0336_44) + (1 + s_0203 / Km0203_44) * (1 + s_0337 / Km0337_44) - 1)) - (cell * Vmax_12 * (s_0203 * s_1336 - s_1335 * s_0032 / Keq_12) / (Km0203_12 * Km1336_12) / ((1 + s_0203 / Km0203_12) * (1 + s_1336 / Km1336_12) + (1 + s_1335 / Km1335_12) * (1 + s_0032 / Km0032_12) - 1));
    der(s_0214) = (cell * Vmax_188 * (pow(s_0941, 2) - s_0214 * s_0543 / Keq_188) / pow(Km0941_188, 2) / (pow(1 + s_0941 / Km0941_188, 2) + (1 + s_0214 / Km0214_188) * (1 + s_0543 / Km0543_188) - 1)) - (cell * Vmax_326 * (s_0214 * s_1334 - s_0029 * s_1333 / Keq_326) / (Km0214_326 * Km1334_326) / ((1 + s_0214 / Km0214_326) * (1 + s_1334 / Km1334_326) + (1 + s_0029 / Km0029_326) * (1 + s_1333 / Km1333_326) - 1));
    der(s_0217) = (cell * Vmax_13 * (s_0266 - s_0217 / Keq_13) / Km0266_13 / (1 + s_0266 / Km0266_13 + 1 + s_0217 / Km0217_13 - 1)) - (cell * Vmax_42 * (s_0217 - s_0265 / Keq_42) / Km0217_42 / (1 + s_0217 / Km0217_42 + 1 + s_0265 / Km0265_42 - 1));
    der(s_0218) = (cell * Vmax_275 * (s_0313 * s_0467 - s_0218 * s_0421 / Keq_275) / (Km0313_275 * Km0467_275) / ((1 + s_0313 / Km0313_275) * (1 + s_0467 / Km0467_275) + (1 + s_0218 / Km0218_275) * (1 + s_0421 / Km0421_275) - 1)) - (cell * Vmax_329 * (s_0218 * s_0330 - s_0783 * s_1643 / Keq_329) / (Km0218_329 * Km0330_329) / ((1 + s_0218 / Km0218_329) * (1 + s_0330 / Km0330_329) + (1 + s_0783 / Km0783_329) * (1 + s_1643 / Km1643_329) - 1));
    der(s_0226) = (cell * Vmax_390 * (s_0229 * pow(s_0467, 2) * s_1333 - s_0226 * pow(s_0421, 2) * s_1334 * pow(s_1430, 2) / Keq_390) / (Km0229_390 * pow(Km0467_390, 2) * Km1333_390) / ((1 + s_0229 / Km0229_390) * pow(1 + s_0467 / Km0467_390, 2) * (1 + s_1333 / Km1333_390) + (1 + s_0226 / Km0226_390) * pow(1 + s_0421 / Km0421_390, 2) * (1 + s_1334 / Km1334_390) * pow(1 + s_1430 / Km1430_390, 2) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0229) = (cell * Vmax_255 * (s_0283 - s_0229 * s_0543 / Keq_255) / Km0283_255 / (1 + s_0283 / Km0283_255 + (1 + s_0229 / Km0229_255) * (1 + s_0543 / Km0543_255) - 1)) - (cell * Vmax_390 * (s_0229 * pow(s_0467, 2) * s_1333 - s_0226 * pow(s_0421, 2) * s_1334 * pow(s_1430, 2) / Keq_390) / (Km0229_390 * pow(Km0467_390, 2) * Km1333_390) / ((1 + s_0229 / Km0229_390) * pow(1 + s_0467 / Km0467_390, 2) * (1 + s_1333 / Km1333_390) + (1 + s_0226 / Km0226_390) * pow(1 + s_0421 / Km0421_390, 2) * (1 + s_1334 / Km1334_390) * pow(1 + s_1430 / Km1430_390, 2) - 1));
    der(s_0231) = (cell * Vmax_153 * (s_0331 * s_1333 - s_1334 * s_0231 / Keq_153) / (Km0331_153 * Km1333_153) / ((1 + s_0331 / Km0331_153) * (1 + s_1333 / Km1333_153) + (1 + s_1334 / Km1334_153) * (1 + s_0231 / Km0231_153) - 1)) - (cell * Vmax_252 * (s_1095 * s_0231 - s_0233 * s_1362 / Keq_252) / (Km1095_252 * Km0231_252) / ((1 + s_1095 / Km1095_252) * (1 + s_0231 / Km0231_252) + (1 + s_0233 / Km0233_252) * (1 + s_1362 / Km1362_252) - 1));
    der(s_0232) = (cell * Vmax_223 * (s_1179 - s_0232 * s_0451 / Keq_223) / Km1179_223 / (1 + s_1179 / Km1179_223 + (1 + s_0232 / Km0232_223) * (1 + s_0451 / Km0451_223) - 1)) - (cell * Vmax_8 * (s_0232 * s_1531 - s_0041 * s_0543 / Keq_8) / (Km0232_8 * Km1531_8) / ((1 + s_0232 / Km0232_8) * (1 + s_1531 / Km1531_8) + (1 + s_0041 / Km0041_8) * (1 + s_0543 / Km0543_8) - 1));
    der(s_0233) = (cell * Vmax_79 * (s_1303 * s_1095 - s_1321 * s_0233 / Keq_79) / (Km1303_79 * Km1095_79) / ((1 + s_1303 / Km1303_79) * (1 + s_1095 / Km1095_79) + (1 + s_1321 / Km1321_79) * (1 + s_0233 / Km0233_79) - 1)) + (cell * Vmax_109 * (s_1095 * s_1399 - s_0233 * s_1072 / Keq_109) / (Km1095_109 * Km1399_109) / ((1 + s_1095 / Km1095_109) * (1 + s_1399 / Km1399_109) + (1 + s_0233 / Km0233_109) * (1 + s_1072 / Km1072_109) - 1)) + (cell * Vmax_198 * (s_1095 * s_0263 - s_0233 * s_1110 / Keq_198) / (Km1095_198 * Km0263_198) / ((1 + s_1095 / Km1095_198) * (1 + s_0263 / Km0263_198) + (1 + s_0233 / Km0233_198) * (1 + s_1110 / Km1110_198) - 1)) + (cell * Vmax_216 * (s_1027 * s_1335 - s_0233 * s_0543 * s_1336 / Keq_216) / (Km1027_216 * Km1335_216) / ((1 + s_1027 / Km1027_216) * (1 + s_1335 / Km1335_216) + (1 + s_0233 / Km0233_216) * (1 + s_0543 / Km0543_216) * (1 + s_1336 / Km1336_216) - 1)) + (cell * Vmax_217 * (s_0051 * s_1095 - s_0233 * s_1119 / Keq_217) / (Km0051_217 * Km1095_217) / ((1 + s_0051 / Km0051_217) * (1 + s_1095 / Km1095_217) + (1 + s_0233 / Km0233_217) * (1 + s_1119 / Km1119_217) - 1)) + (cell * Vmax_220 * (s_1095 * s_1531 - s_0233 * s_1041 / Keq_220) / (Km1095_220 * Km1531_220) / ((1 + s_1095 / Km1095_220) * (1 + s_1531 / Km1531_220) + (1 + s_0233 / Km0233_220) * (1 + s_1041 / Km1041_220) - 1)) + (cell * Vmax_225 * (s_0328 * s_1095 - s_0233 * s_1127 / Keq_225) / (Km0328_225 * Km1095_225) / ((1 + s_0328 / Km0328_225) * (1 + s_1095 / Km1095_225) + (1 + s_0233 / Km0233_225) * (1 + s_1127 / Km1127_225) - 1)) + (cell * Vmax_252 * (s_1095 * s_0231 - s_0233 * s_1362 / Keq_252) / (Km1095_252 * Km0231_252) / ((1 + s_1095 / Km1095_252) * (1 + s_0231 / Km0231_252) + (1 + s_0233 / Km0233_252) * (1 + s_1362 / Km1362_252) - 1)) + (cell * Vmax_262 * (s_1095 * s_1429 - s_0233 * s_1151 / Keq_262) / (Km1095_262 * Km1429_262) / ((1 + s_1095 / Km1095_262) * (1 + s_1429 / Km1429_262) + (1 + s_0233 / Km0233_262) * (1 + s_1151 / Km1151_262) - 1)) + (cell * Vmax_290 * (s_0308 * s_1095 - s_0233 * s_1364 / Keq_290) / (Km0308_290 * Km1095_290) / ((1 + s_0308 / Km0308_290) * (1 + s_1095 / Km1095_290) + (1 + s_0233 / Km0233_290) * (1 + s_1364 / Km1364_290) - 1)) + (cell * Vmax_323 * (s_1095 * s_1315 - s_0233 * s_1316 / Keq_323) / (Km1095_323 * Km1315_323) / ((1 + s_1095 / Km1095_323) * (1 + s_1315 / Km1315_323) + (1 + s_0233 / Km0233_323) * (1 + s_1316 / Km1316_323) - 1)) + (cell * Vmax_343 * (s_0262 * s_1095 - s_0233 * s_1189 / Keq_343) / (Km0262_343 * Km1095_343) / ((1 + s_0262 / Km0262_343) * (1 + s_1095 / Km1095_343) + (1 + s_0233 / Km0233_343) * (1 + s_1189 / Km1189_343) - 1)) + (cell * Vmax_362 * (s_0282 * s_1095 - s_0233 * s_1193 / Keq_362) / (Km0282_362 * Km1095_362) / ((1 + s_0282 / Km0282_362) * (1 + s_1095 / Km1095_362) + (1 + s_0233 / Km0233_362) * (1 + s_1193 / Km1193_362) - 1)) - (cell * Vmax_169 * (s_0233 * s_1336 * s_0451 - s_1095 * s_1335 / Keq_169) / (Km0233_169 * Km1336_169 * Km0451_169) / ((1 + s_0233 / Km0233_169) * (1 + s_1336 / Km1336_169) * (1 + s_0451 / Km0451_169) + (1 + s_1095 / Km1095_169) * (1 + s_1335 / Km1335_169) - 1));
    der(s_0237) = (cell * Vmax_55 * (s_0312 * s_0467 - s_0237 * s_0421 / Keq_55) / (Km0312_55 * Km0467_55) / ((1 + s_0312 / Km0312_55) * (1 + s_0467 / Km0467_55) + (1 + s_0237 / Km0237_55) * (1 + s_0421 / Km0421_55) - 1)) - (cell * Vmax_9 * (s_0237 - s_0193 * s_0539 / Keq_9) / Km0237_9 / (1 + s_0237 / Km0237_9 + (1 + s_0193 / Km0193_9) * (1 + s_0539 / Km0539_9) - 1));
    der(s_0252) = (cell * Vmax_98 * (s_0412 * s_0467 - s_0421 * s_0252 / Keq_98) / (Km0412_98 * Km0467_98) / ((1 + s_0412 / Km0412_98) * (1 + s_0467 / Km0467_98) + (1 + s_0421 / Km0421_98) * (1 + s_0252 / Km0252_98) - 1)) - (cell * Vmax_269 * (s_0252 * s_1544 - s_0411 * s_1612 * s_1406 / Keq_269) / (Km0252_269 * Km1544_269) / ((1 + s_0252 / Km0252_269) * (1 + s_1544 / Km1544_269) + (1 + s_0411 / Km0411_269) * (1 + s_1612 / Km1612_269) * (1 + s_1406 / Km1406_269) - 1));
    der(s_0255) = (cell * Vmax_18 * (s_0704 - s_0255 * s_0867 / Keq_18) / Km0704_18 / (1 + s_0704 / Km0704_18 + (1 + s_0255 / Km0255_18) * (1 + s_0867 / Km0867_18) - 1)) - (cell * Vmax_306 * (s_0311 * s_0255 - s_0364 * s_1430 / Keq_306) / (Km0311_306 * Km0255_306) / ((1 + s_0311 / Km0311_306) * (1 + s_0255 / Km0255_306) + (1 + s_0364 / Km0364_306) * (1 + s_1430 / Km1430_306) - 1));
    der(s_0262) = (cell * Vmax_296 * (s_1333 * s_1497 - s_0262 * s_0543 * s_1334 / Keq_296) / (Km1333_296 * Km1497_296) / ((1 + s_1333 / Km1333_296) * (1 + s_1497 / Km1497_296) + (1 + s_0262 / Km0262_296) * (1 + s_0543 / Km0543_296) * (1 + s_1334 / Km1334_296) - 1)) - (cell * Vmax_343 * (s_0262 * s_1095 - s_0233 * s_1189 / Keq_343) / (Km0262_343 * Km1095_343) / ((1 + s_0262 / Km0262_343) * (1 + s_1095 / Km1095_343) + (1 + s_0233 / Km0233_343) * (1 + s_1189 / Km1189_343) - 1));
    der(s_0263) = (cell * Vmax_205 * (s_0620 - s_0263 / Keq_205) / Km0620_205 / (1 + s_0620 / Km0620_205 + 1 + s_0263 / Km0263_205 - 1)) - (cell * Vmax_198 * (s_1095 * s_0263 - s_0233 * s_1110 / Keq_198) / (Km1095_198 * Km0263_198) / ((1 + s_1095 / Km1095_198) * (1 + s_0263 / Km0263_198) + (1 + s_0233 / Km0233_198) * (1 + s_1110 / Km1110_198) - 1));
    der(s_0265) = (cell * Vmax_42 * (s_0217 - s_0265 / Keq_42) / Km0217_42 / (1 + s_0217 / Km0217_42 + 1 + s_0265 / Km0265_42 - 1)) - (cell * Vmax_43 * (s_0265 * s_1333 - s_0267 * s_1334 / Keq_43) / (Km0265_43 * Km1333_43) / ((1 + s_0265 / Km0265_43) * (1 + s_1333 / Km1333_43) + (1 + s_0267 / Km0267_43) * (1 + s_1334 / Km1334_43) - 1));
    der(s_0266) = (cell * Vmax_14 * (s_0282 * s_0395 - s_0266 * s_0555 / Keq_14) / (Km0282_14 * Km0395_14) / ((1 + s_0282 / Km0282_14) * (1 + s_0395 / Km0395_14) + (1 + s_0266 / Km0266_14) * (1 + s_0555 / Km0555_14) - 1)) - (cell * Vmax_13 * (s_0266 - s_0217 / Keq_13) / Km0266_13 / (1 + s_0266 / Km0266_13 + 1 + s_0217 / Km0217_13 - 1));
    der(s_0267) = (cell * Vmax_43 * (s_0265 * s_1333 - s_0267 * s_1334 / Keq_43) / (Km0265_43 * Km1333_43) / ((1 + s_0265 / Km0265_43) * (1 + s_1333 / Km1333_43) + (1 + s_0267 / Km0267_43) * (1 + s_1334 / Km1334_43) - 1)) - (cell * Vmax_15 * (s_0267 - s_0328 * s_0543 / Keq_15) / Km0267_15 / (1 + s_0267 / Km0267_15 + (1 + s_0328 / Km0328_15) * (1 + s_0543 / Km0543_15) - 1));
    der(s_0269) = (cell * Vmax_21 * (s_0195 - s_0269 * s_1430 / Keq_21) / Km0195_21 / (1 + s_0195 / Km0195_21 + (1 + s_0269 / Km0269_21) * (1 + s_1430 / Km1430_21) - 1)) - (cell * Vmax_20 * (s_0269 - s_0270 / Keq_20) / Km0269_20 / (1 + s_0269 / Km0269_20 + 1 + s_0270 / Km0270_20 - 1));
    der(s_0270) = (cell * Vmax_20 * (s_0269 - s_0270 / Keq_20) / Km0269_20 / (1 + s_0269 / Km0269_20 + 1 + s_0270 / Km0270_20 - 1)) - (cell * Vmax_317 * (s_0270 * s_1336 - s_1335 * s_1571 / Keq_317) / (Km0270_317 * Km1336_317) / ((1 + s_0270 / Km0270_317) * (1 + s_1336 / Km1336_317) + (1 + s_1335 / Km1335_317) * (1 + s_1571 / Km1571_317) - 1));
    der(s_0271) = (cell * Vmax_27 * (s_0272 - s_0271 * s_1430 / Keq_27) / Km0272_27 / (1 + s_0272 / Km0272_27 + (1 + s_0271 / Km0271_27) * (1 + s_1430 / Km1430_27) - 1)) - (cell * Vmax_26 * (s_0575 * s_0271 - s_0542 * s_0783 / Keq_26) / (Km0575_26 * Km0271_26) / ((1 + s_0575 / Km0575_26) * (1 + s_0271 / Km0271_26) + (1 + s_0542 / Km0542_26) * (1 + s_0783 / Km0783_26) - 1));
    der(s_0272) = (cell * Vmax_22 * (s_0611 * s_1484 - s_0272 * s_1430 / Keq_22) / (Km0611_22 * Km1484_22) / ((1 + s_0611 / Km0611_22) * (1 + s_1484 / Km1484_22) + (1 + s_0272 / Km0272_22) * (1 + s_1430 / Km1430_22) - 1)) - (cell * Vmax_27 * (s_0272 - s_0271 * s_1430 / Keq_27) / Km0272_27 / (1 + s_0272 / Km0272_27 + (1 + s_0271 / Km0271_27) * (1 + s_1430 / Km1430_27) - 1));
    der(s_0276) = (cell * Vmax_46 * (s_1336 * s_0289 - s_0276 * s_1335 / Keq_46) / (Km1336_46 * Km0289_46) / ((1 + s_1336 / Km1336_46) * (1 + s_0289 / Km0289_46) + (1 + s_0276 / Km0276_46) * (1 + s_1335 / Km1335_46) - 1)) - (cell * Vmax_45 * (s_0276 - s_0812 / Keq_45) / Km0276_45 / (1 + s_0276 / Km0276_45 + 1 + s_0812 / Km0812_45 - 1));
    der(s_0277) = (cell * Vmax_49 * (s_1336 * s_0290 - s_0277 * s_1335 / Keq_49) / (Km1336_49 * Km0290_49) / ((1 + s_1336 / Km1336_49) * (1 + s_0290 / Km0290_49) + (1 + s_0277 / Km0277_49) * (1 + s_1335 / Km1335_49) - 1)) - (cell * Vmax_48 * (s_0277 - s_0813 / Keq_48) / Km0277_48 / (1 + s_0277 / Km0277_48 + 1 + s_0813 / Km0813_48 - 1));
    der(s_0282) = (cell * Vmax_145 * (s_0017 - s_0282 / Keq_145) / Km0017_145 / (1 + s_0017 / Km0017_145 + 1 + s_0282 / Km0282_145 - 1)) - (cell * Vmax_14 * (s_0282 * s_0395 - s_0266 * s_0555 / Keq_14) / (Km0282_14 * Km0395_14) / ((1 + s_0282 / Km0282_14) * (1 + s_0395 / Km0395_14) + (1 + s_0266 / Km0266_14) * (1 + s_0555 / Km0555_14) - 1)) - (cell * Vmax_44 * (s_0282 * s_0336 - s_0203 * s_0337 / Keq_44) / (Km0282_44 * Km0336_44) / ((1 + s_0282 / Km0282_44) * (1 + s_0336 / Km0336_44) + (1 + s_0203 / Km0203_44) * (1 + s_0337 / Km0337_44) - 1)) - (cell * Vmax_362 * (s_0282 * s_1095 - s_0233 * s_1193 / Keq_362) / (Km0282_362 * Km1095_362) / ((1 + s_0282 / Km0282_362) * (1 + s_1095 / Km1095_362) + (1 + s_0233 / Km0233_362) * (1 + s_1193 / Km1193_362) - 1));
    der(s_0283) = (cell * Vmax_202 * (s_0325 * s_0435 - s_0283 * s_0783 / Keq_202) / (Km0325_202 * Km0435_202) / ((1 + s_0325 / Km0325_202) * (1 + s_0435 / Km0435_202) + (1 + s_0283 / Km0283_202) * (1 + s_0783 / Km0783_202) - 1)) - (cell * Vmax_255 * (s_0283 - s_0229 * s_0543 / Keq_255) / Km0283_255 / (1 + s_0283 / Km0283_255 + (1 + s_0229 / Km0229_255) * (1 + s_0543 / Km0543_255) - 1));
    der(s_0289) = (cell * Vmax_47 * (s_1216 * s_1218 - s_0543 * s_0555 * s_0289 / Keq_47) / (Km1216_47 * Km1218_47) / ((1 + s_1216 / Km1216_47) * (1 + s_1218 / Km1218_47) + (1 + s_0543 / Km0543_47) * (1 + s_0555 / Km0555_47) * (1 + s_0289 / Km0289_47) - 1)) - (cell * Vmax_46 * (s_1336 * s_0289 - s_0276 * s_1335 / Keq_46) / (Km1336_46 * Km0289_46) / ((1 + s_1336 / Km1336_46) * (1 + s_0289 / Km0289_46) + (1 + s_0276 / Km0276_46) * (1 + s_1335 / Km1335_46) - 1));
    der(s_0290) = (cell * Vmax_50 * (s_0910 * s_1216 - s_0397 * s_0543 * s_0290 / Keq_50) / (Km0910_50 * Km1216_50) / ((1 + s_0910 / Km0910_50) * (1 + s_1216 / Km1216_50) + (1 + s_0397 / Km0397_50) * (1 + s_0543 / Km0543_50) * (1 + s_0290 / Km0290_50) - 1)) - (cell * Vmax_49 * (s_1336 * s_0290 - s_0277 * s_1335 / Keq_49) / (Km1336_49 * Km0290_49) / ((1 + s_1336 / Km1336_49) * (1 + s_0290 / Km0290_49) + (1 + s_0277 / Km0277_49) * (1 + s_1335 / Km1335_49) - 1));
    der(s_0293) = (cell * Vmax_74 * (s_0395 * s_1390 - s_0293 * s_0555 / Keq_74) / (Km0395_74 * Km1390_74) / ((1 + s_0395 / Km0395_74) * (1 + s_1390 / Km1390_74) + (1 + s_0293 / Km0293_74) * (1 + s_0555 / Km0555_74) - 1)) - (cell * Vmax_35 * (s_0293 * s_1334 - s_0044 * s_1333 / Keq_35) / (Km0293_35 * Km1334_35) / ((1 + s_0293 / Km0293_35) * (1 + s_1334 / Km1334_35) + (1 + s_0044 / Km0044_35) * (1 + s_1333 / Km1333_35) - 1));
    der(s_0295) = (cell * Vmax_71 * (s_0395 * s_0737 - s_0295 * s_0555 / Keq_71) / (Km0395_71 * Km0737_71) / ((1 + s_0395 / Km0395_71) * (1 + s_0737 / Km0737_71) + (1 + s_0295 / Km0295_71) * (1 + s_0555 / Km0555_71) - 1)) - (cell * Vmax_36 * (s_0295 * s_1334 - s_0045 * s_1333 / Keq_36) / (Km0295_36 * Km1334_36) / ((1 + s_0295 / Km0295_36) * (1 + s_1334 / Km1334_36) + (1 + s_0045 / Km0045_36) * (1 + s_1333 / Km1333_36) - 1));
    der(s_0297) = (cell * Vmax_75 * (s_0395 * s_1632 - s_0297 * s_0555 / Keq_75) / (Km0395_75 * Km1632_75) / ((1 + s_0395 / Km0395_75) * (1 + s_1632 / Km1632_75) + (1 + s_0297 / Km0297_75) * (1 + s_0555 / Km0555_75) - 1)) - (cell * Vmax_37 * (s_0297 * s_1334 - s_0046 * s_1333 / Keq_37) / (Km0297_37 * Km1334_37) / ((1 + s_0297 / Km0297_37) * (1 + s_1334 / Km1334_37) + (1 + s_0046 / Km0046_37) * (1 + s_1333 / Km1333_37) - 1));
    der(s_0299) = (cell * Vmax_70 * (s_0395 * s_0488 - s_0299 * s_0555 / Keq_70) / (Km0395_70 * Km0488_70) / ((1 + s_0395 / Km0395_70) * (1 + s_0488 / Km0488_70) + (1 + s_0299 / Km0299_70) * (1 + s_0555 / Km0555_70) - 1)) - (cell * Vmax_38 * (s_0299 * s_1334 - s_0047 * s_1333 / Keq_38) / (Km0299_38 * Km1334_38) / ((1 + s_0299 / Km0299_38) * (1 + s_1334 / Km1334_38) + (1 + s_0047 / Km0047_38) * (1 + s_1333 / Km1333_38) - 1));
    der(s_0303) = (cell * Vmax_73 * (s_0395 * s_0984 - s_0303 * s_0555 / Keq_73) / (Km0395_73 * Km0984_73) / ((1 + s_0395 / Km0395_73) * (1 + s_0984 / Km0984_73) + (1 + s_0303 / Km0303_73) * (1 + s_0555 / Km0555_73) - 1)) - (cell * Vmax_39 * (s_0303 * s_1334 - s_0049 * s_1333 / Keq_39) / (Km0303_39 * Km1334_39) / ((1 + s_0303 / Km0303_39) * (1 + s_1334 / Km1334_39) + (1 + s_0049 / Km0049_39) * (1 + s_1333 / Km1333_39) - 1));
    der(s_0304) = (cell * Vmax_52 * (s_0789 * s_1216 - s_0304 * s_0397 * s_0543 / Keq_52) / (Km0789_52 * Km1216_52) / ((1 + s_0789 / Km0789_52) * (1 + s_1216 / Km1216_52) + (1 + s_0304 / Km0304_52) * (1 + s_0397 / Km0397_52) * (1 + s_0543 / Km0543_52) - 1)) - (cell * Vmax_51 * (s_0304 * s_1336 - s_0028 * s_1335 / Keq_51) / (Km0304_51 * Km1336_51) / ((1 + s_0304 / Km0304_51) * (1 + s_1336 / Km1336_51) + (1 + s_0028 / Km0028_51) * (1 + s_1335 / Km1335_51) - 1));
    der(s_0305) = (cell * Vmax_72 * (s_0395 * s_0790 - s_0305 * s_0555 / Keq_72) / (Km0395_72 * Km0790_72) / ((1 + s_0395 / Km0395_72) * (1 + s_0790 / Km0790_72) + (1 + s_0305 / Km0305_72) * (1 + s_0555 / Km0555_72) - 1)) - (cell * Vmax_40 * (s_0305 * s_1334 - s_0050 * s_1333 / Keq_40) / (Km0305_40 * Km1334_40) / ((1 + s_0305 / Km0305_40) * (1 + s_1334 / Km1334_40) + (1 + s_0050 / Km0050_40) * (1 + s_1333 / Km1333_40) - 1));
    der(s_0306) = (cell * Vmax_273 * (s_0307 * s_0421 - s_0306 * s_0467 / Keq_273) / (Km0307_273 * Km0421_273) / ((1 + s_0307 / Km0307_273) * (1 + s_0421 / Km0421_273) + (1 + s_0306 / Km0306_273) * (1 + s_0467 / Km0467_273) - 1)) - (cell * Vmax_272 * (s_0306 * s_1333 - s_0308 * s_1334 / Keq_272) / (Km0306_272 * Km1333_272) / ((1 + s_0306 / Km0306_272) * (1 + s_1333 / Km1333_272) + (1 + s_0308 / Km0308_272) * (1 + s_1334 / Km1334_272) - 1)) - (cell * Vmax_274 * (s_0306 - s_0675 / Keq_274) / Km0306_274 / (1 + s_0306 / Km0306_274 + 1 + s_0675 / Km0675_274 - 1));
    der(s_0307) = (cell * Vmax_178 * (s_0913 * s_1333 * s_1430 - s_0307 * s_1334 / Keq_178) / (Km0913_178 * Km1333_178 * Km1430_178) / ((1 + s_0913 / Km0913_178) * (1 + s_1333 / Km1333_178) * (1 + s_1430 / Km1430_178) + (1 + s_0307 / Km0307_178) * (1 + s_1334 / Km1334_178) - 1)) - (cell * Vmax_273 * (s_0307 * s_0421 - s_0306 * s_0467 / Keq_273) / (Km0307_273 * Km0421_273) / ((1 + s_0307 / Km0307_273) * (1 + s_0421 / Km0421_273) + (1 + s_0306 / Km0306_273) * (1 + s_0467 / Km0467_273) - 1));
    der(s_0308) = (cell * Vmax_272 * (s_0306 * s_1333 - s_0308 * s_1334 / Keq_272) / (Km0306_272 * Km1333_272) / ((1 + s_0306 / Km0306_272) * (1 + s_1333 / Km1333_272) + (1 + s_0308 / Km0308_272) * (1 + s_1334 / Km1334_272) - 1)) - (cell * Vmax_290 * (s_0308 * s_1095 - s_0233 * s_1364 / Keq_290) / (Km0308_290 * Km1095_290) / ((1 + s_0308 / Km0308_290) * (1 + s_1095 / Km1095_290) + (1 + s_0233 / Km0233_290) * (1 + s_1364 / Km1364_290) - 1));
    der(s_0310) = (cell * Vmax_315 * (s_1558 - s_0310 * s_1112 / Keq_315) / Km1558_315 / (1 + s_1558 / Km1558_315 + (1 + s_0310 / Km0310_315) * (1 + s_1112 / Km1112_315) - 1)) - (cell * Vmax_54 * (s_0310 - s_0004 / Keq_54) / Km0310_54 / (1 + s_0310 / Km0310_54 + 1 + s_0004 / Km0004_54 - 1));
    der(s_0311) = (cell * Vmax_307 * (pow(s_0364, 2) - s_0311 * s_1546 / Keq_307) / pow(Km0364_307, 2) / (pow(1 + s_0364 / Km0364_307, 2) + (1 + s_0311 / Km0311_307) * (1 + s_1546 / Km1546_307) - 1)) + (cell * Vmax_393 * (s_0346 - s_0311 * s_1430 / Keq_393) / Km0346_393 / (1 + s_0346 / Km0346_393 + (1 + s_0311 / Km0311_393) * (1 + s_1430 / Km1430_393) - 1)) - (cell * Vmax_306 * (s_0311 * s_0255 - s_0364 * s_1430 / Keq_306) / (Km0311_306 * Km0255_306) / ((1 + s_0311 / Km0311_306) * (1 + s_0255 / Km0255_306) + (1 + s_0364 / Km0364_306) * (1 + s_1430 / Km1430_306) - 1));
    der(s_0312) = (cell * Vmax_10 * (s_0194 * s_0575 - s_0312 * s_0783 / Keq_10) / (Km0194_10 * Km0575_10) / ((1 + s_0194 / Km0194_10) * (1 + s_0575 / Km0575_10) + (1 + s_0312 / Km0312_10) * (1 + s_0783 / Km0783_10) - 1)) - (cell * Vmax_55 * (s_0312 * s_0467 - s_0237 * s_0421 / Keq_55) / (Km0312_55 * Km0467_55) / ((1 + s_0312 / Km0312_55) * (1 + s_0467 / Km0467_55) + (1 + s_0237 / Km0237_55) * (1 + s_0421 / Km0421_55) - 1));
    der(s_0313) = (cell * Vmax_56 * (s_0342 * s_1333 - s_0313 * pow(s_0867, 2) * s_1334 / Keq_56) / (Km0342_56 * Km1333_56) / ((1 + s_0342 / Km0342_56) * (1 + s_1333 / Km1333_56) + (1 + s_0313 / Km0313_56) * pow(1 + s_0867 / Km0867_56, 2) * (1 + s_1334 / Km1334_56) - 1)) - (cell * Vmax_275 * (s_0313 * s_0467 - s_0218 * s_0421 / Keq_275) / (Km0313_275 * Km0467_275) / ((1 + s_0313 / Km0313_275) * (1 + s_0467 / Km0467_275) + (1 + s_0218 / Km0218_275) * (1 + s_0421 / Km0421_275) - 1));
    der(s_0316) = (cell * Vmax_57 * (s_0526 * s_1101 - s_0316 * s_1095 / Keq_57) / (Km0526_57 * Km1101_57) / ((1 + s_0526 / Km0526_57) * (1 + s_1101 / Km1101_57) + (1 + s_0316 / Km0316_57) * (1 + s_1095 / Km1095_57) - 1)) - (cell * Vmax_58 * (s_0316 - s_0318 * s_1531 / Keq_58) / Km0316_58 / (1 + s_0316 / Km0316_58 + (1 + s_0318 / Km0318_58) * (1 + s_1531 / Km1531_58) - 1));
    der(s_0318) = (cell * Vmax_58 * (s_0316 - s_0318 * s_1531 / Keq_58) / Km0316_58 / (1 + s_0316 / Km0316_58 + (1 + s_0318 / Km0318_58) * (1 + s_1531 / Km1531_58) - 1)) - (cell * Vmax_144 * (s_0318 * s_0368 - s_0767 * s_0783 / Keq_144) / (Km0318_144 * Km0368_144) / ((1 + s_0318 / Km0318_144) * (1 + s_0368 / Km0368_144) + (1 + s_0767 / Km0767_144) * (1 + s_0783 / Km0783_144) - 1));
    der(s_0325) = (cell * Vmax_120 * (s_0526 - s_0325 * s_1531 / Keq_120) / Km0526_120 / (1 + s_0526 / Km0526_120 + (1 + s_0325 / Km0325_120) * (1 + s_1531 / Km1531_120) - 1)) - (cell * Vmax_202 * (s_0325 * s_0435 - s_0283 * s_0783 / Keq_202) / (Km0325_202 * Km0435_202) / ((1 + s_0325 / Km0325_202) * (1 + s_0435 / Km0435_202) + (1 + s_0283 / Km0283_202) * (1 + s_0783 / Km0783_202) - 1));
    der(s_0328) = (cell * Vmax_15 * (s_0267 - s_0328 * s_0543 / Keq_15) / Km0267_15 / (1 + s_0267 / Km0267_15 + (1 + s_0328 / Km0328_15) * (1 + s_0543 / Km0543_15) - 1)) - (cell * Vmax_225 * (s_0328 * s_1095 - s_0233 * s_1127 / Keq_225) / (Km0328_225 * Km1095_225) / ((1 + s_0328 / Km0328_225) * (1 + s_1095 / Km1095_225) + (1 + s_0233 / Km0233_225) * (1 + s_1127 / Km1127_225) - 1));
    der(s_0330) = (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) - (cell * Vmax_329 * (s_0218 * s_0330 - s_0783 * s_1643 / Keq_329) / (Km0218_329 * Km0330_329) / ((1 + s_0218 / Km0218_329) * (1 + s_0330 / Km0330_329) + (1 + s_0783 / Km0783_329) * (1 + s_1643 / Km1643_329) - 1));
    der(s_0331) = (cell * Vmax_154 * (s_0621 * s_1333 - s_0331 * s_1334 / Keq_154) / (Km0621_154 * Km1333_154) / ((1 + s_0621 / Km0621_154) * (1 + s_1333 / Km1333_154) + (1 + s_0331 / Km0331_154) * (1 + s_1334 / Km1334_154) - 1)) - (cell * Vmax_153 * (s_0331 * s_1333 - s_1334 * s_0231 / Keq_153) / (Km0331_153 * Km1333_153) / ((1 + s_0331 / Km0331_153) * (1 + s_1333 / Km1333_153) + (1 + s_1334 / Km1334_153) * (1 + s_0231 / Km0231_153) - 1));
    der(s_0332) = (cell * Vmax_108 * (s_1072 * s_0467 - s_0332 * s_0421 / Keq_108) / (Km1072_108 * Km0467_108) / ((1 + s_1072 / Km1072_108) * (1 + s_0467 / Km0467_108) + (1 + s_0332 / Km0332_108) * (1 + s_0421 / Km0421_108) - 1)) - (cell * Vmax_110 * (s_0332 * s_1336 - s_1075 * s_1335 * s_1430 / Keq_110) / (Km0332_110 * Km1336_110) / ((1 + s_0332 / Km0332_110) * (1 + s_1336 / Km1336_110) + (1 + s_1075 / Km1075_110) * (1 + s_1335 / Km1335_110) * (1 + s_1430 / Km1430_110) - 1));
    der(s_0333) = (cell * Vmax_112 * (s_0378 * s_1552 * s_0755 - s_0377 * s_0476 * s_0333 * s_1141 / Keq_112) / (Km0378_112 * Km1552_112 * Km0755_112) / ((1 + s_0378 / Km0378_112) * (1 + s_1552 / Km1552_112) * (1 + s_0755 / Km0755_112) + (1 + s_0377 / Km0377_112) * (1 + s_0476 / Km0476_112) * (1 + s_0333 / Km0333_112) * (1 + s_1141 / Km1141_112) - 1)) + (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) - (cell * Vmax_59 * (s_0333 - s_0334 * s_0405 / Keq_59) / Km0333_59 / (1 + s_0333 / Km0333_59 + (1 + s_0334 / Km0334_59) * (1 + s_0405 / Km0405_59) - 1));
    der(s_0334) = (cell * Vmax_59 * (s_0333 - s_0334 * s_0405 / Keq_59) / Km0333_59 / (1 + s_0333 / Km0333_59 + (1 + s_0334 / Km0334_59) * (1 + s_0405 / Km0405_59) - 1)) - (cell * Vmax_395 * s_0334 / Km0334_395 / (1 + s_0334 / Km0334_395));
    der(s_0335) = (cell * Vmax_234 * (s_0336 * s_1335 - s_0335 * s_1336 / Keq_234) / (Km0336_234 * Km1335_234) / ((1 + s_0336 / Km0336_234) * (1 + s_1335 / Km1335_234) + (1 + s_0335 / Km0335_234) * (1 + s_1336 / Km1336_234) - 1)) - (cell * Vmax_231 * (s_0335 - s_0133 / Keq_231) / Km0335_231 / (1 + s_0335 / Km0335_231 + 1 + s_0133 / Km0133_231 - 1));
    der(s_0336) = (cell * Vmax_184 * (s_1170 * s_0337 - s_0929 * s_0336 / Keq_184) / (Km1170_184 * Km0337_184) / ((1 + s_1170 / Km1170_184) * (1 + s_0337 / Km0337_184) + (1 + s_0929 / Km0929_184) * (1 + s_0336 / Km0336_184) - 1)) - (cell * Vmax_44 * (s_0282 * s_0336 - s_0203 * s_0337 / Keq_44) / (Km0282_44 * Km0336_44) / ((1 + s_0282 / Km0282_44) * (1 + s_0336 / Km0336_44) + (1 + s_0203 / Km0203_44) * (1 + s_0337 / Km0337_44) - 1)) - (cell * Vmax_60 * (s_0336 * s_1334 - s_0354 * s_1333 / Keq_60) / (Km0336_60 * Km1334_60) / ((1 + s_0336 / Km0336_60) * (1 + s_1334 / Km1334_60) + (1 + s_0354 / Km0354_60) * (1 + s_1333 / Km1333_60) - 1)) - (cell * Vmax_234 * (s_0336 * s_1335 - s_0335 * s_1336 / Keq_234) / (Km0336_234 * Km1335_234) / ((1 + s_0336 / Km0336_234) * (1 + s_1335 / Km1335_234) + (1 + s_0335 / Km0335_234) * (1 + s_1336 / Km1336_234) - 1)) - (cell * Vmax_335 * (s_0807 * s_0336 - s_0372 * s_0802 / Keq_335) / (Km0807_335 * Km0336_335) / ((1 + s_0807 / Km0807_335) * (1 + s_0336 / Km0336_335) + (1 + s_0372 / Km0372_335) * (1 + s_0802 / Km0802_335) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0337) = (cell * Vmax_44 * (s_0282 * s_0336 - s_0203 * s_0337 / Keq_44) / (Km0282_44 * Km0336_44) / ((1 + s_0282 / Km0282_44) * (1 + s_0336 / Km0336_44) + (1 + s_0203 / Km0203_44) * (1 + s_0337 / Km0337_44) - 1)) + (cell * Vmax_138 * (s_0372 * s_1336 - s_1335 * s_0337 / Keq_138) / (Km0372_138 * Km1336_138) / ((1 + s_0372 / Km0372_138) * (1 + s_1336 / Km1336_138) + (1 + s_1335 / Km1335_138) * (1 + s_0337 / Km0337_138) - 1)) + (cell * Vmax_233 * (s_0354 * s_1112 - s_1141 * s_0337 / Keq_233) / (Km0354_233 * Km1112_233) / ((1 + s_0354 / Km0354_233) * (1 + s_1112 / Km1112_233) + (1 + s_1141 / Km1141_233) * (1 + s_0337 / Km0337_233) - 1)) + (cell * Vmax_284 * (s_0133 * s_0343 - s_0352 * s_0337 / Keq_284) / (Km0133_284 * Km0343_284) / ((1 + s_0133 / Km0133_284) * (1 + s_0343 / Km0343_284) + (1 + s_0352 / Km0352_284) * (1 + s_0337 / Km0337_284) - 1)) - (cell * Vmax_161 * (s_0467 * s_0867 * s_0337 - s_0133 * s_0421 * s_1430 / Keq_161) / (Km0467_161 * Km0867_161 * Km0337_161) / ((1 + s_0467 / Km0467_161) * (1 + s_0867 / Km0867_161) * (1 + s_0337 / Km0337_161) + (1 + s_0133 / Km0133_161) * (1 + s_0421 / Km0421_161) * (1 + s_1430 / Km1430_161) - 1)) - (cell * Vmax_184 * (s_1170 * s_0337 - s_0929 * s_0336 / Keq_184) / (Km1170_184 * Km0337_184) / ((1 + s_1170 / Km1170_184) * (1 + s_0337 / Km0337_184) + (1 + s_0929 / Km0929_184) * (1 + s_0336 / Km0336_184) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0341) = (cell * Vmax_1 * (s_0097 - s_0341 / Keq_1) / Km0097_1 / (1 + s_0097 / Km0097_1 + 1 + s_0341 / Km0341_1 - 1)) - (cell * Vmax_204 * (s_1101 * s_0341 - s_0343 * s_0620 * s_1095 / Keq_204) / (Km1101_204 * Km0341_204) / ((1 + s_1101 / Km1101_204) * (1 + s_0341 / Km0341_204) + (1 + s_0343 / Km0343_204) * (1 + s_0620 / Km0620_204) * (1 + s_1095 / Km1095_204) - 1));
    der(s_0342) = (cell * Vmax_283 * (s_0467 * s_0162 - s_0421 * s_0342 * s_1430 / Keq_283) / (Km0467_283 * Km0162_283) / ((1 + s_0467 / Km0467_283) * (1 + s_0162 / Km0162_283) + (1 + s_0421 / Km0421_283) * (1 + s_0342 / Km0342_283) * (1 + s_1430 / Km1430_283) - 1)) - (cell * Vmax_56 * (s_0342 * s_1333 - s_0313 * pow(s_0867, 2) * s_1334 / Keq_56) / (Km0342_56 * Km1333_56) / ((1 + s_0342 / Km0342_56) * (1 + s_1333 / Km1333_56) + (1 + s_0313 / Km0313_56) * pow(1 + s_0867 / Km0867_56, 2) * (1 + s_1334 / Km1334_56) - 1)) - (cell * Vmax_281 * (s_0342 * s_0467 * s_0474 - s_0362 * s_0421 * s_1430 / Keq_281) / (Km0342_281 * Km0467_281 * Km0474_281) / ((1 + s_0342 / Km0342_281) * (1 + s_0467 / Km0467_281) * (1 + s_0474 / Km0474_281) + (1 + s_0362 / Km0362_281) * (1 + s_0421 / Km0421_281) * (1 + s_1430 / Km1430_281) - 1));
    der(s_0343) = (cell * Vmax_95 * (s_0040 - s_0343 * s_0875 / Keq_95) / Km0040_95 / (1 + s_0040 / Km0040_95 + (1 + s_0343 / Km0343_95) * (1 + s_0875 / Km0875_95) - 1)) + (cell * Vmax_204 * (s_1101 * s_0341 - s_0343 * s_0620 * s_1095 / Keq_204) / (Km1101_204 * Km0341_204) / ((1 + s_1101 / Km1101_204) * (1 + s_0341 / Km0341_204) + (1 + s_0343 / Km0343_204) * (1 + s_0620 / Km0620_204) * (1 + s_1095 / Km1095_204) - 1)) - (cell * Vmax_284 * (s_0133 * s_0343 - s_0352 * s_0337 / Keq_284) / (Km0133_284 * Km0343_284) / ((1 + s_0133 / Km0133_284) * (1 + s_0343 / Km0343_284) + (1 + s_0352 / Km0352_284) * (1 + s_0337 / Km0337_284) - 1));
    der(s_0344) = (cell * Vmax_282 * (s_0362 - s_0344 / Keq_282) / Km0362_282 / (1 + s_0362 / Km0362_282 + 1 + s_0344 / Km0344_282 - 1)) - (cell * Vmax_285 * (s_0344 * s_1072 * s_0467 - s_0040 * s_0421 * s_1430 / Keq_285) / (Km0344_285 * Km1072_285 * Km0467_285) / ((1 + s_0344 / Km0344_285) * (1 + s_1072 / Km1072_285) * (1 + s_0467 / Km0467_285) + (1 + s_0040 / Km0040_285) * (1 + s_0421 / Km0421_285) * (1 + s_1430 / Km1430_285) - 1));
    der(s_0345) = (cell * Vmax_171 * (s_1098 - s_0345 / Keq_171) / Km1098_171 / (1 + s_1098 / Km1098_171 + 1 + s_0345 / Km0345_171 - 1)) - (2.0 * cell * Vmax_294 * (pow(s_0345, 2) - s_1493 / Keq_294) / pow(Km0345_294, 2) / (pow(1 + s_0345 / Km0345_294, 2) + 1 + s_1493 / Km1493_294 - 1));
    der(s_0346) = (cell * Vmax_61 * (s_0347 * s_1336 - s_0346 * s_1335 / Keq_61) / (Km0347_61 * Km1336_61) / ((1 + s_0347 / Km0347_61) * (1 + s_1336 / Km1336_61) + (1 + s_0346 / Km0346_61) * (1 + s_1335 / Km1335_61) - 1)) - (cell * Vmax_393 * (s_0346 - s_0311 * s_1430 / Keq_393) / Km0346_393 / (1 + s_0346 / Km0346_393 + (1 + s_0311 / Km0311_393) * (1 + s_1430 / Km1430_393) - 1));
    der(s_0347) = (cell * Vmax_132 * (s_0160 - s_0347 * s_0451 / Keq_132) / Km0160_132 / (1 + s_0160 / Km0160_132 + (1 + s_0347 / Km0347_132) * (1 + s_0451 / Km0451_132) - 1)) - (cell * Vmax_61 * (s_0347 * s_1336 - s_0346 * s_1335 / Keq_61) / (Km0347_61 * Km1336_61) / ((1 + s_0347 / Km0347_61) * (1 + s_1336 / Km1336_61) + (1 + s_0346 / Km0346_61) * (1 + s_1335 / Km1335_61) - 1));
    der(s_0352) = (cell * Vmax_284 * (s_0133 * s_0343 - s_0352 * s_0337 / Keq_284) / (Km0133_284 * Km0343_284) / ((1 + s_0133 / Km0133_284) * (1 + s_0343 / Km0343_284) + (1 + s_0352 / Km0352_284) * (1 + s_0337 / Km0337_284) - 1)) - (cell * Vmax_206 * (s_0352 - s_1006 / Keq_206) / Km0352_206 / (1 + s_0352 / Km0352_206 + 1 + s_1006 / Km1006_206 - 1));
    der(s_0354) = (cell * Vmax_60 * (s_0336 * s_1334 - s_0354 * s_1333 / Keq_60) / (Km0336_60 * Km1334_60) / ((1 + s_0336 / Km0336_60) * (1 + s_1334 / Km1334_60) + (1 + s_0354 / Km0354_60) * (1 + s_1333 / Km1333_60) - 1)) - (cell * Vmax_233 * (s_0354 * s_1112 - s_1141 * s_0337 / Keq_233) / (Km0354_233 * Km1112_233) / ((1 + s_0354 / Km0354_233) * (1 + s_1112 / Km1112_233) + (1 + s_1141 / Km1141_233) * (1 + s_0337 / Km0337_233) - 1));
    der(s_0359) = (cell * Vmax_53 * (s_1484 * s_1574 - s_0359 * s_1430 / Keq_53) / (Km1484_53 * Km1574_53) / ((1 + s_1484 / Km1484_53) * (1 + s_1574 / Km1574_53) + (1 + s_0359 / Km0359_53) * (1 + s_1430 / Km1430_53) - 1)) - (cell * Vmax_121 * (s_0359 - s_0526 * s_1430 / Keq_121) / Km0359_121 / (1 + s_0359 / Km0359_121 + (1 + s_0526 / Km0526_121) * (1 + s_1430 / Km1430_121) - 1));
    der(s_0360) = (cell * Vmax_289 * (s_0467 * s_0446 - s_0454 * s_0360 / Keq_289) / (Km0467_289 * Km0446_289) / ((1 + s_0467 / Km0467_289) * (1 + s_0446 / Km0446_289) + (1 + s_0454 / Km0454_289) * (1 + s_0360 / Km0360_289) - 1)) - (cell * Vmax_100 * (s_0457 * s_0360 - s_0783 * s_1278 / Keq_100) / (Km0457_100 * Km0360_100) / ((1 + s_0457 / Km0457_100) * (1 + s_0360 / Km0360_100) + (1 + s_0783 / Km0783_100) * (1 + s_1278 / Km1278_100) - 1)) - (cell * Vmax_111 * (s_0467 * s_0360 - s_0783 * s_0099 / Keq_111) / (Km0467_111 * Km0360_111) / ((1 + s_0467 / Km0467_111) * (1 + s_0360 / Km0360_111) + (1 + s_0783 / Km0783_111) * (1 + s_0099 / Km0099_111) - 1)) - (cell * Vmax_173 * (s_1101 * s_0360 - s_1095 * s_0783 * s_0361 / Keq_173) / (Km1101_173 * Km0360_173) / ((1 + s_1101 / Km1101_173) * (1 + s_0360 / Km0360_173) + (1 + s_1095 / Km1095_173) * (1 + s_0783 / Km0783_173) * (1 + s_0361 / Km0361_173) - 1)) - (cell * Vmax_246 * (s_0360 * s_1537 - s_0543 * s_1340 * s_0783 / Keq_246) / (Km0360_246 * Km1537_246) / ((1 + s_0360 / Km0360_246) * (1 + s_1537 / Km1537_246) + (1 + s_0543 / Km0543_246) * (1 + s_1340 / Km1340_246) * (1 + s_0783 / Km0783_246) - 1)) - (cell * Vmax_257 * (s_1394 * s_0360 - s_1397 * s_0783 / Keq_257) / (Km1394_257 * Km0360_257) / ((1 + s_1394 / Km1394_257) * (1 + s_0360 / Km0360_257) + (1 + s_1397 / Km1397_257) * (1 + s_0783 / Km0783_257) - 1));
    der(s_0361) = (cell * Vmax_173 * (s_1101 * s_0360 - s_1095 * s_0783 * s_0361 / Keq_173) / (Km1101_173 * Km0360_173) / ((1 + s_1101 / Km1101_173) * (1 + s_0360 / Km0360_173) + (1 + s_1095 / Km1095_173) * (1 + s_0783 / Km0783_173) * (1 + s_0361 / Km0361_173) - 1)) - (cell * Vmax_288 * (s_0467 * s_0929 * s_0361 - s_0421 * s_1318 * s_1430 / Keq_288) / (Km0467_288 * Km0929_288 * Km0361_288) / ((1 + s_0467 / Km0467_288) * (1 + s_0929 / Km0929_288) * (1 + s_0361 / Km0361_288) + (1 + s_0421 / Km0421_288) * (1 + s_1318 / Km1318_288) * (1 + s_1430 / Km1430_288) - 1));
    der(s_0362) = (cell * Vmax_281 * (s_0342 * s_0467 * s_0474 - s_0362 * s_0421 * s_1430 / Keq_281) / (Km0342_281 * Km0467_281 * Km0474_281) / ((1 + s_0342 / Km0342_281) * (1 + s_0467 / Km0467_281) * (1 + s_0474 / Km0474_281) + (1 + s_0362 / Km0362_281) * (1 + s_0421 / Km0421_281) * (1 + s_1430 / Km1430_281) - 1)) - (cell * Vmax_282 * (s_0362 - s_0344 / Keq_282) / Km0362_282 / (1 + s_0362 / Km0362_282 + 1 + s_0344 / Km0344_282 - 1));
    der(s_0364) = (cell * Vmax_306 * (s_0311 * s_0255 - s_0364 * s_1430 / Keq_306) / (Km0311_306 * Km0255_306) / ((1 + s_0311 / Km0311_306) * (1 + s_0255 / Km0255_306) + (1 + s_0364 / Km0364_306) * (1 + s_1430 / Km1430_306) - 1)) - (2.0 * cell * Vmax_307 * (pow(s_0364, 2) - s_0311 * s_1546 / Keq_307) / pow(Km0364_307, 2) / (pow(1 + s_0364 / Km0364_307, 2) + (1 + s_0311 / Km0311_307) * (1 + s_1546 / Km1546_307) - 1));
    der(s_0367) = (cell * Vmax_140 * (s_0765 - s_0367 * s_0936 / Keq_140) / Km0765_140 / (1 + s_0765 / Km0765_140 + (1 + s_0367 / Km0367_140) * (1 + s_0936 / Km0936_140) - 1)) - (cell * Vmax_62 * (s_0367 * s_0467 - s_0368 * s_0454 / Keq_62) / (Km0367_62 * Km0467_62) / ((1 + s_0367 / Km0367_62) * (1 + s_0467 / Km0467_62) + (1 + s_0368 / Km0368_62) * (1 + s_0454 / Km0454_62) - 1));
    der(s_0368) = (cell * Vmax_62 * (s_0367 * s_0467 - s_0368 * s_0454 / Keq_62) / (Km0367_62 * Km0467_62) / ((1 + s_0367 / Km0367_62) * (1 + s_0467 / Km0467_62) + (1 + s_0368 / Km0368_62) * (1 + s_0454 / Km0454_62) - 1)) - (cell * Vmax_144 * (s_0318 * s_0368 - s_0767 * s_0783 / Keq_144) / (Km0318_144 * Km0368_144) / ((1 + s_0318 / Km0318_144) * (1 + s_0368 / Km0368_144) + (1 + s_0767 / Km0767_144) * (1 + s_0783 / Km0783_144) - 1));
    der(s_0369) = (cell * Vmax_64 * (s_0370 - s_0369 / Keq_64) / Km0370_64 / (1 + s_0370 / Km0370_64 + 1 + s_0369 / Km0369_64 - 1)) - (cell * Vmax_63 * (s_0369 - s_0201 / Keq_63) / Km0369_63 / (1 + s_0369 / Km0369_63 + 1 + s_0201 / Km0201_63 - 1));
    der(s_0370) = (cell * Vmax_166 * (s_0663 * s_1335 - s_0370 * s_1336 / Keq_166) / (Km0663_166 * Km1335_166) / ((1 + s_0663 / Km0663_166) * (1 + s_1335 / Km1335_166) + (1 + s_0370 / Km0370_166) * (1 + s_1336 / Km1336_166) - 1)) - (cell * Vmax_64 * (s_0370 - s_0369 / Keq_64) / Km0370_64 / (1 + s_0370 / Km0370_64 + 1 + s_0369 / Km0369_64 - 1));
    der(s_0371) = (cell * Vmax_93 * (s_0376 * s_1552 - s_1550 * s_0371 / Keq_93) / (Km0376_93 * Km1552_93) / ((1 + s_0376 / Km0376_93) * (1 + s_1552 / Km1552_93) + (1 + s_1550 / Km1550_93) * (1 + s_0371 / Km0371_93) - 1)) - (cell * Vmax_131 * (s_0467 * s_0543 * s_0371 - s_0421 * s_0755 * s_1430 / Keq_131) / (Km0467_131 * Km0543_131 * Km0371_131) / ((1 + s_0467 / Km0467_131) * (1 + s_0543 / Km0543_131) * (1 + s_0371 / Km0371_131) + (1 + s_0421 / Km0421_131) * (1 + s_0755 / Km0755_131) * (1 + s_1430 / Km1430_131) - 1));
    der(s_0372) = (cell * Vmax_139 * (s_0467 * s_0767 * s_1095 - s_0421 * s_0372 * s_1430 / Keq_139) / (Km0467_139 * Km0767_139 * Km1095_139) / ((1 + s_0467 / Km0467_139) * (1 + s_0767 / Km0767_139) * (1 + s_1095 / Km1095_139) + (1 + s_0421 / Km0421_139) * (1 + s_0372 / Km0372_139) * (1 + s_1430 / Km1430_139) - 1)) + (cell * Vmax_335 * (s_0807 * s_0336 - s_0372 * s_0802 / Keq_335) / (Km0807_335 * Km0336_335) / ((1 + s_0807 / Km0807_335) * (1 + s_0336 / Km0336_335) + (1 + s_0372 / Km0372_335) * (1 + s_0802 / Km0802_335) - 1)) - (cell * Vmax_138 * (s_0372 * s_1336 - s_1335 * s_0337 / Keq_138) / (Km0372_138 * Km1336_138) / ((1 + s_0372 / Km0372_138) * (1 + s_1336 / Km1336_138) + (1 + s_1335 / Km1335_138) * (1 + s_0337 / Km0337_138) - 1));
    der(s_0376) = (cell * Vmax_65 * (s_1041 * s_1491 - s_0376 * s_0397 * s_0543 / Keq_65) / (Km1041_65 * Km1491_65) / ((1 + s_1041 / Km1041_65) * (1 + s_1491 / Km1491_65) + (1 + s_0376 / Km0376_65) * (1 + s_0397 / Km0397_65) * (1 + s_0543 / Km0543_65) - 1)) - (cell * Vmax_93 * (s_0376 * s_1552 - s_1550 * s_0371 / Keq_93) / (Km0376_93 * Km1552_93) / ((1 + s_0376 / Km0376_93) * (1 + s_1552 / Km1552_93) + (1 + s_1550 / Km1550_93) * (1 + s_0371 / Km0371_93) - 1));
    der(s_0377) = (cell * Vmax_112 * (s_0378 * s_1552 * s_0755 - s_0377 * s_0476 * s_0333 * s_1141 / Keq_112) / (Km0378_112 * Km1552_112 * Km0755_112) / ((1 + s_0378 / Km0378_112) * (1 + s_1552 / Km1552_112) * (1 + s_0755 / Km0755_112) + (1 + s_0377 / Km0377_112) * (1 + s_0476 / Km0476_112) * (1 + s_0333 / Km0333_112) * (1 + s_1141 / Km1141_112) - 1)) - (cell * Vmax_209 * (s_0377 * s_1018 * s_1019 - s_1017 * s_1020 / Keq_209) / (Km0377_209 * Km1018_209 * Km1019_209) / ((1 + s_0377 / Km0377_209) * (1 + s_1018 / Km1018_209) * (1 + s_1019 / Km1019_209) + (1 + s_1017 / Km1017_209) * (1 + s_1020 / Km1020_209) - 1));
    der(s_0378) = (cell * Vmax_212 * (s_1020 - s_0378 * s_1019 / Keq_212) / Km1020_212 / (1 + s_1020 / Km1020_212 + (1 + s_0378 / Km0378_212) * (1 + s_1019 / Km1019_212) - 1)) - (cell * Vmax_112 * (s_0378 * s_1552 * s_0755 - s_0377 * s_0476 * s_0333 * s_1141 / Keq_112) / (Km0378_112 * Km1552_112 * Km0755_112) / ((1 + s_0378 / Km0378_112) * (1 + s_1552 / Km1552_112) * (1 + s_0755 / Km0755_112) + (1 + s_0377 / Km0377_112) * (1 + s_0476 / Km0476_112) * (1 + s_0333 / Km0333_112) * (1 + s_1141 / Km1141_112) - 1)) - (2.6e-05 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0380) = (cell * Vmax_214 * (s_1021 - s_0380 * s_1019 / Keq_214) / Km1021_214 / (1 + s_1021 / Km1021_214 + (1 + s_0380 / Km0380_214) * (1 + s_1019 / Km1019_214) - 1)) - (0.00026 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0381) = (cell * Vmax_333 * (s_1179 - s_0381 * s_0929 / Keq_333) / Km1179_333 / (1 + s_1179 / Km1179_333 + (1 + s_0381 / Km0381_333) * (1 + s_0929 / Km0929_333) - 1)) - (cell * Vmax_66 * (s_0381 * s_0555 * s_1333 - s_0395 * s_1334 / Keq_66) / (Km0381_66 * Km0555_66 * Km1333_66) / ((1 + s_0381 / Km0381_66) * (1 + s_0555 / Km0555_66) * (1 + s_1333 / Km1333_66) + (1 + s_0395 / Km0395_66) * (1 + s_1334 / Km1334_66) - 1));
    der(s_0384) = (cell * Vmax_78 * (s_1321 - s_0384 * s_1391 / Keq_78) / Km1321_78 / (1 + s_1321 / Km1321_78 + (1 + s_0384 / Km0384_78) * (1 + s_1391 / Km1391_78) - 1)) + (cell * Vmax_127 * (s_1358 * s_0994 - s_0384 * s_1083 / Keq_127) / (Km1358_127 * Km0994_127) / ((1 + s_1358 / Km1358_127) * (1 + s_0994 / Km0994_127) + (1 + s_0384 / Km0384_127) * (1 + s_1083 / Km1083_127) - 1)) + (cell * Vmax_345 * (s_1736 - s_0384 * s_1735 / Keq_345) / Km1736_345 / (1 + s_1736 / Km1736_345 + (1 + s_0384 / Km0384_345) * (1 + s_1735 / Km1735_345) - 1)) - (cell * Vmax_67 * (s_0384 * s_0467 - s_0393 * s_0421 / Keq_67) / (Km0384_67 * Km0467_67) / ((1 + s_0384 / Km0384_67) * (1 + s_0467 / Km0467_67) + (1 + s_0393 / Km0393_67) * (1 + s_0421 / Km0421_67) - 1));
    der(s_0391) = (cell * Vmax_69 * (pow(s_0395, 2) - s_0391 * s_0555 / Keq_69) / pow(Km0395_69, 2) / (pow(1 + s_0395 / Km0395_69, 2) + (1 + s_0391 / Km0391_69) * (1 + s_0555 / Km0555_69) - 1)) - (cell * Vmax_41 * (s_0391 * s_1334 - s_0043 * s_1333 / Keq_41) / (Km0391_41 * Km1334_41) / ((1 + s_0391 / Km0391_41) * (1 + s_1334 / Km1334_41) + (1 + s_0043 / Km0043_41) * (1 + s_1333 / Km1333_41) - 1));
    der(s_0393) = (cell * Vmax_67 * (s_0384 * s_0467 - s_0393 * s_0421 / Keq_67) / (Km0384_67 * Km0467_67) / ((1 + s_0384 / Km0384_67) * (1 + s_0467 / Km0467_67) + (1 + s_0393 / Km0393_67) * (1 + s_0421 / Km0421_67) - 1)) - (cell * Vmax_291 * (s_0393 * s_0555 - s_0395 * s_1430 / Keq_291) / (Km0393_291 * Km0555_291) / ((1 + s_0393 / Km0393_291) * (1 + s_0555 / Km0555_291) + (1 + s_0395 / Km0395_291) * (1 + s_1430 / Km1430_291) - 1));
    der(s_0395) = (cell * Vmax_66 * (s_0381 * s_0555 * s_1333 - s_0395 * s_1334 / Keq_66) / (Km0381_66 * Km0555_66 * Km1333_66) / ((1 + s_0381 / Km0381_66) * (1 + s_0555 / Km0555_66) * (1 + s_1333 / Km1333_66) + (1 + s_0395 / Km0395_66) * (1 + s_1334 / Km1334_66) - 1)) + (cell * Vmax_183 * (s_1040 * s_0555 - s_0395 * s_0929 / Keq_183) / (Km1040_183 * Km0555_183) / ((1 + s_1040 / Km1040_183) * (1 + s_0555 / Km0555_183) + (1 + s_0395 / Km0395_183) * (1 + s_0929 / Km0929_183) - 1)) + (cell * Vmax_291 * (s_0393 * s_0555 - s_0395 * s_1430 / Keq_291) / (Km0393_291 * Km0555_291) / ((1 + s_0393 / Km0393_291) * (1 + s_0555 / Km0555_291) + (1 + s_0395 / Km0395_291) * (1 + s_1430 / Km1430_291) - 1)) + (cell * Vmax_301 * (s_0555 * s_1333 * s_1531 - s_0395 * s_0543 * s_1334 / Keq_301) / (Km0555_301 * Km1333_301 * Km1531_301) / ((1 + s_0555 / Km0555_301) * (1 + s_1333 / Km1333_301) * (1 + s_1531 / Km1531_301) + (1 + s_0395 / Km0395_301) * (1 + s_0543 / Km0543_301) * (1 + s_1334 / Km1334_301) - 1)) + (cell * Vmax_302 * (s_0555 * s_1531 - s_0395 * s_0867 / Keq_302) / (Km0555_302 * Km1531_302) / ((1 + s_0555 / Km0555_302) * (1 + s_1531 / Km1531_302) + (1 + s_0395 / Km0395_302) * (1 + s_0867 / Km0867_302) - 1)) + (cell * Vmax_303 * (s_0555 * pow(s_0862, 2) * s_1531 - s_0395 * s_0543 * pow(s_0861, 2) / Keq_303) / (Km0555_303 * pow(Km0862_303, 2) * Km1531_303) / ((1 + s_0555 / Km0555_303) * pow(1 + s_0862 / Km0862_303, 2) * (1 + s_1531 / Km1531_303) + (1 + s_0395 / Km0395_303) * (1 + s_0543 / Km0543_303) * pow(1 + s_0861 / Km0861_303, 2) - 1)) - (cell * Vmax_14 * (s_0282 * s_0395 - s_0266 * s_0555 / Keq_14) / (Km0282_14 * Km0395_14) / ((1 + s_0282 / Km0282_14) * (1 + s_0395 / Km0395_14) + (1 + s_0266 / Km0266_14) * (1 + s_0555 / Km0555_14) - 1)) - (2.0 * cell * Vmax_69 * (pow(s_0395, 2) - s_0391 * s_0555 / Keq_69) / pow(Km0395_69, 2) / (pow(1 + s_0395 / Km0395_69, 2) + (1 + s_0391 / Km0391_69) * (1 + s_0555 / Km0555_69) - 1)) - (cell * Vmax_70 * (s_0395 * s_0488 - s_0299 * s_0555 / Keq_70) / (Km0395_70 * Km0488_70) / ((1 + s_0395 / Km0395_70) * (1 + s_0488 / Km0488_70) + (1 + s_0299 / Km0299_70) * (1 + s_0555 / Km0555_70) - 1)) - (cell * Vmax_71 * (s_0395 * s_0737 - s_0295 * s_0555 / Keq_71) / (Km0395_71 * Km0737_71) / ((1 + s_0395 / Km0395_71) * (1 + s_0737 / Km0737_71) + (1 + s_0295 / Km0295_71) * (1 + s_0555 / Km0555_71) - 1)) - (cell * Vmax_72 * (s_0395 * s_0790 - s_0305 * s_0555 / Keq_72) / (Km0395_72 * Km0790_72) / ((1 + s_0395 / Km0395_72) * (1 + s_0790 / Km0790_72) + (1 + s_0305 / Km0305_72) * (1 + s_0555 / Km0555_72) - 1)) - (cell * Vmax_73 * (s_0395 * s_0984 - s_0303 * s_0555 / Keq_73) / (Km0395_73 * Km0984_73) / ((1 + s_0395 / Km0395_73) * (1 + s_0984 / Km0984_73) + (1 + s_0303 / Km0303_73) * (1 + s_0555 / Km0555_73) - 1)) - (cell * Vmax_74 * (s_0395 * s_1390 - s_0293 * s_0555 / Keq_74) / (Km0395_74 * Km1390_74) / ((1 + s_0395 / Km0395_74) * (1 + s_1390 / Km1390_74) + (1 + s_0293 / Km0293_74) * (1 + s_0555 / Km0555_74) - 1)) - (cell * Vmax_75 * (s_0395 * s_1632 - s_0297 * s_0555 / Keq_75) / (Km0395_75 * Km1632_75) / ((1 + s_0395 / Km0395_75) * (1 + s_1632 / Km1632_75) + (1 + s_0297 / Km0297_75) * (1 + s_0555 / Km0555_75) - 1)) - (cell * Vmax_76 * (s_0395 * s_0467 * s_0474 - s_0421 * s_1217 * s_1430 / Keq_76) / (Km0395_76 * Km0467_76 * Km0474_76) / ((1 + s_0395 / Km0395_76) * (1 + s_0467 / Km0467_76) * (1 + s_0474 / Km0474_76) + (1 + s_0421 / Km0421_76) * (1 + s_1217 / Km1217_76) * (1 + s_1430 / Km1430_76) - 1)) - (cell * Vmax_122 * (s_0395 * s_1399 - s_0536 * s_0555 / Keq_122) / (Km0395_122 * Km1399_122) / ((1 + s_0395 / Km0395_122) * (1 + s_1399 / Km1399_122) + (1 + s_0536 / Km0536_122) * (1 + s_0555 / Km0555_122) - 1)) - (cell * Vmax_165 * (s_0395 * s_0653 - s_1287 * s_0555 / Keq_165) / (Km0395_165 * Km0653_165) / ((1 + s_0395 / Km0395_165) * (1 + s_0653 / Km0653_165) + (1 + s_1287 / Km1287_165) * (1 + s_0555 / Km0555_165) - 1)) - (cell * Vmax_242 * (s_0395 * s_1095 - s_1302 * s_0555 / Keq_242) / (Km0395_242 * Km1095_242) / ((1 + s_0395 / Km0395_242) * (1 + s_1095 / Km1095_242) + (1 + s_1302 / Km1302_242) * (1 + s_0555 / Km0555_242) - 1)) - (cell * Vmax_316 * (s_0395 * s_1170 - s_1358 * s_0555 / Keq_316) / (Km0395_316 * Km1170_316) / ((1 + s_0395 / Km0395_316) * (1 + s_1170 / Km1170_316) + (1 + s_1358 / Km1358_316) * (1 + s_0555 / Km0555_316) - 1));
    der(s_0397) = (cell * Vmax_4 * (s_0119 * s_0533 - s_0397 * s_0073 / Keq_4) / (Km0119_4 * Km0533_4) / ((1 + s_0119 / Km0119_4) * (1 + s_0533 / Km0533_4) + (1 + s_0397 / Km0397_4) * (1 + s_0073 / Km0073_4) - 1)) + (cell * Vmax_5 * (s_0121 * s_1411 - s_0397 * s_0075 / Keq_5) / (Km0121_5 * Km1411_5) / ((1 + s_0121 / Km0121_5) * (1 + s_1411 / Km1411_5) + (1 + s_0397 / Km0397_5) * (1 + s_0075 / Km0075_5) - 1)) + (cell * Vmax_50 * (s_0910 * s_1216 - s_0397 * s_0543 * s_0290 / Keq_50) / (Km0910_50 * Km1216_50) / ((1 + s_0910 / Km0910_50) * (1 + s_1216 / Km1216_50) + (1 + s_0397 / Km0397_50) * (1 + s_0543 / Km0543_50) * (1 + s_0290 / Km0290_50) - 1)) + (cell * Vmax_52 * (s_0789 * s_1216 - s_0304 * s_0397 * s_0543 / Keq_52) / (Km0789_52 * Km1216_52) / ((1 + s_0789 / Km0789_52) * (1 + s_1216 / Km1216_52) + (1 + s_0304 / Km0304_52) * (1 + s_0397 / Km0397_52) * (1 + s_0543 / Km0543_52) - 1)) + (cell * Vmax_65 * (s_1041 * s_1491 - s_0376 * s_0397 * s_0543 / Keq_65) / (Km1041_65 * Km1491_65) / ((1 + s_1041 / Km1041_65) * (1 + s_1491 / Km1491_65) + (1 + s_0376 / Km0376_65) * (1 + s_0397 / Km0397_65) * (1 + s_0543 / Km0543_65) - 1)) + (cell * Vmax_180 * (s_0920 * s_1411 - s_0121 * s_0397 / Keq_180) / (Km0920_180 * Km1411_180) / ((1 + s_0920 / Km0920_180) * (1 + s_1411 / Km1411_180) + (1 + s_0121 / Km0121_180) * (1 + s_0397 / Km0397_180) - 1)) + (cell * Vmax_181 * (s_0920 * s_0533 - s_0119 * s_0397 / Keq_181) / (Km0920_181 * Km0533_181) / ((1 + s_0920 / Km0920_181) * (1 + s_0533 / Km0533_181) + (1 + s_0119 / Km0119_181) * (1 + s_0397 / Km0397_181) - 1)) + (cell * Vmax_344 * (s_0028 * s_1735 - s_0397 * s_1734 / Keq_344) / (Km0028_344 * Km1735_344) / ((1 + s_0028 / Km0028_344) * (1 + s_1735 / Km1735_344) + (1 + s_0397 / Km0397_344) * (1 + s_1734 / Km1734_344) - 1)) + (cell * Vmax_348 * (s_0028 * s_1745 - s_0397 * s_1736 / Keq_348) / (Km0028_348 * Km1745_348) / ((1 + s_0028 / Km0028_348) * (1 + s_1745 / Km1745_348) + (1 + s_0397 / Km0397_348) * (1 + s_1736 / Km1736_348) - 1)) - (cell * Vmax_82 * (s_0397 * s_0467 * s_0785 - s_0454 * s_0789 * s_0783 / Keq_82) / (Km0397_82 * Km0467_82 * Km0785_82) / ((1 + s_0397 / Km0397_82) * (1 + s_0467 / Km0467_82) * (1 + s_0785 / Km0785_82) + (1 + s_0454 / Km0454_82) * (1 + s_0789 / Km0789_82) * (1 + s_0783 / Km0783_82) - 1)) - (cell * Vmax_83 * (s_0397 * s_0467 * s_0971 - s_0454 * s_1411 * s_0783 / Keq_83) / (Km0397_83 * Km0467_83 * Km0971_83) / ((1 + s_0397 / Km0397_83) * (1 + s_0467 / Km0467_83) * (1 + s_0971 / Km0971_83) + (1 + s_0454 / Km0454_83) * (1 + s_1411 / Km1411_83) * (1 + s_0783 / Km0783_83) - 1)) - (cell * Vmax_84 * (s_0397 * s_0467 * s_0976 - s_0454 * s_0533 * s_0783 / Keq_84) / (Km0397_84 * Km0467_84 * Km0976_84) / ((1 + s_0397 / Km0397_84) * (1 + s_0467 / Km0467_84) * (1 + s_0976 / Km0976_84) + (1 + s_0454 / Km0454_84) * (1 + s_0533 / Km0533_84) * (1 + s_0783 / Km0783_84) - 1)) - (cell * Vmax_230 * (s_0397 * s_1217 - s_0555 * s_1216 / Keq_230) / (Km0397_230 * Km1217_230) / ((1 + s_0397 / Km0397_230) * (1 + s_1217 / Km1217_230) + (1 + s_0555 / Km0555_230) * (1 + s_1216 / Km1216_230) - 1));
    der(s_0405) = (cell * Vmax_59 * (s_0333 - s_0334 * s_0405 / Keq_59) / Km0333_59 / (1 + s_0333 / Km0333_59 + (1 + s_0334 / Km0334_59) * (1 + s_0405 / Km0405_59) - 1)) + (cell * Vmax_314 * (s_1551 - s_0405 * s_1558 / Keq_314) / Km1551_314 / (1 + s_1551 / Km1551_314 + (1 + s_0405 / Km0405_314) * (1 + s_1558 / Km1558_314) - 1)) - (cell * Vmax_298 * (s_0405 * s_0445 - s_0408 * s_1430 / Keq_298) / (Km0405_298 * Km0445_298) / ((1 + s_0405 / Km0405_298) * (1 + s_0445 / Km0445_298) + (1 + s_0408 / Km0408_298) * (1 + s_1430 / Km1430_298) - 1));
    der(s_0408) = (cell * Vmax_298 * (s_0405 * s_0445 - s_0408 * s_1430 / Keq_298) / (Km0405_298 * Km0445_298) / ((1 + s_0405 / Km0405_298) * (1 + s_0445 / Km0445_298) + (1 + s_0408 / Km0408_298) * (1 + s_1430 / Km1430_298) - 1)) - (cell * Vmax_92 * (s_0408 * s_0467 - s_0421 * s_0454 / Keq_92) / (Km0408_92 * Km0467_92) / ((1 + s_0408 / Km0408_92) * (1 + s_0467 / Km0467_92) + (1 + s_0421 / Km0421_92) * (1 + s_0454 / Km0454_92) - 1));
    der(s_0411) = (cell * Vmax_269 * (s_0252 * s_1544 - s_0411 * s_1612 * s_1406 / Keq_269) / (Km0252_269 * Km1544_269) / ((1 + s_0252 / Km0252_269) * (1 + s_1544 / Km1544_269) + (1 + s_0411 / Km0411_269) * (1 + s_1612 / Km1612_269) * (1 + s_1406 / Km1406_269) - 1)) - (cell * Vmax_17 * (s_0411 - s_0454 * s_1430 / Keq_17) / Km0411_17 / (1 + s_0411 / Km0411_17 + (1 + s_0454 / Km0454_17) * (1 + s_1430 / Km1430_17) - 1));
    der(s_0412) = (cell * Vmax_324 * (s_0467 * s_0945 * s_1609 - s_0412 * s_0896 * s_1430 * s_0783 / Keq_324) / (Km0467_324 * Km0945_324 * Km1609_324) / ((1 + s_0467 / Km0467_324) * (1 + s_0945 / Km0945_324) * (1 + s_1609 / Km1609_324) + (1 + s_0412 / Km0412_324) * (1 + s_0896 / Km0896_324) * (1 + s_1430 / Km1430_324) * (1 + s_0783 / Km0783_324) - 1)) - (cell * Vmax_98 * (s_0412 * s_0467 - s_0421 * s_0252 / Keq_98) / (Km0412_98 * Km0467_98) / ((1 + s_0412 / Km0412_98) * (1 + s_0467 / Km0467_98) + (1 + s_0421 / Km0421_98) * (1 + s_0252 / Km0252_98) - 1));
    der(s_0420) = (cell * Vmax_237 * (s_0467 * s_1265 - s_0420 * s_0783 / Keq_237) / (Km0467_237 * Km1265_237) / ((1 + s_0467 / Km0467_237) * (1 + s_1265 / Km1265_237) + (1 + s_0420 / Km0420_237) * (1 + s_0783 / Km0783_237) - 1)) - (cell * Vmax_113 * (s_1264 * s_0420 - s_0454 * s_0479 * s_0579 / Keq_113) / (Km1264_113 * Km0420_113) / ((1 + s_1264 / Km1264_113) * (1 + s_0420 / Km0420_113) + (1 + s_0454 / Km0454_113) * (1 + s_0479 / Km0479_113) * (1 + s_0579 / Km0579_113) - 1)) - (cell * Vmax_236 * (s_1261 * s_0420 - s_0454 * s_0579 * s_1264 / Keq_236) / (Km1261_236 * Km0420_236) / ((1 + s_1261 / Km1261_236) * (1 + s_0420 / Km0420_236) + (1 + s_0454 / Km0454_236) * (1 + s_0579 / Km0579_236) * (1 + s_1264 / Km1264_236) - 1));
    der(s_0421) = (cell * Vmax_55 * (s_0312 * s_0467 - s_0237 * s_0421 / Keq_55) / (Km0312_55 * Km0467_55) / ((1 + s_0312 / Km0312_55) * (1 + s_0467 / Km0467_55) + (1 + s_0237 / Km0237_55) * (1 + s_0421 / Km0421_55) - 1)) + (cell * Vmax_67 * (s_0384 * s_0467 - s_0393 * s_0421 / Keq_67) / (Km0384_67 * Km0467_67) / ((1 + s_0384 / Km0384_67) * (1 + s_0467 / Km0467_67) + (1 + s_0393 / Km0393_67) * (1 + s_0421 / Km0421_67) - 1)) + (cell * Vmax_76 * (s_0395 * s_0467 * s_0474 - s_0421 * s_1217 * s_1430 / Keq_76) / (Km0395_76 * Km0467_76 * Km0474_76) / ((1 + s_0395 / Km0395_76) * (1 + s_0467 / Km0467_76) * (1 + s_0474 / Km0474_76) + (1 + s_0421 / Km0421_76) * (1 + s_1217 / Km1217_76) * (1 + s_1430 / Km1430_76) - 1)) + (cell * Vmax_77 * (s_1302 * s_0467 - s_1304 * s_0421 / Keq_77) / (Km1302_77 * Km0467_77) / ((1 + s_1302 / Km1302_77) * (1 + s_0467 / Km0467_77) + (1 + s_1304 / Km1304_77) * (1 + s_0421 / Km0421_77) - 1)) + (cell * Vmax_92 * (s_0408 * s_0467 - s_0421 * s_0454 / Keq_92) / (Km0408_92 * Km0467_92) / ((1 + s_0408 / Km0408_92) * (1 + s_0467 / Km0467_92) + (1 + s_0421 / Km0421_92) * (1 + s_0454 / Km0454_92) - 1)) + (2.0 * cell * Vmax_94 * (s_0454 * s_0467 - pow(s_0421, 2) / Keq_94) / (Km0454_94 * Km0467_94) / ((1 + s_0454 / Km0454_94) * (1 + s_0467 / Km0467_94) + pow(1 + s_0421 / Km0421_94, 2) - 1)) + (cell * Vmax_98 * (s_0412 * s_0467 - s_0421 * s_0252 / Keq_98) / (Km0412_98 * Km0467_98) / ((1 + s_0412 / Km0412_98) * (1 + s_0467 / Km0467_98) + (1 + s_0421 / Km0421_98) * (1 + s_0252 / Km0252_98) - 1)) + (cell * Vmax_108 * (s_1072 * s_0467 - s_0332 * s_0421 / Keq_108) / (Km1072_108 * Km0467_108) / ((1 + s_1072 / Km1072_108) * (1 + s_0467 / Km0467_108) + (1 + s_0332 / Km0332_108) * (1 + s_0421 / Km0421_108) - 1)) + (cell * Vmax_116 * (s_0467 * s_0543 * s_0451 - s_0421 * s_0502 / Keq_116) / (Km0467_116 * Km0543_116 * Km0451_116) / ((1 + s_0467 / Km0467_116) * (1 + s_0543 / Km0543_116) * (1 + s_0451 / Km0451_116) + (1 + s_0421 / Km0421_116) * (1 + s_0502 / Km0502_116) - 1)) + (cell * Vmax_124 * (s_0467 * s_1101 * s_1792 - s_0421 * s_0575 * s_1095 * s_1430 / Keq_124) / (Km0467_124 * Km1101_124 * Km1792_124) / ((1 + s_0467 / Km0467_124) * (1 + s_1101 / Km1101_124) * (1 + s_1792 / Km1792_124) + (1 + s_0421 / Km0421_124) * (1 + s_0575 / Km0575_124) * (1 + s_1095 / Km1095_124) * (1 + s_1430 / Km1430_124) - 1)) + (cell * Vmax_128 * (s_0467 * s_0539 - s_0421 * s_0510 / Keq_128) / (Km0467_128 * Km0539_128) / ((1 + s_0467 / Km0467_128) * (1 + s_0539 / Km0539_128) + (1 + s_0421 / Km0421_128) * (1 + s_0510 / Km0510_128) - 1)) + (cell * Vmax_129 * (pow(s_0600, 2) * s_0467 - s_0421 * s_0603 * s_1430 / Keq_129) / (pow(Km0600_129, 2) * Km0467_129) / (pow(1 + s_0600 / Km0600_129, 2) * (1 + s_0467 / Km0467_129) + (1 + s_0421 / Km0421_129) * (1 + s_0603 / Km0603_129) * (1 + s_1430 / Km1430_129) - 1)) + (cell * Vmax_130 * (s_0467 * s_0754 - s_0421 * s_0555 / Keq_130) / (Km0467_130 * Km0754_130) / ((1 + s_0467 / Km0467_130) * (1 + s_0754 / Km0754_130) + (1 + s_0421 / Km0421_130) * (1 + s_0555 / Km0555_130) - 1)) + (cell * Vmax_131 * (s_0467 * s_0543 * s_0371 - s_0421 * s_0755 * s_1430 / Keq_131) / (Km0467_131 * Km0543_131 * Km0371_131) / ((1 + s_0467 / Km0467_131) * (1 + s_0543 / Km0543_131) * (1 + s_0371 / Km0371_131) + (1 + s_0421 / Km0421_131) * (1 + s_0755 / Km0755_131) * (1 + s_1430 / Km1430_131) - 1)) + (cell * Vmax_139 * (s_0467 * s_0767 * s_1095 - s_0421 * s_0372 * s_1430 / Keq_139) / (Km0467_139 * Km0767_139 * Km1095_139) / ((1 + s_0467 / Km0467_139) * (1 + s_0767 / Km0767_139) * (1 + s_1095 / Km1095_139) + (1 + s_0421 / Km0421_139) * (1 + s_0372 / Km0372_139) * (1 + s_1430 / Km1430_139) - 1)) + (cell * Vmax_148 * (s_0467 * s_0802 - s_0421 * s_0795 / Keq_148) / (Km0467_148 * Km0802_148) / ((1 + s_0467 / Km0467_148) * (1 + s_0802 / Km0802_148) + (1 + s_0421 / Km0421_148) * (1 + s_0795 / Km0795_148) - 1)) + (cell * Vmax_161 * (s_0467 * s_0867 * s_0337 - s_0133 * s_0421 * s_1430 / Keq_161) / (Km0467_161 * Km0867_161 * Km0337_161) / ((1 + s_0467 / Km0467_161) * (1 + s_0867 / Km0867_161) * (1 + s_0337 / Km0337_161) + (1 + s_0133 / Km0133_161) * (1 + s_0421 / Km0421_161) * (1 + s_1430 / Km1430_161) - 1)) + (cell * Vmax_163 * (s_0467 * s_0867 * s_1318 - s_0421 * s_1322 * s_1430 / Keq_163) / (Km0467_163 * Km0867_163 * Km1318_163) / ((1 + s_0467 / Km0467_163) * (1 + s_0867 / Km0867_163) * (1 + s_1318 / Km1318_163) + (1 + s_0421 / Km0421_163) * (1 + s_1322 / Km1322_163) * (1 + s_1430 / Km1430_163) - 1)) + (cell * Vmax_168 * (s_0467 * s_1095 - s_0421 * s_1099 / Keq_168) / (Km0467_168 * Km1095_168) / ((1 + s_0467 / Km0467_168) * (1 + s_1095 / Km1095_168) + (1 + s_0421 / Km0421_168) * (1 + s_1099 / Km1099_168) - 1)) + (cell * Vmax_174 * (s_0467 * s_1095 * s_0451 - s_0421 * s_1101 * s_1430 / Keq_174) / (Km0467_174 * Km1095_174 * Km0451_174) / ((1 + s_0467 / Km0467_174) * (1 + s_1095 / Km1095_174) * (1 + s_0451 / Km0451_174) + (1 + s_0421 / Km0421_174) * (1 + s_1101 / Km1101_174) * (1 + s_1430 / Km1430_174) - 1)) + (cell * Vmax_179 * (s_0467 * s_0029 - s_0675 * s_0421 / Keq_179) / (Km0467_179 * Km0029_179) / ((1 + s_0467 / Km0467_179) * (1 + s_0029 / Km0029_179) + (1 + s_0675 / Km0675_179) * (1 + s_0421 / Km0421_179) - 1)) + (cell * Vmax_192 * (s_0467 * s_0942 - s_0421 * s_0896 / Keq_192) / (Km0467_192 * Km0942_192) / ((1 + s_0467 / Km0467_192) * (1 + s_0942 / Km0942_192) + (1 + s_0421 / Km0421_192) * (1 + s_0896 / Km0896_192) - 1)) + (cell * Vmax_194 * (s_0467 * s_0622 - s_0421 * s_0627 / Keq_194) / (Km0467_194 * Km0622_194) / ((1 + s_0467 / Km0467_194) * (1 + s_0622 / Km0622_194) + (1 + s_0421 / Km0421_194) * (1 + s_0627 / Km0627_194) - 1)) + (cell * Vmax_195 * (s_0467 * s_0657 - s_0421 * s_0663 / Keq_195) / (Km0467_195 * Km0657_195) / ((1 + s_0467 / Km0467_195) * (1 + s_0657 / Km0657_195) + (1 + s_0421 / Km0421_195) * (1 + s_0663 / Km0663_195) - 1)) + (cell * Vmax_200 * (s_0467 * s_1113 - s_0421 * s_1363 / Keq_200) / (Km0467_200 * Km1113_200) / ((1 + s_0467 / Km0467_200) * (1 + s_1113 / Km1113_200) + (1 + s_0421 / Km0421_200) * (1 + s_1363 / Km1363_200) - 1)) + (cell * Vmax_243 * (s_0467 * s_1333 - s_0421 * s_1335 / Keq_243) / (Km0467_243 * Km1333_243) / ((1 + s_0467 / Km0467_243) * (1 + s_1333 / Km1333_243) + (1 + s_0421 / Km0421_243) * (1 + s_1335 / Km1335_243) - 1)) + (cell * Vmax_247 * (s_0467 * s_0510 - s_0421 * s_0575 / Keq_247) / (Km0467_247 * Km0510_247) / ((1 + s_0467 / Km0467_247) * (1 + s_0510 / Km0510_247) + (1 + s_0421 / Km0421_247) * (1 + s_0575 / Km0575_247) - 1)) + (cell * Vmax_248 * (s_0467 * s_0795 - s_0421 * s_0805 / Keq_248) / (Km0467_248 * Km0795_248) / ((1 + s_0467 / Km0467_248) * (1 + s_0795 / Km0795_248) + (1 + s_0421 / Km0421_248) * (1 + s_0805 / Km0805_248) - 1)) + (cell * Vmax_249 * (s_0467 * s_0896 - s_0421 * s_0945 / Keq_249) / (Km0467_249 * Km0896_249) / ((1 + s_0467 / Km0467_249) * (1 + s_0896 / Km0896_249) + (1 + s_0421 / Km0421_249) * (1 + s_0945 / Km0945_249) - 1)) + (cell * Vmax_250 * (s_0467 * s_1733 - s_0421 * s_1792 / Keq_250) / (Km0467_250 * Km1733_250) / ((1 + s_0467 / Km0467_250) * (1 + s_1733 / Km1733_250) + (1 + s_0421 / Km0421_250) * (1 + s_1792 / Km1792_250) - 1)) + (cell * Vmax_251 * (s_0467 - s_0421 * s_1430 / Keq_251) / Km0467_251 / (1 + s_0467 / Km0467_251 + (1 + s_0421 / Km0421_251) * (1 + s_1430 / Km1430_251) - 1)) + (cell * Vmax_260 * (s_0467 * s_0033 - s_0599 * s_0421 / Keq_260) / (Km0467_260 * Km0033_260) / ((1 + s_0467 / Km0467_260) * (1 + s_0033 / Km0033_260) + (1 + s_0599 / Km0599_260) * (1 + s_0421 / Km0421_260) - 1)) + (cell * Vmax_275 * (s_0313 * s_0467 - s_0218 * s_0421 / Keq_275) / (Km0313_275 * Km0467_275) / ((1 + s_0313 / Km0313_275) * (1 + s_0467 / Km0467_275) + (1 + s_0218 / Km0218_275) * (1 + s_0421 / Km0421_275) - 1)) + (cell * Vmax_281 * (s_0342 * s_0467 * s_0474 - s_0362 * s_0421 * s_1430 / Keq_281) / (Km0342_281 * Km0467_281 * Km0474_281) / ((1 + s_0342 / Km0342_281) * (1 + s_0467 / Km0467_281) * (1 + s_0474 / Km0474_281) + (1 + s_0362 / Km0362_281) * (1 + s_0421 / Km0421_281) * (1 + s_1430 / Km1430_281) - 1)) + (cell * Vmax_283 * (s_0467 * s_0162 - s_0421 * s_0342 * s_1430 / Keq_283) / (Km0467_283 * Km0162_283) / ((1 + s_0467 / Km0467_283) * (1 + s_0162 / Km0162_283) + (1 + s_0421 / Km0421_283) * (1 + s_0342 / Km0342_283) * (1 + s_1430 / Km1430_283) - 1)) + (cell * Vmax_285 * (s_0344 * s_1072 * s_0467 - s_0040 * s_0421 * s_1430 / Keq_285) / (Km0344_285 * Km1072_285 * Km0467_285) / ((1 + s_0344 / Km0344_285) * (1 + s_1072 / Km1072_285) * (1 + s_0467 / Km0467_285) + (1 + s_0040 / Km0040_285) * (1 + s_0421 / Km0421_285) * (1 + s_1430 / Km1430_285) - 1)) + (cell * Vmax_287 * (s_0467 * s_1322 * s_1101 - s_0421 * s_0162 * s_1095 * s_1430 / Keq_287) / (Km0467_287 * Km1322_287 * Km1101_287) / ((1 + s_0467 / Km0467_287) * (1 + s_1322 / Km1322_287) * (1 + s_1101 / Km1101_287) + (1 + s_0421 / Km0421_287) * (1 + s_0162 / Km0162_287) * (1 + s_1095 / Km1095_287) * (1 + s_1430 / Km1430_287) - 1)) + (cell * Vmax_288 * (s_0467 * s_0929 * s_0361 - s_0421 * s_1318 * s_1430 / Keq_288) / (Km0467_288 * Km0929_288 * Km0361_288) / ((1 + s_0467 / Km0467_288) * (1 + s_0929 / Km0929_288) * (1 + s_0361 / Km0361_288) + (1 + s_0421 / Km0421_288) * (1 + s_1318 / Km1318_288) * (1 + s_1430 / Km1430_288) - 1)) + (cell * Vmax_305 * (s_0467 * s_1546 - s_0421 * s_0863 / Keq_305) / (Km0467_305 * Km1546_305) / ((1 + s_0467 / Km0467_305) * (1 + s_1546 / Km1546_305) + (1 + s_0421 / Km0421_305) * (1 + s_0863 / Km0863_305) - 1)) + (cell * Vmax_318 * (s_0467 * s_1571 - s_0421 * s_1574 / Keq_318) / (Km0467_318 * Km1571_318) / ((1 + s_0467 / Km0467_318) * (1 + s_1571 / Km1571_318) + (1 + s_0421 / Km0421_318) * (1 + s_1574 / Km1574_318) - 1)) + (cell * Vmax_321 * (s_0467 * s_0555 * s_1595 - s_0421 * s_1430 * s_1599 / Keq_321) / (Km0467_321 * Km0555_321 * Km1595_321) / ((1 + s_0467 / Km0467_321) * (1 + s_0555 / Km0555_321) * (1 + s_1595 / Km1595_321) + (1 + s_0421 / Km0421_321) * (1 + s_1430 / Km1430_321) * (1 + s_1599 / Km1599_321) - 1)) + (cell * Vmax_327 * (s_0467 * s_1204 - s_0421 * s_0147 / Keq_327) / (Km0467_327 * Km1204_327) / ((1 + s_0467 / Km0467_327) * (1 + s_1204 / Km1204_327) + (1 + s_0421 / Km0421_327) * (1 + s_0147 / Km0147_327) - 1)) + (cell * Vmax_330 * (s_0467 * s_1643 - s_0421 * s_1644 / Keq_330) / (Km0467_330 * Km1643_330) / ((1 + s_0467 / Km0467_330) * (1 + s_1643 / Km1643_330) + (1 + s_0421 / Km0421_330) * (1 + s_1644 / Km1644_330) - 1)) + (cell * Vmax_351 * (s_1041 * s_0467 * s_1750 - s_0421 * s_1430 * s_1751 / Keq_351) / (Km1041_351 * Km0467_351 * Km1750_351) / ((1 + s_1041 / Km1041_351) * (1 + s_0467 / Km0467_351) * (1 + s_1750 / Km1750_351) + (1 + s_0421 / Km0421_351) * (1 + s_1430 / Km1430_351) * (1 + s_1751 / Km1751_351) - 1)) + (cell * Vmax_352 * (s_0467 * s_0671 * s_1751 - s_0421 * s_1430 * s_1754 / Keq_352) / (Km0467_352 * Km0671_352 * Km1751_352) / ((1 + s_0467 / Km0467_352) * (1 + s_0671 / Km0671_352) * (1 + s_1751 / Km1751_352) + (1 + s_0421 / Km0421_352) * (1 + s_1430 / Km1430_352) * (1 + s_1754 / Km1754_352) - 1)) + (cell * Vmax_353 * (s_1242 * s_0467 * s_1754 - s_0421 * s_1430 * s_1752 / Keq_353) / (Km1242_353 * Km0467_353 * Km1754_353) / ((1 + s_1242 / Km1242_353) * (1 + s_0467 / Km0467_353) * (1 + s_1754 / Km1754_353) + (1 + s_0421 / Km0421_353) * (1 + s_1430 / Km1430_353) * (1 + s_1752 / Km1752_353) - 1)) + (cell * Vmax_354 * (s_0603 * s_0467 * s_1752 - s_0421 * s_1430 * s_1755 / Keq_354) / (Km0603_354 * Km0467_354 * Km1752_354) / ((1 + s_0603 / Km0603_354) * (1 + s_0467 / Km0467_354) * (1 + s_1752 / Km1752_354) + (1 + s_0421 / Km0421_354) * (1 + s_1430 / Km1430_354) * (1 + s_1755 / Km1755_354) - 1)) + (cell * Vmax_356 * (s_0467 * s_1762 - s_0421 * s_1733 / Keq_356) / (Km0467_356 * Km1762_356) / ((1 + s_0467 / Km0467_356) * (1 + s_1762 / Km1762_356) + (1 + s_0421 / Km0421_356) * (1 + s_1733 / Km1733_356) - 1)) + (2.0 * cell * Vmax_390 * (s_0229 * pow(s_0467, 2) * s_1333 - s_0226 * pow(s_0421, 2) * s_1334 * pow(s_1430, 2) / Keq_390) / (Km0229_390 * pow(Km0467_390, 2) * Km1333_390) / ((1 + s_0229 / Km0229_390) * pow(1 + s_0467 / Km0467_390, 2) * (1 + s_1333 / Km1333_390) + (1 + s_0226 / Km0226_390) * pow(1 + s_0421 / Km0421_390, 2) * (1 + s_1334 / Km1334_390) * pow(1 + s_1430 / Km1430_390, 2) - 1)) + (53.95 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398)) - (cell * Vmax_273 * (s_0307 * s_0421 - s_0306 * s_0467 / Keq_273) / (Km0307_273 * Km0421_273) / ((1 + s_0307 / Km0307_273) * (1 + s_0421 / Km0421_273) + (1 + s_0306 / Km0306_273) * (1 + s_0467 / Km0467_273) - 1)) - (cell * Vmax_293 * (s_0421 * s_0783 - s_0467 * s_1430 / Keq_293) / (Km0421_293 * Km0783_293) / ((1 + s_0421 / Km0421_293) * (1 + s_0783 / Km0783_293) + (1 + s_0467 / Km0467_293) * (1 + s_1430 / Km1430_293) - 1)) - (cell * Vmax_365 * (s_0421 * s_1430 - s_0467 / Keq_365) / (Km0421_365 * Km1430_365) / ((1 + s_0421 / Km0421_365) * (1 + s_1430 / Km1430_365) + 1 + s_0467 / Km0467_365 - 1));
    der(s_0435) = (cell * Vmax_254 * (s_0826 * pow(s_1028, 5) - s_0435 * pow(s_0783, 5) / Keq_254) / (Km0826_254 * pow(Km1028_254, 5)) / ((1 + s_0826 / Km0826_254) * pow(1 + s_1028 / Km1028_254, 5) + (1 + s_0435 / Km0435_254) * pow(1 + s_0783 / Km0783_254, 5) - 1)) - (cell * Vmax_202 * (s_0325 * s_0435 - s_0283 * s_0783 / Keq_202) / (Km0325_202 * Km0435_202) / ((1 + s_0325 / Km0325_202) * (1 + s_0435 / Km0435_202) + (1 + s_0283 / Km0283_202) * (1 + s_0783 / Km0783_202) - 1));
    der(s_0445) = (cell * Vmax_278 * (s_0446 - s_0445 / Keq_278) / Km0446_278 / (1 + s_0446 / Km0446_278 + 1 + s_0445 / Km0445_278 - 1)) - (cell * Vmax_298 * (s_0405 * s_0445 - s_0408 * s_1430 / Keq_298) / (Km0405_298 * Km0445_298) / ((1 + s_0405 / Km0405_298) * (1 + s_0445 / Km0445_298) + (1 + s_0408 / Km0408_298) * (1 + s_1430 / Km1430_298) - 1));
    der(s_0446) = (cell * Vmax_312 * (s_0704 - s_0446 / Keq_312) / Km0704_312 / (1 + s_0704 / Km0704_312 + 1 + s_0446 / Km0446_312 - 1)) + (cell * Vmax_337 * (s_0913 * s_1561 - s_0446 * s_0721 / Keq_337) / (Km0913_337 * Km1561_337) / ((1 + s_0913 / Km0913_337) * (1 + s_1561 / Km1561_337) + (1 + s_0446 / Km0446_337) * (1 + s_0721 / Km0721_337) - 1)) - (cell * Vmax_278 * (s_0446 - s_0445 / Keq_278) / Km0446_278 / (1 + s_0446 / Km0446_278 + 1 + s_0445 / Km0445_278 - 1)) - (cell * Vmax_289 * (s_0467 * s_0446 - s_0454 * s_0360 / Keq_289) / (Km0467_289 * Km0446_289) / ((1 + s_0467 / Km0467_289) * (1 + s_0446 / Km0446_289) + (1 + s_0454 / Km0454_289) * (1 + s_0360 / Km0360_289) - 1));
    der(s_0451) = (cell * Vmax_126 * (s_1082 - s_1112 * s_0451 * s_1531 / Keq_126) / Km1082_126 / (1 + s_1082 / Km1082_126 + (1 + s_1112 / Km1112_126) * (1 + s_0451 / Km0451_126) * (1 + s_1531 / Km1531_126) - 1)) + (cell * Vmax_132 * (s_0160 - s_0347 * s_0451 / Keq_132) / Km0160_132 / (1 + s_0160 / Km0160_132 + (1 + s_0347 / Km0347_132) * (1 + s_0451 / Km0451_132) - 1)) + (4.0 * cell * Vmax_203 * (pow(s_1493, 4) - s_0998 * pow(s_0451, 4) / Keq_203) / pow(Km1493_203, 4) / (pow(1 + s_1493 / Km1493_203, 4) + (1 + s_0998 / Km0998_203) * pow(1 + s_0451 / Km0451_203, 4) - 1)) + (cell * Vmax_223 * (s_1179 - s_0232 * s_0451 / Keq_223) / Km1179_223 / (1 + s_1179 / Km1179_223 + (1 + s_0232 / Km0232_223) * (1 + s_0451 / Km0451_223) - 1)) + (cell * Vmax_364 * (s_0453 - s_0451) / Km0453_364 / (1 + s_0453 / Km0453_364 + 1 + s_0451 / Km0451_364 - 1)) - (cell * Vmax_105 * (s_1072 * s_0467 * s_0451 - s_0454 * s_1068 * s_0783 / Keq_105) / (Km1072_105 * Km0467_105 * Km0451_105) / ((1 + s_1072 / Km1072_105) * (1 + s_0467 / Km0467_105) * (1 + s_0451 / Km0451_105) + (1 + s_0454 / Km0454_105) * (1 + s_1068 / Km1068_105) * (1 + s_0783 / Km0783_105) - 1)) - (cell * Vmax_116 * (s_0467 * s_0543 * s_0451 - s_0421 * s_0502 / Keq_116) / (Km0467_116 * Km0543_116 * Km0451_116) / ((1 + s_0467 / Km0467_116) * (1 + s_0543 / Km0543_116) * (1 + s_0451 / Km0451_116) + (1 + s_0421 / Km0421_116) * (1 + s_0502 / Km0502_116) - 1)) - (cell * Vmax_169 * (s_0233 * s_1336 * s_0451 - s_1095 * s_1335 / Keq_169) / (Km0233_169 * Km1336_169 * Km0451_169) / ((1 + s_0233 / Km0233_169) * (1 + s_1336 / Km1336_169) * (1 + s_0451 / Km0451_169) + (1 + s_1095 / Km1095_169) * (1 + s_1335 / Km1335_169) - 1)) - (cell * Vmax_174 * (s_0467 * s_1095 * s_0451 - s_0421 * s_1101 * s_1430 / Keq_174) / (Km0467_174 * Km1095_174 * Km0451_174) / ((1 + s_0467 / Km0467_174) * (1 + s_1095 / Km1095_174) * (1 + s_0451 / Km0451_174) + (1 + s_0421 / Km0421_174) * (1 + s_1101 / Km1101_174) * (1 + s_1430 / Km1430_174) - 1)) - (cell * Vmax_244 * (s_0467 * s_0732 * s_0451 - s_0454 * s_1333 * s_0783 / Keq_244) / (Km0467_244 * Km0732_244 * Km0451_244) / ((1 + s_0467 / Km0467_244) * (1 + s_0732 / Km0732_244) * (1 + s_0451 / Km0451_244) + (1 + s_0454 / Km0454_244) * (1 + s_1333 / Km1333_244) * (1 + s_0783 / Km0783_244) - 1)) - (cell * Vmax_341 * (s_1009 * s_0451 * s_1531 - s_1185 / Keq_341) / (Km1009_341 * Km0451_341 * Km1531_341) / ((1 + s_1009 / Km1009_341) * (1 + s_0451 / Km0451_341) * (1 + s_1531 / Km1531_341) + 1 + s_1185 / Km1185_341 - 1)) - (0.01301 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0453) = 0.0;
    der(s_0454) = (cell * Vmax_17 * (s_0411 - s_0454 * s_1430 / Keq_17) / Km0411_17 / (1 + s_0411 / Km0411_17 + (1 + s_0454 / Km0454_17) * (1 + s_1430 / Km1430_17) - 1)) + (cell * Vmax_62 * (s_0367 * s_0467 - s_0368 * s_0454 / Keq_62) / (Km0367_62 * Km0467_62) / ((1 + s_0367 / Km0367_62) * (1 + s_0467 / Km0467_62) + (1 + s_0368 / Km0368_62) * (1 + s_0454 / Km0454_62) - 1)) + (cell * Vmax_82 * (s_0397 * s_0467 * s_0785 - s_0454 * s_0789 * s_0783 / Keq_82) / (Km0397_82 * Km0467_82 * Km0785_82) / ((1 + s_0397 / Km0397_82) * (1 + s_0467 / Km0467_82) * (1 + s_0785 / Km0785_82) + (1 + s_0454 / Km0454_82) * (1 + s_0789 / Km0789_82) * (1 + s_0783 / Km0783_82) - 1)) + (cell * Vmax_83 * (s_0397 * s_0467 * s_0971 - s_0454 * s_1411 * s_0783 / Keq_83) / (Km0397_83 * Km0467_83 * Km0971_83) / ((1 + s_0397 / Km0397_83) * (1 + s_0467 / Km0467_83) * (1 + s_0971 / Km0971_83) + (1 + s_0454 / Km0454_83) * (1 + s_1411 / Km1411_83) * (1 + s_0783 / Km0783_83) - 1)) + (cell * Vmax_84 * (s_0397 * s_0467 * s_0976 - s_0454 * s_0533 * s_0783 / Keq_84) / (Km0397_84 * Km0467_84 * Km0976_84) / ((1 + s_0397 / Km0397_84) * (1 + s_0467 / Km0467_84) * (1 + s_0976 / Km0976_84) + (1 + s_0454 / Km0454_84) * (1 + s_0533 / Km0533_84) * (1 + s_0783 / Km0783_84) - 1)) + (cell * Vmax_92 * (s_0408 * s_0467 - s_0421 * s_0454 / Keq_92) / (Km0408_92 * Km0467_92) / ((1 + s_0408 / Km0408_92) * (1 + s_0467 / Km0467_92) + (1 + s_0421 / Km0421_92) * (1 + s_0454 / Km0454_92) - 1)) + (cell * Vmax_97 * (s_1327 - s_0454 * s_0875 / Keq_97) / Km1327_97 / (1 + s_1327 / Km1327_97 + (1 + s_0454 / Km0454_97) * (1 + s_0875 / Km0875_97) - 1)) + (cell * Vmax_104 * (s_1072 * s_0467 * s_1081 - s_0454 * s_1274 * s_0783 / Keq_104) / (Km1072_104 * Km0467_104 * Km1081_104) / ((1 + s_1072 / Km1072_104) * (1 + s_0467 / Km0467_104) * (1 + s_1081 / Km1081_104) + (1 + s_0454 / Km0454_104) * (1 + s_1274 / Km1274_104) * (1 + s_0783 / Km0783_104) - 1)) + (cell * Vmax_105 * (s_1072 * s_0467 * s_0451 - s_0454 * s_1068 * s_0783 / Keq_105) / (Km1072_105 * Km0467_105 * Km0451_105) / ((1 + s_1072 / Km1072_105) * (1 + s_0467 / Km0467_105) * (1 + s_0451 / Km0451_105) + (1 + s_0454 / Km0454_105) * (1 + s_1068 / Km1068_105) * (1 + s_0783 / Km0783_105) - 1)) + (cell * Vmax_113 * (s_1264 * s_0420 - s_0454 * s_0479 * s_0579 / Keq_113) / (Km1264_113 * Km0420_113) / ((1 + s_1264 / Km1264_113) * (1 + s_0420 / Km0420_113) + (1 + s_0454 / Km0454_113) * (1 + s_0479 / Km0479_113) * (1 + s_0579 / Km0579_113) - 1)) + (cell * Vmax_177 * (s_0467 * s_1095 * s_1690 - s_0454 * s_1105 * s_0783 / Keq_177) / (Km0467_177 * Km1095_177 * Km1690_177) / ((1 + s_0467 / Km0467_177) * (1 + s_1095 / Km1095_177) * (1 + s_1690 / Km1690_177) + (1 + s_0454 / Km0454_177) * (1 + s_1105 / Km1105_177) * (1 + s_0783 / Km0783_177) - 1)) + (cell * Vmax_189 * (s_0467 * s_1101 * s_1799 - s_0454 * s_1095 * s_0942 * s_0783 / Keq_189) / (Km0467_189 * Km1101_189 * Km1799_189) / ((1 + s_0467 / Km0467_189) * (1 + s_1101 / Km1101_189) * (1 + s_1799 / Km1799_189) + (1 + s_0454 / Km0454_189) * (1 + s_1095 / Km1095_189) * (1 + s_0942 / Km0942_189) * (1 + s_0783 / Km0783_189) - 1)) + (cell * Vmax_235 * (s_1018 * s_1258 * s_1334 - s_0454 * s_1017 * s_1260 * s_1333 / Keq_235) / (Km1018_235 * Km1258_235 * Km1334_235) / ((1 + s_1018 / Km1018_235) * (1 + s_1258 / Km1258_235) * (1 + s_1334 / Km1334_235) + (1 + s_0454 / Km0454_235) * (1 + s_1017 / Km1017_235) * (1 + s_1260 / Km1260_235) * (1 + s_1333 / Km1333_235) - 1)) + (cell * Vmax_236 * (s_1261 * s_0420 - s_0454 * s_0579 * s_1264 / Keq_236) / (Km1261_236 * Km0420_236) / ((1 + s_1261 / Km1261_236) * (1 + s_0420 / Km0420_236) + (1 + s_0454 / Km0454_236) * (1 + s_0579 / Km0579_236) * (1 + s_1264 / Km1264_236) - 1)) + (cell * Vmax_244 * (s_0467 * s_0732 * s_0451 - s_0454 * s_1333 * s_0783 / Keq_244) / (Km0467_244 * Km0732_244 * Km0451_244) / ((1 + s_0467 / Km0467_244) * (1 + s_0732 / Km0732_244) * (1 + s_0451 / Km0451_244) + (1 + s_0454 / Km0454_244) * (1 + s_1333 / Km1333_244) * (1 + s_0783 / Km0783_244) - 1)) + (cell * Vmax_261 * (s_0470 * s_0467 * s_0032 - s_0454 * s_0033 * s_0783 / Keq_261) / (Km0470_261 * Km0467_261 * Km0032_261) / ((1 + s_0470 / Km0470_261) * (1 + s_0467 / Km0467_261) * (1 + s_0032 / Km0032_261) + (1 + s_0454 / Km0454_261) * (1 + s_0033 / Km0033_261) * (1 + s_0783 / Km0783_261) - 1)) + (cell * Vmax_289 * (s_0467 * s_0446 - s_0454 * s_0360 / Keq_289) / (Km0467_289 * Km0446_289) / ((1 + s_0467 / Km0467_289) * (1 + s_0446 / Km0446_289) + (1 + s_0454 / Km0454_289) * (1 + s_0360 / Km0360_289) - 1)) + (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) - (cell * Vmax_94 * (s_0454 * s_0467 - pow(s_0421, 2) / Keq_94) / (Km0454_94 * Km0467_94) / ((1 + s_0454 / Km0454_94) * (1 + s_0467 / Km0467_94) + pow(1 + s_0421 / Km0421_94, 2) - 1));
    der(s_0457) = (cell * Vmax_101 * (s_0526 * s_1101 - s_0457 * s_1095 * s_1531 / Keq_101) / (Km0526_101 * Km1101_101) / ((1 + s_0526 / Km0526_101) * (1 + s_1101 / Km1101_101) + (1 + s_0457 / Km0457_101) * (1 + s_1095 / Km1095_101) * (1 + s_1531 / Km1531_101) - 1)) - (cell * Vmax_100 * (s_0457 * s_0360 - s_0783 * s_1278 / Keq_100) / (Km0457_100 * Km0360_100) / ((1 + s_0457 / Km0457_100) * (1 + s_0360 / Km0360_100) + (1 + s_0783 / Km0783_100) * (1 + s_1278 / Km1278_100) - 1));
    der(s_0467) = (cell * Vmax_273 * (s_0307 * s_0421 - s_0306 * s_0467 / Keq_273) / (Km0307_273 * Km0421_273) / ((1 + s_0307 / Km0307_273) * (1 + s_0421 / Km0421_273) + (1 + s_0306 / Km0306_273) * (1 + s_0467 / Km0467_273) - 1)) + (cell * Vmax_293 * (s_0421 * s_0783 - s_0467 * s_1430 / Keq_293) / (Km0421_293 * Km0783_293) / ((1 + s_0421 / Km0421_293) * (1 + s_0783 / Km0783_293) + (1 + s_0467 / Km0467_293) * (1 + s_1430 / Km1430_293) - 1)) + (cell * Vmax_365 * (s_0421 * s_1430 - s_0467 / Keq_365) / (Km0421_365 * Km1430_365) / ((1 + s_0421 / Km0421_365) * (1 + s_1430 / Km1430_365) + 1 + s_0467 / Km0467_365 - 1)) - (cell * Vmax_55 * (s_0312 * s_0467 - s_0237 * s_0421 / Keq_55) / (Km0312_55 * Km0467_55) / ((1 + s_0312 / Km0312_55) * (1 + s_0467 / Km0467_55) + (1 + s_0237 / Km0237_55) * (1 + s_0421 / Km0421_55) - 1)) - (cell * Vmax_62 * (s_0367 * s_0467 - s_0368 * s_0454 / Keq_62) / (Km0367_62 * Km0467_62) / ((1 + s_0367 / Km0367_62) * (1 + s_0467 / Km0467_62) + (1 + s_0368 / Km0368_62) * (1 + s_0454 / Km0454_62) - 1)) - (cell * Vmax_67 * (s_0384 * s_0467 - s_0393 * s_0421 / Keq_67) / (Km0384_67 * Km0467_67) / ((1 + s_0384 / Km0384_67) * (1 + s_0467 / Km0467_67) + (1 + s_0393 / Km0393_67) * (1 + s_0421 / Km0421_67) - 1)) - (cell * Vmax_76 * (s_0395 * s_0467 * s_0474 - s_0421 * s_1217 * s_1430 / Keq_76) / (Km0395_76 * Km0467_76 * Km0474_76) / ((1 + s_0395 / Km0395_76) * (1 + s_0467 / Km0467_76) * (1 + s_0474 / Km0474_76) + (1 + s_0421 / Km0421_76) * (1 + s_1217 / Km1217_76) * (1 + s_1430 / Km1430_76) - 1)) - (cell * Vmax_77 * (s_1302 * s_0467 - s_1304 * s_0421 / Keq_77) / (Km1302_77 * Km0467_77) / ((1 + s_1302 / Km1302_77) * (1 + s_0467 / Km0467_77) + (1 + s_1304 / Km1304_77) * (1 + s_0421 / Km0421_77) - 1)) - (cell * Vmax_82 * (s_0397 * s_0467 * s_0785 - s_0454 * s_0789 * s_0783 / Keq_82) / (Km0397_82 * Km0467_82 * Km0785_82) / ((1 + s_0397 / Km0397_82) * (1 + s_0467 / Km0467_82) * (1 + s_0785 / Km0785_82) + (1 + s_0454 / Km0454_82) * (1 + s_0789 / Km0789_82) * (1 + s_0783 / Km0783_82) - 1)) - (cell * Vmax_83 * (s_0397 * s_0467 * s_0971 - s_0454 * s_1411 * s_0783 / Keq_83) / (Km0397_83 * Km0467_83 * Km0971_83) / ((1 + s_0397 / Km0397_83) * (1 + s_0467 / Km0467_83) * (1 + s_0971 / Km0971_83) + (1 + s_0454 / Km0454_83) * (1 + s_1411 / Km1411_83) * (1 + s_0783 / Km0783_83) - 1)) - (cell * Vmax_84 * (s_0397 * s_0467 * s_0976 - s_0454 * s_0533 * s_0783 / Keq_84) / (Km0397_84 * Km0467_84 * Km0976_84) / ((1 + s_0397 / Km0397_84) * (1 + s_0467 / Km0467_84) * (1 + s_0976 / Km0976_84) + (1 + s_0454 / Km0454_84) * (1 + s_0533 / Km0533_84) * (1 + s_0783 / Km0783_84) - 1)) - (cell * Vmax_92 * (s_0408 * s_0467 - s_0421 * s_0454 / Keq_92) / (Km0408_92 * Km0467_92) / ((1 + s_0408 / Km0408_92) * (1 + s_0467 / Km0467_92) + (1 + s_0421 / Km0421_92) * (1 + s_0454 / Km0454_92) - 1)) - (cell * Vmax_94 * (s_0454 * s_0467 - pow(s_0421, 2) / Keq_94) / (Km0454_94 * Km0467_94) / ((1 + s_0454 / Km0454_94) * (1 + s_0467 / Km0467_94) + pow(1 + s_0421 / Km0421_94, 2) - 1)) - (cell * Vmax_98 * (s_0412 * s_0467 - s_0421 * s_0252 / Keq_98) / (Km0412_98 * Km0467_98) / ((1 + s_0412 / Km0412_98) * (1 + s_0467 / Km0467_98) + (1 + s_0421 / Km0421_98) * (1 + s_0252 / Km0252_98) - 1)) - (cell * Vmax_104 * (s_1072 * s_0467 * s_1081 - s_0454 * s_1274 * s_0783 / Keq_104) / (Km1072_104 * Km0467_104 * Km1081_104) / ((1 + s_1072 / Km1072_104) * (1 + s_0467 / Km0467_104) * (1 + s_1081 / Km1081_104) + (1 + s_0454 / Km0454_104) * (1 + s_1274 / Km1274_104) * (1 + s_0783 / Km0783_104) - 1)) - (cell * Vmax_105 * (s_1072 * s_0467 * s_0451 - s_0454 * s_1068 * s_0783 / Keq_105) / (Km1072_105 * Km0467_105 * Km0451_105) / ((1 + s_1072 / Km1072_105) * (1 + s_0467 / Km0467_105) * (1 + s_0451 / Km0451_105) + (1 + s_0454 / Km0454_105) * (1 + s_1068 / Km1068_105) * (1 + s_0783 / Km0783_105) - 1)) - (cell * Vmax_108 * (s_1072 * s_0467 - s_0332 * s_0421 / Keq_108) / (Km1072_108 * Km0467_108) / ((1 + s_1072 / Km1072_108) * (1 + s_0467 / Km0467_108) + (1 + s_0332 / Km0332_108) * (1 + s_0421 / Km0421_108) - 1)) - (cell * Vmax_111 * (s_0467 * s_0360 - s_0783 * s_0099 / Keq_111) / (Km0467_111 * Km0360_111) / ((1 + s_0467 / Km0467_111) * (1 + s_0360 / Km0360_111) + (1 + s_0783 / Km0783_111) * (1 + s_0099 / Km0099_111) - 1)) - (cell * Vmax_116 * (s_0467 * s_0543 * s_0451 - s_0421 * s_0502 / Keq_116) / (Km0467_116 * Km0543_116 * Km0451_116) / ((1 + s_0467 / Km0467_116) * (1 + s_0543 / Km0543_116) * (1 + s_0451 / Km0451_116) + (1 + s_0421 / Km0421_116) * (1 + s_0502 / Km0502_116) - 1)) - (cell * Vmax_124 * (s_0467 * s_1101 * s_1792 - s_0421 * s_0575 * s_1095 * s_1430 / Keq_124) / (Km0467_124 * Km1101_124 * Km1792_124) / ((1 + s_0467 / Km0467_124) * (1 + s_1101 / Km1101_124) * (1 + s_1792 / Km1792_124) + (1 + s_0421 / Km0421_124) * (1 + s_0575 / Km0575_124) * (1 + s_1095 / Km1095_124) * (1 + s_1430 / Km1430_124) - 1)) - (cell * Vmax_128 * (s_0467 * s_0539 - s_0421 * s_0510 / Keq_128) / (Km0467_128 * Km0539_128) / ((1 + s_0467 / Km0467_128) * (1 + s_0539 / Km0539_128) + (1 + s_0421 / Km0421_128) * (1 + s_0510 / Km0510_128) - 1)) - (cell * Vmax_129 * (pow(s_0600, 2) * s_0467 - s_0421 * s_0603 * s_1430 / Keq_129) / (pow(Km0600_129, 2) * Km0467_129) / (pow(1 + s_0600 / Km0600_129, 2) * (1 + s_0467 / Km0467_129) + (1 + s_0421 / Km0421_129) * (1 + s_0603 / Km0603_129) * (1 + s_1430 / Km1430_129) - 1)) - (cell * Vmax_130 * (s_0467 * s_0754 - s_0421 * s_0555 / Keq_130) / (Km0467_130 * Km0754_130) / ((1 + s_0467 / Km0467_130) * (1 + s_0754 / Km0754_130) + (1 + s_0421 / Km0421_130) * (1 + s_0555 / Km0555_130) - 1)) - (cell * Vmax_131 * (s_0467 * s_0543 * s_0371 - s_0421 * s_0755 * s_1430 / Keq_131) / (Km0467_131 * Km0543_131 * Km0371_131) / ((1 + s_0467 / Km0467_131) * (1 + s_0543 / Km0543_131) * (1 + s_0371 / Km0371_131) + (1 + s_0421 / Km0421_131) * (1 + s_0755 / Km0755_131) * (1 + s_1430 / Km1430_131) - 1)) - (cell * Vmax_139 * (s_0467 * s_0767 * s_1095 - s_0421 * s_0372 * s_1430 / Keq_139) / (Km0467_139 * Km0767_139 * Km1095_139) / ((1 + s_0467 / Km0467_139) * (1 + s_0767 / Km0767_139) * (1 + s_1095 / Km1095_139) + (1 + s_0421 / Km0421_139) * (1 + s_0372 / Km0372_139) * (1 + s_1430 / Km1430_139) - 1)) - (cell * Vmax_148 * (s_0467 * s_0802 - s_0421 * s_0795 / Keq_148) / (Km0467_148 * Km0802_148) / ((1 + s_0467 / Km0467_148) * (1 + s_0802 / Km0802_148) + (1 + s_0421 / Km0421_148) * (1 + s_0795 / Km0795_148) - 1)) - (cell * Vmax_160 * (s_0467 * s_0863 - s_0859 * s_0783 / Keq_160) / (Km0467_160 * Km0863_160) / ((1 + s_0467 / Km0467_160) * (1 + s_0863 / Km0863_160) + (1 + s_0859 / Km0859_160) * (1 + s_0783 / Km0783_160) - 1)) - (cell * Vmax_161 * (s_0467 * s_0867 * s_0337 - s_0133 * s_0421 * s_1430 / Keq_161) / (Km0467_161 * Km0867_161 * Km0337_161) / ((1 + s_0467 / Km0467_161) * (1 + s_0867 / Km0867_161) * (1 + s_0337 / Km0337_161) + (1 + s_0133 / Km0133_161) * (1 + s_0421 / Km0421_161) * (1 + s_1430 / Km1430_161) - 1)) - (cell * Vmax_163 * (s_0467 * s_0867 * s_1318 - s_0421 * s_1322 * s_1430 / Keq_163) / (Km0467_163 * Km0867_163 * Km1318_163) / ((1 + s_0467 / Km0467_163) * (1 + s_0867 / Km0867_163) * (1 + s_1318 / Km1318_163) + (1 + s_0421 / Km0421_163) * (1 + s_1322 / Km1322_163) * (1 + s_1430 / Km1430_163) - 1)) - (cell * Vmax_168 * (s_0467 * s_1095 - s_0421 * s_1099 / Keq_168) / (Km0467_168 * Km1095_168) / ((1 + s_0467 / Km0467_168) * (1 + s_1095 / Km1095_168) + (1 + s_0421 / Km0421_168) * (1 + s_1099 / Km1099_168) - 1)) - (cell * Vmax_174 * (s_0467 * s_1095 * s_0451 - s_0421 * s_1101 * s_1430 / Keq_174) / (Km0467_174 * Km1095_174 * Km0451_174) / ((1 + s_0467 / Km0467_174) * (1 + s_1095 / Km1095_174) * (1 + s_0451 / Km0451_174) + (1 + s_0421 / Km0421_174) * (1 + s_1101 / Km1101_174) * (1 + s_1430 / Km1430_174) - 1)) - (cell * Vmax_177 * (s_0467 * s_1095 * s_1690 - s_0454 * s_1105 * s_0783 / Keq_177) / (Km0467_177 * Km1095_177 * Km1690_177) / ((1 + s_0467 / Km0467_177) * (1 + s_1095 / Km1095_177) * (1 + s_1690 / Km1690_177) + (1 + s_0454 / Km0454_177) * (1 + s_1105 / Km1105_177) * (1 + s_0783 / Km0783_177) - 1)) - (cell * Vmax_179 * (s_0467 * s_0029 - s_0675 * s_0421 / Keq_179) / (Km0467_179 * Km0029_179) / ((1 + s_0467 / Km0467_179) * (1 + s_0029 / Km0029_179) + (1 + s_0675 / Km0675_179) * (1 + s_0421 / Km0421_179) - 1)) - (cell * Vmax_189 * (s_0467 * s_1101 * s_1799 - s_0454 * s_1095 * s_0942 * s_0783 / Keq_189) / (Km0467_189 * Km1101_189 * Km1799_189) / ((1 + s_0467 / Km0467_189) * (1 + s_1101 / Km1101_189) * (1 + s_1799 / Km1799_189) + (1 + s_0454 / Km0454_189) * (1 + s_1095 / Km1095_189) * (1 + s_0942 / Km0942_189) * (1 + s_0783 / Km0783_189) - 1)) - (cell * Vmax_192 * (s_0467 * s_0942 - s_0421 * s_0896 / Keq_192) / (Km0467_192 * Km0942_192) / ((1 + s_0467 / Km0467_192) * (1 + s_0942 / Km0942_192) + (1 + s_0421 / Km0421_192) * (1 + s_0896 / Km0896_192) - 1)) - (cell * Vmax_194 * (s_0467 * s_0622 - s_0421 * s_0627 / Keq_194) / (Km0467_194 * Km0622_194) / ((1 + s_0467 / Km0467_194) * (1 + s_0622 / Km0622_194) + (1 + s_0421 / Km0421_194) * (1 + s_0627 / Km0627_194) - 1)) - (cell * Vmax_195 * (s_0467 * s_0657 - s_0421 * s_0663 / Keq_195) / (Km0467_195 * Km0657_195) / ((1 + s_0467 / Km0467_195) * (1 + s_0657 / Km0657_195) + (1 + s_0421 / Km0421_195) * (1 + s_0663 / Km0663_195) - 1)) - (cell * Vmax_200 * (s_0467 * s_1113 - s_0421 * s_1363 / Keq_200) / (Km0467_200 * Km1113_200) / ((1 + s_0467 / Km0467_200) * (1 + s_1113 / Km1113_200) + (1 + s_0421 / Km0421_200) * (1 + s_1363 / Km1363_200) - 1)) - (cell * Vmax_232 * (s_0467 * s_1141 - s_1552 * s_1430 * s_0783 / Keq_232) / (Km0467_232 * Km1141_232) / ((1 + s_0467 / Km0467_232) * (1 + s_1141 / Km1141_232) + (1 + s_1552 / Km1552_232) * (1 + s_1430 / Km1430_232) * (1 + s_0783 / Km0783_232) - 1)) - (cell * Vmax_237 * (s_0467 * s_1265 - s_0420 * s_0783 / Keq_237) / (Km0467_237 * Km1265_237) / ((1 + s_0467 / Km0467_237) * (1 + s_1265 / Km1265_237) + (1 + s_0420 / Km0420_237) * (1 + s_0783 / Km0783_237) - 1)) - (cell * Vmax_239 * (s_0467 * s_1259 - s_1258 * s_0783 / Keq_239) / (Km0467_239 * Km1259_239) / ((1 + s_0467 / Km0467_239) * (1 + s_1259 / Km1259_239) + (1 + s_1258 / Km1258_239) * (1 + s_0783 / Km0783_239) - 1)) - (cell * Vmax_243 * (s_0467 * s_1333 - s_0421 * s_1335 / Keq_243) / (Km0467_243 * Km1333_243) / ((1 + s_0467 / Km0467_243) * (1 + s_1333 / Km1333_243) + (1 + s_0421 / Km0421_243) * (1 + s_1335 / Km1335_243) - 1)) - (cell * Vmax_244 * (s_0467 * s_0732 * s_0451 - s_0454 * s_1333 * s_0783 / Keq_244) / (Km0467_244 * Km0732_244 * Km0451_244) / ((1 + s_0467 / Km0467_244) * (1 + s_0732 / Km0732_244) * (1 + s_0451 / Km0451_244) + (1 + s_0454 / Km0454_244) * (1 + s_1333 / Km1333_244) * (1 + s_0783 / Km0783_244) - 1)) - (cell * Vmax_245 * (s_0467 * s_1340 - s_0732 * s_0783 / Keq_245) / (Km0467_245 * Km1340_245) / ((1 + s_0467 / Km0467_245) * (1 + s_1340 / Km1340_245) + (1 + s_0732 / Km0732_245) * (1 + s_0783 / Km0783_245) - 1)) - (cell * Vmax_247 * (s_0467 * s_0510 - s_0421 * s_0575 / Keq_247) / (Km0467_247 * Km0510_247) / ((1 + s_0467 / Km0467_247) * (1 + s_0510 / Km0510_247) + (1 + s_0421 / Km0421_247) * (1 + s_0575 / Km0575_247) - 1)) - (cell * Vmax_248 * (s_0467 * s_0795 - s_0421 * s_0805 / Keq_248) / (Km0467_248 * Km0795_248) / ((1 + s_0467 / Km0467_248) * (1 + s_0795 / Km0795_248) + (1 + s_0421 / Km0421_248) * (1 + s_0805 / Km0805_248) - 1)) - (cell * Vmax_249 * (s_0467 * s_0896 - s_0421 * s_0945 / Keq_249) / (Km0467_249 * Km0896_249) / ((1 + s_0467 / Km0467_249) * (1 + s_0896 / Km0896_249) + (1 + s_0421 / Km0421_249) * (1 + s_0945 / Km0945_249) - 1)) - (cell * Vmax_250 * (s_0467 * s_1733 - s_0421 * s_1792 / Keq_250) / (Km0467_250 * Km1733_250) / ((1 + s_0467 / Km0467_250) * (1 + s_1733 / Km1733_250) + (1 + s_0421 / Km0421_250) * (1 + s_1792 / Km1792_250) - 1)) - (cell * Vmax_251 * (s_0467 - s_0421 * s_1430 / Keq_251) / Km0467_251 / (1 + s_0467 / Km0467_251 + (1 + s_0421 / Km0421_251) * (1 + s_1430 / Km1430_251) - 1)) - (cell * Vmax_259 * (s_0467 * s_1413 - s_0754 * s_0783 / Keq_259) / (Km0467_259 * Km1413_259) / ((1 + s_0467 / Km0467_259) * (1 + s_1413 / Km1413_259) + (1 + s_0754 / Km0754_259) * (1 + s_0783 / Km0783_259) - 1)) - (cell * Vmax_260 * (s_0467 * s_0033 - s_0599 * s_0421 / Keq_260) / (Km0467_260 * Km0033_260) / ((1 + s_0467 / Km0467_260) * (1 + s_0033 / Km0033_260) + (1 + s_0599 / Km0599_260) * (1 + s_0421 / Km0421_260) - 1)) - (cell * Vmax_261 * (s_0470 * s_0467 * s_0032 - s_0454 * s_0033 * s_0783 / Keq_261) / (Km0470_261 * Km0467_261 * Km0032_261) / ((1 + s_0470 / Km0470_261) * (1 + s_0467 / Km0467_261) * (1 + s_0032 / Km0032_261) + (1 + s_0454 / Km0454_261) * (1 + s_0033 / Km0033_261) * (1 + s_0783 / Km0783_261) - 1)) - (cell * Vmax_275 * (s_0313 * s_0467 - s_0218 * s_0421 / Keq_275) / (Km0313_275 * Km0467_275) / ((1 + s_0313 / Km0313_275) * (1 + s_0467 / Km0467_275) + (1 + s_0218 / Km0218_275) * (1 + s_0421 / Km0421_275) - 1)) - (cell * Vmax_281 * (s_0342 * s_0467 * s_0474 - s_0362 * s_0421 * s_1430 / Keq_281) / (Km0342_281 * Km0467_281 * Km0474_281) / ((1 + s_0342 / Km0342_281) * (1 + s_0467 / Km0467_281) * (1 + s_0474 / Km0474_281) + (1 + s_0362 / Km0362_281) * (1 + s_0421 / Km0421_281) * (1 + s_1430 / Km1430_281) - 1)) - (cell * Vmax_283 * (s_0467 * s_0162 - s_0421 * s_0342 * s_1430 / Keq_283) / (Km0467_283 * Km0162_283) / ((1 + s_0467 / Km0467_283) * (1 + s_0162 / Km0162_283) + (1 + s_0421 / Km0421_283) * (1 + s_0342 / Km0342_283) * (1 + s_1430 / Km1430_283) - 1)) - (cell * Vmax_285 * (s_0344 * s_1072 * s_0467 - s_0040 * s_0421 * s_1430 / Keq_285) / (Km0344_285 * Km1072_285 * Km0467_285) / ((1 + s_0344 / Km0344_285) * (1 + s_1072 / Km1072_285) * (1 + s_0467 / Km0467_285) + (1 + s_0040 / Km0040_285) * (1 + s_0421 / Km0421_285) * (1 + s_1430 / Km1430_285) - 1)) - (cell * Vmax_287 * (s_0467 * s_1322 * s_1101 - s_0421 * s_0162 * s_1095 * s_1430 / Keq_287) / (Km0467_287 * Km1322_287 * Km1101_287) / ((1 + s_0467 / Km0467_287) * (1 + s_1322 / Km1322_287) * (1 + s_1101 / Km1101_287) + (1 + s_0421 / Km0421_287) * (1 + s_0162 / Km0162_287) * (1 + s_1095 / Km1095_287) * (1 + s_1430 / Km1430_287) - 1)) - (cell * Vmax_288 * (s_0467 * s_0929 * s_0361 - s_0421 * s_1318 * s_1430 / Keq_288) / (Km0467_288 * Km0929_288 * Km0361_288) / ((1 + s_0467 / Km0467_288) * (1 + s_0929 / Km0929_288) * (1 + s_0361 / Km0361_288) + (1 + s_0421 / Km0421_288) * (1 + s_1318 / Km1318_288) * (1 + s_1430 / Km1430_288) - 1)) - (cell * Vmax_289 * (s_0467 * s_0446 - s_0454 * s_0360 / Keq_289) / (Km0467_289 * Km0446_289) / ((1 + s_0467 / Km0467_289) * (1 + s_0446 / Km0446_289) + (1 + s_0454 / Km0454_289) * (1 + s_0360 / Km0360_289) - 1)) - (cell * Vmax_305 * (s_0467 * s_1546 - s_0421 * s_0863 / Keq_305) / (Km0467_305 * Km1546_305) / ((1 + s_0467 / Km0467_305) * (1 + s_1546 / Km1546_305) + (1 + s_0421 / Km0421_305) * (1 + s_0863 / Km0863_305) - 1)) - (cell * Vmax_308 * (s_0467 * pow(s_0861, 2) - s_0726 * pow(s_0862, 2) / Keq_308) / (Km0467_308 * pow(Km0861_308, 2)) / ((1 + s_0467 / Km0467_308) * pow(1 + s_0861 / Km0861_308, 2) + (1 + s_0726 / Km0726_308) * pow(1 + s_0862 / Km0862_308, 2) - 1)) - (cell * Vmax_318 * (s_0467 * s_1571 - s_0421 * s_1574 / Keq_318) / (Km0467_318 * Km1571_318) / ((1 + s_0467 / Km0467_318) * (1 + s_1571 / Km1571_318) + (1 + s_0421 / Km0421_318) * (1 + s_1574 / Km1574_318) - 1)) - (cell * Vmax_321 * (s_0467 * s_0555 * s_1595 - s_0421 * s_1430 * s_1599 / Keq_321) / (Km0467_321 * Km0555_321 * Km1595_321) / ((1 + s_0467 / Km0467_321) * (1 + s_0555 / Km0555_321) * (1 + s_1595 / Km1595_321) + (1 + s_0421 / Km0421_321) * (1 + s_1430 / Km1430_321) * (1 + s_1599 / Km1599_321) - 1)) - (cell * Vmax_324 * (s_0467 * s_0945 * s_1609 - s_0412 * s_0896 * s_1430 * s_0783 / Keq_324) / (Km0467_324 * Km0945_324 * Km1609_324) / ((1 + s_0467 / Km0467_324) * (1 + s_0945 / Km0945_324) * (1 + s_1609 / Km1609_324) + (1 + s_0412 / Km0412_324) * (1 + s_0896 / Km0896_324) * (1 + s_1430 / Km1430_324) * (1 + s_0783 / Km0783_324) - 1)) - (cell * Vmax_327 * (s_0467 * s_1204 - s_0421 * s_0147 / Keq_327) / (Km0467_327 * Km1204_327) / ((1 + s_0467 / Km0467_327) * (1 + s_1204 / Km1204_327) + (1 + s_0421 / Km0421_327) * (1 + s_0147 / Km0147_327) - 1)) - (cell * Vmax_330 * (s_0467 * s_1643 - s_0421 * s_1644 / Keq_330) / (Km0467_330 * Km1643_330) / ((1 + s_0467 / Km0467_330) * (1 + s_1643 / Km1643_330) + (1 + s_0421 / Km0421_330) * (1 + s_1644 / Km1644_330) - 1)) - (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) - (cell * Vmax_351 * (s_1041 * s_0467 * s_1750 - s_0421 * s_1430 * s_1751 / Keq_351) / (Km1041_351 * Km0467_351 * Km1750_351) / ((1 + s_1041 / Km1041_351) * (1 + s_0467 / Km0467_351) * (1 + s_1750 / Km1750_351) + (1 + s_0421 / Km0421_351) * (1 + s_1430 / Km1430_351) * (1 + s_1751 / Km1751_351) - 1)) - (cell * Vmax_352 * (s_0467 * s_0671 * s_1751 - s_0421 * s_1430 * s_1754 / Keq_352) / (Km0467_352 * Km0671_352 * Km1751_352) / ((1 + s_0467 / Km0467_352) * (1 + s_0671 / Km0671_352) * (1 + s_1751 / Km1751_352) + (1 + s_0421 / Km0421_352) * (1 + s_1430 / Km1430_352) * (1 + s_1754 / Km1754_352) - 1)) - (cell * Vmax_353 * (s_1242 * s_0467 * s_1754 - s_0421 * s_1430 * s_1752 / Keq_353) / (Km1242_353 * Km0467_353 * Km1754_353) / ((1 + s_1242 / Km1242_353) * (1 + s_0467 / Km0467_353) * (1 + s_1754 / Km1754_353) + (1 + s_0421 / Km0421_353) * (1 + s_1430 / Km1430_353) * (1 + s_1752 / Km1752_353) - 1)) - (cell * Vmax_354 * (s_0603 * s_0467 * s_1752 - s_0421 * s_1430 * s_1755 / Keq_354) / (Km0603_354 * Km0467_354 * Km1752_354) / ((1 + s_0603 / Km0603_354) * (1 + s_0467 / Km0467_354) * (1 + s_1752 / Km1752_354) + (1 + s_0421 / Km0421_354) * (1 + s_1430 / Km1430_354) * (1 + s_1755 / Km1755_354) - 1)) - (cell * Vmax_356 * (s_0467 * s_1762 - s_0421 * s_1733 / Keq_356) / (Km0467_356 * Km1762_356) / ((1 + s_0467 / Km0467_356) * (1 + s_1762 / Km1762_356) + (1 + s_0421 / Km0421_356) * (1 + s_1733 / Km1733_356) - 1)) - (2.0 * cell * Vmax_390 * (s_0229 * pow(s_0467, 2) * s_1333 - s_0226 * pow(s_0421, 2) * s_1334 * pow(s_1430, 2) / Keq_390) / (Km0229_390 * pow(Km0467_390, 2) * Km1333_390) / ((1 + s_0229 / Km0229_390) * pow(1 + s_0467 / Km0467_390, 2) * (1 + s_1333 / Km1333_390) + (1 + s_0226 / Km0226_390) * pow(1 + s_0421 / Km0421_390, 2) * (1 + s_1334 / Km1334_390) * pow(1 + s_1430 / Km1430_390, 2) - 1)) - (54.12 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0470) = (cell * Vmax_106 * (s_1072 - s_0470 * s_0543 / Keq_106) / Km1072_106 / (1 + s_1072 / Km1072_106 + (1 + s_0470 / Km0470_106) * (1 + s_0543 / Km0543_106) - 1)) - (cell * Vmax_261 * (s_0470 * s_0467 * s_0032 - s_0454 * s_0033 * s_0783 / Keq_261) / (Km0470_261 * Km0467_261 * Km0032_261) / ((1 + s_0470 / Km0470_261) * (1 + s_0467 / Km0467_261) * (1 + s_0032 / Km0032_261) + (1 + s_0454 / Km0454_261) * (1 + s_0033 / Km0033_261) * (1 + s_0783 / Km0783_261) - 1));
    der(s_0474) = (cell * Vmax_193 * (s_0543 - s_0474 / Keq_193) / Km0543_193 / (1 + s_0543 / Km0543_193 + 1 + s_0474 / Km0474_193 - 1)) - (cell * Vmax_76 * (s_0395 * s_0467 * s_0474 - s_0421 * s_1217 * s_1430 / Keq_76) / (Km0395_76 * Km0467_76 * Km0474_76) / ((1 + s_0395 / Km0395_76) * (1 + s_0467 / Km0467_76) * (1 + s_0474 / Km0474_76) + (1 + s_0421 / Km0421_76) * (1 + s_1217 / Km1217_76) * (1 + s_1430 / Km1430_76) - 1)) - (cell * Vmax_281 * (s_0342 * s_0467 * s_0474 - s_0362 * s_0421 * s_1430 / Keq_281) / (Km0342_281 * Km0467_281 * Km0474_281) / ((1 + s_0342 / Km0342_281) * (1 + s_0467 / Km0467_281) * (1 + s_0474 / Km0474_281) + (1 + s_0362 / Km0362_281) * (1 + s_0421 / Km0421_281) * (1 + s_1430 / Km1430_281) - 1));
    der(s_0476) = (cell * Vmax_112 * (s_0378 * s_1552 * s_0755 - s_0377 * s_0476 * s_0333 * s_1141 / Keq_112) / (Km0378_112 * Km1552_112 * Km0755_112) / ((1 + s_0378 / Km0378_112) * (1 + s_1552 / Km1552_112) * (1 + s_0755 / Km0755_112) + (1 + s_0377 / Km0377_112) * (1 + s_0476 / Km0476_112) * (1 + s_0333 / Km0333_112) * (1 + s_1141 / Km1141_112) - 1)) - (2e-06 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0479) = (cell * Vmax_113 * (s_1264 * s_0420 - s_0454 * s_0479 * s_0579 / Keq_113) / (Km1264_113 * Km0420_113) / ((1 + s_1264 / Km1264_113) * (1 + s_0420 / Km0420_113) + (1 + s_0454 / Km0454_113) * (1 + s_0479 / Km0479_113) * (1 + s_0579 / Km0579_113) - 1)) - (cell * Vmax_115 * (s_0479 * s_0945 - s_0481 * s_0783 / Keq_115) / (Km0479_115 * Km0945_115) / ((1 + s_0479 / Km0479_115) * (1 + s_0945 / Km0945_115) + (1 + s_0481 / Km0481_115) * (1 + s_0783 / Km0783_115) - 1));
    der(s_0480) = (cell * Vmax_114 * (s_0481 * s_0945 - s_0480 * s_0783 / Keq_114) / (Km0481_114 * Km0945_114) / ((1 + s_0481 / Km0481_114) * (1 + s_0945 / Km0945_114) + (1 + s_0480 / Km0480_114) * (1 + s_0783 / Km0783_114) - 1)) - (0.000122 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0481) = (cell * Vmax_115 * (s_0479 * s_0945 - s_0481 * s_0783 / Keq_115) / (Km0479_115 * Km0945_115) / ((1 + s_0479 / Km0479_115) * (1 + s_0945 / Km0945_115) + (1 + s_0481 / Km0481_115) * (1 + s_0783 / Km0783_115) - 1)) - (cell * Vmax_114 * (s_0481 * s_0945 - s_0480 * s_0783 / Keq_114) / (Km0481_114 * Km0945_114) / ((1 + s_0481 / Km0481_114) * (1 + s_0945 / Km0945_114) + (1 + s_0480 / Km0480_114) * (1 + s_0783 / Km0783_114) - 1));
    der(s_0488) = (cell * Vmax_85 * (s_0574 * s_0860 - s_0488 * s_0859 / Keq_85) / (Km0574_85 * Km0860_85) / ((1 + s_0574 / Km0574_85) * (1 + s_0860 / Km0860_85) + (1 + s_0488 / Km0488_85) * (1 + s_0859 / Km0859_85) - 1)) - (cell * Vmax_70 * (s_0395 * s_0488 - s_0299 * s_0555 / Keq_70) / (Km0395_70 * Km0488_70) / ((1 + s_0395 / Km0395_70) * (1 + s_0488 / Km0488_70) + (1 + s_0299 / Km0299_70) * (1 + s_0555 / Km0555_70) - 1));
    der(s_0493) = (cell * Vmax_208 * (s_0096 - s_0493 * s_0543 / Keq_208) / Km0096_208 / (1 + s_0096 / Km0096_208 + (1 + s_0493 / Km0493_208) * (1 + s_0543 / Km0543_208) - 1)) - (cell * Vmax_340 * (s_0493 - s_0913 * s_1009 / Keq_340) / Km0493_340 / (1 + s_0493 / Km0493_340 + (1 + s_0913 / Km0913_340) * (1 + s_1009 / Km1009_340) - 1));
    der(s_0497) = (cell * Vmax_366 * (s_0499 - s_0497) / Km0499_366 / (1 + s_0499 / Km0499_366 + 1 + s_0497 / Km0497_366 - 1)) - (0.005205 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0499) = 0.0;
    der(s_0502) = (cell * Vmax_116 * (s_0467 * s_0543 * s_0451 - s_0421 * s_0502 / Keq_116) / (Km0467_116 * Km0543_116 * Km0451_116) / ((1 + s_0467 / Km0467_116) * (1 + s_0543 / Km0543_116) * (1 + s_0451 / Km0451_116) + (1 + s_0421 / Km0421_116) * (1 + s_0502 / Km0502_116) - 1)) - (cell * Vmax_107 * (s_1072 * s_0502 - s_1312 * s_1430 / Keq_107) / (Km1072_107 * Km0502_107) / ((1 + s_1072 / Km1072_107) * (1 + s_0502 / Km0502_107) + (1 + s_1312 / Km1312_107) * (1 + s_1430 / Km1430_107) - 1)) - (cell * Vmax_256 * (s_0502 * s_1391 - s_1081 * s_1430 / Keq_256) / (Km0502_256 * Km1391_256) / ((1 + s_0502 / Km0502_256) * (1 + s_1391 / Km1391_256) + (1 + s_1081 / Km1081_256) * (1 + s_1430 / Km1430_256) - 1));
    der(s_0510) = (cell * Vmax_128 * (s_0467 * s_0539 - s_0421 * s_0510 / Keq_128) / (Km0467_128 * Km0539_128) / ((1 + s_0467 / Km0467_128) * (1 + s_0539 / Km0539_128) + (1 + s_0421 / Km0421_128) * (1 + s_0510 / Km0510_128) - 1)) - (cell * Vmax_247 * (s_0467 * s_0510 - s_0421 * s_0575 / Keq_247) / (Km0467_247 * Km0510_247) / ((1 + s_0467 / Km0467_247) * (1 + s_0510 / Km0510_247) + (1 + s_0421 / Km0421_247) * (1 + s_0575 / Km0575_247) - 1));
    der(s_0512) = (cell * Vmax_118 * (s_0575 * s_0073 - s_0512 * s_0783 / Keq_118) / (Km0575_118 * Km0073_118) / ((1 + s_0575 / Km0575_118) * (1 + s_0073 / Km0073_118) + (1 + s_0512 / Km0512_118) * (1 + s_0783 / Km0783_118) - 1)) - (cell * Vmax_266 * (s_0512 * s_1170 - s_0539 * s_1476 / Keq_266) / (Km0512_266 * Km1170_266) / ((1 + s_0512 / Km0512_266) * (1 + s_1170 / Km1170_266) + (1 + s_0539 / Km0539_266) * (1 + s_1476 / Km1476_266) - 1));
    der(s_0513) = (cell * Vmax_117 * (s_0575 * s_0075 - s_0513 * s_0783 / Keq_117) / (Km0575_117 * Km0075_117) / ((1 + s_0575 / Km0575_117) * (1 + s_0075 / Km0075_117) + (1 + s_0513 / Km0513_117) * (1 + s_0783 / Km0783_117) - 1)) - (cell * Vmax_265 * (s_0513 * s_1170 - s_0539 * s_1477 / Keq_265) / (Km0513_265 * Km1170_265) / ((1 + s_0513 / Km0513_265) * (1 + s_1170 / Km1170_265) + (1 + s_0539 / Km0539_265) * (1 + s_1477 / Km1477_265) - 1));
    der(s_0520) = (cell * Vmax_367 * (s_0522 - s_0520) / Km0522_367 / (1 + s_0522 / Km0522_367 + 1 + s_0520 / Km0520_367 - 1)) - (0.005205 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0522) = 0.0;
    der(s_0526) = (cell * Vmax_121 * (s_0359 - s_0526 * s_1430 / Keq_121) / Km0359_121 / (1 + s_0359 / Km0359_121 + (1 + s_0526 / Km0526_121) * (1 + s_1430 / Km1430_121) - 1)) - (cell * Vmax_57 * (s_0526 * s_1101 - s_0316 * s_1095 / Keq_57) / (Km0526_57 * Km1101_57) / ((1 + s_0526 / Km0526_57) * (1 + s_1101 / Km1101_57) + (1 + s_0316 / Km0316_57) * (1 + s_1095 / Km1095_57) - 1)) - (cell * Vmax_101 * (s_0526 * s_1101 - s_0457 * s_1095 * s_1531 / Keq_101) / (Km0526_101 * Km1101_101) / ((1 + s_0526 / Km0526_101) * (1 + s_1101 / Km1101_101) + (1 + s_0457 / Km0457_101) * (1 + s_1095 / Km1095_101) * (1 + s_1531 / Km1531_101) - 1)) - (cell * Vmax_119 * (s_0526 - s_1497 / Keq_119) / Km0526_119 / (1 + s_0526 / Km0526_119 + 1 + s_1497 / Km1497_119 - 1)) - (cell * Vmax_120 * (s_0526 - s_0325 * s_1531 / Keq_120) / Km0526_120 / (1 + s_0526 / Km0526_120 + (1 + s_0325 / Km0325_120) * (1 + s_1531 / Km1531_120) - 1));
    der(s_0530) = (cell * Vmax_80 * (s_0536 - s_0530 / Keq_80) / Km0536_80 / (1 + s_0536 / Km0536_80 + 1 + s_0530 / Km0530_80 - 1)) - (cell * Vmax_81 * (s_0530 - s_1027 / Keq_81) / Km0530_81 / (1 + s_0530 / Km0530_81 + 1 + s_1027 / Km1027_81 - 1));
    der(s_0533) = (cell * Vmax_84 * (s_0397 * s_0467 * s_0976 - s_0454 * s_0533 * s_0783 / Keq_84) / (Km0397_84 * Km0467_84 * Km0976_84) / ((1 + s_0397 / Km0397_84) * (1 + s_0467 / Km0467_84) * (1 + s_0976 / Km0976_84) + (1 + s_0454 / Km0454_84) * (1 + s_0533 / Km0533_84) * (1 + s_0783 / Km0783_84) - 1)) - (cell * Vmax_4 * (s_0119 * s_0533 - s_0397 * s_0073 / Keq_4) / (Km0119_4 * Km0533_4) / ((1 + s_0119 / Km0119_4) * (1 + s_0533 / Km0533_4) + (1 + s_0397 / Km0397_4) * (1 + s_0073 / Km0073_4) - 1)) - (cell * Vmax_181 * (s_0920 * s_0533 - s_0119 * s_0397 / Keq_181) / (Km0920_181 * Km0533_181) / ((1 + s_0920 / Km0920_181) * (1 + s_0533 / Km0533_181) + (1 + s_0119 / Km0119_181) * (1 + s_0397 / Km0397_181) - 1));
    der(s_0536) = (cell * Vmax_122 * (s_0395 * s_1399 - s_0536 * s_0555 / Keq_122) / (Km0395_122 * Km1399_122) / ((1 + s_0395 / Km0395_122) * (1 + s_1399 / Km1399_122) + (1 + s_0536 / Km0536_122) * (1 + s_0555 / Km0555_122) - 1)) - (cell * Vmax_80 * (s_0536 - s_0530 / Keq_80) / Km0536_80 / (1 + s_0536 / Km0536_80 + 1 + s_0530 / Km0530_80 - 1));
    der(s_0539) = (cell * Vmax_9 * (s_0237 - s_0193 * s_0539 / Keq_9) / Km0237_9 / (1 + s_0237 / Km0237_9 + (1 + s_0193 / Km0193_9) * (1 + s_0539 / Km0539_9) - 1)) + (cell * Vmax_24 * (s_0542 * s_0147 - s_0539 * s_1038 / Keq_24) / (Km0542_24 * Km0147_24) / ((1 + s_0542 / Km0542_24) * (1 + s_0147 / Km0147_24) + (1 + s_0539 / Km0539_24) * (1 + s_1038 / Km1038_24) - 1)) + (cell * Vmax_25 * (s_0542 * s_1038 - s_0539 * s_1033 / Keq_25) / (Km0542_25 * Km1038_25) / ((1 + s_0542 / Km0542_25) * (1 + s_1038 / Km1038_25) + (1 + s_0539 / Km0539_25) * (1 + s_1033 / Km1033_25) - 1)) + (cell * Vmax_265 * (s_0513 * s_1170 - s_0539 * s_1477 / Keq_265) / (Km0513_265 * Km1170_265) / ((1 + s_0513 / Km0513_265) * (1 + s_1170 / Km1170_265) + (1 + s_0539 / Km0539_265) * (1 + s_1477 / Km1477_265) - 1)) + (cell * Vmax_266 * (s_0512 * s_1170 - s_0539 * s_1476 / Keq_266) / (Km0512_266 * Km1170_266) / ((1 + s_0512 / Km0512_266) * (1 + s_1170 / Km1170_266) + (1 + s_0539 / Km0539_266) * (1 + s_1476 / Km1476_266) - 1)) + (cell * Vmax_276 * (s_0599 * s_0575 * s_1083 - s_1277 * s_0539 * s_0783 / Keq_276) / (Km0599_276 * Km0575_276 * Km1083_276) / ((1 + s_0599 / Km0599_276) * (1 + s_0575 / Km0575_276) * (1 + s_1083 / Km1083_276) + (1 + s_1277 / Km1277_276) * (1 + s_0539 / Km0539_276) * (1 + s_0783 / Km0783_276) - 1)) - (cell * Vmax_128 * (s_0467 * s_0539 - s_0421 * s_0510 / Keq_128) / (Km0467_128 * Km0539_128) / ((1 + s_0467 / Km0467_128) * (1 + s_0539 / Km0539_128) + (1 + s_0421 / Km0421_128) * (1 + s_0510 / Km0510_128) - 1));
    der(s_0542) = (cell * Vmax_26 * (s_0575 * s_0271 - s_0542 * s_0783 / Keq_26) / (Km0575_26 * Km0271_26) / ((1 + s_0575 / Km0575_26) * (1 + s_0271 / Km0271_26) + (1 + s_0542 / Km0542_26) * (1 + s_0783 / Km0783_26) - 1)) - (cell * Vmax_24 * (s_0542 * s_0147 - s_0539 * s_1038 / Keq_24) / (Km0542_24 * Km0147_24) / ((1 + s_0542 / Km0542_24) * (1 + s_0147 / Km0147_24) + (1 + s_0539 / Km0539_24) * (1 + s_1038 / Km1038_24) - 1)) - (cell * Vmax_25 * (s_0542 * s_1038 - s_0539 * s_1033 / Keq_25) / (Km0542_25 * Km1038_25) / ((1 + s_0542 / Km0542_25) * (1 + s_1038 / Km1038_25) + (1 + s_0539 / Km0539_25) * (1 + s_1033 / Km1033_25) - 1));
    der(s_0543) = (cell * Vmax_2 * (s_0913 * s_1531 - s_0543 * s_0116 / Keq_2) / (Km0913_2 * Km1531_2) / ((1 + s_0913 / Km0913_2) * (1 + s_1531 / Km1531_2) + (1 + s_0543 / Km0543_2) * (1 + s_0116 / Km0116_2) - 1)) + (cell * Vmax_8 * (s_0232 * s_1531 - s_0041 * s_0543 / Keq_8) / (Km0232_8 * Km1531_8) / ((1 + s_0232 / Km0232_8) * (1 + s_1531 / Km1531_8) + (1 + s_0041 / Km0041_8) * (1 + s_0543 / Km0543_8) - 1)) + (cell * Vmax_15 * (s_0267 - s_0328 * s_0543 / Keq_15) / Km0267_15 / (1 + s_0267 / Km0267_15 + (1 + s_0328 / Km0328_15) * (1 + s_0543 / Km0543_15) - 1)) + (cell * Vmax_47 * (s_1216 * s_1218 - s_0543 * s_0555 * s_0289 / Keq_47) / (Km1216_47 * Km1218_47) / ((1 + s_1216 / Km1216_47) * (1 + s_1218 / Km1218_47) + (1 + s_0543 / Km0543_47) * (1 + s_0555 / Km0555_47) * (1 + s_0289 / Km0289_47) - 1)) + (cell * Vmax_50 * (s_0910 * s_1216 - s_0397 * s_0543 * s_0290 / Keq_50) / (Km0910_50 * Km1216_50) / ((1 + s_0910 / Km0910_50) * (1 + s_1216 / Km1216_50) + (1 + s_0397 / Km0397_50) * (1 + s_0543 / Km0543_50) * (1 + s_0290 / Km0290_50) - 1)) + (cell * Vmax_52 * (s_0789 * s_1216 - s_0304 * s_0397 * s_0543 / Keq_52) / (Km0789_52 * Km1216_52) / ((1 + s_0789 / Km0789_52) * (1 + s_1216 / Km1216_52) + (1 + s_0304 / Km0304_52) * (1 + s_0397 / Km0397_52) * (1 + s_0543 / Km0543_52) - 1)) + (cell * Vmax_65 * (s_1041 * s_1491 - s_0376 * s_0397 * s_0543 / Keq_65) / (Km1041_65 * Km1491_65) / ((1 + s_1041 / Km1041_65) * (1 + s_1491 / Km1491_65) + (1 + s_0376 / Km0376_65) * (1 + s_0397 / Km0397_65) * (1 + s_0543 / Km0543_65) - 1)) + (cell * Vmax_68 * (pow(s_1531, 2) - s_0042 * s_0543 / Keq_68) / pow(Km1531_68, 2) / (pow(1 + s_1531 / Km1531_68, 2) + (1 + s_0042 / Km0042_68) * (1 + s_0543 / Km0543_68) - 1)) + (cell * Vmax_106 * (s_1072 - s_0470 * s_0543 / Keq_106) / Km1072_106 / (1 + s_1072 / Km1072_106 + (1 + s_0470 / Km0470_106) * (1 + s_0543 / Km0543_106) - 1)) + (2.0 * cell * Vmax_123 * (s_0565 * s_1372 - pow(s_0543, 2) * s_1512 / Keq_123) / (Km0565_123 * Km1372_123) / ((1 + s_0565 / Km0565_123) * (1 + s_1372 / Km1372_123) + pow(1 + s_0543 / Km0543_123, 2) * (1 + s_1512 / Km1512_123) - 1)) + (cell * Vmax_133 * (s_1242 - s_0543 * s_1131 / Keq_133) / Km1242_133 / (1 + s_1242 / Km1242_133 + (1 + s_0543 / Km0543_133) * (1 + s_1131 / Km1131_133) - 1)) + (cell * Vmax_188 * (pow(s_0941, 2) - s_0214 * s_0543 / Keq_188) / pow(Km0941_188, 2) / (pow(1 + s_0941 / Km0941_188, 2) + (1 + s_0214 / Km0214_188) * (1 + s_0543 / Km0543_188) - 1)) + (cell * Vmax_208 * (s_0096 - s_0493 * s_0543 / Keq_208) / Km0096_208 / (1 + s_0096 / Km0096_208 + (1 + s_0493 / Km0493_208) * (1 + s_0543 / Km0543_208) - 1)) + (cell * Vmax_216 * (s_1027 * s_1335 - s_0233 * s_0543 * s_1336 / Keq_216) / (Km1027_216 * Km1335_216) / ((1 + s_1027 / Km1027_216) * (1 + s_1335 / Km1335_216) + (1 + s_0233 / Km0233_216) * (1 + s_0543 / Km0543_216) * (1 + s_1336 / Km1336_216) - 1)) + (cell * Vmax_246 * (s_0360 * s_1537 - s_0543 * s_1340 * s_0783 / Keq_246) / (Km0360_246 * Km1537_246) / ((1 + s_0360 / Km0360_246) * (1 + s_1537 / Km1537_246) + (1 + s_0543 / Km0543_246) * (1 + s_1340 / Km1340_246) * (1 + s_0783 / Km0783_246) - 1)) + (cell * Vmax_255 * (s_0283 - s_0229 * s_0543 / Keq_255) / Km0283_255 / (1 + s_0283 / Km0283_255 + (1 + s_0229 / Km0229_255) * (1 + s_0543 / Km0543_255) - 1)) + (cell * Vmax_258 * (s_1397 - s_0543 * s_1762 / Keq_258) / Km1397_258 / (1 + s_1397 / Km1397_258 + (1 + s_0543 / Km0543_258) * (1 + s_1762 / Km1762_258) - 1)) + (cell * Vmax_263 * (s_1477 - s_0543 * s_1437 / Keq_263) / Km1477_263 / (1 + s_1477 / Km1477_263 + (1 + s_0543 / Km0543_263) * (1 + s_1437 / Km1437_263) - 1)) + (cell * Vmax_264 * (s_1476 - s_0543 * s_1435 / Keq_264) / Km1476_264 / (1 + s_1476 / Km1476_264 + (1 + s_0543 / Km0543_264) * (1 + s_1435 / Km1435_264) - 1)) + (cell * Vmax_277 * (s_1277 - s_0543 * s_1413 / Keq_277) / Km1277_277 / (1 + s_1277 / Km1277_277 + (1 + s_0543 / Km0543_277) * (1 + s_1413 / Km1413_277) - 1)) + (cell * Vmax_295 * (s_1497 - s_0543 * s_1429 / Keq_295) / Km1497_295 / (1 + s_1497 / Km1497_295 + (1 + s_0543 / Km0543_295) * (1 + s_1429 / Km1429_295) - 1)) + (cell * Vmax_296 * (s_1333 * s_1497 - s_0262 * s_0543 * s_1334 / Keq_296) / (Km1333_296 * Km1497_296) / ((1 + s_1333 / Km1333_296) * (1 + s_1497 / Km1497_296) + (1 + s_0262 / Km0262_296) * (1 + s_0543 / Km0543_296) * (1 + s_1334 / Km1334_296) - 1)) + (cell * Vmax_299 * (s_0116 * s_1333 * s_1362 - s_0543 * s_1334 * s_1530 * s_1430 / Keq_299) / (Km0116_299 * Km1333_299 * Km1362_299) / ((1 + s_0116 / Km0116_299) * (1 + s_1333 / Km1333_299) * (1 + s_1362 / Km1362_299) + (1 + s_0543 / Km0543_299) * (1 + s_1334 / Km1334_299) * (1 + s_1530 / Km1530_299) * (1 + s_1430 / Km1430_299) - 1)) + (cell * Vmax_301 * (s_0555 * s_1333 * s_1531 - s_0395 * s_0543 * s_1334 / Keq_301) / (Km0555_301 * Km1333_301 * Km1531_301) / ((1 + s_0555 / Km0555_301) * (1 + s_1333 / Km1333_301) * (1 + s_1531 / Km1531_301) + (1 + s_0395 / Km0395_301) * (1 + s_0543 / Km0543_301) * (1 + s_1334 / Km1334_301) - 1)) + (cell * Vmax_303 * (s_0555 * pow(s_0862, 2) * s_1531 - s_0395 * s_0543 * pow(s_0861, 2) / Keq_303) / (Km0555_303 * pow(Km0862_303, 2) * Km1531_303) / ((1 + s_0555 / Km0555_303) * pow(1 + s_0862 / Km0862_303, 2) * (1 + s_1531 / Km1531_303) + (1 + s_0395 / Km0395_303) * (1 + s_0543 / Km0543_303) * pow(1 + s_0861 / Km0861_303, 2) - 1)) + (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) + (4.0 * cell * Vmax_359 * (s_1791 - pow(s_0543, 4) * s_0565 / Keq_359) / Km1791_359 / (1 + s_1791 / Km1791_359 + pow(1 + s_0543 / Km0543_359, 4) * (1 + s_0565 / Km0565_359) - 1)) - (cell * Vmax_116 * (s_0467 * s_0543 * s_0451 - s_0421 * s_0502 / Keq_116) / (Km0467_116 * Km0543_116 * Km0451_116) / ((1 + s_0467 / Km0467_116) * (1 + s_0543 / Km0543_116) * (1 + s_0451 / Km0451_116) + (1 + s_0421 / Km0421_116) * (1 + s_0502 / Km0502_116) - 1)) - (cell * Vmax_131 * (s_0467 * s_0543 * s_0371 - s_0421 * s_0755 * s_1430 / Keq_131) / (Km0467_131 * Km0543_131 * Km0371_131) / ((1 + s_0467 / Km0467_131) * (1 + s_0543 / Km0543_131) * (1 + s_0371 / Km0371_131) + (1 + s_0421 / Km0421_131) * (1 + s_0755 / Km0755_131) * (1 + s_1430 / Km1430_131) - 1)) - (cell * Vmax_193 * (s_0543 - s_0474 / Keq_193) / Km0543_193 / (1 + s_0543 / Km0543_193 + 1 + s_0474 / Km0474_193 - 1)) - (cell * Vmax_270 * (s_0543 * s_1484 - s_1399 * s_1430 / Keq_270) / (Km0543_270 * Km1484_270) / ((1 + s_0543 / Km0543_270) * (1 + s_1484 / Km1484_270) + (1 + s_1399 / Km1399_270) * (1 + s_1430 / Km1430_270) - 1)) - (cell * Vmax_368 * s_0543 / Km0543_368 / (1 + s_0543 / Km0543_368));
    der(s_0545) = 0.0;
    der(s_0546) = (cell * Vmax_369 * (s_0548 - s_0546) / Km0548_369 / (1 + s_0548 / Km0548_369 + 1 + s_0546 / Km0546_369 - 1)) - (2.5e-05 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0548) = 0.0;
    der(s_0555) = (cell * Vmax_14 * (s_0282 * s_0395 - s_0266 * s_0555 / Keq_14) / (Km0282_14 * Km0395_14) / ((1 + s_0282 / Km0282_14) * (1 + s_0395 / Km0395_14) + (1 + s_0266 / Km0266_14) * (1 + s_0555 / Km0555_14) - 1)) + (cell * Vmax_47 * (s_1216 * s_1218 - s_0543 * s_0555 * s_0289 / Keq_47) / (Km1216_47 * Km1218_47) / ((1 + s_1216 / Km1216_47) * (1 + s_1218 / Km1218_47) + (1 + s_0543 / Km0543_47) * (1 + s_0555 / Km0555_47) * (1 + s_0289 / Km0289_47) - 1)) + (cell * Vmax_69 * (pow(s_0395, 2) - s_0391 * s_0555 / Keq_69) / pow(Km0395_69, 2) / (pow(1 + s_0395 / Km0395_69, 2) + (1 + s_0391 / Km0391_69) * (1 + s_0555 / Km0555_69) - 1)) + (cell * Vmax_70 * (s_0395 * s_0488 - s_0299 * s_0555 / Keq_70) / (Km0395_70 * Km0488_70) / ((1 + s_0395 / Km0395_70) * (1 + s_0488 / Km0488_70) + (1 + s_0299 / Km0299_70) * (1 + s_0555 / Km0555_70) - 1)) + (cell * Vmax_71 * (s_0395 * s_0737 - s_0295 * s_0555 / Keq_71) / (Km0395_71 * Km0737_71) / ((1 + s_0395 / Km0395_71) * (1 + s_0737 / Km0737_71) + (1 + s_0295 / Km0295_71) * (1 + s_0555 / Km0555_71) - 1)) + (cell * Vmax_72 * (s_0395 * s_0790 - s_0305 * s_0555 / Keq_72) / (Km0395_72 * Km0790_72) / ((1 + s_0395 / Km0395_72) * (1 + s_0790 / Km0790_72) + (1 + s_0305 / Km0305_72) * (1 + s_0555 / Km0555_72) - 1)) + (cell * Vmax_73 * (s_0395 * s_0984 - s_0303 * s_0555 / Keq_73) / (Km0395_73 * Km0984_73) / ((1 + s_0395 / Km0395_73) * (1 + s_0984 / Km0984_73) + (1 + s_0303 / Km0303_73) * (1 + s_0555 / Km0555_73) - 1)) + (cell * Vmax_74 * (s_0395 * s_1390 - s_0293 * s_0555 / Keq_74) / (Km0395_74 * Km1390_74) / ((1 + s_0395 / Km0395_74) * (1 + s_1390 / Km1390_74) + (1 + s_0293 / Km0293_74) * (1 + s_0555 / Km0555_74) - 1)) + (cell * Vmax_75 * (s_0395 * s_1632 - s_0297 * s_0555 / Keq_75) / (Km0395_75 * Km1632_75) / ((1 + s_0395 / Km0395_75) * (1 + s_1632 / Km1632_75) + (1 + s_0297 / Km0297_75) * (1 + s_0555 / Km0555_75) - 1)) + (cell * Vmax_122 * (s_0395 * s_1399 - s_0536 * s_0555 / Keq_122) / (Km0395_122 * Km1399_122) / ((1 + s_0395 / Km0395_122) * (1 + s_1399 / Km1399_122) + (1 + s_0536 / Km0536_122) * (1 + s_0555 / Km0555_122) - 1)) + (cell * Vmax_130 * (s_0467 * s_0754 - s_0421 * s_0555 / Keq_130) / (Km0467_130 * Km0754_130) / ((1 + s_0467 / Km0467_130) * (1 + s_0754 / Km0754_130) + (1 + s_0421 / Km0421_130) * (1 + s_0555 / Km0555_130) - 1)) + (cell * Vmax_156 * (s_0790 - s_0555 * s_0785 / Keq_156) / Km0790_156 / (1 + s_0790 / Km0790_156 + (1 + s_0555 / Km0555_156) * (1 + s_0785 / Km0785_156) - 1)) + (cell * Vmax_157 * (s_1412 - s_0555 * s_0971 / Keq_157) / Km1412_157 / (1 + s_1412 / Km1412_157 + (1 + s_0555 / Km0555_157) * (1 + s_0971 / Km0971_157) - 1)) + (cell * Vmax_158 * (s_0979 - s_0555 * s_0976 / Keq_158) / Km0979_158 / (1 + s_0979 / Km0979_158 + (1 + s_0555 / Km0555_158) * (1 + s_0976 / Km0976_158) - 1)) + (cell * Vmax_165 * (s_0395 * s_0653 - s_1287 * s_0555 / Keq_165) / (Km0395_165 * Km0653_165) / ((1 + s_0395 / Km0395_165) * (1 + s_0653 / Km0653_165) + (1 + s_1287 / Km1287_165) * (1 + s_0555 / Km0555_165) - 1)) + (cell * Vmax_201 * (s_1113 * s_1599 - s_0555 * s_1367 / Keq_201) / (Km1113_201 * Km1599_201) / ((1 + s_1113 / Km1113_201) * (1 + s_1599 / Km1599_201) + (1 + s_0555 / Km0555_201) * (1 + s_1367 / Km1367_201) - 1)) + (cell * Vmax_230 * (s_0397 * s_1217 - s_0555 * s_1216 / Keq_230) / (Km0397_230 * Km1217_230) / ((1 + s_0397 / Km0397_230) * (1 + s_1217 / Km1217_230) + (1 + s_0555 / Km0555_230) * (1 + s_1216 / Km1216_230) - 1)) + (cell * Vmax_242 * (s_0395 * s_1095 - s_1302 * s_0555 / Keq_242) / (Km0395_242 * Km1095_242) / ((1 + s_0395 / Km0395_242) * (1 + s_1095 / Km1095_242) + (1 + s_1302 / Km1302_242) * (1 + s_0555 / Km0555_242) - 1)) + (cell * Vmax_316 * (s_0395 * s_1170 - s_1358 * s_0555 / Keq_316) / (Km0395_316 * Km1170_316) / ((1 + s_0395 / Km0395_316) * (1 + s_1170 / Km1170_316) + (1 + s_1358 / Km1358_316) * (1 + s_0555 / Km0555_316) - 1)) + (cell * Vmax_328 * (s_1599 * s_0148 - s_0555 * s_1315 / Keq_328) / (Km1599_328 * Km0148_328) / ((1 + s_1599 / Km1599_328) * (1 + s_0148 / Km0148_328) + (1 + s_0555 / Km0555_328) * (1 + s_1315 / Km1315_328) - 1)) - (cell * Vmax_66 * (s_0381 * s_0555 * s_1333 - s_0395 * s_1334 / Keq_66) / (Km0381_66 * Km0555_66 * Km1333_66) / ((1 + s_0381 / Km0381_66) * (1 + s_0555 / Km0555_66) * (1 + s_1333 / Km1333_66) + (1 + s_0395 / Km0395_66) * (1 + s_1334 / Km1334_66) - 1)) - (cell * Vmax_183 * (s_1040 * s_0555 - s_0395 * s_0929 / Keq_183) / (Km1040_183 * Km0555_183) / ((1 + s_1040 / Km1040_183) * (1 + s_0555 / Km0555_183) + (1 + s_0395 / Km0395_183) * (1 + s_0929 / Km0929_183) - 1)) - (cell * Vmax_291 * (s_0393 * s_0555 - s_0395 * s_1430 / Keq_291) / (Km0393_291 * Km0555_291) / ((1 + s_0393 / Km0393_291) * (1 + s_0555 / Km0555_291) + (1 + s_0395 / Km0395_291) * (1 + s_1430 / Km1430_291) - 1)) - (cell * Vmax_301 * (s_0555 * s_1333 * s_1531 - s_0395 * s_0543 * s_1334 / Keq_301) / (Km0555_301 * Km1333_301 * Km1531_301) / ((1 + s_0555 / Km0555_301) * (1 + s_1333 / Km1333_301) * (1 + s_1531 / Km1531_301) + (1 + s_0395 / Km0395_301) * (1 + s_0543 / Km0543_301) * (1 + s_1334 / Km1334_301) - 1)) - (cell * Vmax_302 * (s_0555 * s_1531 - s_0395 * s_0867 / Keq_302) / (Km0555_302 * Km1531_302) / ((1 + s_0555 / Km0555_302) * (1 + s_1531 / Km1531_302) + (1 + s_0395 / Km0395_302) * (1 + s_0867 / Km0867_302) - 1)) - (cell * Vmax_303 * (s_0555 * pow(s_0862, 2) * s_1531 - s_0395 * s_0543 * pow(s_0861, 2) / Keq_303) / (Km0555_303 * pow(Km0862_303, 2) * Km1531_303) / ((1 + s_0555 / Km0555_303) * pow(1 + s_0862 / Km0862_303, 2) * (1 + s_1531 / Km1531_303) + (1 + s_0395 / Km0395_303) * (1 + s_0543 / Km0543_303) * pow(1 + s_0861 / Km0861_303, 2) - 1)) - (cell * Vmax_321 * (s_0467 * s_0555 * s_1595 - s_0421 * s_1430 * s_1599 / Keq_321) / (Km0467_321 * Km0555_321 * Km1595_321) / ((1 + s_0467 / Km0467_321) * (1 + s_0555 / Km0555_321) * (1 + s_1595 / Km1595_321) + (1 + s_0421 / Km0421_321) * (1 + s_1430 / Km1430_321) * (1 + s_1599 / Km1599_321) - 1)) - (0.000576 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0565) = (cell * Vmax_359 * (s_1791 - pow(s_0543, 4) * s_0565 / Keq_359) / Km1791_359 / (1 + s_1791 / Km1791_359 + pow(1 + s_0543 / Km0543_359, 4) * (1 + s_0565 / Km0565_359) - 1)) - (cell * Vmax_123 * (s_0565 * s_1372 - pow(s_0543, 2) * s_1512 / Keq_123) / (Km0565_123 * Km1372_123) / ((1 + s_0565 / Km0565_123) * (1 + s_1372 / Km1372_123) + pow(1 + s_0543 / Km0543_123, 2) * (1 + s_1512 / Km1512_123) - 1));
    der(s_0574) = (cell * Vmax_28 * (s_0043 - s_0574 / Keq_28) / Km0043_28 / (1 + s_0043 / Km0043_28 + 1 + s_0574 / Km0574_28 - 1)) - (cell * Vmax_85 * (s_0574 * s_0860 - s_0488 * s_0859 / Keq_85) / (Km0574_85 * Km0860_85) / ((1 + s_0574 / Km0574_85) * (1 + s_0860 / Km0860_85) + (1 + s_0488 / Km0488_85) * (1 + s_0859 / Km0859_85) - 1));
    der(s_0575) = (cell * Vmax_124 * (s_0467 * s_1101 * s_1792 - s_0421 * s_0575 * s_1095 * s_1430 / Keq_124) / (Km0467_124 * Km1101_124 * Km1792_124) / ((1 + s_0467 / Km0467_124) * (1 + s_1101 / Km1101_124) * (1 + s_1792 / Km1792_124) + (1 + s_0421 / Km0421_124) * (1 + s_0575 / Km0575_124) * (1 + s_1095 / Km1095_124) * (1 + s_1430 / Km1430_124) - 1)) + (cell * Vmax_247 * (s_0467 * s_0510 - s_0421 * s_0575 / Keq_247) / (Km0467_247 * Km0510_247) / ((1 + s_0467 / Km0467_247) * (1 + s_0510 / Km0510_247) + (1 + s_0421 / Km0421_247) * (1 + s_0575 / Km0575_247) - 1)) - (cell * Vmax_10 * (s_0194 * s_0575 - s_0312 * s_0783 / Keq_10) / (Km0194_10 * Km0575_10) / ((1 + s_0194 / Km0194_10) * (1 + s_0575 / Km0575_10) + (1 + s_0312 / Km0312_10) * (1 + s_0783 / Km0783_10) - 1)) - (cell * Vmax_26 * (s_0575 * s_0271 - s_0542 * s_0783 / Keq_26) / (Km0575_26 * Km0271_26) / ((1 + s_0575 / Km0575_26) * (1 + s_0271 / Km0271_26) + (1 + s_0542 / Km0542_26) * (1 + s_0783 / Km0783_26) - 1)) - (cell * Vmax_117 * (s_0575 * s_0075 - s_0513 * s_0783 / Keq_117) / (Km0575_117 * Km0075_117) / ((1 + s_0575 / Km0575_117) * (1 + s_0075 / Km0075_117) + (1 + s_0513 / Km0513_117) * (1 + s_0783 / Km0783_117) - 1)) - (cell * Vmax_118 * (s_0575 * s_0073 - s_0512 * s_0783 / Keq_118) / (Km0575_118 * Km0073_118) / ((1 + s_0575 / Km0575_118) * (1 + s_0073 / Km0073_118) + (1 + s_0512 / Km0512_118) * (1 + s_0783 / Km0783_118) - 1)) - (cell * Vmax_276 * (s_0599 * s_0575 * s_1083 - s_1277 * s_0539 * s_0783 / Keq_276) / (Km0599_276 * Km0575_276 * Km1083_276) / ((1 + s_0599 / Km0599_276) * (1 + s_0575 / Km0575_276) * (1 + s_1083 / Km1083_276) + (1 + s_1277 / Km1277_276) * (1 + s_0539 / Km0539_276) * (1 + s_0783 / Km0783_276) - 1)) - (cell * Vmax_309 * (s_0575 * pow(s_0861, 2) - s_0731 * pow(s_0862, 2) / Keq_309) / (Km0575_309 * pow(Km0861_309, 2)) / ((1 + s_0575 / Km0575_309) * pow(1 + s_0861 / Km0861_309, 2) + (1 + s_0731 / Km0731_309) * pow(1 + s_0862 / Km0862_309, 2) - 1)) - (0.1335 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0579) = (cell * Vmax_113 * (s_1264 * s_0420 - s_0454 * s_0479 * s_0579 / Keq_113) / (Km1264_113 * Km0420_113) / ((1 + s_1264 / Km1264_113) * (1 + s_0420 / Km0420_113) + (1 + s_0454 / Km0454_113) * (1 + s_0479 / Km0479_113) * (1 + s_0579 / Km0579_113) - 1)) + (cell * Vmax_236 * (s_1261 * s_0420 - s_0454 * s_0579 * s_1264 / Keq_236) / (Km1261_236 * Km0420_236) / ((1 + s_1261 / Km1261_236) * (1 + s_0420 / Km0420_236) + (1 + s_0454 / Km0454_236) * (1 + s_0579 / Km0579_236) * (1 + s_1264 / Km1264_236) - 1)) + (cell * Vmax_370 * (s_0581 - s_0579) / Km0581_370 / (1 + s_0581 / Km0581_370 + 1 + s_0579 / Km0579_370 - 1)) - (cell * Vmax_238 * (s_0585 * s_0579 * pow(s_1260, 2) - pow(s_1259, 2) * s_1265 / Keq_238) / (Km0585_238 * Km0579_238 * pow(Km1260_238, 2)) / ((1 + s_0585 / Km0585_238) * (1 + s_0579 / Km0579_238) * pow(1 + s_1260 / Km1260_238, 2) + pow(1 + s_1259 / Km1259_238, 2) * (1 + s_1265 / Km1265_238) - 1)) - (0.000709 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0581) = 0.0;
    der(s_0585) = (cell * Vmax_125 * (s_0945 - s_0585 * s_0783 / Keq_125) / Km0945_125 / (1 + s_0945 / Km0945_125 + (1 + s_0585 / Km0585_125) * (1 + s_0783 / Km0783_125) - 1)) - (cell * Vmax_238 * (s_0585 * s_0579 * pow(s_1260, 2) - pow(s_1259, 2) * s_1265 / Keq_238) / (Km0585_238 * Km0579_238 * pow(Km1260_238, 2)) / ((1 + s_0585 / Km0585_238) * (1 + s_0579 / Km0579_238) * pow(1 + s_1260 / Km1260_238, 2) + pow(1 + s_1259 / Km1259_238, 2) * (1 + s_1265 / Km1265_238) - 1));
    der(s_0599) = (cell * Vmax_260 * (s_0467 * s_0033 - s_0599 * s_0421 / Keq_260) / (Km0467_260 * Km0033_260) / ((1 + s_0467 / Km0467_260) * (1 + s_0033 / Km0033_260) + (1 + s_0599 / Km0599_260) * (1 + s_0421 / Km0421_260) - 1)) - (cell * Vmax_276 * (s_0599 * s_0575 * s_1083 - s_1277 * s_0539 * s_0783 / Keq_276) / (Km0599_276 * Km0575_276 * Km1083_276) / ((1 + s_0599 / Km0599_276) * (1 + s_0575 / Km0575_276) * (1 + s_1083 / Km1083_276) + (1 + s_1277 / Km1277_276) * (1 + s_0539 / Km0539_276) * (1 + s_0783 / Km0783_276) - 1));
    der(s_0600) = (cell * Vmax_99 * (s_1041 - s_0600 / Keq_99) / Km1041_99 / (1 + s_1041 / Km1041_99 + 1 + s_0600 / Km0600_99 - 1)) + (cell * Vmax_240 * (s_1725 - s_0600 * s_1719 / Keq_240) / Km1725_240 / (1 + s_1725 / Km1725_240 + (1 + s_0600 / Km0600_240) * (1 + s_1719 / Km1719_240) - 1)) - (2.0 * cell * Vmax_129 * (pow(s_0600, 2) * s_0467 - s_0421 * s_0603 * s_1430 / Keq_129) / (pow(Km0600_129, 2) * Km0467_129) / (pow(1 + s_0600 / Km0600_129, 2) * (1 + s_0467 / Km0467_129) + (1 + s_0421 / Km0421_129) * (1 + s_0603 / Km0603_129) * (1 + s_1430 / Km1430_129) - 1));
    der(s_0603) = (cell * Vmax_129 * (pow(s_0600, 2) * s_0467 - s_0421 * s_0603 * s_1430 / Keq_129) / (pow(Km0600_129, 2) * Km0467_129) / (pow(1 + s_0600 / Km0600_129, 2) * (1 + s_0467 / Km0467_129) + (1 + s_0421 / Km0421_129) * (1 + s_0603 / Km0603_129) * (1 + s_1430 / Km1430_129) - 1)) - (cell * Vmax_354 * (s_0603 * s_0467 * s_1752 - s_0421 * s_1430 * s_1755 / Keq_354) / (Km0603_354 * Km0467_354 * Km1752_354) / ((1 + s_0603 / Km0603_354) * (1 + s_0467 / Km0467_354) * (1 + s_1752 / Km1752_354) + (1 + s_0421 / Km0421_354) * (1 + s_1430 / Km1430_354) * (1 + s_1755 / Km1755_354) - 1));
    der(s_0611) = (cell * Vmax_102 * (s_0704 - s_0611 / Keq_102) / Km0704_102 / (1 + s_0704 / Km0704_102 + 1 + s_0611 / Km0611_102 - 1)) - (cell * Vmax_22 * (s_0611 * s_1484 - s_0272 * s_1430 / Keq_22) / (Km0611_22 * Km1484_22) / ((1 + s_0611 / Km0611_22) * (1 + s_1484 / Km1484_22) + (1 + s_0272 / Km0272_22) * (1 + s_1430 / Km1430_22) - 1));
    der(s_0620) = (cell * Vmax_204 * (s_1101 * s_0341 - s_0343 * s_0620 * s_1095 / Keq_204) / (Km1101_204 * Km0341_204) / ((1 + s_1101 / Km1101_204) * (1 + s_0341 / Km0341_204) + (1 + s_0343 / Km0343_204) * (1 + s_0620 / Km0620_204) * (1 + s_1095 / Km1095_204) - 1)) - (cell * Vmax_205 * (s_0620 - s_0263 / Keq_205) / Km0620_205 / (1 + s_0620 / Km0620_205 + 1 + s_0263 / Km0263_205 - 1));
    der(s_0621) = (cell * Vmax_338 * (s_0627 * s_0913 - s_0621 * s_0721 / Keq_338) / (Km0627_338 * Km0913_338) / ((1 + s_0627 / Km0627_338) * (1 + s_0913 / Km0913_338) + (1 + s_0621 / Km0621_338) * (1 + s_0721 / Km0721_338) - 1)) - (cell * Vmax_23 * (s_0621 * s_1484 - s_0195 * s_1430 / Keq_23) / (Km0621_23 * Km1484_23) / ((1 + s_0621 / Km0621_23) * (1 + s_1484 / Km1484_23) + (1 + s_0195 / Km0195_23) * (1 + s_1430 / Km1430_23) - 1)) - (cell * Vmax_154 * (s_0621 * s_1333 - s_0331 * s_1334 / Keq_154) / (Km0621_154 * Km1333_154) / ((1 + s_0621 / Km0621_154) * (1 + s_1333 / Km1333_154) + (1 + s_0331 / Km0331_154) * (1 + s_1334 / Km1334_154) - 1)) - (cell * Vmax_336 * (s_0621 * s_0627 - s_0913 * s_1561 / Keq_336) / (Km0621_336 * Km0627_336) / ((1 + s_0621 / Km0621_336) * (1 + s_0627 / Km0627_336) + (1 + s_0913 / Km0913_336) * (1 + s_1561 / Km1561_336) - 1));
    der(s_0622) = (cell * Vmax_363 * (s_0657 - s_0622 / Keq_363) / Km0657_363 / (1 + s_0657 / Km0657_363 + 1 + s_0622 / Km0622_363 - 1)) - (cell * Vmax_194 * (s_0467 * s_0622 - s_0421 * s_0627 / Keq_194) / (Km0467_194 * Km0622_194) / ((1 + s_0467 / Km0467_194) * (1 + s_0622 / Km0622_194) + (1 + s_0421 / Km0421_194) * (1 + s_0627 / Km0627_194) - 1)) - (cell * Vmax_375 * (s_1484 * s_0622 - s_0627 * s_1531 / Keq_375) / (Km1484_375 * Km0622_375) / ((1 + s_1484 / Km1484_375) * (1 + s_0622 / Km0622_375) + (1 + s_0627 / Km0627_375) * (1 + s_1531 / Km1531_375) - 1));
    der(s_0627) = (cell * Vmax_167 * (s_0663 - s_0627 / Keq_167) / Km0663_167 / (1 + s_0663 / Km0663_167 + 1 + s_0627 / Km0627_167 - 1)) + (cell * Vmax_194 * (s_0467 * s_0622 - s_0421 * s_0627 / Keq_194) / (Km0467_194 * Km0622_194) / ((1 + s_0467 / Km0467_194) * (1 + s_0622 / Km0622_194) + (1 + s_0421 / Km0421_194) * (1 + s_0627 / Km0627_194) - 1)) + (cell * Vmax_375 * (s_1484 * s_0622 - s_0627 * s_1531 / Keq_375) / (Km1484_375 * Km0622_375) / ((1 + s_1484 / Km1484_375) * (1 + s_0622 / Km0622_375) + (1 + s_0627 / Km0627_375) * (1 + s_1531 / Km1531_375) - 1)) - (cell * Vmax_175 * (s_0627 * s_1101 - s_0654 * s_1095 / Keq_175) / (Km0627_175 * Km1101_175) / ((1 + s_0627 / Km0627_175) * (1 + s_1101 / Km1101_175) + (1 + s_0654 / Km0654_175) * (1 + s_1095 / Km1095_175) - 1)) - (cell * Vmax_336 * (s_0621 * s_0627 - s_0913 * s_1561 / Keq_336) / (Km0621_336 * Km0627_336) / ((1 + s_0621 / Km0621_336) * (1 + s_0627 / Km0627_336) + (1 + s_0913 / Km0913_336) * (1 + s_1561 / Km1561_336) - 1)) - (cell * Vmax_338 * (s_0627 * s_0913 - s_0621 * s_0721 / Keq_338) / (Km0627_338 * Km0913_338) / ((1 + s_0627 / Km0627_338) * (1 + s_0913 / Km0913_338) + (1 + s_0621 / Km0621_338) * (1 + s_0721 / Km0721_338) - 1));
    der(s_0653) = (cell * Vmax_271 * (s_0654 - s_0653 / Keq_271) / Km0654_271 / (1 + s_0654 / Km0654_271 + 1 + s_0653 / Km0653_271 - 1)) - (cell * Vmax_165 * (s_0395 * s_0653 - s_1287 * s_0555 / Keq_165) / (Km0395_165 * Km0653_165) / ((1 + s_0395 / Km0395_165) * (1 + s_0653 / Km0653_165) + (1 + s_1287 / Km1287_165) * (1 + s_0555 / Km0555_165) - 1));
    der(s_0654) = (cell * Vmax_175 * (s_0627 * s_1101 - s_0654 * s_1095 / Keq_175) / (Km0627_175 * Km1101_175) / ((1 + s_0627 / Km0627_175) * (1 + s_1101 / Km1101_175) + (1 + s_0654 / Km0654_175) * (1 + s_1095 / Km1095_175) - 1)) - (cell * Vmax_271 * (s_0654 - s_0653 / Keq_271) / Km0654_271 / (1 + s_0654 / Km0654_271 + 1 + s_0653 / Km0653_271 - 1));
    der(s_0657) = (cell * Vmax_373 * (s_0659 - s_0657) / Km0659_373 / (1 + s_0659 / Km0659_373 + 1 + s_0657 / Km0657_373 - 1)) - (cell * Vmax_195 * (s_0467 * s_0657 - s_0421 * s_0663 / Keq_195) / (Km0467_195 * Km0657_195) / ((1 + s_0467 / Km0467_195) * (1 + s_0657 / Km0657_195) + (1 + s_0421 / Km0421_195) * (1 + s_0663 / Km0663_195) - 1)) - (cell * Vmax_363 * (s_0657 - s_0622 / Keq_363) / Km0657_363 / (1 + s_0657 / Km0657_363 + 1 + s_0622 / Km0622_363 - 1)) - (cell * Vmax_374 * (s_1484 * s_0657 - s_0663 * s_1531 / Keq_374) / (Km1484_374 * Km0657_374) / ((1 + s_1484 / Km1484_374) * (1 + s_0657 / Km0657_374) + (1 + s_0663 / Km0663_374) * (1 + s_1531 / Km1531_374) - 1));
    der(s_0659) = 0.0;
    der(s_0663) = (cell * Vmax_195 * (s_0467 * s_0657 - s_0421 * s_0663 / Keq_195) / (Km0467_195 * Km0657_195) / ((1 + s_0467 / Km0467_195) * (1 + s_0657 / Km0657_195) + (1 + s_0421 / Km0421_195) * (1 + s_0663 / Km0663_195) - 1)) + (cell * Vmax_374 * (s_1484 * s_0657 - s_0663 * s_1531 / Keq_374) / (Km1484_374 * Km0657_374) / ((1 + s_1484 / Km1484_374) * (1 + s_0657 / Km0657_374) + (1 + s_0663 / Km0663_374) * (1 + s_1531 / Km1531_374) - 1)) - (cell * Vmax_166 * (s_0663 * s_1335 - s_0370 * s_1336 / Keq_166) / (Km0663_166 * Km1335_166) / ((1 + s_0663 / Km0663_166) * (1 + s_1335 / Km1335_166) + (1 + s_0370 / Km0370_166) * (1 + s_1336 / Km1336_166) - 1)) - (cell * Vmax_167 * (s_0663 - s_0627 / Keq_167) / Km0663_167 / (1 + s_0663 / Km0663_167 + 1 + s_0627 / Km0627_167 - 1));
    der(s_0671) = (cell * Vmax_170 * (s_1095 - s_0671 / Keq_170) / Km1095_170 / (1 + s_1095 / Km1095_170 + 1 + s_0671 / Km0671_170 - 1)) - (cell * Vmax_352 * (s_0467 * s_0671 * s_1751 - s_0421 * s_1430 * s_1754 / Keq_352) / (Km0467_352 * Km0671_352 * Km1751_352) / ((1 + s_0467 / Km0467_352) * (1 + s_0671 / Km0671_352) * (1 + s_1751 / Km1751_352) + (1 + s_0421 / Km0421_352) * (1 + s_1430 / Km1430_352) * (1 + s_1754 / Km1754_352) - 1));
    der(s_0675) = (cell * Vmax_179 * (s_0467 * s_0029 - s_0675 * s_0421 / Keq_179) / (Km0467_179 * Km0029_179) / ((1 + s_0467 / Km0467_179) * (1 + s_0029 / Km0029_179) + (1 + s_0675 / Km0675_179) * (1 + s_0421 / Km0421_179) - 1)) + (cell * Vmax_274 * (s_0306 - s_0675 / Keq_274) / Km0306_274 / (1 + s_0306 / Km0306_274 + 1 + s_0675 / Km0675_274 - 1)) - (cell * Vmax_150 * (s_0675 - s_1484 / Keq_150) / Km0675_150 / (1 + s_0675 / Km0675_150 + 1 + s_1484 / Km1484_150 - 1));
    der(s_0704) = (cell * Vmax_313 * (s_0721 - s_0704 / Keq_313) / Km0721_313 / (1 + s_0721 / Km0721_313 + 1 + s_0704 / Km0704_313 - 1)) - (cell * Vmax_18 * (s_0704 - s_0255 * s_0867 / Keq_18) / Km0704_18 / (1 + s_0704 / Km0704_18 + (1 + s_0255 / Km0255_18) * (1 + s_0867 / Km0867_18) - 1)) - (cell * Vmax_102 * (s_0704 - s_0611 / Keq_102) / Km0704_102 / (1 + s_0704 / Km0704_102 + 1 + s_0611 / Km0611_102 - 1)) - (cell * Vmax_312 * (s_0704 - s_0446 / Keq_312) / Km0704_312 / (1 + s_0704 / Km0704_312 + 1 + s_0446 / Km0446_312 - 1));
    der(s_0721) = (cell * Vmax_337 * (s_0913 * s_1561 - s_0446 * s_0721 / Keq_337) / (Km0913_337 * Km1561_337) / ((1 + s_0913 / Km0913_337) * (1 + s_1561 / Km1561_337) + (1 + s_0446 / Km0446_337) * (1 + s_0721 / Km0721_337) - 1)) + (cell * Vmax_338 * (s_0627 * s_0913 - s_0621 * s_0721 / Keq_338) / (Km0627_338 * Km0913_338) / ((1 + s_0627 / Km0627_338) * (1 + s_0913 / Km0913_338) + (1 + s_0621 / Km0621_338) * (1 + s_0721 / Km0721_338) - 1)) - (cell * Vmax_313 * (s_0721 - s_0704 / Keq_313) / Km0721_313 / (1 + s_0721 / Km0721_313 + 1 + s_0704 / Km0704_313 - 1));
    der(s_0726) = (cell * Vmax_308 * (s_0467 * pow(s_0861, 2) - s_0726 * pow(s_0862, 2) / Keq_308) / (Km0467_308 * pow(Km0861_308, 2)) / ((1 + s_0467 / Km0467_308) * pow(1 + s_0861 / Km0861_308, 2) + (1 + s_0726 / Km0726_308) * pow(1 + s_0862 / Km0862_308, 2) - 1)) - (0.02617 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0731) = (cell * Vmax_309 * (s_0575 * pow(s_0861, 2) - s_0731 * pow(s_0862, 2) / Keq_309) / (Km0575_309 * pow(Km0861_309, 2)) / ((1 + s_0575 / Km0575_309) * pow(1 + s_0861 / Km0861_309, 2) + (1 + s_0731 / Km0731_309) * pow(1 + s_0862 / Km0862_309, 2) - 1)) - (0.02702 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0732) = (cell * Vmax_245 * (s_0467 * s_1340 - s_0732 * s_0783 / Keq_245) / (Km0467_245 * Km1340_245) / ((1 + s_0467 / Km0467_245) * (1 + s_1340 / Km1340_245) + (1 + s_0732 / Km0732_245) * (1 + s_0783 / Km0783_245) - 1)) - (cell * Vmax_244 * (s_0467 * s_0732 * s_0451 - s_0454 * s_1333 * s_0783 / Keq_244) / (Km0467_244 * Km0732_244 * Km0451_244) / ((1 + s_0467 / Km0467_244) * (1 + s_0732 / Km0732_244) * (1 + s_0451 / Km0451_244) + (1 + s_0454 / Km0454_244) * (1 + s_1333 / Km1333_244) * (1 + s_0783 / Km0783_244) - 1));
    der(s_0737) = (cell * Vmax_86 * (s_1668 * s_0860 - s_0737 * s_0859 / Keq_86) / (Km1668_86 * Km0860_86) / ((1 + s_1668 / Km1668_86) * (1 + s_0860 / Km0860_86) + (1 + s_0737 / Km0737_86) * (1 + s_0859 / Km0859_86) - 1)) - (cell * Vmax_71 * (s_0395 * s_0737 - s_0295 * s_0555 / Keq_71) / (Km0395_71 * Km0737_71) / ((1 + s_0395 / Km0395_71) * (1 + s_0737 / Km0737_71) + (1 + s_0295 / Km0295_71) * (1 + s_0555 / Km0555_71) - 1));
    der(s_0738) = (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) - (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1));
    der(s_0754) = (cell * Vmax_259 * (s_0467 * s_1413 - s_0754 * s_0783 / Keq_259) / (Km0467_259 * Km1413_259) / ((1 + s_0467 / Km0467_259) * (1 + s_1413 / Km1413_259) + (1 + s_0754 / Km0754_259) * (1 + s_0783 / Km0783_259) - 1)) - (cell * Vmax_130 * (s_0467 * s_0754 - s_0421 * s_0555 / Keq_130) / (Km0467_130 * Km0754_130) / ((1 + s_0467 / Km0467_130) * (1 + s_0754 / Km0754_130) + (1 + s_0421 / Km0421_130) * (1 + s_0555 / Km0555_130) - 1));
    der(s_0755) = (cell * Vmax_131 * (s_0467 * s_0543 * s_0371 - s_0421 * s_0755 * s_1430 / Keq_131) / (Km0467_131 * Km0543_131 * Km0371_131) / ((1 + s_0467 / Km0467_131) * (1 + s_0543 / Km0543_131) * (1 + s_0371 / Km0371_131) + (1 + s_0421 / Km0421_131) * (1 + s_0755 / Km0755_131) * (1 + s_1430 / Km1430_131) - 1)) - (cell * Vmax_112 * (s_0378 * s_1552 * s_0755 - s_0377 * s_0476 * s_0333 * s_1141 / Keq_112) / (Km0378_112 * Km1552_112 * Km0755_112) / ((1 + s_0378 / Km0378_112) * (1 + s_1552 / Km1552_112) * (1 + s_0755 / Km0755_112) + (1 + s_0377 / Km0377_112) * (1 + s_0476 / Km0476_112) * (1 + s_0333 / Km0333_112) * (1 + s_1141 / Km1141_112) - 1));
    der(s_0760) = (cell * Vmax_310 * (pow(s_0861, 2) * s_0945 - s_0760 * pow(s_0862, 2) / Keq_310) / (pow(Km0861_310, 2) * Km0945_310) / (pow(1 + s_0861 / Km0861_310, 2) * (1 + s_0945 / Km0945_310) + (1 + s_0760 / Km0760_310) * pow(1 + s_0862 / Km0862_310, 2) - 1)) - (0.02702 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0765) = (cell * Vmax_391 * (s_0766 - s_0765 * s_1430 / Keq_391) / Km0766_391 / (1 + s_0766 / Km0766_391 + (1 + s_0765 / Km0765_391) * (1 + s_1430 / Km1430_391) - 1)) - (cell * Vmax_140 * (s_0765 - s_0367 * s_0936 / Keq_140) / Km0765_140 / (1 + s_0765 / Km0765_140 + (1 + s_0367 / Km0367_140) * (1 + s_0936 / Km0936_140) - 1));
    der(s_0766) = (cell * Vmax_141 * (s_0191 - s_0766 * s_0783 / Keq_141) / Km0191_141 / (1 + s_0191 / Km0191_141 + (1 + s_0766 / Km0766_141) * (1 + s_0783 / Km0783_141) - 1)) - (cell * Vmax_391 * (s_0766 - s_0765 * s_1430 / Keq_391) / Km0766_391 / (1 + s_0766 / Km0766_391 + (1 + s_0765 / Km0765_391) * (1 + s_1430 / Km1430_391) - 1));
    der(s_0767) = (cell * Vmax_144 * (s_0318 * s_0368 - s_0767 * s_0783 / Keq_144) / (Km0318_144 * Km0368_144) / ((1 + s_0318 / Km0318_144) * (1 + s_0368 / Km0368_144) + (1 + s_0767 / Km0767_144) * (1 + s_0783 / Km0783_144) - 1)) - (cell * Vmax_139 * (s_0467 * s_0767 * s_1095 - s_0421 * s_0372 * s_1430 / Keq_139) / (Km0467_139 * Km0767_139 * Km1095_139) / ((1 + s_0467 / Km0467_139) * (1 + s_0767 / Km0767_139) * (1 + s_1095 / Km1095_139) + (1 + s_0421 / Km0421_139) * (1 + s_0372 / Km0372_139) * (1 + s_1430 / Km1430_139) - 1));
    der(s_0768) = (cell * Vmax_360 * (pow(s_1552, 2) * s_1791 - pow(s_1551, 2) * s_0768 / Keq_360) / (pow(Km1552_360, 2) * Km1791_360) / (pow(1 + s_1552 / Km1552_360, 2) * (1 + s_1791 / Km1791_360) + pow(1 + s_1551 / Km1551_360, 2) * (1 + s_0768 / Km0768_360) - 1)) - (cell * Vmax_319 * (s_0768 * s_1333 - s_1334 * s_1578 / Keq_319) / (Km0768_319 * Km1333_319) / ((1 + s_0768 / Km0768_319) * (1 + s_1333 / Km1333_319) + (1 + s_1334 / Km1334_319) * (1 + s_1578 / Km1578_319) - 1));
    der(s_0772) = (cell * Vmax_339 * (s_0913 - s_0772 / Keq_339) / Km0913_339 / (1 + s_0913 / Km0913_339 + 1 + s_0772 / Km0772_339 - 1)) - (cell * Vmax_182 * (s_0772 * s_1336 - s_0920 * s_1335 / Keq_182) / (Km0772_182 * Km1336_182) / ((1 + s_0772 / Km0772_182) * (1 + s_1336 / Km1336_182) + (1 + s_0920 / Km0920_182) * (1 + s_1335 / Km1335_182) - 1)) - (cell * Vmax_304 * (s_0772 * s_1005 - s_1430 * s_1537 / Keq_304) / (Km0772_304 * Km1005_304) / ((1 + s_0772 / Km0772_304) * (1 + s_1005 / Km1005_304) + (1 + s_1430 / Km1430_304) * (1 + s_1537 / Km1537_304) - 1));
    der(s_0779) = (cell * Vmax_6 * (s_0123 * s_1334 - s_0779 * s_1333 / Keq_6) / (Km0123_6 * Km1334_6) / ((1 + s_0123 / Km0123_6) * (1 + s_1334 / Km1334_6) + (1 + s_0779 / Km0779_6) * (1 + s_1333 / Km1333_6) - 1)) - (cell * Vmax_147 * (s_0779 * s_1028 - s_0903 * s_0783 / Keq_147) / (Km0779_147 * Km1028_147) / ((1 + s_0779 / Km0779_147) * (1 + s_1028 / Km1028_147) + (1 + s_0903 / Km0903_147) * (1 + s_0783 / Km0783_147) - 1));
    der(s_0783) = (cell * Vmax_10 * (s_0194 * s_0575 - s_0312 * s_0783 / Keq_10) / (Km0194_10 * Km0575_10) / ((1 + s_0194 / Km0194_10) * (1 + s_0575 / Km0575_10) + (1 + s_0312 / Km0312_10) * (1 + s_0783 / Km0783_10) - 1)) + (cell * Vmax_26 * (s_0575 * s_0271 - s_0542 * s_0783 / Keq_26) / (Km0575_26 * Km0271_26) / ((1 + s_0575 / Km0575_26) * (1 + s_0271 / Km0271_26) + (1 + s_0542 / Km0542_26) * (1 + s_0783 / Km0783_26) - 1)) + (cell * Vmax_82 * (s_0397 * s_0467 * s_0785 - s_0454 * s_0789 * s_0783 / Keq_82) / (Km0397_82 * Km0467_82 * Km0785_82) / ((1 + s_0397 / Km0397_82) * (1 + s_0467 / Km0467_82) * (1 + s_0785 / Km0785_82) + (1 + s_0454 / Km0454_82) * (1 + s_0789 / Km0789_82) * (1 + s_0783 / Km0783_82) - 1)) + (cell * Vmax_83 * (s_0397 * s_0467 * s_0971 - s_0454 * s_1411 * s_0783 / Keq_83) / (Km0397_83 * Km0467_83 * Km0971_83) / ((1 + s_0397 / Km0397_83) * (1 + s_0467 / Km0467_83) * (1 + s_0971 / Km0971_83) + (1 + s_0454 / Km0454_83) * (1 + s_1411 / Km1411_83) * (1 + s_0783 / Km0783_83) - 1)) + (cell * Vmax_84 * (s_0397 * s_0467 * s_0976 - s_0454 * s_0533 * s_0783 / Keq_84) / (Km0397_84 * Km0467_84 * Km0976_84) / ((1 + s_0397 / Km0397_84) * (1 + s_0467 / Km0467_84) * (1 + s_0976 / Km0976_84) + (1 + s_0454 / Km0454_84) * (1 + s_0533 / Km0533_84) * (1 + s_0783 / Km0783_84) - 1)) + (cell * Vmax_100 * (s_0457 * s_0360 - s_0783 * s_1278 / Keq_100) / (Km0457_100 * Km0360_100) / ((1 + s_0457 / Km0457_100) * (1 + s_0360 / Km0360_100) + (1 + s_0783 / Km0783_100) * (1 + s_1278 / Km1278_100) - 1)) + (cell * Vmax_104 * (s_1072 * s_0467 * s_1081 - s_0454 * s_1274 * s_0783 / Keq_104) / (Km1072_104 * Km0467_104 * Km1081_104) / ((1 + s_1072 / Km1072_104) * (1 + s_0467 / Km0467_104) * (1 + s_1081 / Km1081_104) + (1 + s_0454 / Km0454_104) * (1 + s_1274 / Km1274_104) * (1 + s_0783 / Km0783_104) - 1)) + (cell * Vmax_105 * (s_1072 * s_0467 * s_0451 - s_0454 * s_1068 * s_0783 / Keq_105) / (Km1072_105 * Km0467_105 * Km0451_105) / ((1 + s_1072 / Km1072_105) * (1 + s_0467 / Km0467_105) * (1 + s_0451 / Km0451_105) + (1 + s_0454 / Km0454_105) * (1 + s_1068 / Km1068_105) * (1 + s_0783 / Km0783_105) - 1)) + (cell * Vmax_111 * (s_0467 * s_0360 - s_0783 * s_0099 / Keq_111) / (Km0467_111 * Km0360_111) / ((1 + s_0467 / Km0467_111) * (1 + s_0360 / Km0360_111) + (1 + s_0783 / Km0783_111) * (1 + s_0099 / Km0099_111) - 1)) + (cell * Vmax_114 * (s_0481 * s_0945 - s_0480 * s_0783 / Keq_114) / (Km0481_114 * Km0945_114) / ((1 + s_0481 / Km0481_114) * (1 + s_0945 / Km0945_114) + (1 + s_0480 / Km0480_114) * (1 + s_0783 / Km0783_114) - 1)) + (cell * Vmax_115 * (s_0479 * s_0945 - s_0481 * s_0783 / Keq_115) / (Km0479_115 * Km0945_115) / ((1 + s_0479 / Km0479_115) * (1 + s_0945 / Km0945_115) + (1 + s_0481 / Km0481_115) * (1 + s_0783 / Km0783_115) - 1)) + (cell * Vmax_117 * (s_0575 * s_0075 - s_0513 * s_0783 / Keq_117) / (Km0575_117 * Km0075_117) / ((1 + s_0575 / Km0575_117) * (1 + s_0075 / Km0075_117) + (1 + s_0513 / Km0513_117) * (1 + s_0783 / Km0783_117) - 1)) + (cell * Vmax_118 * (s_0575 * s_0073 - s_0512 * s_0783 / Keq_118) / (Km0575_118 * Km0073_118) / ((1 + s_0575 / Km0575_118) * (1 + s_0073 / Km0073_118) + (1 + s_0512 / Km0512_118) * (1 + s_0783 / Km0783_118) - 1)) + (cell * Vmax_125 * (s_0945 - s_0585 * s_0783 / Keq_125) / Km0945_125 / (1 + s_0945 / Km0945_125 + (1 + s_0585 / Km0585_125) * (1 + s_0783 / Km0783_125) - 1)) + (cell * Vmax_141 * (s_0191 - s_0766 * s_0783 / Keq_141) / Km0191_141 / (1 + s_0191 / Km0191_141 + (1 + s_0766 / Km0766_141) * (1 + s_0783 / Km0783_141) - 1)) + (cell * Vmax_144 * (s_0318 * s_0368 - s_0767 * s_0783 / Keq_144) / (Km0318_144 * Km0368_144) / ((1 + s_0318 / Km0318_144) * (1 + s_0368 / Km0368_144) + (1 + s_0767 / Km0767_144) * (1 + s_0783 / Km0783_144) - 1)) + (cell * Vmax_147 * (s_0779 * s_1028 - s_0903 * s_0783 / Keq_147) / (Km0779_147 * Km1028_147) / ((1 + s_0779 / Km0779_147) * (1 + s_1028 / Km1028_147) + (1 + s_0903 / Km0903_147) * (1 + s_0783 / Km0783_147) - 1)) + (cell * Vmax_149 * (s_0810 - s_0807 * s_0783 / Keq_149) / Km0810_149 / (1 + s_0810 / Km0810_149 + (1 + s_0807 / Km0807_149) * (1 + s_0783 / Km0783_149) - 1)) + (cell * Vmax_160 * (s_0467 * s_0863 - s_0859 * s_0783 / Keq_160) / (Km0467_160 * Km0863_160) / ((1 + s_0467 / Km0467_160) * (1 + s_0863 / Km0863_160) + (1 + s_0859 / Km0859_160) * (1 + s_0783 / Km0783_160) - 1)) + (cell * Vmax_164 * (s_0903 * s_1028 - s_0826 * s_0783 / Keq_164) / (Km0903_164 * Km1028_164) / ((1 + s_0903 / Km0903_164) * (1 + s_1028 / Km1028_164) + (1 + s_0826 / Km0826_164) * (1 + s_0783 / Km0783_164) - 1)) + (cell * Vmax_173 * (s_1101 * s_0360 - s_1095 * s_0783 * s_0361 / Keq_173) / (Km1101_173 * Km0360_173) / ((1 + s_1101 / Km1101_173) * (1 + s_0360 / Km0360_173) + (1 + s_1095 / Km1095_173) * (1 + s_0783 / Km0783_173) * (1 + s_0361 / Km0361_173) - 1)) + (cell * Vmax_177 * (s_0467 * s_1095 * s_1690 - s_0454 * s_1105 * s_0783 / Keq_177) / (Km0467_177 * Km1095_177 * Km1690_177) / ((1 + s_0467 / Km0467_177) * (1 + s_1095 / Km1095_177) * (1 + s_1690 / Km1690_177) + (1 + s_0454 / Km0454_177) * (1 + s_1105 / Km1105_177) * (1 + s_0783 / Km0783_177) - 1)) + (cell * Vmax_189 * (s_0467 * s_1101 * s_1799 - s_0454 * s_1095 * s_0942 * s_0783 / Keq_189) / (Km0467_189 * Km1101_189 * Km1799_189) / ((1 + s_0467 / Km0467_189) * (1 + s_1101 / Km1101_189) * (1 + s_1799 / Km1799_189) + (1 + s_0454 / Km0454_189) * (1 + s_1095 / Km1095_189) * (1 + s_0942 / Km0942_189) * (1 + s_0783 / Km0783_189) - 1)) + (cell * Vmax_191 * (s_0945 - s_0160 * s_0867 * s_0783 / Keq_191) / Km0945_191 / (1 + s_0945 / Km0945_191 + (1 + s_0160 / Km0160_191) * (1 + s_0867 / Km0867_191) * (1 + s_0783 / Km0783_191) - 1)) + (cell * Vmax_202 * (s_0325 * s_0435 - s_0283 * s_0783 / Keq_202) / (Km0325_202 * Km0435_202) / ((1 + s_0325 / Km0325_202) * (1 + s_0435 / Km0435_202) + (1 + s_0283 / Km0283_202) * (1 + s_0783 / Km0783_202) - 1)) + (cell * Vmax_232 * (s_0467 * s_1141 - s_1552 * s_1430 * s_0783 / Keq_232) / (Km0467_232 * Km1141_232) / ((1 + s_0467 / Km0467_232) * (1 + s_1141 / Km1141_232) + (1 + s_1552 / Km1552_232) * (1 + s_1430 / Km1430_232) * (1 + s_0783 / Km0783_232) - 1)) + (cell * Vmax_237 * (s_0467 * s_1265 - s_0420 * s_0783 / Keq_237) / (Km0467_237 * Km1265_237) / ((1 + s_0467 / Km0467_237) * (1 + s_1265 / Km1265_237) + (1 + s_0420 / Km0420_237) * (1 + s_0783 / Km0783_237) - 1)) + (cell * Vmax_239 * (s_0467 * s_1259 - s_1258 * s_0783 / Keq_239) / (Km0467_239 * Km1259_239) / ((1 + s_0467 / Km0467_239) * (1 + s_1259 / Km1259_239) + (1 + s_1258 / Km1258_239) * (1 + s_0783 / Km0783_239) - 1)) + (cell * Vmax_244 * (s_0467 * s_0732 * s_0451 - s_0454 * s_1333 * s_0783 / Keq_244) / (Km0467_244 * Km0732_244 * Km0451_244) / ((1 + s_0467 / Km0467_244) * (1 + s_0732 / Km0732_244) * (1 + s_0451 / Km0451_244) + (1 + s_0454 / Km0454_244) * (1 + s_1333 / Km1333_244) * (1 + s_0783 / Km0783_244) - 1)) + (cell * Vmax_245 * (s_0467 * s_1340 - s_0732 * s_0783 / Keq_245) / (Km0467_245 * Km1340_245) / ((1 + s_0467 / Km0467_245) * (1 + s_1340 / Km1340_245) + (1 + s_0732 / Km0732_245) * (1 + s_0783 / Km0783_245) - 1)) + (cell * Vmax_246 * (s_0360 * s_1537 - s_0543 * s_1340 * s_0783 / Keq_246) / (Km0360_246 * Km1537_246) / ((1 + s_0360 / Km0360_246) * (1 + s_1537 / Km1537_246) + (1 + s_0543 / Km0543_246) * (1 + s_1340 / Km1340_246) * (1 + s_0783 / Km0783_246) - 1)) + (5.0 * cell * Vmax_254 * (s_0826 * pow(s_1028, 5) - s_0435 * pow(s_0783, 5) / Keq_254) / (Km0826_254 * pow(Km1028_254, 5)) / ((1 + s_0826 / Km0826_254) * pow(1 + s_1028 / Km1028_254, 5) + (1 + s_0435 / Km0435_254) * pow(1 + s_0783 / Km0783_254, 5) - 1)) + (cell * Vmax_257 * (s_1394 * s_0360 - s_1397 * s_0783 / Keq_257) / (Km1394_257 * Km0360_257) / ((1 + s_1394 / Km1394_257) * (1 + s_0360 / Km0360_257) + (1 + s_1397 / Km1397_257) * (1 + s_0783 / Km0783_257) - 1)) + (cell * Vmax_259 * (s_0467 * s_1413 - s_0754 * s_0783 / Keq_259) / (Km0467_259 * Km1413_259) / ((1 + s_0467 / Km0467_259) * (1 + s_1413 / Km1413_259) + (1 + s_0754 / Km0754_259) * (1 + s_0783 / Km0783_259) - 1)) + (cell * Vmax_261 * (s_0470 * s_0467 * s_0032 - s_0454 * s_0033 * s_0783 / Keq_261) / (Km0470_261 * Km0467_261 * Km0032_261) / ((1 + s_0470 / Km0470_261) * (1 + s_0467 / Km0467_261) * (1 + s_0032 / Km0032_261) + (1 + s_0454 / Km0454_261) * (1 + s_0033 / Km0033_261) * (1 + s_0783 / Km0783_261) - 1)) + (cell * Vmax_276 * (s_0599 * s_0575 * s_1083 - s_1277 * s_0539 * s_0783 / Keq_276) / (Km0599_276 * Km0575_276 * Km1083_276) / ((1 + s_0599 / Km0599_276) * (1 + s_0575 / Km0575_276) * (1 + s_1083 / Km1083_276) + (1 + s_1277 / Km1277_276) * (1 + s_0539 / Km0539_276) * (1 + s_0783 / Km0783_276) - 1)) + (cell * Vmax_280 * (s_0099 - s_0783 * s_0098 / Keq_280) / Km0099_280 / (1 + s_0099 / Km0099_280 + (1 + s_0783 / Km0783_280) * (1 + s_0098 / Km0098_280) - 1)) + (cell * Vmax_324 * (s_0467 * s_0945 * s_1609 - s_0412 * s_0896 * s_1430 * s_0783 / Keq_324) / (Km0467_324 * Km0945_324 * Km1609_324) / ((1 + s_0467 / Km0467_324) * (1 + s_0945 / Km0945_324) * (1 + s_1609 / Km1609_324) + (1 + s_0412 / Km0412_324) * (1 + s_0896 / Km0896_324) * (1 + s_1430 / Km1430_324) * (1 + s_0783 / Km0783_324) - 1)) + (cell * Vmax_329 * (s_0218 * s_0330 - s_0783 * s_1643 / Keq_329) / (Km0218_329 * Km0330_329) / ((1 + s_0218 / Km0218_329) * (1 + s_0330 / Km0330_329) + (1 + s_0783 / Km0783_329) * (1 + s_1643 / Km1643_329) - 1)) + (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) + (cell * Vmax_349 * (s_1287 * s_1792 - s_0783 * s_1745 / Keq_349) / (Km1287_349 * Km1792_349) / ((1 + s_1287 / Km1287_349) * (1 + s_1792 / Km1792_349) + (1 + s_0783 / Km0783_349) * (1 + s_1745 / Km1745_349) - 1)) + (8.0 * cell * Vmax_357 * (s_0826 * pow(s_1028, 8) - pow(s_0783, 8) * s_1765 / Keq_357) / (Km0826_357 * pow(Km1028_357, 8)) / ((1 + s_0826 / Km0826_357) * pow(1 + s_1028 / Km1028_357, 8) + pow(1 + s_0783 / Km0783_357, 8) * (1 + s_1765 / Km1765_357) - 1)) + (0.7739 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398)) - (cell * Vmax_293 * (s_0421 * s_0783 - s_0467 * s_1430 / Keq_293) / (Km0421_293 * Km0783_293) / ((1 + s_0421 / Km0421_293) * (1 + s_0783 / Km0783_293) + (1 + s_0467 / Km0467_293) * (1 + s_1430 / Km1430_293) - 1));
    der(s_0785) = (cell * Vmax_156 * (s_0790 - s_0555 * s_0785 / Keq_156) / Km0790_156 / (1 + s_0790 / Km0790_156 + (1 + s_0555 / Km0555_156) * (1 + s_0785 / Km0785_156) - 1)) - (cell * Vmax_82 * (s_0397 * s_0467 * s_0785 - s_0454 * s_0789 * s_0783 / Keq_82) / (Km0397_82 * Km0467_82 * Km0785_82) / ((1 + s_0397 / Km0397_82) * (1 + s_0467 / Km0467_82) * (1 + s_0785 / Km0785_82) + (1 + s_0454 / Km0454_82) * (1 + s_0789 / Km0789_82) * (1 + s_0783 / Km0783_82) - 1));
    der(s_0789) = (cell * Vmax_82 * (s_0397 * s_0467 * s_0785 - s_0454 * s_0789 * s_0783 / Keq_82) / (Km0397_82 * Km0467_82 * Km0785_82) / ((1 + s_0397 / Km0397_82) * (1 + s_0467 / Km0467_82) * (1 + s_0785 / Km0785_82) + (1 + s_0454 / Km0454_82) * (1 + s_0789 / Km0789_82) * (1 + s_0783 / Km0783_82) - 1)) - (cell * Vmax_52 * (s_0789 * s_1216 - s_0304 * s_0397 * s_0543 / Keq_52) / (Km0789_52 * Km1216_52) / ((1 + s_0789 / Km0789_52) * (1 + s_1216 / Km1216_52) + (1 + s_0304 / Km0304_52) * (1 + s_0397 / Km0397_52) * (1 + s_0543 / Km0543_52) - 1));
    der(s_0790) = (cell * Vmax_87 * (s_1670 * s_0860 - s_0790 * s_0859 / Keq_87) / (Km1670_87 * Km0860_87) / ((1 + s_1670 / Km1670_87) * (1 + s_0860 / Km0860_87) + (1 + s_0790 / Km0790_87) * (1 + s_0859 / Km0859_87) - 1)) - (cell * Vmax_72 * (s_0395 * s_0790 - s_0305 * s_0555 / Keq_72) / (Km0395_72 * Km0790_72) / ((1 + s_0395 / Km0395_72) * (1 + s_0790 / Km0790_72) + (1 + s_0305 / Km0305_72) * (1 + s_0555 / Km0555_72) - 1)) - (cell * Vmax_156 * (s_0790 - s_0555 * s_0785 / Keq_156) / Km0790_156 / (1 + s_0790 / Km0790_156 + (1 + s_0555 / Km0555_156) * (1 + s_0785 / Km0785_156) - 1));
    der(s_0795) = (cell * Vmax_148 * (s_0467 * s_0802 - s_0421 * s_0795 / Keq_148) / (Km0467_148 * Km0802_148) / ((1 + s_0467 / Km0467_148) * (1 + s_0802 / Km0802_148) + (1 + s_0421 / Km0421_148) * (1 + s_0795 / Km0795_148) - 1)) - (cell * Vmax_248 * (s_0467 * s_0795 - s_0421 * s_0805 / Keq_248) / (Km0467_248 * Km0795_248) / ((1 + s_0467 / Km0467_248) * (1 + s_0795 / Km0795_248) + (1 + s_0421 / Km0421_248) * (1 + s_0805 / Km0805_248) - 1));
    der(s_0802) = (cell * Vmax_335 * (s_0807 * s_0336 - s_0372 * s_0802 / Keq_335) / (Km0807_335 * Km0336_335) / ((1 + s_0807 / Km0807_335) * (1 + s_0336 / Km0336_335) + (1 + s_0372 / Km0372_335) * (1 + s_0802 / Km0802_335) - 1)) - (cell * Vmax_148 * (s_0467 * s_0802 - s_0421 * s_0795 / Keq_148) / (Km0467_148 * Km0802_148) / ((1 + s_0467 / Km0467_148) * (1 + s_0802 / Km0802_148) + (1 + s_0421 / Km0421_148) * (1 + s_0795 / Km0795_148) - 1));
    der(s_0805) = (cell * Vmax_248 * (s_0467 * s_0795 - s_0421 * s_0805 / Keq_248) / (Km0467_248 * Km0795_248) / ((1 + s_0467 / Km0467_248) * (1 + s_0795 / Km0795_248) + (1 + s_0421 / Km0421_248) * (1 + s_0805 / Km0805_248) - 1)) - (0.02617 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0807) = (cell * Vmax_149 * (s_0810 - s_0807 * s_0783 / Keq_149) / Km0810_149 / (1 + s_0810 / Km0810_149 + (1 + s_0807 / Km0807_149) * (1 + s_0783 / Km0783_149) - 1)) - (cell * Vmax_335 * (s_0807 * s_0336 - s_0372 * s_0802 / Keq_335) / (Km0807_335 * Km0336_335) / ((1 + s_0807 / Km0807_335) * (1 + s_0336 / Km0336_335) + (1 + s_0372 / Km0372_335) * (1 + s_0802 / Km0802_335) - 1));
    der(s_0810) = (cell * Vmax_311 * (pow(s_0861, 2) * s_1792 - s_0810 * pow(s_0862, 2) / Keq_311) / (pow(Km0861_311, 2) * Km1792_311) / (pow(1 + s_0861 / Km0861_311, 2) * (1 + s_1792 / Km1792_311) + (1 + s_0810 / Km0810_311) * pow(1 + s_0862 / Km0862_311, 2) - 1)) - (cell * Vmax_149 * (s_0810 - s_0807 * s_0783 / Keq_149) / Km0810_149 / (1 + s_0810 / Km0810_149 + (1 + s_0807 / Km0807_149) * (1 + s_0783 / Km0783_149) - 1));
    der(s_0812) = (cell * Vmax_45 * (s_0276 - s_0812 / Keq_45) / Km0276_45 / (1 + s_0276 / Km0276_45 + 1 + s_0812 / Km0812_45 - 1)) - (cell * Vmax_151 * (s_0812 * s_1336 - s_0910 * s_1335 / Keq_151) / (Km0812_151 * Km1336_151) / ((1 + s_0812 / Km0812_151) * (1 + s_1336 / Km1336_151) + (1 + s_0910 / Km0910_151) * (1 + s_1335 / Km1335_151) - 1));
    der(s_0813) = (cell * Vmax_48 * (s_0277 - s_0813 / Keq_48) / Km0277_48 / (1 + s_0277 / Km0277_48 + 1 + s_0813 / Km0813_48 - 1)) - (cell * Vmax_152 * (s_0813 * s_1336 - s_1335 * s_1492 / Keq_152) / (Km0813_152 * Km1336_152) / ((1 + s_0813 / Km0813_152) * (1 + s_1336 / Km1336_152) + (1 + s_1335 / Km1335_152) * (1 + s_1492 / Km1492_152) - 1));
    der(s_0826) = (cell * Vmax_164 * (s_0903 * s_1028 - s_0826 * s_0783 / Keq_164) / (Km0903_164 * Km1028_164) / ((1 + s_0903 / Km0903_164) * (1 + s_1028 / Km1028_164) + (1 + s_0826 / Km0826_164) * (1 + s_0783 / Km0783_164) - 1)) - (cell * Vmax_254 * (s_0826 * pow(s_1028, 5) - s_0435 * pow(s_0783, 5) / Keq_254) / (Km0826_254 * pow(Km1028_254, 5)) / ((1 + s_0826 / Km0826_254) * pow(1 + s_1028 / Km1028_254, 5) + (1 + s_0435 / Km0435_254) * pow(1 + s_0783 / Km0783_254, 5) - 1)) - (cell * Vmax_357 * (s_0826 * pow(s_1028, 8) - pow(s_0783, 8) * s_1765 / Keq_357) / (Km0826_357 * pow(Km1028_357, 8)) / ((1 + s_0826 / Km0826_357) * pow(1 + s_1028 / Km1028_357, 8) + pow(1 + s_0783 / Km0783_357, 8) * (1 + s_1765 / Km1765_357) - 1));
    der(s_0838) = (cell * Vmax_376 * (s_0840 - s_0838) / Km0840_376 / (1 + s_0840 / Km0840_376 + 1 + s_0838 / Km0838_376 - 1)) - (cell * Vmax_159 * (s_0838 * s_1511 - s_1508 / Keq_159) / (Km0838_159 * Km1511_159) / ((1 + s_0838 / Km0838_159) * (1 + s_1511 / Km1511_159) + 1 + s_1508 / Km1508_159 - 1)) - (2.0 * cell * Vmax_210 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1019 - s_0859 * pow(s_1017, 2) * s_1020 / Keq_210) / (Km0860_210 * pow(Km0838_210, 2) * pow(Km1018_210, 2) * Km1019_210) / ((1 + s_0860 / Km0860_210) * pow(1 + s_0838 / Km0838_210, 2) * pow(1 + s_1018 / Km1018_210, 2) * (1 + s_1019 / Km1019_210) + (1 + s_0859 / Km0859_210) * pow(1 + s_1017 / Km1017_210, 2) * (1 + s_1020 / Km1020_210) - 1)) - (2.0 * cell * Vmax_211 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1020 - s_0859 * pow(s_1017, 2) * s_1022 / Keq_211) / (Km0860_211 * pow(Km0838_211, 2) * pow(Km1018_211, 2) * Km1020_211) / ((1 + s_0860 / Km0860_211) * pow(1 + s_0838 / Km0838_211, 2) * pow(1 + s_1018 / Km1018_211, 2) * (1 + s_1020 / Km1020_211) + (1 + s_0859 / Km0859_211) * pow(1 + s_1017 / Km1017_211, 2) * (1 + s_1022 / Km1022_211) - 1)) - (cell * Vmax_320 * (s_0838 * s_1578 - s_1577 / Keq_320) / (Km0838_320 * Km1578_320) / ((1 + s_0838 / Km0838_320) * (1 + s_1578 / Km1578_320) + 1 + s_1577 / Km1577_320 - 1)) - (0.006715 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0840) = 0.0;
    der(s_0841) = (cell * Vmax_377 * (s_0843 - s_0841) / Km0843_377 / (1 + s_0843 / Km0843_377 + 1 + s_0841 / Km0841_377 - 1)) - (0.007808 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0843) = 0.0;
    der(s_0859) = (cell * Vmax_85 * (s_0574 * s_0860 - s_0488 * s_0859 / Keq_85) / (Km0574_85 * Km0860_85) / ((1 + s_0574 / Km0574_85) * (1 + s_0860 / Km0860_85) + (1 + s_0488 / Km0488_85) * (1 + s_0859 / Km0859_85) - 1)) + (cell * Vmax_86 * (s_1668 * s_0860 - s_0737 * s_0859 / Keq_86) / (Km1668_86 * Km0860_86) / ((1 + s_1668 / Km1668_86) * (1 + s_0860 / Km0860_86) + (1 + s_0737 / Km0737_86) * (1 + s_0859 / Km0859_86) - 1)) + (cell * Vmax_87 * (s_1670 * s_0860 - s_0790 * s_0859 / Keq_87) / (Km1670_87 * Km0860_87) / ((1 + s_1670 / Km1670_87) * (1 + s_0860 / Km0860_87) + (1 + s_0790 / Km0790_87) * (1 + s_0859 / Km0859_87) - 1)) + (cell * Vmax_88 * (s_0860 * s_1674 - s_0859 * s_1412 / Keq_88) / (Km0860_88 * Km1674_88) / ((1 + s_0860 / Km0860_88) * (1 + s_1674 / Km1674_88) + (1 + s_0859 / Km0859_88) * (1 + s_1412 / Km1412_88) - 1)) + (cell * Vmax_89 * (s_0860 * s_1672 - s_0859 * s_0984 / Keq_89) / (Km0860_89 * Km1672_89) / ((1 + s_0860 / Km0860_89) * (1 + s_1672 / Km1672_89) + (1 + s_0859 / Km0859_89) * (1 + s_0984 / Km0984_89) - 1)) + (cell * Vmax_90 * (s_0860 * s_1676 - s_0859 * s_1390 / Keq_90) / (Km0860_90 * Km1676_90) / ((1 + s_0860 / Km0860_90) * (1 + s_1676 / Km1676_90) + (1 + s_0859 / Km0859_90) * (1 + s_1390 / Km1390_90) - 1)) + (cell * Vmax_91 * (s_0860 * s_1680 - s_0859 * s_1632 / Keq_91) / (Km0860_91 * Km1680_91) / ((1 + s_0860 / Km0860_91) * (1 + s_1680 / Km1680_91) + (1 + s_0859 / Km0859_91) * (1 + s_1632 / Km1632_91) - 1)) + (cell * Vmax_160 * (s_0467 * s_0863 - s_0859 * s_0783 / Keq_160) / (Km0467_160 * Km0863_160) / ((1 + s_0467 / Km0467_160) * (1 + s_0863 / Km0863_160) + (1 + s_0859 / Km0859_160) * (1 + s_0783 / Km0783_160) - 1)) + (cell * Vmax_210 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1019 - s_0859 * pow(s_1017, 2) * s_1020 / Keq_210) / (Km0860_210 * pow(Km0838_210, 2) * pow(Km1018_210, 2) * Km1019_210) / ((1 + s_0860 / Km0860_210) * pow(1 + s_0838 / Km0838_210, 2) * pow(1 + s_1018 / Km1018_210, 2) * (1 + s_1019 / Km1019_210) + (1 + s_0859 / Km0859_210) * pow(1 + s_1017 / Km1017_210, 2) * (1 + s_1020 / Km1020_210) - 1)) + (cell * Vmax_211 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1020 - s_0859 * pow(s_1017, 2) * s_1022 / Keq_211) / (Km0860_211 * pow(Km0838_211, 2) * pow(Km1018_211, 2) * Km1020_211) / ((1 + s_0860 / Km0860_211) * pow(1 + s_0838 / Km0838_211, 2) * pow(1 + s_1018 / Km1018_211, 2) * (1 + s_1020 / Km1020_211) + (1 + s_0859 / Km0859_211) * pow(1 + s_1017 / Km1017_211, 2) * (1 + s_1022 / Km1022_211) - 1)) + (cell * Vmax_213 * (s_0860 * s_1022 - s_0859 * s_1021 / Keq_213) / (Km0860_213 * Km1022_213) / ((1 + s_0860 / Km0860_213) * (1 + s_1022 / Km1022_213) + (1 + s_0859 / Km0859_213) * (1 + s_1021 / Km1021_213) - 1)) - (cell * Vmax_155 * (s_0859 * s_1334 - s_0860 * s_1333 / Keq_155) / (Km0859_155 * Km1334_155) / ((1 + s_0859 / Km0859_155) * (1 + s_1334 / Km1334_155) + (1 + s_0860 / Km0860_155) * (1 + s_1333 / Km1333_155) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0860) = (cell * Vmax_155 * (s_0859 * s_1334 - s_0860 * s_1333 / Keq_155) / (Km0859_155 * Km1334_155) / ((1 + s_0859 / Km0859_155) * (1 + s_1334 / Km1334_155) + (1 + s_0860 / Km0860_155) * (1 + s_1333 / Km1333_155) - 1)) - (cell * Vmax_85 * (s_0574 * s_0860 - s_0488 * s_0859 / Keq_85) / (Km0574_85 * Km0860_85) / ((1 + s_0574 / Km0574_85) * (1 + s_0860 / Km0860_85) + (1 + s_0488 / Km0488_85) * (1 + s_0859 / Km0859_85) - 1)) - (cell * Vmax_86 * (s_1668 * s_0860 - s_0737 * s_0859 / Keq_86) / (Km1668_86 * Km0860_86) / ((1 + s_1668 / Km1668_86) * (1 + s_0860 / Km0860_86) + (1 + s_0737 / Km0737_86) * (1 + s_0859 / Km0859_86) - 1)) - (cell * Vmax_87 * (s_1670 * s_0860 - s_0790 * s_0859 / Keq_87) / (Km1670_87 * Km0860_87) / ((1 + s_1670 / Km1670_87) * (1 + s_0860 / Km0860_87) + (1 + s_0790 / Km0790_87) * (1 + s_0859 / Km0859_87) - 1)) - (cell * Vmax_88 * (s_0860 * s_1674 - s_0859 * s_1412 / Keq_88) / (Km0860_88 * Km1674_88) / ((1 + s_0860 / Km0860_88) * (1 + s_1674 / Km1674_88) + (1 + s_0859 / Km0859_88) * (1 + s_1412 / Km1412_88) - 1)) - (cell * Vmax_89 * (s_0860 * s_1672 - s_0859 * s_0984 / Keq_89) / (Km0860_89 * Km1672_89) / ((1 + s_0860 / Km0860_89) * (1 + s_1672 / Km1672_89) + (1 + s_0859 / Km0859_89) * (1 + s_0984 / Km0984_89) - 1)) - (cell * Vmax_90 * (s_0860 * s_1676 - s_0859 * s_1390 / Keq_90) / (Km0860_90 * Km1676_90) / ((1 + s_0860 / Km0860_90) * (1 + s_1676 / Km1676_90) + (1 + s_0859 / Km0859_90) * (1 + s_1390 / Km1390_90) - 1)) - (cell * Vmax_91 * (s_0860 * s_1680 - s_0859 * s_1632 / Keq_91) / (Km0860_91 * Km1680_91) / ((1 + s_0860 / Km0860_91) * (1 + s_1680 / Km1680_91) + (1 + s_0859 / Km0859_91) * (1 + s_1632 / Km1632_91) - 1)) - (cell * Vmax_210 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1019 - s_0859 * pow(s_1017, 2) * s_1020 / Keq_210) / (Km0860_210 * pow(Km0838_210, 2) * pow(Km1018_210, 2) * Km1019_210) / ((1 + s_0860 / Km0860_210) * pow(1 + s_0838 / Km0838_210, 2) * pow(1 + s_1018 / Km1018_210, 2) * (1 + s_1019 / Km1019_210) + (1 + s_0859 / Km0859_210) * pow(1 + s_1017 / Km1017_210, 2) * (1 + s_1020 / Km1020_210) - 1)) - (cell * Vmax_211 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1020 - s_0859 * pow(s_1017, 2) * s_1022 / Keq_211) / (Km0860_211 * pow(Km0838_211, 2) * pow(Km1018_211, 2) * Km1020_211) / ((1 + s_0860 / Km0860_211) * pow(1 + s_0838 / Km0838_211, 2) * pow(1 + s_1018 / Km1018_211, 2) * (1 + s_1020 / Km1020_211) + (1 + s_0859 / Km0859_211) * pow(1 + s_1017 / Km1017_211, 2) * (1 + s_1022 / Km1022_211) - 1)) - (cell * Vmax_213 * (s_0860 * s_1022 - s_0859 * s_1021 / Keq_213) / (Km0860_213 * Km1022_213) / ((1 + s_0860 / Km0860_213) * (1 + s_1022 / Km1022_213) + (1 + s_0859 / Km0859_213) * (1 + s_1021 / Km1021_213) - 1));
    der(s_0861) = (2.0 * cell * Vmax_303 * (s_0555 * pow(s_0862, 2) * s_1531 - s_0395 * s_0543 * pow(s_0861, 2) / Keq_303) / (Km0555_303 * pow(Km0862_303, 2) * Km1531_303) / ((1 + s_0555 / Km0555_303) * pow(1 + s_0862 / Km0862_303, 2) * (1 + s_1531 / Km1531_303) + (1 + s_0395 / Km0395_303) * (1 + s_0543 / Km0543_303) * pow(1 + s_0861 / Km0861_303, 2) - 1)) - (2.0 * cell * Vmax_16 * (s_0193 * pow(s_0861, 2) - pow(s_0862, 2) * s_0123 / Keq_16) / (Km0193_16 * pow(Km0861_16, 2)) / ((1 + s_0193 / Km0193_16) * pow(1 + s_0861 / Km0861_16, 2) + pow(1 + s_0862 / Km0862_16, 2) * (1 + s_0123 / Km0123_16) - 1)) - (2.0 * cell * Vmax_308 * (s_0467 * pow(s_0861, 2) - s_0726 * pow(s_0862, 2) / Keq_308) / (Km0467_308 * pow(Km0861_308, 2)) / ((1 + s_0467 / Km0467_308) * pow(1 + s_0861 / Km0861_308, 2) + (1 + s_0726 / Km0726_308) * pow(1 + s_0862 / Km0862_308, 2) - 1)) - (2.0 * cell * Vmax_309 * (s_0575 * pow(s_0861, 2) - s_0731 * pow(s_0862, 2) / Keq_309) / (Km0575_309 * pow(Km0861_309, 2)) / ((1 + s_0575 / Km0575_309) * pow(1 + s_0861 / Km0861_309, 2) + (1 + s_0731 / Km0731_309) * pow(1 + s_0862 / Km0862_309, 2) - 1)) - (2.0 * cell * Vmax_310 * (pow(s_0861, 2) * s_0945 - s_0760 * pow(s_0862, 2) / Keq_310) / (pow(Km0861_310, 2) * Km0945_310) / (pow(1 + s_0861 / Km0861_310, 2) * (1 + s_0945 / Km0945_310) + (1 + s_0760 / Km0760_310) * pow(1 + s_0862 / Km0862_310, 2) - 1)) - (2.0 * cell * Vmax_311 * (pow(s_0861, 2) * s_1792 - s_0810 * pow(s_0862, 2) / Keq_311) / (pow(Km0861_311, 2) * Km1792_311) / (pow(1 + s_0861 / Km0861_311, 2) * (1 + s_1792 / Km1792_311) + (1 + s_0810 / Km0810_311) * pow(1 + s_0862 / Km0862_311, 2) - 1));
    der(s_0862) = (2.0 * cell * Vmax_16 * (s_0193 * pow(s_0861, 2) - pow(s_0862, 2) * s_0123 / Keq_16) / (Km0193_16 * pow(Km0861_16, 2)) / ((1 + s_0193 / Km0193_16) * pow(1 + s_0861 / Km0861_16, 2) + pow(1 + s_0862 / Km0862_16, 2) * (1 + s_0123 / Km0123_16) - 1)) + (2.0 * cell * Vmax_308 * (s_0467 * pow(s_0861, 2) - s_0726 * pow(s_0862, 2) / Keq_308) / (Km0467_308 * pow(Km0861_308, 2)) / ((1 + s_0467 / Km0467_308) * pow(1 + s_0861 / Km0861_308, 2) + (1 + s_0726 / Km0726_308) * pow(1 + s_0862 / Km0862_308, 2) - 1)) + (2.0 * cell * Vmax_309 * (s_0575 * pow(s_0861, 2) - s_0731 * pow(s_0862, 2) / Keq_309) / (Km0575_309 * pow(Km0861_309, 2)) / ((1 + s_0575 / Km0575_309) * pow(1 + s_0861 / Km0861_309, 2) + (1 + s_0731 / Km0731_309) * pow(1 + s_0862 / Km0862_309, 2) - 1)) + (2.0 * cell * Vmax_310 * (pow(s_0861, 2) * s_0945 - s_0760 * pow(s_0862, 2) / Keq_310) / (pow(Km0861_310, 2) * Km0945_310) / (pow(1 + s_0861 / Km0861_310, 2) * (1 + s_0945 / Km0945_310) + (1 + s_0760 / Km0760_310) * pow(1 + s_0862 / Km0862_310, 2) - 1)) + (2.0 * cell * Vmax_311 * (pow(s_0861, 2) * s_1792 - s_0810 * pow(s_0862, 2) / Keq_311) / (pow(Km0861_311, 2) * Km1792_311) / (pow(1 + s_0861 / Km0861_311, 2) * (1 + s_1792 / Km1792_311) + (1 + s_0810 / Km0810_311) * pow(1 + s_0862 / Km0862_311, 2) - 1)) - (2.0 * cell * Vmax_303 * (s_0555 * pow(s_0862, 2) * s_1531 - s_0395 * s_0543 * pow(s_0861, 2) / Keq_303) / (Km0555_303 * pow(Km0862_303, 2) * Km1531_303) / ((1 + s_0555 / Km0555_303) * pow(1 + s_0862 / Km0862_303, 2) * (1 + s_1531 / Km1531_303) + (1 + s_0395 / Km0395_303) * (1 + s_0543 / Km0543_303) * pow(1 + s_0861 / Km0861_303, 2) - 1));
    der(s_0863) = (cell * Vmax_305 * (s_0467 * s_1546 - s_0421 * s_0863 / Keq_305) / (Km0467_305 * Km1546_305) / ((1 + s_0467 / Km0467_305) * (1 + s_1546 / Km1546_305) + (1 + s_0421 / Km0421_305) * (1 + s_0863 / Km0863_305) - 1)) - (cell * Vmax_160 * (s_0467 * s_0863 - s_0859 * s_0783 / Keq_160) / (Km0467_160 * Km0863_160) / ((1 + s_0467 / Km0467_160) * (1 + s_0863 / Km0863_160) + (1 + s_0859 / Km0859_160) * (1 + s_0783 / Km0783_160) - 1));
    der(s_0867) = (cell * Vmax_18 * (s_0704 - s_0255 * s_0867 / Keq_18) / Km0704_18 / (1 + s_0704 / Km0704_18 + (1 + s_0255 / Km0255_18) * (1 + s_0867 / Km0867_18) - 1)) + (2.0 * cell * Vmax_56 * (s_0342 * s_1333 - s_0313 * pow(s_0867, 2) * s_1334 / Keq_56) / (Km0342_56 * Km1333_56) / ((1 + s_0342 / Km0342_56) * (1 + s_1333 / Km1333_56) + (1 + s_0313 / Km0313_56) * pow(1 + s_0867 / Km0867_56, 2) * (1 + s_1334 / Km1334_56) - 1)) + (cell * Vmax_190 * (s_0945 - s_0191 * s_0867 / Keq_190) / Km0945_190 / (1 + s_0945 / Km0945_190 + (1 + s_0191 / Km0191_190) * (1 + s_0867 / Km0867_190) - 1)) + (cell * Vmax_191 * (s_0945 - s_0160 * s_0867 * s_0783 / Keq_191) / Km0945_191 / (1 + s_0945 / Km0945_191 + (1 + s_0160 / Km0160_191) * (1 + s_0867 / Km0867_191) * (1 + s_0783 / Km0783_191) - 1)) + (cell * Vmax_302 * (s_0555 * s_1531 - s_0395 * s_0867 / Keq_302) / (Km0555_302 * Km1531_302) / ((1 + s_0555 / Km0555_302) * (1 + s_1531 / Km1531_302) + (1 + s_0395 / Km0395_302) * (1 + s_0867 / Km0867_302) - 1)) - (cell * Vmax_161 * (s_0467 * s_0867 * s_0337 - s_0133 * s_0421 * s_1430 / Keq_161) / (Km0467_161 * Km0867_161 * Km0337_161) / ((1 + s_0467 / Km0467_161) * (1 + s_0867 / Km0867_161) * (1 + s_0337 / Km0337_161) + (1 + s_0133 / Km0133_161) * (1 + s_0421 / Km0421_161) * (1 + s_1430 / Km1430_161) - 1)) - (cell * Vmax_163 * (s_0467 * s_0867 * s_1318 - s_0421 * s_1322 * s_1430 / Keq_163) / (Km0467_163 * Km0867_163 * Km1318_163) / ((1 + s_0467 / Km0467_163) * (1 + s_0867 / Km0867_163) * (1 + s_1318 / Km1318_163) + (1 + s_0421 / Km0421_163) * (1 + s_1322 / Km1322_163) * (1 + s_1430 / Km1430_163) - 1));
    der(s_0875) = (cell * Vmax_95 * (s_0040 - s_0343 * s_0875 / Keq_95) / Km0040_95 / (1 + s_0040 / Km0040_95 + (1 + s_0343 / Km0343_95) * (1 + s_0875 / Km0875_95) - 1)) + (cell * Vmax_97 * (s_1327 - s_0454 * s_0875 / Keq_97) / Km1327_97 / (1 + s_1327 / Km1327_97 + (1 + s_0454 / Km0454_97) * (1 + s_0875 / Km0875_97) - 1)) + (cell * Vmax_103 * (s_1274 - s_1061 * s_0875 / Keq_103) / Km1274_103 / (1 + s_1274 / Km1274_103 + (1 + s_1061 / Km1061_103) * (1 + s_0875 / Km0875_103) - 1)) - (cell * Vmax_162 * (s_0875 - s_1138 / Keq_162) / Km0875_162 / (1 + s_0875 / Km0875_162 + 1 + s_1138 / Km1138_162 - 1));
    der(s_0896) = (cell * Vmax_96 * (s_1072 * s_0945 * s_1006 - s_1327 * s_0896 * s_1430 / Keq_96) / (Km1072_96 * Km0945_96 * Km1006_96) / ((1 + s_1072 / Km1072_96) * (1 + s_0945 / Km0945_96) * (1 + s_1006 / Km1006_96) + (1 + s_1327 / Km1327_96) * (1 + s_0896 / Km0896_96) * (1 + s_1430 / Km1430_96) - 1)) + (cell * Vmax_192 * (s_0467 * s_0942 - s_0421 * s_0896 / Keq_192) / (Km0467_192 * Km0942_192) / ((1 + s_0467 / Km0467_192) * (1 + s_0942 / Km0942_192) + (1 + s_0421 / Km0421_192) * (1 + s_0896 / Km0896_192) - 1)) + (cell * Vmax_324 * (s_0467 * s_0945 * s_1609 - s_0412 * s_0896 * s_1430 * s_0783 / Keq_324) / (Km0467_324 * Km0945_324 * Km1609_324) / ((1 + s_0467 / Km0467_324) * (1 + s_0945 / Km0945_324) * (1 + s_1609 / Km1609_324) + (1 + s_0412 / Km0412_324) * (1 + s_0896 / Km0896_324) * (1 + s_1430 / Km1430_324) * (1 + s_0783 / Km0783_324) - 1)) - (cell * Vmax_249 * (s_0467 * s_0896 - s_0421 * s_0945 / Keq_249) / (Km0467_249 * Km0896_249) / ((1 + s_0467 / Km0467_249) * (1 + s_0896 / Km0896_249) + (1 + s_0421 / Km0421_249) * (1 + s_0945 / Km0945_249) - 1));
    der(s_0903) = (cell * Vmax_147 * (s_0779 * s_1028 - s_0903 * s_0783 / Keq_147) / (Km0779_147 * Km1028_147) / ((1 + s_0779 / Km0779_147) * (1 + s_1028 / Km1028_147) + (1 + s_0903 / Km0903_147) * (1 + s_0783 / Km0783_147) - 1)) - (cell * Vmax_164 * (s_0903 * s_1028 - s_0826 * s_0783 / Keq_164) / (Km0903_164 * Km1028_164) / ((1 + s_0903 / Km0903_164) * (1 + s_1028 / Km1028_164) + (1 + s_0826 / Km0826_164) * (1 + s_0783 / Km0783_164) - 1));
    der(s_0910) = (cell * Vmax_151 * (s_0812 * s_1336 - s_0910 * s_1335 / Keq_151) / (Km0812_151 * Km1336_151) / ((1 + s_0812 / Km0812_151) * (1 + s_1336 / Km1336_151) + (1 + s_0910 / Km0910_151) * (1 + s_1335 / Km1335_151) - 1)) - (cell * Vmax_50 * (s_0910 * s_1216 - s_0397 * s_0543 * s_0290 / Keq_50) / (Km0910_50 * Km1216_50) / ((1 + s_0910 / Km0910_50) * (1 + s_1216 / Km1216_50) + (1 + s_0397 / Km0397_50) * (1 + s_0543 / Km0543_50) * (1 + s_0290 / Km0290_50) - 1));
    der(s_0913) = (cell * Vmax_11 * (s_0201 - s_0913 * s_1531 / Keq_11) / Km0201_11 / (1 + s_0201 / Km0201_11 + (1 + s_0913 / Km0913_11) * (1 + s_1531 / Km1531_11) - 1)) + (cell * Vmax_336 * (s_0621 * s_0627 - s_0913 * s_1561 / Keq_336) / (Km0621_336 * Km0627_336) / ((1 + s_0621 / Km0621_336) * (1 + s_0627 / Km0627_336) + (1 + s_0913 / Km0913_336) * (1 + s_1561 / Km1561_336) - 1)) + (cell * Vmax_340 * (s_0493 - s_0913 * s_1009 / Keq_340) / Km0493_340 / (1 + s_0493 / Km0493_340 + (1 + s_0913 / Km0913_340) * (1 + s_1009 / Km1009_340) - 1)) - (cell * Vmax_2 * (s_0913 * s_1531 - s_0543 * s_0116 / Keq_2) / (Km0913_2 * Km1531_2) / ((1 + s_0913 / Km0913_2) * (1 + s_1531 / Km1531_2) + (1 + s_0543 / Km0543_2) * (1 + s_0116 / Km0116_2) - 1)) - (cell * Vmax_178 * (s_0913 * s_1333 * s_1430 - s_0307 * s_1334 / Keq_178) / (Km0913_178 * Km1333_178 * Km1430_178) / ((1 + s_0913 / Km0913_178) * (1 + s_1333 / Km1333_178) * (1 + s_1430 / Km1430_178) + (1 + s_0307 / Km0307_178) * (1 + s_1334 / Km1334_178) - 1)) - (cell * Vmax_337 * (s_0913 * s_1561 - s_0446 * s_0721 / Keq_337) / (Km0913_337 * Km1561_337) / ((1 + s_0913 / Km0913_337) * (1 + s_1561 / Km1561_337) + (1 + s_0446 / Km0446_337) * (1 + s_0721 / Km0721_337) - 1)) - (cell * Vmax_338 * (s_0627 * s_0913 - s_0621 * s_0721 / Keq_338) / (Km0627_338 * Km0913_338) / ((1 + s_0627 / Km0627_338) * (1 + s_0913 / Km0913_338) + (1 + s_0621 / Km0621_338) * (1 + s_0721 / Km0721_338) - 1)) - (cell * Vmax_339 * (s_0913 - s_0772 / Keq_339) / Km0913_339 / (1 + s_0913 / Km0913_339 + 1 + s_0772 / Km0772_339 - 1));
    der(s_0920) = (cell * Vmax_182 * (s_0772 * s_1336 - s_0920 * s_1335 / Keq_182) / (Km0772_182 * Km1336_182) / ((1 + s_0772 / Km0772_182) * (1 + s_1336 / Km1336_182) + (1 + s_0920 / Km0920_182) * (1 + s_1335 / Km1335_182) - 1)) - (cell * Vmax_180 * (s_0920 * s_1411 - s_0121 * s_0397 / Keq_180) / (Km0920_180 * Km1411_180) / ((1 + s_0920 / Km0920_180) * (1 + s_1411 / Km1411_180) + (1 + s_0121 / Km0121_180) * (1 + s_0397 / Km0397_180) - 1)) - (cell * Vmax_181 * (s_0920 * s_0533 - s_0119 * s_0397 / Keq_181) / (Km0920_181 * Km0533_181) / ((1 + s_0920 / Km0920_181) * (1 + s_0533 / Km0533_181) + (1 + s_0119 / Km0119_181) * (1 + s_0397 / Km0397_181) - 1));
    der(s_0929) = (cell * Vmax_183 * (s_1040 * s_0555 - s_0395 * s_0929 / Keq_183) / (Km1040_183 * Km0555_183) / ((1 + s_1040 / Km1040_183) * (1 + s_0555 / Km0555_183) + (1 + s_0395 / Km0395_183) * (1 + s_0929 / Km0929_183) - 1)) + (cell * Vmax_184 * (s_1170 * s_0337 - s_0929 * s_0336 / Keq_184) / (Km1170_184 * Km0337_184) / ((1 + s_1170 / Km1170_184) * (1 + s_0337 / Km0337_184) + (1 + s_0929 / Km0929_184) * (1 + s_0336 / Km0336_184) - 1)) + (cell * Vmax_333 * (s_1179 - s_0381 * s_0929 / Keq_333) / Km1179_333 / (1 + s_1179 / Km1179_333 + (1 + s_0381 / Km0381_333) * (1 + s_0929 / Km0929_333) - 1)) - (cell * Vmax_288 * (s_0467 * s_0929 * s_0361 - s_0421 * s_1318 * s_1430 / Keq_288) / (Km0467_288 * Km0929_288 * Km0361_288) / ((1 + s_0467 / Km0467_288) * (1 + s_0929 / Km0929_288) * (1 + s_0361 / Km0361_288) + (1 + s_0421 / Km0421_288) * (1 + s_1318 / Km1318_288) * (1 + s_1430 / Km1430_288) - 1)) - (0.6126 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0936) = (cell * Vmax_140 * (s_0765 - s_0367 * s_0936 / Keq_140) / Km0765_140 / (1 + s_0765 / Km0765_140 + (1 + s_0367 / Km0367_140) * (1 + s_0936 / Km0936_140) - 1)) - (cell * Vmax_185 * (s_0936 * s_1333 - s_0937 * s_1334 / Keq_185) / (Km0936_185 * Km1333_185) / ((1 + s_0936 / Km0936_185) * (1 + s_1333 / Km1333_185) + (1 + s_0937 / Km0937_185) * (1 + s_1334 / Km1334_185) - 1));
    der(s_0937) = (cell * Vmax_185 * (s_0936 * s_1333 - s_0937 * s_1334 / Keq_185) / (Km0936_185 * Km1333_185) / ((1 + s_0936 / Km0936_185) * (1 + s_1333 / Km1333_185) + (1 + s_0937 / Km0937_185) * (1 + s_1334 / Km1334_185) - 1)) - (cell * Vmax_186 * (s_0937 * s_1732 - s_0941 * s_1731 / Keq_186) / (Km0937_186 * Km1732_186) / ((1 + s_0937 / Km0937_186) * (1 + s_1732 / Km1732_186) + (1 + s_0941 / Km0941_186) * (1 + s_1731 / Km1731_186) - 1)) - (cell * Vmax_187 * (s_0937 * s_1240 - s_0941 * s_1239 / Keq_187) / (Km0937_187 * Km1240_187) / ((1 + s_0937 / Km0937_187) * (1 + s_1240 / Km1240_187) + (1 + s_0941 / Km0941_187) * (1 + s_1239 / Km1239_187) - 1));
    der(s_0941) = (cell * Vmax_186 * (s_0937 * s_1732 - s_0941 * s_1731 / Keq_186) / (Km0937_186 * Km1732_186) / ((1 + s_0937 / Km0937_186) * (1 + s_1732 / Km1732_186) + (1 + s_0941 / Km0941_186) * (1 + s_1731 / Km1731_186) - 1)) + (cell * Vmax_187 * (s_0937 * s_1240 - s_0941 * s_1239 / Keq_187) / (Km0937_187 * Km1240_187) / ((1 + s_0937 / Km0937_187) * (1 + s_1240 / Km1240_187) + (1 + s_0941 / Km0941_187) * (1 + s_1239 / Km1239_187) - 1)) - (2.0 * cell * Vmax_188 * (pow(s_0941, 2) - s_0214 * s_0543 / Keq_188) / pow(Km0941_188, 2) / (pow(1 + s_0941 / Km0941_188, 2) + (1 + s_0214 / Km0214_188) * (1 + s_0543 / Km0543_188) - 1));
    der(s_0942) = (cell * Vmax_189 * (s_0467 * s_1101 * s_1799 - s_0454 * s_1095 * s_0942 * s_0783 / Keq_189) / (Km0467_189 * Km1101_189 * Km1799_189) / ((1 + s_0467 / Km0467_189) * (1 + s_1101 / Km1101_189) * (1 + s_1799 / Km1799_189) + (1 + s_0454 / Km0454_189) * (1 + s_1095 / Km1095_189) * (1 + s_0942 / Km0942_189) * (1 + s_0783 / Km0783_189) - 1)) - (cell * Vmax_192 * (s_0467 * s_0942 - s_0421 * s_0896 / Keq_192) / (Km0467_192 * Km0942_192) / ((1 + s_0467 / Km0467_192) * (1 + s_0942 / Km0942_192) + (1 + s_0421 / Km0421_192) * (1 + s_0896 / Km0896_192) - 1));
    der(s_0945) = (cell * Vmax_249 * (s_0467 * s_0896 - s_0421 * s_0945 / Keq_249) / (Km0467_249 * Km0896_249) / ((1 + s_0467 / Km0467_249) * (1 + s_0896 / Km0896_249) + (1 + s_0421 / Km0421_249) * (1 + s_0945 / Km0945_249) - 1)) - (cell * Vmax_96 * (s_1072 * s_0945 * s_1006 - s_1327 * s_0896 * s_1430 / Keq_96) / (Km1072_96 * Km0945_96 * Km1006_96) / ((1 + s_1072 / Km1072_96) * (1 + s_0945 / Km0945_96) * (1 + s_1006 / Km1006_96) + (1 + s_1327 / Km1327_96) * (1 + s_0896 / Km0896_96) * (1 + s_1430 / Km1430_96) - 1)) - (cell * Vmax_114 * (s_0481 * s_0945 - s_0480 * s_0783 / Keq_114) / (Km0481_114 * Km0945_114) / ((1 + s_0481 / Km0481_114) * (1 + s_0945 / Km0945_114) + (1 + s_0480 / Km0480_114) * (1 + s_0783 / Km0783_114) - 1)) - (cell * Vmax_115 * (s_0479 * s_0945 - s_0481 * s_0783 / Keq_115) / (Km0479_115 * Km0945_115) / ((1 + s_0479 / Km0479_115) * (1 + s_0945 / Km0945_115) + (1 + s_0481 / Km0481_115) * (1 + s_0783 / Km0783_115) - 1)) - (cell * Vmax_125 * (s_0945 - s_0585 * s_0783 / Keq_125) / Km0945_125 / (1 + s_0945 / Km0945_125 + (1 + s_0585 / Km0585_125) * (1 + s_0783 / Km0783_125) - 1)) - (cell * Vmax_190 * (s_0945 - s_0191 * s_0867 / Keq_190) / Km0945_190 / (1 + s_0945 / Km0945_190 + (1 + s_0191 / Km0191_190) * (1 + s_0867 / Km0867_190) - 1)) - (cell * Vmax_191 * (s_0945 - s_0160 * s_0867 * s_0783 / Keq_191) / Km0945_191 / (1 + s_0945 / Km0945_191 + (1 + s_0160 / Km0160_191) * (1 + s_0867 / Km0867_191) * (1 + s_0783 / Km0783_191) - 1)) - (cell * Vmax_310 * (pow(s_0861, 2) * s_0945 - s_0760 * pow(s_0862, 2) / Keq_310) / (pow(Km0861_310, 2) * Km0945_310) / (pow(1 + s_0861 / Km0861_310, 2) * (1 + s_0945 / Km0945_310) + (1 + s_0760 / Km0760_310) * pow(1 + s_0862 / Km0862_310, 2) - 1)) - (cell * Vmax_324 * (s_0467 * s_0945 * s_1609 - s_0412 * s_0896 * s_1430 * s_0783 / Keq_324) / (Km0467_324 * Km0945_324 * Km1609_324) / ((1 + s_0467 / Km0467_324) * (1 + s_0945 / Km0945_324) * (1 + s_1609 / Km1609_324) + (1 + s_0412 / Km0412_324) * (1 + s_0896 / Km0896_324) * (1 + s_1430 / Km1430_324) * (1 + s_0783 / Km0783_324) - 1)) - (0.2151 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_0971) = (cell * Vmax_157 * (s_1412 - s_0555 * s_0971 / Keq_157) / Km1412_157 / (1 + s_1412 / Km1412_157 + (1 + s_0555 / Km0555_157) * (1 + s_0971 / Km0971_157) - 1)) - (cell * Vmax_83 * (s_0397 * s_0467 * s_0971 - s_0454 * s_1411 * s_0783 / Keq_83) / (Km0397_83 * Km0467_83 * Km0971_83) / ((1 + s_0397 / Km0397_83) * (1 + s_0467 / Km0467_83) * (1 + s_0971 / Km0971_83) + (1 + s_0454 / Km0454_83) * (1 + s_1411 / Km1411_83) * (1 + s_0783 / Km0783_83) - 1));
    der(s_0976) = (cell * Vmax_158 * (s_0979 - s_0555 * s_0976 / Keq_158) / Km0979_158 / (1 + s_0979 / Km0979_158 + (1 + s_0555 / Km0555_158) * (1 + s_0976 / Km0976_158) - 1)) - (cell * Vmax_84 * (s_0397 * s_0467 * s_0976 - s_0454 * s_0533 * s_0783 / Keq_84) / (Km0397_84 * Km0467_84 * Km0976_84) / ((1 + s_0397 / Km0397_84) * (1 + s_0467 / Km0467_84) * (1 + s_0976 / Km0976_84) + (1 + s_0454 / Km0454_84) * (1 + s_0533 / Km0533_84) * (1 + s_0783 / Km0783_84) - 1));
    der(s_0979) = (cell * Vmax_19 * (s_1674 - s_0979 / Keq_19) / Km1674_19 / (1 + s_1674 / Km1674_19 + 1 + s_0979 / Km0979_19 - 1)) - (cell * Vmax_158 * (s_0979 - s_0555 * s_0976 / Keq_158) / Km0979_158 / (1 + s_0979 / Km0979_158 + (1 + s_0555 / Km0555_158) * (1 + s_0976 / Km0976_158) - 1));
    der(s_0984) = (cell * Vmax_89 * (s_0860 * s_1672 - s_0859 * s_0984 / Keq_89) / (Km0860_89 * Km1672_89) / ((1 + s_0860 / Km0860_89) * (1 + s_1672 / Km1672_89) + (1 + s_0859 / Km0859_89) * (1 + s_0984 / Km0984_89) - 1)) - (cell * Vmax_73 * (s_0395 * s_0984 - s_0303 * s_0555 / Keq_73) / (Km0395_73 * Km0984_73) / ((1 + s_0395 / Km0395_73) * (1 + s_0984 / Km0984_73) + (1 + s_0303 / Km0303_73) * (1 + s_0555 / Km0555_73) - 1));
    der(s_0991) = (cell * Vmax_221 * (s_1072 * s_1372 - s_0991 * s_1005 / Keq_221) / (Km1072_221 * Km1372_221) / ((1 + s_1072 / Km1072_221) * (1 + s_1372 / Km1372_221) + (1 + s_0991 / Km0991_221) * (1 + s_1005 / Km1005_221) - 1)) - (cell * Vmax_228 * (s_0991 * s_1399 - s_1138 * s_1372 / Keq_228) / (Km0991_228 * Km1399_228) / ((1 + s_0991 / Km0991_228) * (1 + s_1399 / Km1399_228) + (1 + s_1138 / Km1138_228) * (1 + s_1372 / Km1372_228) - 1));
    der(s_0994) = (cell * Vmax_325 * (pow(s_1336, 3) * s_1612 - s_0994 * pow(s_1335, 3) / Keq_325) / (pow(Km1336_325, 3) * Km1612_325) / (pow(1 + s_1336 / Km1336_325, 3) * (1 + s_1612 / Km1612_325) + (1 + s_0994 / Km0994_325) * pow(1 + s_1335 / Km1335_325, 3) - 1)) - (cell * Vmax_127 * (s_1358 * s_0994 - s_0384 * s_1083 / Keq_127) / (Km1358_127 * Km0994_127) / ((1 + s_1358 / Km1358_127) * (1 + s_0994 / Km0994_127) + (1 + s_0384 / Km0384_127) * (1 + s_1083 / Km1083_127) - 1));
    der(s_0998) = (cell * Vmax_203 * (pow(s_1493, 4) - s_0998 * pow(s_0451, 4) / Keq_203) / pow(Km1493_203, 4) / (pow(1 + s_1493 / Km1493_203, 4) + (1 + s_0998 / Km0998_203) * pow(1 + s_0451 / Km0451_203, 4) - 1)) - (cell * Vmax_361 * (s_0998 - s_1791 / Keq_361) / Km0998_361 / (1 + s_0998 / Km0998_361 + 1 + s_1791 / Km1791_361 - 1));
    der(s_1005) = (cell * Vmax_221 * (s_1072 * s_1372 - s_0991 * s_1005 / Keq_221) / (Km1072_221 * Km1372_221) / ((1 + s_1072 / Km1072_221) * (1 + s_1372 / Km1372_221) + (1 + s_0991 / Km0991_221) * (1 + s_1005 / Km1005_221) - 1)) - (cell * Vmax_304 * (s_0772 * s_1005 - s_1430 * s_1537 / Keq_304) / (Km0772_304 * Km1005_304) / ((1 + s_0772 / Km0772_304) * (1 + s_1005 / Km1005_304) + (1 + s_1430 / Km1430_304) * (1 + s_1537 / Km1537_304) - 1));
    der(s_1006) = (cell * Vmax_206 * (s_0352 - s_1006 / Keq_206) / Km0352_206 / (1 + s_0352 / Km0352_206 + 1 + s_1006 / Km1006_206 - 1)) - (cell * Vmax_96 * (s_1072 * s_0945 * s_1006 - s_1327 * s_0896 * s_1430 / Keq_96) / (Km1072_96 * Km0945_96 * Km1006_96) / ((1 + s_1072 / Km1072_96) * (1 + s_0945 / Km0945_96) * (1 + s_1006 / Km1006_96) + (1 + s_1327 / Km1327_96) * (1 + s_0896 / Km0896_96) * (1 + s_1430 / Km1430_96) - 1)) - (cell * Vmax_207 * (s_1006 * s_1333 - s_1334 * s_1799 / Keq_207) / (Km1006_207 * Km1333_207) / ((1 + s_1006 / Km1006_207) * (1 + s_1333 / Km1333_207) + (1 + s_1334 / Km1334_207) * (1 + s_1799 / Km1799_207) - 1));
    der(s_1009) = (cell * Vmax_340 * (s_0493 - s_0913 * s_1009 / Keq_340) / Km0493_340 / (1 + s_0493 / Km0493_340 + (1 + s_0913 / Km0913_340) * (1 + s_1009 / Km1009_340) - 1)) - (cell * Vmax_341 * (s_1009 * s_0451 * s_1531 - s_1185 / Keq_341) / (Km1009_341 * Km0451_341 * Km1531_341) / ((1 + s_1009 / Km1009_341) * (1 + s_0451 / Km0451_341) * (1 + s_1531 / Km1531_341) + 1 + s_1185 / Km1185_341 - 1));
    der(s_1017) = (cell * Vmax_209 * (s_0377 * s_1018 * s_1019 - s_1017 * s_1020 / Keq_209) / (Km0377_209 * Km1018_209 * Km1019_209) / ((1 + s_0377 / Km0377_209) * (1 + s_1018 / Km1018_209) * (1 + s_1019 / Km1019_209) + (1 + s_1017 / Km1017_209) * (1 + s_1020 / Km1020_209) - 1)) + (2.0 * cell * Vmax_210 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1019 - s_0859 * pow(s_1017, 2) * s_1020 / Keq_210) / (Km0860_210 * pow(Km0838_210, 2) * pow(Km1018_210, 2) * Km1019_210) / ((1 + s_0860 / Km0860_210) * pow(1 + s_0838 / Km0838_210, 2) * pow(1 + s_1018 / Km1018_210, 2) * (1 + s_1019 / Km1019_210) + (1 + s_0859 / Km0859_210) * pow(1 + s_1017 / Km1017_210, 2) * (1 + s_1020 / Km1020_210) - 1)) + (2.0 * cell * Vmax_211 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1020 - s_0859 * pow(s_1017, 2) * s_1022 / Keq_211) / (Km0860_211 * pow(Km0838_211, 2) * pow(Km1018_211, 2) * Km1020_211) / ((1 + s_0860 / Km0860_211) * pow(1 + s_0838 / Km0838_211, 2) * pow(1 + s_1018 / Km1018_211, 2) * (1 + s_1020 / Km1020_211) + (1 + s_0859 / Km0859_211) * pow(1 + s_1017 / Km1017_211, 2) * (1 + s_1022 / Km1022_211) - 1)) + (cell * Vmax_235 * (s_1018 * s_1258 * s_1334 - s_0454 * s_1017 * s_1260 * s_1333 / Keq_235) / (Km1018_235 * Km1258_235 * Km1334_235) / ((1 + s_1018 / Km1018_235) * (1 + s_1258 / Km1258_235) * (1 + s_1334 / Km1334_235) + (1 + s_0454 / Km0454_235) * (1 + s_1017 / Km1017_235) * (1 + s_1260 / Km1260_235) * (1 + s_1333 / Km1333_235) - 1)) + (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) - (cell * Vmax_215 * (s_1083 * s_1017 - s_1041 * s_1018 / Keq_215) / (Km1083_215 * Km1017_215) / ((1 + s_1083 / Km1083_215) * (1 + s_1017 / Km1017_215) + (1 + s_1041 / Km1041_215) * (1 + s_1018 / Km1018_215) - 1));
    der(s_1018) = (cell * Vmax_215 * (s_1083 * s_1017 - s_1041 * s_1018 / Keq_215) / (Km1083_215 * Km1017_215) / ((1 + s_1083 / Km1083_215) * (1 + s_1017 / Km1017_215) + (1 + s_1041 / Km1041_215) * (1 + s_1018 / Km1018_215) - 1)) - (cell * Vmax_209 * (s_0377 * s_1018 * s_1019 - s_1017 * s_1020 / Keq_209) / (Km0377_209 * Km1018_209 * Km1019_209) / ((1 + s_0377 / Km0377_209) * (1 + s_1018 / Km1018_209) * (1 + s_1019 / Km1019_209) + (1 + s_1017 / Km1017_209) * (1 + s_1020 / Km1020_209) - 1)) - (2.0 * cell * Vmax_210 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1019 - s_0859 * pow(s_1017, 2) * s_1020 / Keq_210) / (Km0860_210 * pow(Km0838_210, 2) * pow(Km1018_210, 2) * Km1019_210) / ((1 + s_0860 / Km0860_210) * pow(1 + s_0838 / Km0838_210, 2) * pow(1 + s_1018 / Km1018_210, 2) * (1 + s_1019 / Km1019_210) + (1 + s_0859 / Km0859_210) * pow(1 + s_1017 / Km1017_210, 2) * (1 + s_1020 / Km1020_210) - 1)) - (2.0 * cell * Vmax_211 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1020 - s_0859 * pow(s_1017, 2) * s_1022 / Keq_211) / (Km0860_211 * pow(Km0838_211, 2) * pow(Km1018_211, 2) * Km1020_211) / ((1 + s_0860 / Km0860_211) * pow(1 + s_0838 / Km0838_211, 2) * pow(1 + s_1018 / Km1018_211, 2) * (1 + s_1020 / Km1020_211) + (1 + s_0859 / Km0859_211) * pow(1 + s_1017 / Km1017_211, 2) * (1 + s_1022 / Km1022_211) - 1)) - (cell * Vmax_235 * (s_1018 * s_1258 * s_1334 - s_0454 * s_1017 * s_1260 * s_1333 / Keq_235) / (Km1018_235 * Km1258_235 * Km1334_235) / ((1 + s_1018 / Km1018_235) * (1 + s_1258 / Km1258_235) * (1 + s_1334 / Km1334_235) + (1 + s_0454 / Km0454_235) * (1 + s_1017 / Km1017_235) * (1 + s_1260 / Km1260_235) * (1 + s_1333 / Km1333_235) - 1)) - (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1));
    der(s_1019) = (cell * Vmax_212 * (s_1020 - s_0378 * s_1019 / Keq_212) / Km1020_212 / (1 + s_1020 / Km1020_212 + (1 + s_0378 / Km0378_212) * (1 + s_1019 / Km1019_212) - 1)) + (cell * Vmax_214 * (s_1021 - s_0380 * s_1019 / Keq_214) / Km1021_214 / (1 + s_1021 / Km1021_214 + (1 + s_0380 / Km0380_214) * (1 + s_1019 / Km1019_214) - 1)) - (cell * Vmax_209 * (s_0377 * s_1018 * s_1019 - s_1017 * s_1020 / Keq_209) / (Km0377_209 * Km1018_209 * Km1019_209) / ((1 + s_0377 / Km0377_209) * (1 + s_1018 / Km1018_209) * (1 + s_1019 / Km1019_209) + (1 + s_1017 / Km1017_209) * (1 + s_1020 / Km1020_209) - 1)) - (cell * Vmax_210 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1019 - s_0859 * pow(s_1017, 2) * s_1020 / Keq_210) / (Km0860_210 * pow(Km0838_210, 2) * pow(Km1018_210, 2) * Km1019_210) / ((1 + s_0860 / Km0860_210) * pow(1 + s_0838 / Km0838_210, 2) * pow(1 + s_1018 / Km1018_210, 2) * (1 + s_1019 / Km1019_210) + (1 + s_0859 / Km0859_210) * pow(1 + s_1017 / Km1017_210, 2) * (1 + s_1020 / Km1020_210) - 1));
    der(s_1020) = (cell * Vmax_209 * (s_0377 * s_1018 * s_1019 - s_1017 * s_1020 / Keq_209) / (Km0377_209 * Km1018_209 * Km1019_209) / ((1 + s_0377 / Km0377_209) * (1 + s_1018 / Km1018_209) * (1 + s_1019 / Km1019_209) + (1 + s_1017 / Km1017_209) * (1 + s_1020 / Km1020_209) - 1)) + (cell * Vmax_210 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1019 - s_0859 * pow(s_1017, 2) * s_1020 / Keq_210) / (Km0860_210 * pow(Km0838_210, 2) * pow(Km1018_210, 2) * Km1019_210) / ((1 + s_0860 / Km0860_210) * pow(1 + s_0838 / Km0838_210, 2) * pow(1 + s_1018 / Km1018_210, 2) * (1 + s_1019 / Km1019_210) + (1 + s_0859 / Km0859_210) * pow(1 + s_1017 / Km1017_210, 2) * (1 + s_1020 / Km1020_210) - 1)) - (cell * Vmax_211 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1020 - s_0859 * pow(s_1017, 2) * s_1022 / Keq_211) / (Km0860_211 * pow(Km0838_211, 2) * pow(Km1018_211, 2) * Km1020_211) / ((1 + s_0860 / Km0860_211) * pow(1 + s_0838 / Km0838_211, 2) * pow(1 + s_1018 / Km1018_211, 2) * (1 + s_1020 / Km1020_211) + (1 + s_0859 / Km0859_211) * pow(1 + s_1017 / Km1017_211, 2) * (1 + s_1022 / Km1022_211) - 1)) - (cell * Vmax_212 * (s_1020 - s_0378 * s_1019 / Keq_212) / Km1020_212 / (1 + s_1020 / Km1020_212 + (1 + s_0378 / Km0378_212) * (1 + s_1019 / Km1019_212) - 1));
    der(s_1021) = (cell * Vmax_213 * (s_0860 * s_1022 - s_0859 * s_1021 / Keq_213) / (Km0860_213 * Km1022_213) / ((1 + s_0860 / Km0860_213) * (1 + s_1022 / Km1022_213) + (1 + s_0859 / Km0859_213) * (1 + s_1021 / Km1021_213) - 1)) - (cell * Vmax_214 * (s_1021 - s_0380 * s_1019 / Keq_214) / Km1021_214 / (1 + s_1021 / Km1021_214 + (1 + s_0380 / Km0380_214) * (1 + s_1019 / Km1019_214) - 1));
    der(s_1022) = (cell * Vmax_211 * (s_0860 * pow(s_0838, 2) * pow(s_1018, 2) * s_1020 - s_0859 * pow(s_1017, 2) * s_1022 / Keq_211) / (Km0860_211 * pow(Km0838_211, 2) * pow(Km1018_211, 2) * Km1020_211) / ((1 + s_0860 / Km0860_211) * pow(1 + s_0838 / Km0838_211, 2) * pow(1 + s_1018 / Km1018_211, 2) * (1 + s_1020 / Km1020_211) + (1 + s_0859 / Km0859_211) * pow(1 + s_1017 / Km1017_211, 2) * (1 + s_1022 / Km1022_211) - 1)) - (cell * Vmax_213 * (s_0860 * s_1022 - s_0859 * s_1021 / Keq_213) / (Km0860_213 * Km1022_213) / ((1 + s_0860 / Km0860_213) * (1 + s_1022 / Km1022_213) + (1 + s_0859 / Km0859_213) * (1 + s_1021 / Km1021_213) - 1));
    der(s_1027) = (cell * Vmax_81 * (s_0530 - s_1027 / Keq_81) / Km0530_81 / (1 + s_0530 / Km0530_81 + 1 + s_1027 / Km1027_81 - 1)) - (cell * Vmax_216 * (s_1027 * s_1335 - s_0233 * s_0543 * s_1336 / Keq_216) / (Km1027_216 * Km1335_216) / ((1 + s_1027 / Km1027_216) * (1 + s_1335 / Km1335_216) + (1 + s_0233 / Km0233_216) * (1 + s_0543 / Km0543_216) * (1 + s_1336 / Km1336_216) - 1));
    der(s_1028) = (cell * Vmax_7 * (s_0123 * s_1334 - s_1028 * s_1333 / Keq_7) / (Km0123_7 * Km1334_7) / ((1 + s_0123 / Km0123_7) * (1 + s_1334 / Km1334_7) + (1 + s_1028 / Km1028_7) * (1 + s_1333 / Km1333_7) - 1)) - (cell * Vmax_147 * (s_0779 * s_1028 - s_0903 * s_0783 / Keq_147) / (Km0779_147 * Km1028_147) / ((1 + s_0779 / Km0779_147) * (1 + s_1028 / Km1028_147) + (1 + s_0903 / Km0903_147) * (1 + s_0783 / Km0783_147) - 1)) - (cell * Vmax_164 * (s_0903 * s_1028 - s_0826 * s_0783 / Keq_164) / (Km0903_164 * Km1028_164) / ((1 + s_0903 / Km0903_164) * (1 + s_1028 / Km1028_164) + (1 + s_0826 / Km0826_164) * (1 + s_0783 / Km0783_164) - 1)) - (5.0 * cell * Vmax_254 * (s_0826 * pow(s_1028, 5) - s_0435 * pow(s_0783, 5) / Keq_254) / (Km0826_254 * pow(Km1028_254, 5)) / ((1 + s_0826 / Km0826_254) * pow(1 + s_1028 / Km1028_254, 5) + (1 + s_0435 / Km0435_254) * pow(1 + s_0783 / Km0783_254, 5) - 1)) - (8.0 * cell * Vmax_357 * (s_0826 * pow(s_1028, 8) - pow(s_0783, 8) * s_1765 / Keq_357) / (Km0826_357 * pow(Km1028_357, 8)) / ((1 + s_0826 / Km0826_357) * pow(1 + s_1028 / Km1028_357, 8) + pow(1 + s_0783 / Km0783_357, 8) * (1 + s_1765 / Km1765_357) - 1));
    der(s_1033) = (cell * Vmax_25 * (s_0542 * s_1038 - s_0539 * s_1033 / Keq_25) / (Km0542_25 * Km1038_25) / ((1 + s_0542 / Km0542_25) * (1 + s_1038 / Km1038_25) + (1 + s_0539 / Km0539_25) * (1 + s_1033 / Km1033_25) - 1)) - (0.01946 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1038) = (cell * Vmax_24 * (s_0542 * s_0147 - s_0539 * s_1038 / Keq_24) / (Km0542_24 * Km0147_24) / ((1 + s_0542 / Km0542_24) * (1 + s_0147 / Km0147_24) + (1 + s_0539 / Km0539_24) * (1 + s_1038 / Km1038_24) - 1)) - (cell * Vmax_25 * (s_0542 * s_1038 - s_0539 * s_1033 / Keq_25) / (Km0542_25 * Km1038_25) / ((1 + s_0542 / Km0542_25) * (1 + s_1038 / Km1038_25) + (1 + s_0539 / Km0539_25) * (1 + s_1033 / Km1033_25) - 1));
    der(s_1040) = (cell * Vmax_224 * (s_1333 * s_1179 - s_1040 * s_1334 / Keq_224) / (Km1333_224 * Km1179_224) / ((1 + s_1333 / Km1333_224) * (1 + s_1179 / Km1179_224) + (1 + s_1040 / Km1040_224) * (1 + s_1334 / Km1334_224) - 1)) - (cell * Vmax_183 * (s_1040 * s_0555 - s_0395 * s_0929 / Keq_183) / (Km1040_183 * Km0555_183) / ((1 + s_1040 / Km1040_183) * (1 + s_0555 / Km0555_183) + (1 + s_0395 / Km0395_183) * (1 + s_0929 / Km0929_183) - 1));
    der(s_1041) = (cell * Vmax_215 * (s_1083 * s_1017 - s_1041 * s_1018 / Keq_215) / (Km1083_215 * Km1017_215) / ((1 + s_1083 / Km1083_215) * (1 + s_1017 / Km1017_215) + (1 + s_1041 / Km1041_215) * (1 + s_1018 / Km1018_215) - 1)) + (cell * Vmax_220 * (s_1095 * s_1531 - s_0233 * s_1041 / Keq_220) / (Km1095_220 * Km1531_220) / ((1 + s_1095 / Km1095_220) * (1 + s_1531 / Km1531_220) + (1 + s_0233 / Km0233_220) * (1 + s_1041 / Km1041_220) - 1)) - (cell * Vmax_65 * (s_1041 * s_1491 - s_0376 * s_0397 * s_0543 / Keq_65) / (Km1041_65 * Km1491_65) / ((1 + s_1041 / Km1041_65) * (1 + s_1491 / Km1491_65) + (1 + s_0376 / Km0376_65) * (1 + s_0397 / Km0397_65) * (1 + s_0543 / Km0543_65) - 1)) - (cell * Vmax_99 * (s_1041 - s_0600 / Keq_99) / Km1041_99 / (1 + s_1041 / Km1041_99 + 1 + s_0600 / Km0600_99 - 1)) - (cell * Vmax_351 * (s_1041 * s_0467 * s_1750 - s_0421 * s_1430 * s_1751 / Keq_351) / (Km1041_351 * Km0467_351 * Km1750_351) / ((1 + s_1041 / Km1041_351) * (1 + s_0467 / Km0467_351) * (1 + s_1750 / Km1750_351) + (1 + s_0421 / Km0421_351) * (1 + s_1430 / Km1430_351) * (1 + s_1751 / Km1751_351) - 1)) - (0.5137 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1061) = (cell * Vmax_103 * (s_1274 - s_1061 * s_0875 / Keq_103) / Km1274_103 / (1 + s_1274 / Km1274_103 + (1 + s_1061 / Km1061_103) * (1 + s_0875 / Km0875_103) - 1)) - (0.2958 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1068) = (cell * Vmax_105 * (s_1072 * s_0467 * s_0451 - s_0454 * s_1068 * s_0783 / Keq_105) / (Km1072_105 * Km0467_105 * Km0451_105) / ((1 + s_1072 / Km1072_105) * (1 + s_0467 / Km0467_105) * (1 + s_0451 / Km0451_105) + (1 + s_0454 / Km0454_105) * (1 + s_1068 / Km1068_105) * (1 + s_0783 / Km0783_105) - 1)) - (0.2411 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1072) = (cell * Vmax_109 * (s_1095 * s_1399 - s_0233 * s_1072 / Keq_109) / (Km1095_109 * Km1399_109) / ((1 + s_1095 / Km1095_109) * (1 + s_1399 / Km1399_109) + (1 + s_0233 / Km0233_109) * (1 + s_1072 / Km1072_109) - 1)) - (cell * Vmax_96 * (s_1072 * s_0945 * s_1006 - s_1327 * s_0896 * s_1430 / Keq_96) / (Km1072_96 * Km0945_96 * Km1006_96) / ((1 + s_1072 / Km1072_96) * (1 + s_0945 / Km0945_96) * (1 + s_1006 / Km1006_96) + (1 + s_1327 / Km1327_96) * (1 + s_0896 / Km0896_96) * (1 + s_1430 / Km1430_96) - 1)) - (cell * Vmax_104 * (s_1072 * s_0467 * s_1081 - s_0454 * s_1274 * s_0783 / Keq_104) / (Km1072_104 * Km0467_104 * Km1081_104) / ((1 + s_1072 / Km1072_104) * (1 + s_0467 / Km0467_104) * (1 + s_1081 / Km1081_104) + (1 + s_0454 / Km0454_104) * (1 + s_1274 / Km1274_104) * (1 + s_0783 / Km0783_104) - 1)) - (cell * Vmax_105 * (s_1072 * s_0467 * s_0451 - s_0454 * s_1068 * s_0783 / Keq_105) / (Km1072_105 * Km0467_105 * Km0451_105) / ((1 + s_1072 / Km1072_105) * (1 + s_0467 / Km0467_105) * (1 + s_0451 / Km0451_105) + (1 + s_0454 / Km0454_105) * (1 + s_1068 / Km1068_105) * (1 + s_0783 / Km0783_105) - 1)) - (cell * Vmax_106 * (s_1072 - s_0470 * s_0543 / Keq_106) / Km1072_106 / (1 + s_1072 / Km1072_106 + (1 + s_0470 / Km0470_106) * (1 + s_0543 / Km0543_106) - 1)) - (cell * Vmax_107 * (s_1072 * s_0502 - s_1312 * s_1430 / Keq_107) / (Km1072_107 * Km0502_107) / ((1 + s_1072 / Km1072_107) * (1 + s_0502 / Km0502_107) + (1 + s_1312 / Km1312_107) * (1 + s_1430 / Km1430_107) - 1)) - (cell * Vmax_108 * (s_1072 * s_0467 - s_0332 * s_0421 / Keq_108) / (Km1072_108 * Km0467_108) / ((1 + s_1072 / Km1072_108) * (1 + s_0467 / Km0467_108) + (1 + s_0332 / Km0332_108) * (1 + s_0421 / Km0421_108) - 1)) - (cell * Vmax_221 * (s_1072 * s_1372 - s_0991 * s_1005 / Keq_221) / (Km1072_221 * Km1372_221) / ((1 + s_1072 / Km1072_221) * (1 + s_1372 / Km1372_221) + (1 + s_0991 / Km0991_221) * (1 + s_1005 / Km1005_221) - 1)) - (cell * Vmax_285 * (s_0344 * s_1072 * s_0467 - s_0040 * s_0421 * s_1430 / Keq_285) / (Km0344_285 * Km1072_285 * Km0467_285) / ((1 + s_0344 / Km0344_285) * (1 + s_1072 / Km1072_285) * (1 + s_0467 / Km0467_285) + (1 + s_0040 / Km0040_285) * (1 + s_0421 / Km0421_285) * (1 + s_1430 / Km1430_285) - 1)) - (0.2411 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1075) = (cell * Vmax_110 * (s_0332 * s_1336 - s_1075 * s_1335 * s_1430 / Keq_110) / (Km0332_110 * Km1336_110) / ((1 + s_0332 / Km0332_110) * (1 + s_1336 / Km1336_110) + (1 + s_1075 / Km1075_110) * (1 + s_1335 / Km1335_110) * (1 + s_1430 / Km1430_110) - 1)) - (cell * Vmax_137 * (s_1075 * s_1531 - s_0155 / Keq_137) / (Km1075_137 * Km1531_137) / ((1 + s_1075 / Km1075_137) * (1 + s_1531 / Km1531_137) + 1 + s_0155 / Km0155_137 - 1)) - (cell * Vmax_199 * (s_1075 * s_1336 - s_1113 * s_1335 / Keq_199) / (Km1075_199 * Km1336_199) / ((1 + s_1075 / Km1075_199) * (1 + s_1336 / Km1336_199) + (1 + s_1113 / Km1113_199) * (1 + s_1335 / Km1335_199) - 1));
    der(s_1081) = (cell * Vmax_256 * (s_0502 * s_1391 - s_1081 * s_1430 / Keq_256) / (Km0502_256 * Km1391_256) / ((1 + s_0502 / Km0502_256) * (1 + s_1391 / Km1391_256) + (1 + s_1081 / Km1081_256) * (1 + s_1430 / Km1430_256) - 1)) - (cell * Vmax_104 * (s_1072 * s_0467 * s_1081 - s_0454 * s_1274 * s_0783 / Keq_104) / (Km1072_104 * Km0467_104 * Km1081_104) / ((1 + s_1072 / Km1072_104) * (1 + s_0467 / Km0467_104) * (1 + s_1081 / Km1081_104) + (1 + s_0454 / Km0454_104) * (1 + s_1274 / Km1274_104) * (1 + s_0783 / Km0783_104) - 1));
    der(s_1082) = (cell * Vmax_253 * (s_1083 * s_1367 - s_1082 * s_1595 / Keq_253) / (Km1083_253 * Km1367_253) / ((1 + s_1083 / Km1083_253) * (1 + s_1367 / Km1367_253) + (1 + s_1082 / Km1082_253) * (1 + s_1595 / Km1595_253) - 1)) - (cell * Vmax_126 * (s_1082 - s_1112 * s_0451 * s_1531 / Keq_126) / Km1082_126 / (1 + s_1082 / Km1082_126 + (1 + s_1112 / Km1112_126) * (1 + s_0451 / Km0451_126) * (1 + s_1531 / Km1531_126) - 1));
    der(s_1083) = (cell * Vmax_127 * (s_1358 * s_0994 - s_0384 * s_1083 / Keq_127) / (Km1358_127 * Km0994_127) / ((1 + s_1358 / Km1358_127) * (1 + s_0994 / Km0994_127) + (1 + s_0384 / Km0384_127) * (1 + s_1083 / Km1083_127) - 1)) - (cell * Vmax_215 * (s_1083 * s_1017 - s_1041 * s_1018 / Keq_215) / (Km1083_215 * Km1017_215) / ((1 + s_1083 / Km1083_215) * (1 + s_1017 / Km1017_215) + (1 + s_1041 / Km1041_215) * (1 + s_1018 / Km1018_215) - 1)) - (cell * Vmax_253 * (s_1083 * s_1367 - s_1082 * s_1595 / Keq_253) / (Km1083_253 * Km1367_253) / ((1 + s_1083 / Km1083_253) * (1 + s_1367 / Km1367_253) + (1 + s_1082 / Km1082_253) * (1 + s_1595 / Km1595_253) - 1)) - (cell * Vmax_276 * (s_0599 * s_0575 * s_1083 - s_1277 * s_0539 * s_0783 / Keq_276) / (Km0599_276 * Km0575_276 * Km1083_276) / ((1 + s_0599 / Km0599_276) * (1 + s_0575 / Km0575_276) * (1 + s_1083 / Km1083_276) + (1 + s_1277 / Km1277_276) * (1 + s_0539 / Km0539_276) * (1 + s_0783 / Km0783_276) - 1)) - (0.09158 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1095) = (cell * Vmax_57 * (s_0526 * s_1101 - s_0316 * s_1095 / Keq_57) / (Km0526_57 * Km1101_57) / ((1 + s_0526 / Km0526_57) * (1 + s_1101 / Km1101_57) + (1 + s_0316 / Km0316_57) * (1 + s_1095 / Km1095_57) - 1)) + (cell * Vmax_101 * (s_0526 * s_1101 - s_0457 * s_1095 * s_1531 / Keq_101) / (Km0526_101 * Km1101_101) / ((1 + s_0526 / Km0526_101) * (1 + s_1101 / Km1101_101) + (1 + s_0457 / Km0457_101) * (1 + s_1095 / Km1095_101) * (1 + s_1531 / Km1531_101) - 1)) + (cell * Vmax_124 * (s_0467 * s_1101 * s_1792 - s_0421 * s_0575 * s_1095 * s_1430 / Keq_124) / (Km0467_124 * Km1101_124 * Km1792_124) / ((1 + s_0467 / Km0467_124) * (1 + s_1101 / Km1101_124) * (1 + s_1792 / Km1792_124) + (1 + s_0421 / Km0421_124) * (1 + s_0575 / Km0575_124) * (1 + s_1095 / Km1095_124) * (1 + s_1430 / Km1430_124) - 1)) + (cell * Vmax_169 * (s_0233 * s_1336 * s_0451 - s_1095 * s_1335 / Keq_169) / (Km0233_169 * Km1336_169 * Km0451_169) / ((1 + s_0233 / Km0233_169) * (1 + s_1336 / Km1336_169) * (1 + s_0451 / Km0451_169) + (1 + s_1095 / Km1095_169) * (1 + s_1335 / Km1335_169) - 1)) + (cell * Vmax_173 * (s_1101 * s_0360 - s_1095 * s_0783 * s_0361 / Keq_173) / (Km1101_173 * Km0360_173) / ((1 + s_1101 / Km1101_173) * (1 + s_0360 / Km0360_173) + (1 + s_1095 / Km1095_173) * (1 + s_0783 / Km0783_173) * (1 + s_0361 / Km0361_173) - 1)) + (cell * Vmax_175 * (s_0627 * s_1101 - s_0654 * s_1095 / Keq_175) / (Km0627_175 * Km1101_175) / ((1 + s_0627 / Km0627_175) * (1 + s_1101 / Km1101_175) + (1 + s_0654 / Km0654_175) * (1 + s_1095 / Km1095_175) - 1)) + (cell * Vmax_189 * (s_0467 * s_1101 * s_1799 - s_0454 * s_1095 * s_0942 * s_0783 / Keq_189) / (Km0467_189 * Km1101_189 * Km1799_189) / ((1 + s_0467 / Km0467_189) * (1 + s_1101 / Km1101_189) * (1 + s_1799 / Km1799_189) + (1 + s_0454 / Km0454_189) * (1 + s_1095 / Km1095_189) * (1 + s_0942 / Km0942_189) * (1 + s_0783 / Km0783_189) - 1)) + (cell * Vmax_204 * (s_1101 * s_0341 - s_0343 * s_0620 * s_1095 / Keq_204) / (Km1101_204 * Km0341_204) / ((1 + s_1101 / Km1101_204) * (1 + s_0341 / Km0341_204) + (1 + s_0343 / Km0343_204) * (1 + s_0620 / Km0620_204) * (1 + s_1095 / Km1095_204) - 1)) + (cell * Vmax_287 * (s_0467 * s_1322 * s_1101 - s_0421 * s_0162 * s_1095 * s_1430 / Keq_287) / (Km0467_287 * Km1322_287 * Km1101_287) / ((1 + s_0467 / Km0467_287) * (1 + s_1322 / Km1322_287) * (1 + s_1101 / Km1101_287) + (1 + s_0421 / Km0421_287) * (1 + s_0162 / Km0162_287) * (1 + s_1095 / Km1095_287) * (1 + s_1430 / Km1430_287) - 1)) - (cell * Vmax_79 * (s_1303 * s_1095 - s_1321 * s_0233 / Keq_79) / (Km1303_79 * Km1095_79) / ((1 + s_1303 / Km1303_79) * (1 + s_1095 / Km1095_79) + (1 + s_1321 / Km1321_79) * (1 + s_0233 / Km0233_79) - 1)) - (cell * Vmax_109 * (s_1095 * s_1399 - s_0233 * s_1072 / Keq_109) / (Km1095_109 * Km1399_109) / ((1 + s_1095 / Km1095_109) * (1 + s_1399 / Km1399_109) + (1 + s_0233 / Km0233_109) * (1 + s_1072 / Km1072_109) - 1)) - (cell * Vmax_139 * (s_0467 * s_0767 * s_1095 - s_0421 * s_0372 * s_1430 / Keq_139) / (Km0467_139 * Km0767_139 * Km1095_139) / ((1 + s_0467 / Km0467_139) * (1 + s_0767 / Km0767_139) * (1 + s_1095 / Km1095_139) + (1 + s_0421 / Km0421_139) * (1 + s_0372 / Km0372_139) * (1 + s_1430 / Km1430_139) - 1)) - (cell * Vmax_168 * (s_0467 * s_1095 - s_0421 * s_1099 / Keq_168) / (Km0467_168 * Km1095_168) / ((1 + s_0467 / Km0467_168) * (1 + s_1095 / Km1095_168) + (1 + s_0421 / Km0421_168) * (1 + s_1099 / Km1099_168) - 1)) - (cell * Vmax_170 * (s_1095 - s_0671 / Keq_170) / Km1095_170 / (1 + s_1095 / Km1095_170 + 1 + s_0671 / Km0671_170 - 1)) - (cell * Vmax_174 * (s_0467 * s_1095 * s_0451 - s_0421 * s_1101 * s_1430 / Keq_174) / (Km0467_174 * Km1095_174 * Km0451_174) / ((1 + s_0467 / Km0467_174) * (1 + s_1095 / Km1095_174) * (1 + s_0451 / Km0451_174) + (1 + s_0421 / Km0421_174) * (1 + s_1101 / Km1101_174) * (1 + s_1430 / Km1430_174) - 1)) - (cell * Vmax_177 * (s_0467 * s_1095 * s_1690 - s_0454 * s_1105 * s_0783 / Keq_177) / (Km0467_177 * Km1095_177 * Km1690_177) / ((1 + s_0467 / Km0467_177) * (1 + s_1095 / Km1095_177) * (1 + s_1690 / Km1690_177) + (1 + s_0454 / Km0454_177) * (1 + s_1105 / Km1105_177) * (1 + s_0783 / Km0783_177) - 1)) - (cell * Vmax_198 * (s_1095 * s_0263 - s_0233 * s_1110 / Keq_198) / (Km1095_198 * Km0263_198) / ((1 + s_1095 / Km1095_198) * (1 + s_0263 / Km0263_198) + (1 + s_0233 / Km0233_198) * (1 + s_1110 / Km1110_198) - 1)) - (cell * Vmax_217 * (s_0051 * s_1095 - s_0233 * s_1119 / Keq_217) / (Km0051_217 * Km1095_217) / ((1 + s_0051 / Km0051_217) * (1 + s_1095 / Km1095_217) + (1 + s_0233 / Km0233_217) * (1 + s_1119 / Km1119_217) - 1)) - (cell * Vmax_220 * (s_1095 * s_1531 - s_0233 * s_1041 / Keq_220) / (Km1095_220 * Km1531_220) / ((1 + s_1095 / Km1095_220) * (1 + s_1531 / Km1531_220) + (1 + s_0233 / Km0233_220) * (1 + s_1041 / Km1041_220) - 1)) - (cell * Vmax_225 * (s_0328 * s_1095 - s_0233 * s_1127 / Keq_225) / (Km0328_225 * Km1095_225) / ((1 + s_0328 / Km0328_225) * (1 + s_1095 / Km1095_225) + (1 + s_0233 / Km0233_225) * (1 + s_1127 / Km1127_225) - 1)) - (cell * Vmax_242 * (s_0395 * s_1095 - s_1302 * s_0555 / Keq_242) / (Km0395_242 * Km1095_242) / ((1 + s_0395 / Km0395_242) * (1 + s_1095 / Km1095_242) + (1 + s_1302 / Km1302_242) * (1 + s_0555 / Km0555_242) - 1)) - (cell * Vmax_252 * (s_1095 * s_0231 - s_0233 * s_1362 / Keq_252) / (Km1095_252 * Km0231_252) / ((1 + s_1095 / Km1095_252) * (1 + s_0231 / Km0231_252) + (1 + s_0233 / Km0233_252) * (1 + s_1362 / Km1362_252) - 1)) - (cell * Vmax_262 * (s_1095 * s_1429 - s_0233 * s_1151 / Keq_262) / (Km1095_262 * Km1429_262) / ((1 + s_1095 / Km1095_262) * (1 + s_1429 / Km1429_262) + (1 + s_0233 / Km0233_262) * (1 + s_1151 / Km1151_262) - 1)) - (cell * Vmax_290 * (s_0308 * s_1095 - s_0233 * s_1364 / Keq_290) / (Km0308_290 * Km1095_290) / ((1 + s_0308 / Km0308_290) * (1 + s_1095 / Km1095_290) + (1 + s_0233 / Km0233_290) * (1 + s_1364 / Km1364_290) - 1)) - (cell * Vmax_323 * (s_1095 * s_1315 - s_0233 * s_1316 / Keq_323) / (Km1095_323 * Km1315_323) / ((1 + s_1095 / Km1095_323) * (1 + s_1315 / Km1315_323) + (1 + s_0233 / Km0233_323) * (1 + s_1316 / Km1316_323) - 1)) - (cell * Vmax_343 * (s_0262 * s_1095 - s_0233 * s_1189 / Keq_343) / (Km0262_343 * Km1095_343) / ((1 + s_0262 / Km0262_343) * (1 + s_1095 / Km1095_343) + (1 + s_0233 / Km0233_343) * (1 + s_1189 / Km1189_343) - 1)) - (cell * Vmax_362 * (s_0282 * s_1095 - s_0233 * s_1193 / Keq_362) / (Km0282_362 * Km1095_362) / ((1 + s_0282 / Km0282_362) * (1 + s_1095 / Km1095_362) + (1 + s_0233 / Km0233_362) * (1 + s_1193 / Km1193_362) - 1)) - (0.2632 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1098) = (cell * Vmax_176 * (s_1105 * s_1336 - s_1098 * s_1335 * s_1690 / Keq_176) / (Km1105_176 * Km1336_176) / ((1 + s_1105 / Km1105_176) * (1 + s_1336 / Km1336_176) + (1 + s_1098 / Km1098_176) * (1 + s_1335 / Km1335_176) * (1 + s_1690 / Km1690_176) - 1)) - (cell * Vmax_171 * (s_1098 - s_0345 / Keq_171) / Km1098_171 / (1 + s_1098 / Km1098_171 + 1 + s_0345 / Km0345_171 - 1));
    der(s_1099) = (cell * Vmax_168 * (s_0467 * s_1095 - s_0421 * s_1099 / Keq_168) / (Km0467_168 * Km1095_168) / ((1 + s_0467 / Km0467_168) * (1 + s_1095 / Km1095_168) + (1 + s_0421 / Km0421_168) * (1 + s_1099 / Km1099_168) - 1)) - (cell * Vmax_172 * (s_1099 * s_1336 - s_1100 * s_1335 * s_1430 / Keq_172) / (Km1099_172 * Km1336_172) / ((1 + s_1099 / Km1099_172) * (1 + s_1336 / Km1336_172) + (1 + s_1100 / Km1100_172) * (1 + s_1335 / Km1335_172) * (1 + s_1430 / Km1430_172) - 1));
    der(s_1100) = (cell * Vmax_172 * (s_1099 * s_1336 - s_1100 * s_1335 * s_1430 / Keq_172) / (Km1099_172 * Km1336_172) / ((1 + s_1099 / Km1099_172) * (1 + s_1336 / Km1336_172) + (1 + s_1100 / Km1100_172) * (1 + s_1335 / Km1335_172) * (1 + s_1430 / Km1430_172) - 1)) - (cell * Vmax_222 * (s_1100 - s_0128 / Keq_222) / Km1100_222 / (1 + s_1100 / Km1100_222 + 1 + s_0128 / Km0128_222 - 1));
    der(s_1101) = (cell * Vmax_174 * (s_0467 * s_1095 * s_0451 - s_0421 * s_1101 * s_1430 / Keq_174) / (Km0467_174 * Km1095_174 * Km0451_174) / ((1 + s_0467 / Km0467_174) * (1 + s_1095 / Km1095_174) * (1 + s_0451 / Km0451_174) + (1 + s_0421 / Km0421_174) * (1 + s_1101 / Km1101_174) * (1 + s_1430 / Km1430_174) - 1)) - (cell * Vmax_57 * (s_0526 * s_1101 - s_0316 * s_1095 / Keq_57) / (Km0526_57 * Km1101_57) / ((1 + s_0526 / Km0526_57) * (1 + s_1101 / Km1101_57) + (1 + s_0316 / Km0316_57) * (1 + s_1095 / Km1095_57) - 1)) - (cell * Vmax_101 * (s_0526 * s_1101 - s_0457 * s_1095 * s_1531 / Keq_101) / (Km0526_101 * Km1101_101) / ((1 + s_0526 / Km0526_101) * (1 + s_1101 / Km1101_101) + (1 + s_0457 / Km0457_101) * (1 + s_1095 / Km1095_101) * (1 + s_1531 / Km1531_101) - 1)) - (cell * Vmax_124 * (s_0467 * s_1101 * s_1792 - s_0421 * s_0575 * s_1095 * s_1430 / Keq_124) / (Km0467_124 * Km1101_124 * Km1792_124) / ((1 + s_0467 / Km0467_124) * (1 + s_1101 / Km1101_124) * (1 + s_1792 / Km1792_124) + (1 + s_0421 / Km0421_124) * (1 + s_0575 / Km0575_124) * (1 + s_1095 / Km1095_124) * (1 + s_1430 / Km1430_124) - 1)) - (cell * Vmax_173 * (s_1101 * s_0360 - s_1095 * s_0783 * s_0361 / Keq_173) / (Km1101_173 * Km0360_173) / ((1 + s_1101 / Km1101_173) * (1 + s_0360 / Km0360_173) + (1 + s_1095 / Km1095_173) * (1 + s_0783 / Km0783_173) * (1 + s_0361 / Km0361_173) - 1)) - (cell * Vmax_175 * (s_0627 * s_1101 - s_0654 * s_1095 / Keq_175) / (Km0627_175 * Km1101_175) / ((1 + s_0627 / Km0627_175) * (1 + s_1101 / Km1101_175) + (1 + s_0654 / Km0654_175) * (1 + s_1095 / Km1095_175) - 1)) - (cell * Vmax_189 * (s_0467 * s_1101 * s_1799 - s_0454 * s_1095 * s_0942 * s_0783 / Keq_189) / (Km0467_189 * Km1101_189 * Km1799_189) / ((1 + s_0467 / Km0467_189) * (1 + s_1101 / Km1101_189) * (1 + s_1799 / Km1799_189) + (1 + s_0454 / Km0454_189) * (1 + s_1095 / Km1095_189) * (1 + s_0942 / Km0942_189) * (1 + s_0783 / Km0783_189) - 1)) - (cell * Vmax_204 * (s_1101 * s_0341 - s_0343 * s_0620 * s_1095 / Keq_204) / (Km1101_204 * Km0341_204) / ((1 + s_1101 / Km1101_204) * (1 + s_0341 / Km0341_204) + (1 + s_0343 / Km0343_204) * (1 + s_0620 / Km0620_204) * (1 + s_1095 / Km1095_204) - 1)) - (cell * Vmax_287 * (s_0467 * s_1322 * s_1101 - s_0421 * s_0162 * s_1095 * s_1430 / Keq_287) / (Km0467_287 * Km1322_287 * Km1101_287) / ((1 + s_0467 / Km0467_287) * (1 + s_1322 / Km1322_287) * (1 + s_1101 / Km1101_287) + (1 + s_0421 / Km0421_287) * (1 + s_0162 / Km0162_287) * (1 + s_1095 / Km1095_287) * (1 + s_1430 / Km1430_287) - 1)) - (0.2632 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1105) = (cell * Vmax_177 * (s_0467 * s_1095 * s_1690 - s_0454 * s_1105 * s_0783 / Keq_177) / (Km0467_177 * Km1095_177 * Km1690_177) / ((1 + s_0467 / Km0467_177) * (1 + s_1095 / Km1095_177) * (1 + s_1690 / Km1690_177) + (1 + s_0454 / Km0454_177) * (1 + s_1105 / Km1105_177) * (1 + s_0783 / Km0783_177) - 1)) - (cell * Vmax_176 * (s_1105 * s_1336 - s_1098 * s_1335 * s_1690 / Keq_176) / (Km1105_176 * Km1336_176) / ((1 + s_1105 / Km1105_176) * (1 + s_1336 / Km1336_176) + (1 + s_1098 / Km1098_176) * (1 + s_1335 / Km1335_176) * (1 + s_1690 / Km1690_176) - 1));
    der(s_1106) = (cell * Vmax_196 * (s_1109 * pow(s_1333, 2) - s_1106 * pow(s_1334, 2) / Keq_196) / (Km1109_196 * pow(Km1333_196, 2)) / ((1 + s_1109 / Km1109_196) * pow(1 + s_1333 / Km1333_196, 2) + (1 + s_1106 / Km1106_196) * pow(1 + s_1334 / Km1334_196, 2) - 1)) - (0.09474 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1109) = (cell * Vmax_197 * (s_1110 - s_1109 * s_1430 / Keq_197) / Km1110_197 / (1 + s_1110 / Km1110_197 + (1 + s_1109 / Km1109_197) * (1 + s_1430 / Km1430_197) - 1)) - (cell * Vmax_196 * (s_1109 * pow(s_1333, 2) - s_1106 * pow(s_1334, 2) / Keq_196) / (Km1109_196 * pow(Km1333_196, 2)) / ((1 + s_1109 / Km1109_196) * pow(1 + s_1333 / Km1333_196, 2) + (1 + s_1106 / Km1106_196) * pow(1 + s_1334 / Km1334_196, 2) - 1));
    der(s_1110) = (cell * Vmax_198 * (s_1095 * s_0263 - s_0233 * s_1110 / Keq_198) / (Km1095_198 * Km0263_198) / ((1 + s_1095 / Km1095_198) * (1 + s_0263 / Km0263_198) + (1 + s_0233 / Km0233_198) * (1 + s_1110 / Km1110_198) - 1)) - (cell * Vmax_197 * (s_1110 - s_1109 * s_1430 / Keq_197) / Km1110_197 / (1 + s_1110 / Km1110_197 + (1 + s_1109 / Km1109_197) * (1 + s_1430 / Km1430_197) - 1));
    der(s_1112) = (cell * Vmax_126 * (s_1082 - s_1112 * s_0451 * s_1531 / Keq_126) / Km1082_126 / (1 + s_1082 / Km1082_126 + (1 + s_1112 / Km1112_126) * (1 + s_0451 / Km0451_126) * (1 + s_1531 / Km1531_126) - 1)) + (cell * Vmax_315 * (s_1558 - s_0310 * s_1112 / Keq_315) / Km1558_315 / (1 + s_1558 / Km1558_315 + (1 + s_0310 / Km0310_315) * (1 + s_1112 / Km1112_315) - 1)) - (cell * Vmax_233 * (s_0354 * s_1112 - s_1141 * s_0337 / Keq_233) / (Km0354_233 * Km1112_233) / ((1 + s_0354 / Km0354_233) * (1 + s_1112 / Km1112_233) + (1 + s_1141 / Km1141_233) * (1 + s_0337 / Km0337_233) - 1));
    der(s_1113) = (cell * Vmax_199 * (s_1075 * s_1336 - s_1113 * s_1335 / Keq_199) / (Km1075_199 * Km1336_199) / ((1 + s_1075 / Km1075_199) * (1 + s_1336 / Km1336_199) + (1 + s_1113 / Km1113_199) * (1 + s_1335 / Km1335_199) - 1)) - (cell * Vmax_200 * (s_0467 * s_1113 - s_0421 * s_1363 / Keq_200) / (Km0467_200 * Km1113_200) / ((1 + s_0467 / Km0467_200) * (1 + s_1113 / Km1113_200) + (1 + s_0421 / Km0421_200) * (1 + s_1363 / Km1363_200) - 1)) - (cell * Vmax_201 * (s_1113 * s_1599 - s_0555 * s_1367 / Keq_201) / (Km1113_201 * Km1599_201) / ((1 + s_1113 / Km1113_201) * (1 + s_1599 / Km1599_201) + (1 + s_0555 / Km0555_201) * (1 + s_1367 / Km1367_201) - 1));
    der(s_1119) = (cell * Vmax_217 * (s_0051 * s_1095 - s_0233 * s_1119 / Keq_217) / (Km0051_217 * Km1095_217) / ((1 + s_0051 / Km0051_217) * (1 + s_1095 / Km1095_217) + (1 + s_0233 / Km0233_217) * (1 + s_1119 / Km1119_217) - 1)) - (0.2905 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1127) = (cell * Vmax_225 * (s_0328 * s_1095 - s_0233 * s_1127 / Keq_225) / (Km0328_225 * Km1095_225) / ((1 + s_0328 / Km0328_225) * (1 + s_1095 / Km1095_225) + (1 + s_0233 / Km0233_225) * (1 + s_1127 / Km1127_225) - 1)) - (0.4505 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1131) = (cell * Vmax_133 * (s_1242 - s_0543 * s_1131 / Keq_133) / Km1242_133 / (1 + s_1242 / Km1242_133 + (1 + s_0543 / Km0543_133) * (1 + s_1131 / Km1131_133) - 1)) - (0.3432 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1138) = (cell * Vmax_162 * (s_0875 - s_1138 / Keq_162) / Km0875_162 / (1 + s_0875 / Km0875_162 + 1 + s_1138 / Km1138_162 - 1)) + (cell * Vmax_228 * (s_0991 * s_1399 - s_1138 * s_1372 / Keq_228) / (Km0991_228 * Km1399_228) / ((1 + s_0991 / Km0991_228) * (1 + s_1399 / Km1399_228) + (1 + s_1138 / Km1138_228) * (1 + s_1372 / Km1372_228) - 1)) - (cell * Vmax_227 * (s_1138 * s_1333 - s_1334 * s_1399 / Keq_227) / (Km1138_227 * Km1333_227) / ((1 + s_1138 / Km1138_227) * (1 + s_1333 / Km1333_227) + (1 + s_1334 / Km1334_227) * (1 + s_1399 / Km1399_227) - 1));
    der(s_1141) = (cell * Vmax_112 * (s_0378 * s_1552 * s_0755 - s_0377 * s_0476 * s_0333 * s_1141 / Keq_112) / (Km0378_112 * Km1552_112 * Km0755_112) / ((1 + s_0378 / Km0378_112) * (1 + s_1552 / Km1552_112) * (1 + s_0755 / Km0755_112) + (1 + s_0377 / Km0377_112) * (1 + s_0476 / Km0476_112) * (1 + s_0333 / Km0333_112) * (1 + s_1141 / Km1141_112) - 1)) + (cell * Vmax_233 * (s_0354 * s_1112 - s_1141 * s_0337 / Keq_233) / (Km0354_233 * Km1112_233) / ((1 + s_0354 / Km0354_233) * (1 + s_1112 / Km1112_233) + (1 + s_1141 / Km1141_233) * (1 + s_0337 / Km0337_233) - 1)) + (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) - (cell * Vmax_232 * (s_0467 * s_1141 - s_1552 * s_1430 * s_0783 / Keq_232) / (Km0467_232 * Km1141_232) / ((1 + s_0467 / Km0467_232) * (1 + s_1141 / Km1141_232) + (1 + s_1552 / Km1552_232) * (1 + s_1430 / Km1430_232) * (1 + s_0783 / Km0783_232) - 1)) - (0.1537 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1151) = (cell * Vmax_262 * (s_1095 * s_1429 - s_0233 * s_1151 / Keq_262) / (Km1095_262 * Km1429_262) / ((1 + s_1095 / Km1095_262) * (1 + s_1429 / Km1429_262) + (1 + s_0233 / Km0233_262) * (1 + s_1151 / Km1151_262) - 1)) - (0.1853 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1155) = (cell * Vmax_300 * (s_0128 * s_1336 - s_1335 * s_1155 / Keq_300) / (Km0128_300 * Km1336_300) / ((1 + s_0128 / Km0128_300) * (1 + s_1336 / Km1336_300) + (1 + s_1335 / Km1335_300) * (1 + s_1155 / Km1155_300) - 1)) - (0.2211 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1170) = (cell * Vmax_267 * (s_1364 - s_1430 * s_1170 / Keq_267) / Km1364_267 / (1 + s_1364 / Km1364_267 + (1 + s_1430 / Km1430_267) * (1 + s_1170 / Km1170_267) - 1)) - (cell * Vmax_184 * (s_1170 * s_0337 - s_0929 * s_0336 / Keq_184) / (Km1170_184 * Km0337_184) / ((1 + s_1170 / Km1170_184) * (1 + s_0337 / Km0337_184) + (1 + s_0929 / Km0929_184) * (1 + s_0336 / Km0336_184) - 1)) - (cell * Vmax_265 * (s_0513 * s_1170 - s_0539 * s_1477 / Keq_265) / (Km0513_265 * Km1170_265) / ((1 + s_0513 / Km0513_265) * (1 + s_1170 / Km1170_265) + (1 + s_0539 / Km0539_265) * (1 + s_1477 / Km1477_265) - 1)) - (cell * Vmax_266 * (s_0512 * s_1170 - s_0539 * s_1476 / Keq_266) / (Km0512_266 * Km1170_266) / ((1 + s_0512 / Km0512_266) * (1 + s_1170 / Km1170_266) + (1 + s_0539 / Km0539_266) * (1 + s_1476 / Km1476_266) - 1)) - (cell * Vmax_316 * (s_0395 * s_1170 - s_1358 * s_0555 / Keq_316) / (Km0395_316 * Km1170_316) / ((1 + s_0395 / Km0395_316) * (1 + s_1170 / Km1170_316) + (1 + s_1358 / Km1358_316) * (1 + s_0555 / Km0555_316) - 1)) - (0.2158 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1179) = (cell * Vmax_334 * (s_1363 - s_1430 * s_1179 / Keq_334) / Km1363_334 / (1 + s_1363 / Km1363_334 + (1 + s_1430 / Km1430_334) * (1 + s_1179 / Km1179_334) - 1)) - (cell * Vmax_223 * (s_1179 - s_0232 * s_0451 / Keq_223) / Km1179_223 / (1 + s_1179 / Km1179_223 + (1 + s_0232 / Km0232_223) * (1 + s_0451 / Km0451_223) - 1)) - (cell * Vmax_224 * (s_1333 * s_1179 - s_1040 * s_1334 / Keq_224) / (Km1333_224 * Km1179_224) / ((1 + s_1333 / Km1333_224) * (1 + s_1179 / Km1179_224) + (1 + s_1040 / Km1040_224) * (1 + s_1334 / Km1334_224) - 1)) - (cell * Vmax_333 * (s_1179 - s_0381 * s_0929 / Keq_333) / Km1179_333 / (1 + s_1179 / Km1179_333 + (1 + s_0381 / Km0381_333) * (1 + s_0929 / Km0929_333) - 1)) - (0.2537 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1185) = (cell * Vmax_341 * (s_1009 * s_0451 * s_1531 - s_1185 / Keq_341) / (Km1009_341 * Km0451_341 * Km1531_341) / ((1 + s_1009 / Km1009_341) * (1 + s_0451 / Km0451_341) * (1 + s_1531 / Km1531_341) + 1 + s_1185 / Km1185_341 - 1)) - (0.05684 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1189) = (cell * Vmax_343 * (s_0262 * s_1095 - s_0233 * s_1189 / Keq_343) / (Km0262_343 * Km1095_343) / ((1 + s_0262 / Km0262_343) * (1 + s_1095 / Km1095_343) + (1 + s_0233 / Km0233_343) * (1 + s_1189 / Km1189_343) - 1)) - (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) - (0.1379 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1193) = (cell * Vmax_362 * (s_0282 * s_1095 - s_0233 * s_1193 / Keq_362) / (Km0282_362 * Km1095_362) / ((1 + s_0282 / Km0282_362) * (1 + s_1095 / Km1095_362) + (1 + s_0233 / Km0233_362) * (1 + s_1193 / Km1193_362) - 1)) - (0.4232 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1204) = (cell * Vmax_226 * (s_0149 * s_1734 - s_1204 * s_1733 / Keq_226) / (Km0149_226 * Km1734_226) / ((1 + s_0149 / Km0149_226) * (1 + s_1734 / Km1734_226) + (1 + s_1204 / Km1204_226) * (1 + s_1733 / Km1733_226) - 1)) - (cell * Vmax_327 * (s_0467 * s_1204 - s_0421 * s_0147 / Keq_327) / (Km0467_327 * Km1204_327) / ((1 + s_0467 / Km0467_327) * (1 + s_1204 / Km1204_327) + (1 + s_0421 / Km0421_327) * (1 + s_0147 / Km0147_327) - 1));
    der(s_1211) = (cell * Vmax_322 * (s_1316 - s_1211 * s_1595 / Keq_322) / Km1316_322 / (1 + s_1316 / Km1316_322 + (1 + s_1211 / Km1211_322) * (1 + s_1595 / Km1595_322) - 1)) - (cell * Vmax_134 * (s_1211 - s_1242 / Keq_134) / Km1211_134 / (1 + s_1211 / Km1211_134 + 1 + s_1242 / Km1242_134 - 1));
    der(s_1212) = (cell * Vmax_378 * (s_1214 - s_1212) / Km1214_378 / (1 + s_1214 / Km1214_378 + 1 + s_1212 / Km1212_378 - 1)) - (0.008675 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1214) = 0.0;
    der(s_1216) = (cell * Vmax_230 * (s_0397 * s_1217 - s_0555 * s_1216 / Keq_230) / (Km0397_230 * Km1217_230) / ((1 + s_0397 / Km0397_230) * (1 + s_1217 / Km1217_230) + (1 + s_0555 / Km0555_230) * (1 + s_1216 / Km1216_230) - 1)) - (cell * Vmax_47 * (s_1216 * s_1218 - s_0543 * s_0555 * s_0289 / Keq_47) / (Km1216_47 * Km1218_47) / ((1 + s_1216 / Km1216_47) * (1 + s_1218 / Km1218_47) + (1 + s_0543 / Km0543_47) * (1 + s_0555 / Km0555_47) * (1 + s_0289 / Km0289_47) - 1)) - (cell * Vmax_50 * (s_0910 * s_1216 - s_0397 * s_0543 * s_0290 / Keq_50) / (Km0910_50 * Km1216_50) / ((1 + s_0910 / Km0910_50) * (1 + s_1216 / Km1216_50) + (1 + s_0397 / Km0397_50) * (1 + s_0543 / Km0543_50) * (1 + s_0290 / Km0290_50) - 1)) - (cell * Vmax_52 * (s_0789 * s_1216 - s_0304 * s_0397 * s_0543 / Keq_52) / (Km0789_52 * Km1216_52) / ((1 + s_0789 / Km0789_52) * (1 + s_1216 / Km1216_52) + (1 + s_0304 / Km0304_52) * (1 + s_0397 / Km0397_52) * (1 + s_0543 / Km0543_52) - 1));
    der(s_1217) = (cell * Vmax_76 * (s_0395 * s_0467 * s_0474 - s_0421 * s_1217 * s_1430 / Keq_76) / (Km0395_76 * Km0467_76 * Km0474_76) / ((1 + s_0395 / Km0395_76) * (1 + s_0467 / Km0467_76) * (1 + s_0474 / Km0474_76) + (1 + s_0421 / Km0421_76) * (1 + s_1217 / Km1217_76) * (1 + s_1430 / Km1430_76) - 1)) - (cell * Vmax_229 * (s_1552 * s_1217 - s_1551 * s_1218 / Keq_229) / (Km1552_229 * Km1217_229) / ((1 + s_1552 / Km1552_229) * (1 + s_1217 / Km1217_229) + (1 + s_1551 / Km1551_229) * (1 + s_1218 / Km1218_229) - 1)) - (cell * Vmax_230 * (s_0397 * s_1217 - s_0555 * s_1216 / Keq_230) / (Km0397_230 * Km1217_230) / ((1 + s_0397 / Km0397_230) * (1 + s_1217 / Km1217_230) + (1 + s_0555 / Km0555_230) * (1 + s_1216 / Km1216_230) - 1));
    der(s_1218) = (cell * Vmax_229 * (s_1552 * s_1217 - s_1551 * s_1218 / Keq_229) / (Km1552_229 * Km1217_229) / ((1 + s_1552 / Km1552_229) * (1 + s_1217 / Km1217_229) + (1 + s_1551 / Km1551_229) * (1 + s_1218 / Km1218_229) - 1)) - (cell * Vmax_47 * (s_1216 * s_1218 - s_0543 * s_0555 * s_0289 / Keq_47) / (Km1216_47 * Km1218_47) / ((1 + s_1216 / Km1216_47) * (1 + s_1218 / Km1218_47) + (1 + s_0543 / Km0543_47) * (1 + s_0555 / Km0555_47) * (1 + s_0289 / Km0289_47) - 1));
    der(s_1239) = (cell * Vmax_143 * (s_0052 * s_1240 - s_1239 * s_1394 / Keq_143) / (Km0052_143 * Km1240_143) / ((1 + s_0052 / Km0052_143) * (1 + s_1240 / Km1240_143) + (1 + s_1239 / Km1239_143) * (1 + s_1394 / Km1394_143) - 1)) + (cell * Vmax_187 * (s_0937 * s_1240 - s_0941 * s_1239 / Keq_187) / (Km0937_187 * Km1240_187) / ((1 + s_0937 / Km0937_187) * (1 + s_1240 / Km1240_187) + (1 + s_0941 / Km0941_187) * (1 + s_1239 / Km1239_187) - 1)) - (cell * Vmax_371 * (s_1239 * s_1372 - s_1240 / Keq_371) / (Km1239_371 * Km1372_371) / ((1 + s_1239 / Km1239_371) * (1 + s_1372 / Km1372_371) + 1 + s_1240 / Km1240_371 - 1));
    der(s_1240) = (cell * Vmax_371 * (s_1239 * s_1372 - s_1240 / Keq_371) / (Km1239_371 * Km1372_371) / ((1 + s_1239 / Km1239_371) * (1 + s_1372 / Km1372_371) + 1 + s_1240 / Km1240_371 - 1)) - (cell * Vmax_143 * (s_0052 * s_1240 - s_1239 * s_1394 / Keq_143) / (Km0052_143 * Km1240_143) / ((1 + s_0052 / Km0052_143) * (1 + s_1240 / Km1240_143) + (1 + s_1239 / Km1239_143) * (1 + s_1394 / Km1394_143) - 1)) - (cell * Vmax_187 * (s_0937 * s_1240 - s_0941 * s_1239 / Keq_187) / (Km0937_187 * Km1240_187) / ((1 + s_0937 / Km0937_187) * (1 + s_1240 / Km1240_187) + (1 + s_0941 / Km0941_187) * (1 + s_1239 / Km1239_187) - 1));
    der(s_1242) = (cell * Vmax_134 * (s_1211 - s_1242 / Keq_134) / Km1211_134 / (1 + s_1211 / Km1211_134 + 1 + s_1242 / Km1242_134 - 1)) - (cell * Vmax_133 * (s_1242 - s_0543 * s_1131 / Keq_133) / Km1242_133 / (1 + s_1242 / Km1242_133 + (1 + s_0543 / Km0543_133) * (1 + s_1131 / Km1131_133) - 1)) - (cell * Vmax_353 * (s_1242 * s_0467 * s_1754 - s_0421 * s_1430 * s_1752 / Keq_353) / (Km1242_353 * Km0467_353 * Km1754_353) / ((1 + s_1242 / Km1242_353) * (1 + s_0467 / Km0467_353) * (1 + s_1754 / Km1754_353) + (1 + s_0421 / Km0421_353) * (1 + s_1430 / Km1430_353) * (1 + s_1752 / Km1752_353) - 1));
    der(s_1248) = (cell * Vmax_292 * (s_1492 - s_1248 * s_1491 / Keq_292) / Km1492_292 / (1 + s_1492 / Km1492_292 + (1 + s_1248 / Km1248_292) * (1 + s_1491 / Km1491_292) - 1)) - (cell * Vmax_380 * s_1248 / Km1248_380 / (1 + s_1248 / Km1248_380));
    der(s_1250) = 0.0;
    der(s_1255) = (cell * Vmax_379 * (s_1257 - s_1255) / Km1257_379 / (1 + s_1257 / Km1257_379 + 1 + s_1255 / Km1255_379 - 1)) - (0.000691 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1257) = 0.0;
    der(s_1258) = (cell * Vmax_239 * (s_0467 * s_1259 - s_1258 * s_0783 / Keq_239) / (Km0467_239 * Km1259_239) / ((1 + s_0467 / Km0467_239) * (1 + s_1259 / Km1259_239) + (1 + s_1258 / Km1258_239) * (1 + s_0783 / Km0783_239) - 1)) - (cell * Vmax_235 * (s_1018 * s_1258 * s_1334 - s_0454 * s_1017 * s_1260 * s_1333 / Keq_235) / (Km1018_235 * Km1258_235 * Km1334_235) / ((1 + s_1018 / Km1018_235) * (1 + s_1258 / Km1258_235) * (1 + s_1334 / Km1334_235) + (1 + s_0454 / Km0454_235) * (1 + s_1017 / Km1017_235) * (1 + s_1260 / Km1260_235) * (1 + s_1333 / Km1333_235) - 1));
    der(s_1259) = (2.0 * cell * Vmax_238 * (s_0585 * s_0579 * pow(s_1260, 2) - pow(s_1259, 2) * s_1265 / Keq_238) / (Km0585_238 * Km0579_238 * pow(Km1260_238, 2)) / ((1 + s_0585 / Km0585_238) * (1 + s_0579 / Km0579_238) * pow(1 + s_1260 / Km1260_238, 2) + pow(1 + s_1259 / Km1259_238, 2) * (1 + s_1265 / Km1265_238) - 1)) - (cell * Vmax_239 * (s_0467 * s_1259 - s_1258 * s_0783 / Keq_239) / (Km0467_239 * Km1259_239) / ((1 + s_0467 / Km0467_239) * (1 + s_1259 / Km1259_239) + (1 + s_1258 / Km1258_239) * (1 + s_0783 / Km0783_239) - 1));
    der(s_1260) = (cell * Vmax_235 * (s_1018 * s_1258 * s_1334 - s_0454 * s_1017 * s_1260 * s_1333 / Keq_235) / (Km1018_235 * Km1258_235 * Km1334_235) / ((1 + s_1018 / Km1018_235) * (1 + s_1258 / Km1258_235) * (1 + s_1334 / Km1334_235) + (1 + s_0454 / Km0454_235) * (1 + s_1017 / Km1017_235) * (1 + s_1260 / Km1260_235) * (1 + s_1333 / Km1333_235) - 1)) - (2.0 * cell * Vmax_238 * (s_0585 * s_0579 * pow(s_1260, 2) - pow(s_1259, 2) * s_1265 / Keq_238) / (Km0585_238 * Km0579_238 * pow(Km1260_238, 2)) / ((1 + s_0585 / Km0585_238) * (1 + s_0579 / Km0579_238) * pow(1 + s_1260 / Km1260_238, 2) + pow(1 + s_1259 / Km1259_238, 2) * (1 + s_1265 / Km1265_238) - 1));
    der(s_1261) = (cell * Vmax_381 * (s_1263 - s_1261) / Km1263_381 / (1 + s_1263 / Km1263_381 + 1 + s_1261 / Km1261_381 - 1)) - (cell * Vmax_236 * (s_1261 * s_0420 - s_0454 * s_0579 * s_1264 / Keq_236) / (Km1261_236 * Km0420_236) / ((1 + s_1261 / Km1261_236) * (1 + s_0420 / Km0420_236) + (1 + s_0454 / Km0454_236) * (1 + s_0579 / Km0579_236) * (1 + s_1264 / Km1264_236) - 1)) - (7e-06 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1263) = 0.0;
    der(s_1264) = (cell * Vmax_236 * (s_1261 * s_0420 - s_0454 * s_0579 * s_1264 / Keq_236) / (Km1261_236 * Km0420_236) / ((1 + s_1261 / Km1261_236) * (1 + s_0420 / Km0420_236) + (1 + s_0454 / Km0454_236) * (1 + s_0579 / Km0579_236) * (1 + s_1264 / Km1264_236) - 1)) - (cell * Vmax_113 * (s_1264 * s_0420 - s_0454 * s_0479 * s_0579 / Keq_113) / (Km1264_113 * Km0420_113) / ((1 + s_1264 / Km1264_113) * (1 + s_0420 / Km0420_113) + (1 + s_0454 / Km0454_113) * (1 + s_0479 / Km0479_113) * (1 + s_0579 / Km0579_113) - 1));
    der(s_1265) = (cell * Vmax_238 * (s_0585 * s_0579 * pow(s_1260, 2) - pow(s_1259, 2) * s_1265 / Keq_238) / (Km0585_238 * Km0579_238 * pow(Km1260_238, 2)) / ((1 + s_0585 / Km0585_238) * (1 + s_0579 / Km0579_238) * pow(1 + s_1260 / Km1260_238, 2) + pow(1 + s_1259 / Km1259_238, 2) * (1 + s_1265 / Km1265_238) - 1)) - (cell * Vmax_237 * (s_0467 * s_1265 - s_0420 * s_0783 / Keq_237) / (Km0467_237 * Km1265_237) / ((1 + s_0467 / Km0467_237) * (1 + s_1265 / Km1265_237) + (1 + s_0420 / Km0420_237) * (1 + s_0783 / Km0783_237) - 1));
    der(s_1274) = (cell * Vmax_104 * (s_1072 * s_0467 * s_1081 - s_0454 * s_1274 * s_0783 / Keq_104) / (Km1072_104 * Km0467_104 * Km1081_104) / ((1 + s_1072 / Km1072_104) * (1 + s_0467 / Km0467_104) * (1 + s_1081 / Km1081_104) + (1 + s_0454 / Km0454_104) * (1 + s_1274 / Km1274_104) * (1 + s_0783 / Km0783_104) - 1)) - (cell * Vmax_103 * (s_1274 - s_1061 * s_0875 / Keq_103) / Km1274_103 / (1 + s_1274 / Km1274_103 + (1 + s_1061 / Km1061_103) * (1 + s_0875 / Km0875_103) - 1));
    der(s_1277) = (cell * Vmax_276 * (s_0599 * s_0575 * s_1083 - s_1277 * s_0539 * s_0783 / Keq_276) / (Km0599_276 * Km0575_276 * Km1083_276) / ((1 + s_0599 / Km0599_276) * (1 + s_0575 / Km0575_276) * (1 + s_1083 / Km1083_276) + (1 + s_1277 / Km1277_276) * (1 + s_0539 / Km0539_276) * (1 + s_0783 / Km0783_276) - 1)) - (cell * Vmax_277 * (s_1277 - s_0543 * s_1413 / Keq_277) / Km1277_277 / (1 + s_1277 / Km1277_277 + (1 + s_0543 / Km0543_277) * (1 + s_1413 / Km1413_277) - 1));
    der(s_1278) = (cell * Vmax_100 * (s_0457 * s_0360 - s_0783 * s_1278 / Keq_100) / (Km0457_100 * Km0360_100) / ((1 + s_0457 / Km0457_100) * (1 + s_0360 / Km0360_100) + (1 + s_0783 / Km0783_100) * (1 + s_1278 / Km1278_100) - 1)) - (cell * Vmax_286 * (s_1278 - s_0096 / Keq_286) / Km1278_286 / (1 + s_1278 / Km1278_286 + 1 + s_0096 / Km0096_286 - 1));
    der(s_1287) = (cell * Vmax_165 * (s_0395 * s_0653 - s_1287 * s_0555 / Keq_165) / (Km0395_165 * Km0653_165) / ((1 + s_0395 / Km0395_165) * (1 + s_0653 / Km0653_165) + (1 + s_1287 / Km1287_165) * (1 + s_0555 / Km0555_165) - 1)) - (cell * Vmax_349 * (s_1287 * s_1792 - s_0783 * s_1745 / Keq_349) / (Km1287_349 * Km1792_349) / ((1 + s_1287 / Km1287_349) * (1 + s_1792 / Km1792_349) + (1 + s_0783 / Km0783_349) * (1 + s_1745 / Km1745_349) - 1));
    der(s_1302) = (cell * Vmax_242 * (s_0395 * s_1095 - s_1302 * s_0555 / Keq_242) / (Km0395_242 * Km1095_242) / ((1 + s_0395 / Km0395_242) * (1 + s_1095 / Km1095_242) + (1 + s_1302 / Km1302_242) * (1 + s_0555 / Km0555_242) - 1)) - (cell * Vmax_77 * (s_1302 * s_0467 - s_1304 * s_0421 / Keq_77) / (Km1302_77 * Km0467_77) / ((1 + s_1302 / Km1302_77) * (1 + s_0467 / Km0467_77) + (1 + s_1304 / Km1304_77) * (1 + s_0421 / Km0421_77) - 1));
    der(s_1303) = (cell * Vmax_241 * (s_1304 * s_1336 - s_1303 * s_1335 * s_1430 / Keq_241) / (Km1304_241 * Km1336_241) / ((1 + s_1304 / Km1304_241) * (1 + s_1336 / Km1336_241) + (1 + s_1303 / Km1303_241) * (1 + s_1335 / Km1335_241) * (1 + s_1430 / Km1430_241) - 1)) - (cell * Vmax_79 * (s_1303 * s_1095 - s_1321 * s_0233 / Keq_79) / (Km1303_79 * Km1095_79) / ((1 + s_1303 / Km1303_79) * (1 + s_1095 / Km1095_79) + (1 + s_1321 / Km1321_79) * (1 + s_0233 / Km0233_79) - 1));
    der(s_1304) = (cell * Vmax_77 * (s_1302 * s_0467 - s_1304 * s_0421 / Keq_77) / (Km1302_77 * Km0467_77) / ((1 + s_1302 / Km1302_77) * (1 + s_0467 / Km0467_77) + (1 + s_1304 / Km1304_77) * (1 + s_0421 / Km0421_77) - 1)) - (cell * Vmax_241 * (s_1304 * s_1336 - s_1303 * s_1335 * s_1430 / Keq_241) / (Km1304_241 * Km1336_241) / ((1 + s_1304 / Km1304_241) * (1 + s_1336 / Km1336_241) + (1 + s_1303 / Km1303_241) * (1 + s_1335 / Km1335_241) * (1 + s_1430 / Km1430_241) - 1));
    der(s_1312) = (cell * Vmax_107 * (s_1072 * s_0502 - s_1312 * s_1430 / Keq_107) / (Km1072_107 * Km0502_107) / ((1 + s_1072 / Km1072_107) * (1 + s_0502 / Km0502_107) + (1 + s_1312 / Km1312_107) * (1 + s_1430 / Km1430_107) - 1)) - (cell * Vmax_142 * (s_1312 - s_0052 / Keq_142) / Km1312_142 / (1 + s_1312 / Km1312_142 + 1 + s_0052 / Km0052_142 - 1));
    der(s_1315) = (cell * Vmax_328 * (s_1599 * s_0148 - s_0555 * s_1315 / Keq_328) / (Km1599_328 * Km0148_328) / ((1 + s_1599 / Km1599_328) * (1 + s_0148 / Km0148_328) + (1 + s_0555 / Km0555_328) * (1 + s_1315 / Km1315_328) - 1)) - (cell * Vmax_323 * (s_1095 * s_1315 - s_0233 * s_1316 / Keq_323) / (Km1095_323 * Km1315_323) / ((1 + s_1095 / Km1095_323) * (1 + s_1315 / Km1315_323) + (1 + s_0233 / Km0233_323) * (1 + s_1316 / Km1316_323) - 1));
    der(s_1316) = (cell * Vmax_323 * (s_1095 * s_1315 - s_0233 * s_1316 / Keq_323) / (Km1095_323 * Km1315_323) / ((1 + s_1095 / Km1095_323) * (1 + s_1315 / Km1315_323) + (1 + s_0233 / Km0233_323) * (1 + s_1316 / Km1316_323) - 1)) - (cell * Vmax_322 * (s_1316 - s_1211 * s_1595 / Keq_322) / Km1316_322 / (1 + s_1316 / Km1316_322 + (1 + s_1211 / Km1211_322) * (1 + s_1595 / Km1595_322) - 1));
    der(s_1318) = (cell * Vmax_288 * (s_0467 * s_0929 * s_0361 - s_0421 * s_1318 * s_1430 / Keq_288) / (Km0467_288 * Km0929_288 * Km0361_288) / ((1 + s_0467 / Km0467_288) * (1 + s_0929 / Km0929_288) * (1 + s_0361 / Km0361_288) + (1 + s_0421 / Km0421_288) * (1 + s_1318 / Km1318_288) * (1 + s_1430 / Km1430_288) - 1)) - (cell * Vmax_163 * (s_0467 * s_0867 * s_1318 - s_0421 * s_1322 * s_1430 / Keq_163) / (Km0467_163 * Km0867_163 * Km1318_163) / ((1 + s_0467 / Km0467_163) * (1 + s_0867 / Km0867_163) * (1 + s_1318 / Km1318_163) + (1 + s_0421 / Km0421_163) * (1 + s_1322 / Km1322_163) * (1 + s_1430 / Km1430_163) - 1));
    der(s_1321) = (cell * Vmax_79 * (s_1303 * s_1095 - s_1321 * s_0233 / Keq_79) / (Km1303_79 * Km1095_79) / ((1 + s_1303 / Km1303_79) * (1 + s_1095 / Km1095_79) + (1 + s_1321 / Km1321_79) * (1 + s_0233 / Km0233_79) - 1)) - (cell * Vmax_78 * (s_1321 - s_0384 * s_1391 / Keq_78) / Km1321_78 / (1 + s_1321 / Km1321_78 + (1 + s_0384 / Km0384_78) * (1 + s_1391 / Km1391_78) - 1));
    der(s_1322) = (cell * Vmax_163 * (s_0467 * s_0867 * s_1318 - s_0421 * s_1322 * s_1430 / Keq_163) / (Km0467_163 * Km0867_163 * Km1318_163) / ((1 + s_0467 / Km0467_163) * (1 + s_0867 / Km0867_163) * (1 + s_1318 / Km1318_163) + (1 + s_0421 / Km0421_163) * (1 + s_1322 / Km1322_163) * (1 + s_1430 / Km1430_163) - 1)) - (cell * Vmax_287 * (s_0467 * s_1322 * s_1101 - s_0421 * s_0162 * s_1095 * s_1430 / Keq_287) / (Km0467_287 * Km1322_287 * Km1101_287) / ((1 + s_0467 / Km0467_287) * (1 + s_1322 / Km1322_287) * (1 + s_1101 / Km1101_287) + (1 + s_0421 / Km0421_287) * (1 + s_0162 / Km0162_287) * (1 + s_1095 / Km1095_287) * (1 + s_1430 / Km1430_287) - 1));
    der(s_1327) = (cell * Vmax_96 * (s_1072 * s_0945 * s_1006 - s_1327 * s_0896 * s_1430 / Keq_96) / (Km1072_96 * Km0945_96 * Km1006_96) / ((1 + s_1072 / Km1072_96) * (1 + s_0945 / Km0945_96) * (1 + s_1006 / Km1006_96) + (1 + s_1327 / Km1327_96) * (1 + s_0896 / Km0896_96) * (1 + s_1430 / Km1430_96) - 1)) - (cell * Vmax_97 * (s_1327 - s_0454 * s_0875 / Keq_97) / Km1327_97 / (1 + s_1327 / Km1327_97 + (1 + s_0454 / Km0454_97) * (1 + s_0875 / Km0875_97) - 1));
    der(s_1329) = (cell * Vmax_384 * (s_1331 - s_1329) / Km1331_384 / (1 + s_1331 / Km1331_384 + 1 + s_1329 / Km1329_384 - 1)) - (0.000323 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1331) = 0.0;
    der(s_1333) = (cell * Vmax_6 * (s_0123 * s_1334 - s_0779 * s_1333 / Keq_6) / (Km0123_6 * Km1334_6) / ((1 + s_0123 / Km0123_6) * (1 + s_1334 / Km1334_6) + (1 + s_0779 / Km0779_6) * (1 + s_1333 / Km1333_6) - 1)) + (cell * Vmax_7 * (s_0123 * s_1334 - s_1028 * s_1333 / Keq_7) / (Km0123_7 * Km1334_7) / ((1 + s_0123 / Km0123_7) * (1 + s_1334 / Km1334_7) + (1 + s_1028 / Km1028_7) * (1 + s_1333 / Km1333_7) - 1)) + (cell * Vmax_35 * (s_0293 * s_1334 - s_0044 * s_1333 / Keq_35) / (Km0293_35 * Km1334_35) / ((1 + s_0293 / Km0293_35) * (1 + s_1334 / Km1334_35) + (1 + s_0044 / Km0044_35) * (1 + s_1333 / Km1333_35) - 1)) + (cell * Vmax_36 * (s_0295 * s_1334 - s_0045 * s_1333 / Keq_36) / (Km0295_36 * Km1334_36) / ((1 + s_0295 / Km0295_36) * (1 + s_1334 / Km1334_36) + (1 + s_0045 / Km0045_36) * (1 + s_1333 / Km1333_36) - 1)) + (cell * Vmax_37 * (s_0297 * s_1334 - s_0046 * s_1333 / Keq_37) / (Km0297_37 * Km1334_37) / ((1 + s_0297 / Km0297_37) * (1 + s_1334 / Km1334_37) + (1 + s_0046 / Km0046_37) * (1 + s_1333 / Km1333_37) - 1)) + (cell * Vmax_38 * (s_0299 * s_1334 - s_0047 * s_1333 / Keq_38) / (Km0299_38 * Km1334_38) / ((1 + s_0299 / Km0299_38) * (1 + s_1334 / Km1334_38) + (1 + s_0047 / Km0047_38) * (1 + s_1333 / Km1333_38) - 1)) + (cell * Vmax_39 * (s_0303 * s_1334 - s_0049 * s_1333 / Keq_39) / (Km0303_39 * Km1334_39) / ((1 + s_0303 / Km0303_39) * (1 + s_1334 / Km1334_39) + (1 + s_0049 / Km0049_39) * (1 + s_1333 / Km1333_39) - 1)) + (cell * Vmax_40 * (s_0305 * s_1334 - s_0050 * s_1333 / Keq_40) / (Km0305_40 * Km1334_40) / ((1 + s_0305 / Km0305_40) * (1 + s_1334 / Km1334_40) + (1 + s_0050 / Km0050_40) * (1 + s_1333 / Km1333_40) - 1)) + (cell * Vmax_41 * (s_0391 * s_1334 - s_0043 * s_1333 / Keq_41) / (Km0391_41 * Km1334_41) / ((1 + s_0391 / Km0391_41) * (1 + s_1334 / Km1334_41) + (1 + s_0043 / Km0043_41) * (1 + s_1333 / Km1333_41) - 1)) + (cell * Vmax_60 * (s_0336 * s_1334 - s_0354 * s_1333 / Keq_60) / (Km0336_60 * Km1334_60) / ((1 + s_0336 / Km0336_60) * (1 + s_1334 / Km1334_60) + (1 + s_0354 / Km0354_60) * (1 + s_1333 / Km1333_60) - 1)) + (cell * Vmax_155 * (s_0859 * s_1334 - s_0860 * s_1333 / Keq_155) / (Km0859_155 * Km1334_155) / ((1 + s_0859 / Km0859_155) * (1 + s_1334 / Km1334_155) + (1 + s_0860 / Km0860_155) * (1 + s_1333 / Km1333_155) - 1)) + (cell * Vmax_235 * (s_1018 * s_1258 * s_1334 - s_0454 * s_1017 * s_1260 * s_1333 / Keq_235) / (Km1018_235 * Km1258_235 * Km1334_235) / ((1 + s_1018 / Km1018_235) * (1 + s_1258 / Km1258_235) * (1 + s_1334 / Km1334_235) + (1 + s_0454 / Km0454_235) * (1 + s_1017 / Km1017_235) * (1 + s_1260 / Km1260_235) * (1 + s_1333 / Km1333_235) - 1)) + (cell * Vmax_244 * (s_0467 * s_0732 * s_0451 - s_0454 * s_1333 * s_0783 / Keq_244) / (Km0467_244 * Km0732_244 * Km0451_244) / ((1 + s_0467 / Km0467_244) * (1 + s_0732 / Km0732_244) * (1 + s_0451 / Km0451_244) + (1 + s_0454 / Km0454_244) * (1 + s_1333 / Km1333_244) * (1 + s_0783 / Km0783_244) - 1)) + (cell * Vmax_326 * (s_0214 * s_1334 - s_0029 * s_1333 / Keq_326) / (Km0214_326 * Km1334_326) / ((1 + s_0214 / Km0214_326) * (1 + s_1334 / Km1334_326) + (1 + s_0029 / Km0029_326) * (1 + s_1333 / Km1333_326) - 1)) + (cell * Vmax_383 * (s_1334 * s_1335 - s_1333 * s_1336 / Keq_383) / (Km1334_383 * Km1335_383) / ((1 + s_1334 / Km1334_383) * (1 + s_1335 / Km1335_383) + (1 + s_1333 / Km1333_383) * (1 + s_1336 / Km1336_383) - 1)) - (cell * Vmax_43 * (s_0265 * s_1333 - s_0267 * s_1334 / Keq_43) / (Km0265_43 * Km1333_43) / ((1 + s_0265 / Km0265_43) * (1 + s_1333 / Km1333_43) + (1 + s_0267 / Km0267_43) * (1 + s_1334 / Km1334_43) - 1)) - (cell * Vmax_56 * (s_0342 * s_1333 - s_0313 * pow(s_0867, 2) * s_1334 / Keq_56) / (Km0342_56 * Km1333_56) / ((1 + s_0342 / Km0342_56) * (1 + s_1333 / Km1333_56) + (1 + s_0313 / Km0313_56) * pow(1 + s_0867 / Km0867_56, 2) * (1 + s_1334 / Km1334_56) - 1)) - (cell * Vmax_66 * (s_0381 * s_0555 * s_1333 - s_0395 * s_1334 / Keq_66) / (Km0381_66 * Km0555_66 * Km1333_66) / ((1 + s_0381 / Km0381_66) * (1 + s_0555 / Km0555_66) * (1 + s_1333 / Km1333_66) + (1 + s_0395 / Km0395_66) * (1 + s_1334 / Km1334_66) - 1)) - (cell * Vmax_153 * (s_0331 * s_1333 - s_1334 * s_0231 / Keq_153) / (Km0331_153 * Km1333_153) / ((1 + s_0331 / Km0331_153) * (1 + s_1333 / Km1333_153) + (1 + s_1334 / Km1334_153) * (1 + s_0231 / Km0231_153) - 1)) - (cell * Vmax_154 * (s_0621 * s_1333 - s_0331 * s_1334 / Keq_154) / (Km0621_154 * Km1333_154) / ((1 + s_0621 / Km0621_154) * (1 + s_1333 / Km1333_154) + (1 + s_0331 / Km0331_154) * (1 + s_1334 / Km1334_154) - 1)) - (cell * Vmax_178 * (s_0913 * s_1333 * s_1430 - s_0307 * s_1334 / Keq_178) / (Km0913_178 * Km1333_178 * Km1430_178) / ((1 + s_0913 / Km0913_178) * (1 + s_1333 / Km1333_178) * (1 + s_1430 / Km1430_178) + (1 + s_0307 / Km0307_178) * (1 + s_1334 / Km1334_178) - 1)) - (cell * Vmax_185 * (s_0936 * s_1333 - s_0937 * s_1334 / Keq_185) / (Km0936_185 * Km1333_185) / ((1 + s_0936 / Km0936_185) * (1 + s_1333 / Km1333_185) + (1 + s_0937 / Km0937_185) * (1 + s_1334 / Km1334_185) - 1)) - (2.0 * cell * Vmax_196 * (s_1109 * pow(s_1333, 2) - s_1106 * pow(s_1334, 2) / Keq_196) / (Km1109_196 * pow(Km1333_196, 2)) / ((1 + s_1109 / Km1109_196) * pow(1 + s_1333 / Km1333_196, 2) + (1 + s_1106 / Km1106_196) * pow(1 + s_1334 / Km1334_196, 2) - 1)) - (cell * Vmax_207 * (s_1006 * s_1333 - s_1334 * s_1799 / Keq_207) / (Km1006_207 * Km1333_207) / ((1 + s_1006 / Km1006_207) * (1 + s_1333 / Km1333_207) + (1 + s_1334 / Km1334_207) * (1 + s_1799 / Km1799_207) - 1)) - (cell * Vmax_224 * (s_1333 * s_1179 - s_1040 * s_1334 / Keq_224) / (Km1333_224 * Km1179_224) / ((1 + s_1333 / Km1333_224) * (1 + s_1179 / Km1179_224) + (1 + s_1040 / Km1040_224) * (1 + s_1334 / Km1334_224) - 1)) - (cell * Vmax_227 * (s_1138 * s_1333 - s_1334 * s_1399 / Keq_227) / (Km1138_227 * Km1333_227) / ((1 + s_1138 / Km1138_227) * (1 + s_1333 / Km1333_227) + (1 + s_1334 / Km1334_227) * (1 + s_1399 / Km1399_227) - 1)) - (cell * Vmax_243 * (s_0467 * s_1333 - s_0421 * s_1335 / Keq_243) / (Km0467_243 * Km1333_243) / ((1 + s_0467 / Km0467_243) * (1 + s_1333 / Km1333_243) + (1 + s_0421 / Km0421_243) * (1 + s_1335 / Km1335_243) - 1)) - (cell * Vmax_272 * (s_0306 * s_1333 - s_0308 * s_1334 / Keq_272) / (Km0306_272 * Km1333_272) / ((1 + s_0306 / Km0306_272) * (1 + s_1333 / Km1333_272) + (1 + s_0308 / Km0308_272) * (1 + s_1334 / Km1334_272) - 1)) - (cell * Vmax_296 * (s_1333 * s_1497 - s_0262 * s_0543 * s_1334 / Keq_296) / (Km1333_296 * Km1497_296) / ((1 + s_1333 / Km1333_296) * (1 + s_1497 / Km1497_296) + (1 + s_0262 / Km0262_296) * (1 + s_0543 / Km0543_296) * (1 + s_1334 / Km1334_296) - 1)) - (cell * Vmax_299 * (s_0116 * s_1333 * s_1362 - s_0543 * s_1334 * s_1530 * s_1430 / Keq_299) / (Km0116_299 * Km1333_299 * Km1362_299) / ((1 + s_0116 / Km0116_299) * (1 + s_1333 / Km1333_299) * (1 + s_1362 / Km1362_299) + (1 + s_0543 / Km0543_299) * (1 + s_1334 / Km1334_299) * (1 + s_1530 / Km1530_299) * (1 + s_1430 / Km1430_299) - 1)) - (cell * Vmax_301 * (s_0555 * s_1333 * s_1531 - s_0395 * s_0543 * s_1334 / Keq_301) / (Km0555_301 * Km1333_301 * Km1531_301) / ((1 + s_0555 / Km0555_301) * (1 + s_1333 / Km1333_301) * (1 + s_1531 / Km1531_301) + (1 + s_0395 / Km0395_301) * (1 + s_0543 / Km0543_301) * (1 + s_1334 / Km1334_301) - 1)) - (cell * Vmax_319 * (s_0768 * s_1333 - s_1334 * s_1578 / Keq_319) / (Km0768_319 * Km1333_319) / ((1 + s_0768 / Km0768_319) * (1 + s_1333 / Km1333_319) + (1 + s_1334 / Km1334_319) * (1 + s_1578 / Km1578_319) - 1)) - (cell * Vmax_390 * (s_0229 * pow(s_0467, 2) * s_1333 - s_0226 * pow(s_0421, 2) * s_1334 * pow(s_1430, 2) / Keq_390) / (Km0229_390 * pow(Km0467_390, 2) * Km1333_390) / ((1 + s_0229 / Km0229_390) * pow(1 + s_0467 / Km0467_390, 2) * (1 + s_1333 / Km1333_390) + (1 + s_0226 / Km0226_390) * pow(1 + s_0421 / Km0421_390, 2) * (1 + s_1334 / Km1334_390) * pow(1 + s_1430 / Km1430_390, 2) - 1)) - (cell * Vmax_392 * (s_1333 * s_1530 - s_1334 * s_1522 / Keq_392) / (Km1333_392 * Km1530_392) / ((1 + s_1333 / Km1333_392) * (1 + s_1530 / Km1530_392) + (1 + s_1334 / Km1334_392) * (1 + s_1522 / Km1522_392) - 1)) - (0.001831 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1334) = (cell * Vmax_43 * (s_0265 * s_1333 - s_0267 * s_1334 / Keq_43) / (Km0265_43 * Km1333_43) / ((1 + s_0265 / Km0265_43) * (1 + s_1333 / Km1333_43) + (1 + s_0267 / Km0267_43) * (1 + s_1334 / Km1334_43) - 1)) + (cell * Vmax_56 * (s_0342 * s_1333 - s_0313 * pow(s_0867, 2) * s_1334 / Keq_56) / (Km0342_56 * Km1333_56) / ((1 + s_0342 / Km0342_56) * (1 + s_1333 / Km1333_56) + (1 + s_0313 / Km0313_56) * pow(1 + s_0867 / Km0867_56, 2) * (1 + s_1334 / Km1334_56) - 1)) + (cell * Vmax_66 * (s_0381 * s_0555 * s_1333 - s_0395 * s_1334 / Keq_66) / (Km0381_66 * Km0555_66 * Km1333_66) / ((1 + s_0381 / Km0381_66) * (1 + s_0555 / Km0555_66) * (1 + s_1333 / Km1333_66) + (1 + s_0395 / Km0395_66) * (1 + s_1334 / Km1334_66) - 1)) + (cell * Vmax_153 * (s_0331 * s_1333 - s_1334 * s_0231 / Keq_153) / (Km0331_153 * Km1333_153) / ((1 + s_0331 / Km0331_153) * (1 + s_1333 / Km1333_153) + (1 + s_1334 / Km1334_153) * (1 + s_0231 / Km0231_153) - 1)) + (cell * Vmax_154 * (s_0621 * s_1333 - s_0331 * s_1334 / Keq_154) / (Km0621_154 * Km1333_154) / ((1 + s_0621 / Km0621_154) * (1 + s_1333 / Km1333_154) + (1 + s_0331 / Km0331_154) * (1 + s_1334 / Km1334_154) - 1)) + (cell * Vmax_178 * (s_0913 * s_1333 * s_1430 - s_0307 * s_1334 / Keq_178) / (Km0913_178 * Km1333_178 * Km1430_178) / ((1 + s_0913 / Km0913_178) * (1 + s_1333 / Km1333_178) * (1 + s_1430 / Km1430_178) + (1 + s_0307 / Km0307_178) * (1 + s_1334 / Km1334_178) - 1)) + (cell * Vmax_185 * (s_0936 * s_1333 - s_0937 * s_1334 / Keq_185) / (Km0936_185 * Km1333_185) / ((1 + s_0936 / Km0936_185) * (1 + s_1333 / Km1333_185) + (1 + s_0937 / Km0937_185) * (1 + s_1334 / Km1334_185) - 1)) + (2.0 * cell * Vmax_196 * (s_1109 * pow(s_1333, 2) - s_1106 * pow(s_1334, 2) / Keq_196) / (Km1109_196 * pow(Km1333_196, 2)) / ((1 + s_1109 / Km1109_196) * pow(1 + s_1333 / Km1333_196, 2) + (1 + s_1106 / Km1106_196) * pow(1 + s_1334 / Km1334_196, 2) - 1)) + (cell * Vmax_207 * (s_1006 * s_1333 - s_1334 * s_1799 / Keq_207) / (Km1006_207 * Km1333_207) / ((1 + s_1006 / Km1006_207) * (1 + s_1333 / Km1333_207) + (1 + s_1334 / Km1334_207) * (1 + s_1799 / Km1799_207) - 1)) + (cell * Vmax_224 * (s_1333 * s_1179 - s_1040 * s_1334 / Keq_224) / (Km1333_224 * Km1179_224) / ((1 + s_1333 / Km1333_224) * (1 + s_1179 / Km1179_224) + (1 + s_1040 / Km1040_224) * (1 + s_1334 / Km1334_224) - 1)) + (cell * Vmax_227 * (s_1138 * s_1333 - s_1334 * s_1399 / Keq_227) / (Km1138_227 * Km1333_227) / ((1 + s_1138 / Km1138_227) * (1 + s_1333 / Km1333_227) + (1 + s_1334 / Km1334_227) * (1 + s_1399 / Km1399_227) - 1)) + (cell * Vmax_272 * (s_0306 * s_1333 - s_0308 * s_1334 / Keq_272) / (Km0306_272 * Km1333_272) / ((1 + s_0306 / Km0306_272) * (1 + s_1333 / Km1333_272) + (1 + s_0308 / Km0308_272) * (1 + s_1334 / Km1334_272) - 1)) + (cell * Vmax_296 * (s_1333 * s_1497 - s_0262 * s_0543 * s_1334 / Keq_296) / (Km1333_296 * Km1497_296) / ((1 + s_1333 / Km1333_296) * (1 + s_1497 / Km1497_296) + (1 + s_0262 / Km0262_296) * (1 + s_0543 / Km0543_296) * (1 + s_1334 / Km1334_296) - 1)) + (cell * Vmax_299 * (s_0116 * s_1333 * s_1362 - s_0543 * s_1334 * s_1530 * s_1430 / Keq_299) / (Km0116_299 * Km1333_299 * Km1362_299) / ((1 + s_0116 / Km0116_299) * (1 + s_1333 / Km1333_299) * (1 + s_1362 / Km1362_299) + (1 + s_0543 / Km0543_299) * (1 + s_1334 / Km1334_299) * (1 + s_1530 / Km1530_299) * (1 + s_1430 / Km1430_299) - 1)) + (cell * Vmax_301 * (s_0555 * s_1333 * s_1531 - s_0395 * s_0543 * s_1334 / Keq_301) / (Km0555_301 * Km1333_301 * Km1531_301) / ((1 + s_0555 / Km0555_301) * (1 + s_1333 / Km1333_301) * (1 + s_1531 / Km1531_301) + (1 + s_0395 / Km0395_301) * (1 + s_0543 / Km0543_301) * (1 + s_1334 / Km1334_301) - 1)) + (cell * Vmax_319 * (s_0768 * s_1333 - s_1334 * s_1578 / Keq_319) / (Km0768_319 * Km1333_319) / ((1 + s_0768 / Km0768_319) * (1 + s_1333 / Km1333_319) + (1 + s_1334 / Km1334_319) * (1 + s_1578 / Km1578_319) - 1)) + (cell * Vmax_390 * (s_0229 * pow(s_0467, 2) * s_1333 - s_0226 * pow(s_0421, 2) * s_1334 * pow(s_1430, 2) / Keq_390) / (Km0229_390 * pow(Km0467_390, 2) * Km1333_390) / ((1 + s_0229 / Km0229_390) * pow(1 + s_0467 / Km0467_390, 2) * (1 + s_1333 / Km1333_390) + (1 + s_0226 / Km0226_390) * pow(1 + s_0421 / Km0421_390, 2) * (1 + s_1334 / Km1334_390) * pow(1 + s_1430 / Km1430_390, 2) - 1)) + (cell * Vmax_392 * (s_1333 * s_1530 - s_1334 * s_1522 / Keq_392) / (Km1333_392 * Km1530_392) / ((1 + s_1333 / Km1333_392) * (1 + s_1530 / Km1530_392) + (1 + s_1334 / Km1334_392) * (1 + s_1522 / Km1522_392) - 1)) - (cell * Vmax_6 * (s_0123 * s_1334 - s_0779 * s_1333 / Keq_6) / (Km0123_6 * Km1334_6) / ((1 + s_0123 / Km0123_6) * (1 + s_1334 / Km1334_6) + (1 + s_0779 / Km0779_6) * (1 + s_1333 / Km1333_6) - 1)) - (cell * Vmax_7 * (s_0123 * s_1334 - s_1028 * s_1333 / Keq_7) / (Km0123_7 * Km1334_7) / ((1 + s_0123 / Km0123_7) * (1 + s_1334 / Km1334_7) + (1 + s_1028 / Km1028_7) * (1 + s_1333 / Km1333_7) - 1)) - (cell * Vmax_35 * (s_0293 * s_1334 - s_0044 * s_1333 / Keq_35) / (Km0293_35 * Km1334_35) / ((1 + s_0293 / Km0293_35) * (1 + s_1334 / Km1334_35) + (1 + s_0044 / Km0044_35) * (1 + s_1333 / Km1333_35) - 1)) - (cell * Vmax_36 * (s_0295 * s_1334 - s_0045 * s_1333 / Keq_36) / (Km0295_36 * Km1334_36) / ((1 + s_0295 / Km0295_36) * (1 + s_1334 / Km1334_36) + (1 + s_0045 / Km0045_36) * (1 + s_1333 / Km1333_36) - 1)) - (cell * Vmax_37 * (s_0297 * s_1334 - s_0046 * s_1333 / Keq_37) / (Km0297_37 * Km1334_37) / ((1 + s_0297 / Km0297_37) * (1 + s_1334 / Km1334_37) + (1 + s_0046 / Km0046_37) * (1 + s_1333 / Km1333_37) - 1)) - (cell * Vmax_38 * (s_0299 * s_1334 - s_0047 * s_1333 / Keq_38) / (Km0299_38 * Km1334_38) / ((1 + s_0299 / Km0299_38) * (1 + s_1334 / Km1334_38) + (1 + s_0047 / Km0047_38) * (1 + s_1333 / Km1333_38) - 1)) - (cell * Vmax_39 * (s_0303 * s_1334 - s_0049 * s_1333 / Keq_39) / (Km0303_39 * Km1334_39) / ((1 + s_0303 / Km0303_39) * (1 + s_1334 / Km1334_39) + (1 + s_0049 / Km0049_39) * (1 + s_1333 / Km1333_39) - 1)) - (cell * Vmax_40 * (s_0305 * s_1334 - s_0050 * s_1333 / Keq_40) / (Km0305_40 * Km1334_40) / ((1 + s_0305 / Km0305_40) * (1 + s_1334 / Km1334_40) + (1 + s_0050 / Km0050_40) * (1 + s_1333 / Km1333_40) - 1)) - (cell * Vmax_41 * (s_0391 * s_1334 - s_0043 * s_1333 / Keq_41) / (Km0391_41 * Km1334_41) / ((1 + s_0391 / Km0391_41) * (1 + s_1334 / Km1334_41) + (1 + s_0043 / Km0043_41) * (1 + s_1333 / Km1333_41) - 1)) - (cell * Vmax_60 * (s_0336 * s_1334 - s_0354 * s_1333 / Keq_60) / (Km0336_60 * Km1334_60) / ((1 + s_0336 / Km0336_60) * (1 + s_1334 / Km1334_60) + (1 + s_0354 / Km0354_60) * (1 + s_1333 / Km1333_60) - 1)) - (cell * Vmax_155 * (s_0859 * s_1334 - s_0860 * s_1333 / Keq_155) / (Km0859_155 * Km1334_155) / ((1 + s_0859 / Km0859_155) * (1 + s_1334 / Km1334_155) + (1 + s_0860 / Km0860_155) * (1 + s_1333 / Km1333_155) - 1)) - (cell * Vmax_235 * (s_1018 * s_1258 * s_1334 - s_0454 * s_1017 * s_1260 * s_1333 / Keq_235) / (Km1018_235 * Km1258_235 * Km1334_235) / ((1 + s_1018 / Km1018_235) * (1 + s_1258 / Km1258_235) * (1 + s_1334 / Km1334_235) + (1 + s_0454 / Km0454_235) * (1 + s_1017 / Km1017_235) * (1 + s_1260 / Km1260_235) * (1 + s_1333 / Km1333_235) - 1)) - (cell * Vmax_326 * (s_0214 * s_1334 - s_0029 * s_1333 / Keq_326) / (Km0214_326 * Km1334_326) / ((1 + s_0214 / Km0214_326) * (1 + s_1334 / Km1334_326) + (1 + s_0029 / Km0029_326) * (1 + s_1333 / Km1333_326) - 1)) - (cell * Vmax_383 * (s_1334 * s_1335 - s_1333 * s_1336 / Keq_383) / (Km1334_383 * Km1335_383) / ((1 + s_1334 / Km1334_383) * (1 + s_1335 / Km1335_383) + (1 + s_1333 / Km1333_383) * (1 + s_1336 / Km1336_383) - 1));
    der(s_1335) = (cell * Vmax_3 * (s_0116 * s_1336 - s_0194 * s_1335 / Keq_3) / (Km0116_3 * Km1336_3) / ((1 + s_0116 / Km0116_3) * (1 + s_1336 / Km1336_3) + (1 + s_0194 / Km0194_3) * (1 + s_1335 / Km1335_3) - 1)) + (cell * Vmax_12 * (s_0203 * s_1336 - s_1335 * s_0032 / Keq_12) / (Km0203_12 * Km1336_12) / ((1 + s_0203 / Km0203_12) * (1 + s_1336 / Km1336_12) + (1 + s_1335 / Km1335_12) * (1 + s_0032 / Km0032_12) - 1)) + (cell * Vmax_46 * (s_1336 * s_0289 - s_0276 * s_1335 / Keq_46) / (Km1336_46 * Km0289_46) / ((1 + s_1336 / Km1336_46) * (1 + s_0289 / Km0289_46) + (1 + s_0276 / Km0276_46) * (1 + s_1335 / Km1335_46) - 1)) + (cell * Vmax_49 * (s_1336 * s_0290 - s_0277 * s_1335 / Keq_49) / (Km1336_49 * Km0290_49) / ((1 + s_1336 / Km1336_49) * (1 + s_0290 / Km0290_49) + (1 + s_0277 / Km0277_49) * (1 + s_1335 / Km1335_49) - 1)) + (cell * Vmax_51 * (s_0304 * s_1336 - s_0028 * s_1335 / Keq_51) / (Km0304_51 * Km1336_51) / ((1 + s_0304 / Km0304_51) * (1 + s_1336 / Km1336_51) + (1 + s_0028 / Km0028_51) * (1 + s_1335 / Km1335_51) - 1)) + (cell * Vmax_61 * (s_0347 * s_1336 - s_0346 * s_1335 / Keq_61) / (Km0347_61 * Km1336_61) / ((1 + s_0347 / Km0347_61) * (1 + s_1336 / Km1336_61) + (1 + s_0346 / Km0346_61) * (1 + s_1335 / Km1335_61) - 1)) + (cell * Vmax_110 * (s_0332 * s_1336 - s_1075 * s_1335 * s_1430 / Keq_110) / (Km0332_110 * Km1336_110) / ((1 + s_0332 / Km0332_110) * (1 + s_1336 / Km1336_110) + (1 + s_1075 / Km1075_110) * (1 + s_1335 / Km1335_110) * (1 + s_1430 / Km1430_110) - 1)) + (cell * Vmax_136 * (s_0155 * s_1336 - s_1335 * s_0148 / Keq_136) / (Km0155_136 * Km1336_136) / ((1 + s_0155 / Km0155_136) * (1 + s_1336 / Km1336_136) + (1 + s_1335 / Km1335_136) * (1 + s_0148 / Km0148_136) - 1)) + (cell * Vmax_138 * (s_0372 * s_1336 - s_1335 * s_0337 / Keq_138) / (Km0372_138 * Km1336_138) / ((1 + s_0372 / Km0372_138) * (1 + s_1336 / Km1336_138) + (1 + s_1335 / Km1335_138) * (1 + s_0337 / Km0337_138) - 1)) + (cell * Vmax_151 * (s_0812 * s_1336 - s_0910 * s_1335 / Keq_151) / (Km0812_151 * Km1336_151) / ((1 + s_0812 / Km0812_151) * (1 + s_1336 / Km1336_151) + (1 + s_0910 / Km0910_151) * (1 + s_1335 / Km1335_151) - 1)) + (cell * Vmax_152 * (s_0813 * s_1336 - s_1335 * s_1492 / Keq_152) / (Km0813_152 * Km1336_152) / ((1 + s_0813 / Km0813_152) * (1 + s_1336 / Km1336_152) + (1 + s_1335 / Km1335_152) * (1 + s_1492 / Km1492_152) - 1)) + (cell * Vmax_169 * (s_0233 * s_1336 * s_0451 - s_1095 * s_1335 / Keq_169) / (Km0233_169 * Km1336_169 * Km0451_169) / ((1 + s_0233 / Km0233_169) * (1 + s_1336 / Km1336_169) * (1 + s_0451 / Km0451_169) + (1 + s_1095 / Km1095_169) * (1 + s_1335 / Km1335_169) - 1)) + (cell * Vmax_172 * (s_1099 * s_1336 - s_1100 * s_1335 * s_1430 / Keq_172) / (Km1099_172 * Km1336_172) / ((1 + s_1099 / Km1099_172) * (1 + s_1336 / Km1336_172) + (1 + s_1100 / Km1100_172) * (1 + s_1335 / Km1335_172) * (1 + s_1430 / Km1430_172) - 1)) + (cell * Vmax_176 * (s_1105 * s_1336 - s_1098 * s_1335 * s_1690 / Keq_176) / (Km1105_176 * Km1336_176) / ((1 + s_1105 / Km1105_176) * (1 + s_1336 / Km1336_176) + (1 + s_1098 / Km1098_176) * (1 + s_1335 / Km1335_176) * (1 + s_1690 / Km1690_176) - 1)) + (cell * Vmax_182 * (s_0772 * s_1336 - s_0920 * s_1335 / Keq_182) / (Km0772_182 * Km1336_182) / ((1 + s_0772 / Km0772_182) * (1 + s_1336 / Km1336_182) + (1 + s_0920 / Km0920_182) * (1 + s_1335 / Km1335_182) - 1)) + (cell * Vmax_199 * (s_1075 * s_1336 - s_1113 * s_1335 / Keq_199) / (Km1075_199 * Km1336_199) / ((1 + s_1075 / Km1075_199) * (1 + s_1336 / Km1336_199) + (1 + s_1113 / Km1113_199) * (1 + s_1335 / Km1335_199) - 1)) + (cell * Vmax_218 * (s_0042 * s_1336 - s_0017 * s_1335 / Keq_218) / (Km0042_218 * Km1336_218) / ((1 + s_0042 / Km0042_218) * (1 + s_1336 / Km1336_218) + (1 + s_0017 / Km0017_218) * (1 + s_1335 / Km1335_218) - 1)) + (cell * Vmax_219 * (s_0041 * s_1336 - s_0018 * s_1335 / Keq_219) / (Km0041_219 * Km1336_219) / ((1 + s_0041 / Km0041_219) * (1 + s_1336 / Km1336_219) + (1 + s_0018 / Km0018_219) * (1 + s_1335 / Km1335_219) - 1)) + (cell * Vmax_241 * (s_1304 * s_1336 - s_1303 * s_1335 * s_1430 / Keq_241) / (Km1304_241 * Km1336_241) / ((1 + s_1304 / Km1304_241) * (1 + s_1336 / Km1336_241) + (1 + s_1303 / Km1303_241) * (1 + s_1335 / Km1335_241) * (1 + s_1430 / Km1430_241) - 1)) + (cell * Vmax_243 * (s_0467 * s_1333 - s_0421 * s_1335 / Keq_243) / (Km0467_243 * Km1333_243) / ((1 + s_0467 / Km0467_243) * (1 + s_1333 / Km1333_243) + (1 + s_0421 / Km0421_243) * (1 + s_1335 / Km1335_243) - 1)) + (cell * Vmax_300 * (s_0128 * s_1336 - s_1335 * s_1155 / Keq_300) / (Km0128_300 * Km1336_300) / ((1 + s_0128 / Km0128_300) * (1 + s_1336 / Km1336_300) + (1 + s_1335 / Km1335_300) * (1 + s_1155 / Km1155_300) - 1)) + (cell * Vmax_317 * (s_0270 * s_1336 - s_1335 * s_1571 / Keq_317) / (Km0270_317 * Km1336_317) / ((1 + s_0270 / Km0270_317) * (1 + s_1336 / Km1336_317) + (1 + s_1335 / Km1335_317) * (1 + s_1571 / Km1571_317) - 1)) + (3.0 * cell * Vmax_325 * (pow(s_1336, 3) * s_1612 - s_0994 * pow(s_1335, 3) / Keq_325) / (pow(Km1336_325, 3) * Km1612_325) / (pow(1 + s_1336 / Km1336_325, 3) * (1 + s_1612 / Km1612_325) + (1 + s_0994 / Km0994_325) * pow(1 + s_1335 / Km1335_325, 3) - 1)) + (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) + (cell * Vmax_332 * (s_1336 * s_1406 - s_1335 * s_1544 / Keq_332) / (Km1336_332 * Km1406_332) / ((1 + s_1336 / Km1336_332) * (1 + s_1406 / Km1406_332) + (1 + s_1335 / Km1335_332) * (1 + s_1544 / Km1544_332) - 1)) + (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) + (cell * Vmax_346 * (s_1336 * s_1742 - s_1335 * s_1750 / Keq_346) / (Km1336_346 * Km1742_346) / ((1 + s_1336 / Km1336_346) * (1 + s_1742 / Km1742_346) + (1 + s_1335 / Km1335_346) * (1 + s_1750 / Km1750_346) - 1)) - (cell * Vmax_166 * (s_0663 * s_1335 - s_0370 * s_1336 / Keq_166) / (Km0663_166 * Km1335_166) / ((1 + s_0663 / Km0663_166) * (1 + s_1335 / Km1335_166) + (1 + s_0370 / Km0370_166) * (1 + s_1336 / Km1336_166) - 1)) - (cell * Vmax_216 * (s_1027 * s_1335 - s_0233 * s_0543 * s_1336 / Keq_216) / (Km1027_216 * Km1335_216) / ((1 + s_1027 / Km1027_216) * (1 + s_1335 / Km1335_216) + (1 + s_0233 / Km0233_216) * (1 + s_0543 / Km0543_216) * (1 + s_1336 / Km1336_216) - 1)) - (cell * Vmax_234 * (s_0336 * s_1335 - s_0335 * s_1336 / Keq_234) / (Km0336_234 * Km1335_234) / ((1 + s_0336 / Km0336_234) * (1 + s_1335 / Km1335_234) + (1 + s_0335 / Km0335_234) * (1 + s_1336 / Km1336_234) - 1)) - (cell * Vmax_383 * (s_1334 * s_1335 - s_1333 * s_1336 / Keq_383) / (Km1334_383 * Km1335_383) / ((1 + s_1334 / Km1334_383) * (1 + s_1335 / Km1335_383) + (1 + s_1333 / Km1333_383) * (1 + s_1336 / Km1336_383) - 1)) - (0.000447 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1336) = (cell * Vmax_166 * (s_0663 * s_1335 - s_0370 * s_1336 / Keq_166) / (Km0663_166 * Km1335_166) / ((1 + s_0663 / Km0663_166) * (1 + s_1335 / Km1335_166) + (1 + s_0370 / Km0370_166) * (1 + s_1336 / Km1336_166) - 1)) + (cell * Vmax_216 * (s_1027 * s_1335 - s_0233 * s_0543 * s_1336 / Keq_216) / (Km1027_216 * Km1335_216) / ((1 + s_1027 / Km1027_216) * (1 + s_1335 / Km1335_216) + (1 + s_0233 / Km0233_216) * (1 + s_0543 / Km0543_216) * (1 + s_1336 / Km1336_216) - 1)) + (cell * Vmax_234 * (s_0336 * s_1335 - s_0335 * s_1336 / Keq_234) / (Km0336_234 * Km1335_234) / ((1 + s_0336 / Km0336_234) * (1 + s_1335 / Km1335_234) + (1 + s_0335 / Km0335_234) * (1 + s_1336 / Km1336_234) - 1)) + (cell * Vmax_383 * (s_1334 * s_1335 - s_1333 * s_1336 / Keq_383) / (Km1334_383 * Km1335_383) / ((1 + s_1334 / Km1334_383) * (1 + s_1335 / Km1335_383) + (1 + s_1333 / Km1333_383) * (1 + s_1336 / Km1336_383) - 1)) - (cell * Vmax_3 * (s_0116 * s_1336 - s_0194 * s_1335 / Keq_3) / (Km0116_3 * Km1336_3) / ((1 + s_0116 / Km0116_3) * (1 + s_1336 / Km1336_3) + (1 + s_0194 / Km0194_3) * (1 + s_1335 / Km1335_3) - 1)) - (cell * Vmax_12 * (s_0203 * s_1336 - s_1335 * s_0032 / Keq_12) / (Km0203_12 * Km1336_12) / ((1 + s_0203 / Km0203_12) * (1 + s_1336 / Km1336_12) + (1 + s_1335 / Km1335_12) * (1 + s_0032 / Km0032_12) - 1)) - (cell * Vmax_46 * (s_1336 * s_0289 - s_0276 * s_1335 / Keq_46) / (Km1336_46 * Km0289_46) / ((1 + s_1336 / Km1336_46) * (1 + s_0289 / Km0289_46) + (1 + s_0276 / Km0276_46) * (1 + s_1335 / Km1335_46) - 1)) - (cell * Vmax_49 * (s_1336 * s_0290 - s_0277 * s_1335 / Keq_49) / (Km1336_49 * Km0290_49) / ((1 + s_1336 / Km1336_49) * (1 + s_0290 / Km0290_49) + (1 + s_0277 / Km0277_49) * (1 + s_1335 / Km1335_49) - 1)) - (cell * Vmax_51 * (s_0304 * s_1336 - s_0028 * s_1335 / Keq_51) / (Km0304_51 * Km1336_51) / ((1 + s_0304 / Km0304_51) * (1 + s_1336 / Km1336_51) + (1 + s_0028 / Km0028_51) * (1 + s_1335 / Km1335_51) - 1)) - (cell * Vmax_61 * (s_0347 * s_1336 - s_0346 * s_1335 / Keq_61) / (Km0347_61 * Km1336_61) / ((1 + s_0347 / Km0347_61) * (1 + s_1336 / Km1336_61) + (1 + s_0346 / Km0346_61) * (1 + s_1335 / Km1335_61) - 1)) - (cell * Vmax_110 * (s_0332 * s_1336 - s_1075 * s_1335 * s_1430 / Keq_110) / (Km0332_110 * Km1336_110) / ((1 + s_0332 / Km0332_110) * (1 + s_1336 / Km1336_110) + (1 + s_1075 / Km1075_110) * (1 + s_1335 / Km1335_110) * (1 + s_1430 / Km1430_110) - 1)) - (cell * Vmax_136 * (s_0155 * s_1336 - s_1335 * s_0148 / Keq_136) / (Km0155_136 * Km1336_136) / ((1 + s_0155 / Km0155_136) * (1 + s_1336 / Km1336_136) + (1 + s_1335 / Km1335_136) * (1 + s_0148 / Km0148_136) - 1)) - (cell * Vmax_138 * (s_0372 * s_1336 - s_1335 * s_0337 / Keq_138) / (Km0372_138 * Km1336_138) / ((1 + s_0372 / Km0372_138) * (1 + s_1336 / Km1336_138) + (1 + s_1335 / Km1335_138) * (1 + s_0337 / Km0337_138) - 1)) - (cell * Vmax_151 * (s_0812 * s_1336 - s_0910 * s_1335 / Keq_151) / (Km0812_151 * Km1336_151) / ((1 + s_0812 / Km0812_151) * (1 + s_1336 / Km1336_151) + (1 + s_0910 / Km0910_151) * (1 + s_1335 / Km1335_151) - 1)) - (cell * Vmax_152 * (s_0813 * s_1336 - s_1335 * s_1492 / Keq_152) / (Km0813_152 * Km1336_152) / ((1 + s_0813 / Km0813_152) * (1 + s_1336 / Km1336_152) + (1 + s_1335 / Km1335_152) * (1 + s_1492 / Km1492_152) - 1)) - (cell * Vmax_169 * (s_0233 * s_1336 * s_0451 - s_1095 * s_1335 / Keq_169) / (Km0233_169 * Km1336_169 * Km0451_169) / ((1 + s_0233 / Km0233_169) * (1 + s_1336 / Km1336_169) * (1 + s_0451 / Km0451_169) + (1 + s_1095 / Km1095_169) * (1 + s_1335 / Km1335_169) - 1)) - (cell * Vmax_172 * (s_1099 * s_1336 - s_1100 * s_1335 * s_1430 / Keq_172) / (Km1099_172 * Km1336_172) / ((1 + s_1099 / Km1099_172) * (1 + s_1336 / Km1336_172) + (1 + s_1100 / Km1100_172) * (1 + s_1335 / Km1335_172) * (1 + s_1430 / Km1430_172) - 1)) - (cell * Vmax_176 * (s_1105 * s_1336 - s_1098 * s_1335 * s_1690 / Keq_176) / (Km1105_176 * Km1336_176) / ((1 + s_1105 / Km1105_176) * (1 + s_1336 / Km1336_176) + (1 + s_1098 / Km1098_176) * (1 + s_1335 / Km1335_176) * (1 + s_1690 / Km1690_176) - 1)) - (cell * Vmax_182 * (s_0772 * s_1336 - s_0920 * s_1335 / Keq_182) / (Km0772_182 * Km1336_182) / ((1 + s_0772 / Km0772_182) * (1 + s_1336 / Km1336_182) + (1 + s_0920 / Km0920_182) * (1 + s_1335 / Km1335_182) - 1)) - (cell * Vmax_199 * (s_1075 * s_1336 - s_1113 * s_1335 / Keq_199) / (Km1075_199 * Km1336_199) / ((1 + s_1075 / Km1075_199) * (1 + s_1336 / Km1336_199) + (1 + s_1113 / Km1113_199) * (1 + s_1335 / Km1335_199) - 1)) - (cell * Vmax_218 * (s_0042 * s_1336 - s_0017 * s_1335 / Keq_218) / (Km0042_218 * Km1336_218) / ((1 + s_0042 / Km0042_218) * (1 + s_1336 / Km1336_218) + (1 + s_0017 / Km0017_218) * (1 + s_1335 / Km1335_218) - 1)) - (cell * Vmax_219 * (s_0041 * s_1336 - s_0018 * s_1335 / Keq_219) / (Km0041_219 * Km1336_219) / ((1 + s_0041 / Km0041_219) * (1 + s_1336 / Km1336_219) + (1 + s_0018 / Km0018_219) * (1 + s_1335 / Km1335_219) - 1)) - (cell * Vmax_241 * (s_1304 * s_1336 - s_1303 * s_1335 * s_1430 / Keq_241) / (Km1304_241 * Km1336_241) / ((1 + s_1304 / Km1304_241) * (1 + s_1336 / Km1336_241) + (1 + s_1303 / Km1303_241) * (1 + s_1335 / Km1335_241) * (1 + s_1430 / Km1430_241) - 1)) - (cell * Vmax_300 * (s_0128 * s_1336 - s_1335 * s_1155 / Keq_300) / (Km0128_300 * Km1336_300) / ((1 + s_0128 / Km0128_300) * (1 + s_1336 / Km1336_300) + (1 + s_1335 / Km1335_300) * (1 + s_1155 / Km1155_300) - 1)) - (cell * Vmax_317 * (s_0270 * s_1336 - s_1335 * s_1571 / Keq_317) / (Km0270_317 * Km1336_317) / ((1 + s_0270 / Km0270_317) * (1 + s_1336 / Km1336_317) + (1 + s_1335 / Km1335_317) * (1 + s_1571 / Km1571_317) - 1)) - (3.0 * cell * Vmax_325 * (pow(s_1336, 3) * s_1612 - s_0994 * pow(s_1335, 3) / Keq_325) / (pow(Km1336_325, 3) * Km1612_325) / (pow(1 + s_1336 / Km1336_325, 3) * (1 + s_1612 / Km1612_325) + (1 + s_0994 / Km0994_325) * pow(1 + s_1335 / Km1335_325, 3) - 1)) - (cell * Vmax_331 * (s_0467 * s_0738 * s_0116 * s_1018 * s_1336 - s_0330 * s_0454 * s_0543 * s_1017 * s_1335 * s_0783 / Keq_331) / (Km0467_331 * Km0738_331 * Km0116_331 * Km1018_331 * Km1336_331) / ((1 + s_0467 / Km0467_331) * (1 + s_0738 / Km0738_331) * (1 + s_0116 / Km0116_331) * (1 + s_1018 / Km1018_331) * (1 + s_1336 / Km1336_331) + (1 + s_0330 / Km0330_331) * (1 + s_0454 / Km0454_331) * (1 + s_0543 / Km0543_331) * (1 + s_1017 / Km1017_331) * (1 + s_1335 / Km1335_331) * (1 + s_0783 / Km0783_331) - 1)) - (cell * Vmax_332 * (s_1336 * s_1406 - s_1335 * s_1544 / Keq_332) / (Km1336_332 * Km1406_332) / ((1 + s_1336 / Km1336_332) * (1 + s_1406 / Km1406_332) + (1 + s_1335 / Km1335_332) * (1 + s_1544 / Km1544_332) - 1)) - (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) - (cell * Vmax_346 * (s_1336 * s_1742 - s_1335 * s_1750 / Keq_346) / (Km1336_346 * Km1742_346) / ((1 + s_1336 / Km1336_346) * (1 + s_1742 / Km1742_346) + (1 + s_1335 / Km1335_346) * (1 + s_1750 / Km1750_346) - 1));
    der(s_1340) = (cell * Vmax_246 * (s_0360 * s_1537 - s_0543 * s_1340 * s_0783 / Keq_246) / (Km0360_246 * Km1537_246) / ((1 + s_0360 / Km0360_246) * (1 + s_1537 / Km1537_246) + (1 + s_0543 / Km0543_246) * (1 + s_1340 / Km1340_246) * (1 + s_0783 / Km0783_246) - 1)) - (cell * Vmax_245 * (s_0467 * s_1340 - s_0732 * s_0783 / Keq_245) / (Km0467_245 * Km1340_245) / ((1 + s_0467 / Km0467_245) * (1 + s_1340 / Km1340_245) + (1 + s_0732 / Km0732_245) * (1 + s_0783 / Km0783_245) - 1));
    der(s_1358) = (cell * Vmax_316 * (s_0395 * s_1170 - s_1358 * s_0555 / Keq_316) / (Km0395_316 * Km1170_316) / ((1 + s_0395 / Km0395_316) * (1 + s_1170 / Km1170_316) + (1 + s_1358 / Km1358_316) * (1 + s_0555 / Km0555_316) - 1)) - (cell * Vmax_127 * (s_1358 * s_0994 - s_0384 * s_1083 / Keq_127) / (Km1358_127 * Km0994_127) / ((1 + s_1358 / Km1358_127) * (1 + s_0994 / Km0994_127) + (1 + s_0384 / Km0384_127) * (1 + s_1083 / Km1083_127) - 1));
    der(s_1362) = (cell * Vmax_252 * (s_1095 * s_0231 - s_0233 * s_1362 / Keq_252) / (Km1095_252 * Km0231_252) / ((1 + s_1095 / Km1095_252) * (1 + s_0231 / Km0231_252) + (1 + s_0233 / Km0233_252) * (1 + s_1362 / Km1362_252) - 1)) - (cell * Vmax_299 * (s_0116 * s_1333 * s_1362 - s_0543 * s_1334 * s_1530 * s_1430 / Keq_299) / (Km0116_299 * Km1333_299 * Km1362_299) / ((1 + s_0116 / Km0116_299) * (1 + s_1333 / Km1333_299) * (1 + s_1362 / Km1362_299) + (1 + s_0543 / Km0543_299) * (1 + s_1334 / Km1334_299) * (1 + s_1530 / Km1530_299) * (1 + s_1430 / Km1430_299) - 1));
    der(s_1363) = (cell * Vmax_200 * (s_0467 * s_1113 - s_0421 * s_1363 / Keq_200) / (Km0467_200 * Km1113_200) / ((1 + s_0467 / Km0467_200) * (1 + s_1113 / Km1113_200) + (1 + s_0421 / Km0421_200) * (1 + s_1363 / Km1363_200) - 1)) - (cell * Vmax_334 * (s_1363 - s_1430 * s_1179 / Keq_334) / Km1363_334 / (1 + s_1363 / Km1363_334 + (1 + s_1430 / Km1430_334) * (1 + s_1179 / Km1179_334) - 1));
    der(s_1364) = (cell * Vmax_290 * (s_0308 * s_1095 - s_0233 * s_1364 / Keq_290) / (Km0308_290 * Km1095_290) / ((1 + s_0308 / Km0308_290) * (1 + s_1095 / Km1095_290) + (1 + s_0233 / Km0233_290) * (1 + s_1364 / Km1364_290) - 1)) - (cell * Vmax_267 * (s_1364 - s_1430 * s_1170 / Keq_267) / Km1364_267 / (1 + s_1364 / Km1364_267 + (1 + s_1430 / Km1430_267) * (1 + s_1170 / Km1170_267) - 1));
    der(s_1367) = (cell * Vmax_201 * (s_1113 * s_1599 - s_0555 * s_1367 / Keq_201) / (Km1113_201 * Km1599_201) / ((1 + s_1113 / Km1113_201) * (1 + s_1599 / Km1599_201) + (1 + s_0555 / Km0555_201) * (1 + s_1367 / Km1367_201) - 1)) - (cell * Vmax_253 * (s_1083 * s_1367 - s_1082 * s_1595 / Keq_253) / (Km1083_253 * Km1367_253) / ((1 + s_1083 / Km1083_253) * (1 + s_1367 / Km1367_253) + (1 + s_1082 / Km1082_253) * (1 + s_1595 / Km1595_253) - 1));
    der(s_1372) = (cell * Vmax_228 * (s_0991 * s_1399 - s_1138 * s_1372 / Keq_228) / (Km0991_228 * Km1399_228) / ((1 + s_0991 / Km0991_228) * (1 + s_1399 / Km1399_228) + (1 + s_1138 / Km1138_228) * (1 + s_1372 / Km1372_228) - 1)) + (cell * Vmax_385 * (s_1374 - s_1372) / Km1374_385 / (1 + s_1374 / Km1374_385 + 1 + s_1372 / Km1372_385 - 1)) - (cell * Vmax_123 * (s_0565 * s_1372 - pow(s_0543, 2) * s_1512 / Keq_123) / (Km0565_123 * Km1372_123) / ((1 + s_0565 / Km0565_123) * (1 + s_1372 / Km1372_123) + pow(1 + s_0543 / Km0543_123, 2) * (1 + s_1512 / Km1512_123) - 1)) - (cell * Vmax_221 * (s_1072 * s_1372 - s_0991 * s_1005 / Keq_221) / (Km1072_221 * Km1372_221) / ((1 + s_1072 / Km1072_221) * (1 + s_1372 / Km1372_221) + (1 + s_0991 / Km0991_221) * (1 + s_1005 / Km1005_221) - 1)) - (1.5 * cell * Vmax_297 * (s_1372 * s_1512 - s_1511 / Keq_297) / (Km1372_297 * Km1512_297) / ((1 + s_1372 / Km1372_297) * (1 + s_1512 / Km1512_297) + 1 + s_1511 / Km1511_297 - 1)) - (0.5 * cell * Vmax_371 * (s_1239 * s_1372 - s_1240 / Keq_371) / (Km1239_371 * Km1372_371) / ((1 + s_1239 / Km1239_371) * (1 + s_1372 / Km1372_371) + 1 + s_1240 / Km1240_371 - 1)) - (0.5 * cell * Vmax_372 * (s_1372 * s_1731 - s_1732 / Keq_372) / (Km1372_372 * Km1731_372) / ((1 + s_1372 / Km1372_372) * (1 + s_1731 / Km1731_372) + 1 + s_1732 / Km1732_372 - 1));
    der(s_1374) = 0.0;
    der(s_1390) = (cell * Vmax_90 * (s_0860 * s_1676 - s_0859 * s_1390 / Keq_90) / (Km0860_90 * Km1676_90) / ((1 + s_0860 / Km0860_90) * (1 + s_1676 / Km1676_90) + (1 + s_0859 / Km0859_90) * (1 + s_1390 / Km1390_90) - 1)) - (cell * Vmax_74 * (s_0395 * s_1390 - s_0293 * s_0555 / Keq_74) / (Km0395_74 * Km1390_74) / ((1 + s_0395 / Km0395_74) * (1 + s_1390 / Km1390_74) + (1 + s_0293 / Km0293_74) * (1 + s_0555 / Km0555_74) - 1));
    der(s_1391) = (cell * Vmax_78 * (s_1321 - s_0384 * s_1391 / Keq_78) / Km1321_78 / (1 + s_1321 / Km1321_78 + (1 + s_0384 / Km0384_78) * (1 + s_1391 / Km1391_78) - 1)) - (cell * Vmax_256 * (s_0502 * s_1391 - s_1081 * s_1430 / Keq_256) / (Km0502_256 * Km1391_256) / ((1 + s_0502 / Km0502_256) * (1 + s_1391 / Km1391_256) + (1 + s_1081 / Km1081_256) * (1 + s_1430 / Km1430_256) - 1));
    der(s_1394) = (cell * Vmax_135 * (s_0052 * s_1732 - s_1394 * s_1731 / Keq_135) / (Km0052_135 * Km1732_135) / ((1 + s_0052 / Km0052_135) * (1 + s_1732 / Km1732_135) + (1 + s_1394 / Km1394_135) * (1 + s_1731 / Km1731_135) - 1)) + (cell * Vmax_143 * (s_0052 * s_1240 - s_1239 * s_1394 / Keq_143) / (Km0052_143 * Km1240_143) / ((1 + s_0052 / Km0052_143) * (1 + s_1240 / Km1240_143) + (1 + s_1239 / Km1239_143) * (1 + s_1394 / Km1394_143) - 1)) - (cell * Vmax_257 * (s_1394 * s_0360 - s_1397 * s_0783 / Keq_257) / (Km1394_257 * Km0360_257) / ((1 + s_1394 / Km1394_257) * (1 + s_0360 / Km0360_257) + (1 + s_1397 / Km1397_257) * (1 + s_0783 / Km0783_257) - 1));
    der(s_1397) = (cell * Vmax_257 * (s_1394 * s_0360 - s_1397 * s_0783 / Keq_257) / (Km1394_257 * Km0360_257) / ((1 + s_1394 / Km1394_257) * (1 + s_0360 / Km0360_257) + (1 + s_1397 / Km1397_257) * (1 + s_0783 / Km0783_257) - 1)) - (cell * Vmax_258 * (s_1397 - s_0543 * s_1762 / Keq_258) / Km1397_258 / (1 + s_1397 / Km1397_258 + (1 + s_0543 / Km0543_258) * (1 + s_1762 / Km1762_258) - 1));
    der(s_1399) = (cell * Vmax_227 * (s_1138 * s_1333 - s_1334 * s_1399 / Keq_227) / (Km1138_227 * Km1333_227) / ((1 + s_1138 / Km1138_227) * (1 + s_1333 / Km1333_227) + (1 + s_1334 / Km1334_227) * (1 + s_1399 / Km1399_227) - 1)) + (cell * Vmax_270 * (s_0543 * s_1484 - s_1399 * s_1430 / Keq_270) / (Km0543_270 * Km1484_270) / ((1 + s_0543 / Km0543_270) * (1 + s_1484 / Km1484_270) + (1 + s_1399 / Km1399_270) * (1 + s_1430 / Km1430_270) - 1)) - (cell * Vmax_109 * (s_1095 * s_1399 - s_0233 * s_1072 / Keq_109) / (Km1095_109 * Km1399_109) / ((1 + s_1095 / Km1095_109) * (1 + s_1399 / Km1399_109) + (1 + s_0233 / Km0233_109) * (1 + s_1072 / Km1072_109) - 1)) - (cell * Vmax_122 * (s_0395 * s_1399 - s_0536 * s_0555 / Keq_122) / (Km0395_122 * Km1399_122) / ((1 + s_0395 / Km0395_122) * (1 + s_1399 / Km1399_122) + (1 + s_0536 / Km0536_122) * (1 + s_0555 / Km0555_122) - 1)) - (cell * Vmax_228 * (s_0991 * s_1399 - s_1138 * s_1372 / Keq_228) / (Km0991_228 * Km1399_228) / ((1 + s_0991 / Km0991_228) * (1 + s_1399 / Km1399_228) + (1 + s_1138 / Km1138_228) * (1 + s_1372 / Km1372_228) - 1));
    der(s_1406) = (cell * Vmax_269 * (s_0252 * s_1544 - s_0411 * s_1612 * s_1406 / Keq_269) / (Km0252_269 * Km1544_269) / ((1 + s_0252 / Km0252_269) * (1 + s_1544 / Km1544_269) + (1 + s_0411 / Km0411_269) * (1 + s_1612 / Km1612_269) * (1 + s_1406 / Km1406_269) - 1)) - (cell * Vmax_332 * (s_1336 * s_1406 - s_1335 * s_1544 / Keq_332) / (Km1336_332 * Km1406_332) / ((1 + s_1336 / Km1336_332) * (1 + s_1406 / Km1406_332) + (1 + s_1335 / Km1335_332) * (1 + s_1544 / Km1544_332) - 1));
    der(s_1407) = (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) - (cell * Vmax_396 * s_1407 / Km1407_396 / (1 + s_1407 / Km1407_396));
    der(s_1411) = (cell * Vmax_83 * (s_0397 * s_0467 * s_0971 - s_0454 * s_1411 * s_0783 / Keq_83) / (Km0397_83 * Km0467_83 * Km0971_83) / ((1 + s_0397 / Km0397_83) * (1 + s_0467 / Km0467_83) * (1 + s_0971 / Km0971_83) + (1 + s_0454 / Km0454_83) * (1 + s_1411 / Km1411_83) * (1 + s_0783 / Km0783_83) - 1)) - (cell * Vmax_5 * (s_0121 * s_1411 - s_0397 * s_0075 / Keq_5) / (Km0121_5 * Km1411_5) / ((1 + s_0121 / Km0121_5) * (1 + s_1411 / Km1411_5) + (1 + s_0397 / Km0397_5) * (1 + s_0075 / Km0075_5) - 1)) - (cell * Vmax_180 * (s_0920 * s_1411 - s_0121 * s_0397 / Keq_180) / (Km0920_180 * Km1411_180) / ((1 + s_0920 / Km0920_180) * (1 + s_1411 / Km1411_180) + (1 + s_0121 / Km0121_180) * (1 + s_0397 / Km0397_180) - 1));
    der(s_1412) = (cell * Vmax_88 * (s_0860 * s_1674 - s_0859 * s_1412 / Keq_88) / (Km0860_88 * Km1674_88) / ((1 + s_0860 / Km0860_88) * (1 + s_1674 / Km1674_88) + (1 + s_0859 / Km0859_88) * (1 + s_1412 / Km1412_88) - 1)) - (cell * Vmax_157 * (s_1412 - s_0555 * s_0971 / Keq_157) / Km1412_157 / (1 + s_1412 / Km1412_157 + (1 + s_0555 / Km0555_157) * (1 + s_0971 / Km0971_157) - 1));
    der(s_1413) = (cell * Vmax_277 * (s_1277 - s_0543 * s_1413 / Keq_277) / Km1277_277 / (1 + s_1277 / Km1277_277 + (1 + s_0543 / Km0543_277) * (1 + s_1413 / Km1413_277) - 1)) - (cell * Vmax_259 * (s_0467 * s_1413 - s_0754 * s_0783 / Keq_259) / (Km0467_259 * Km1413_259) / ((1 + s_0467 / Km0467_259) * (1 + s_1413 / Km1413_259) + (1 + s_0754 / Km0754_259) * (1 + s_0783 / Km0783_259) - 1));
    der(s_1429) = (cell * Vmax_295 * (s_1497 - s_0543 * s_1429 / Keq_295) / Km1497_295 / (1 + s_1497 / Km1497_295 + (1 + s_0543 / Km0543_295) * (1 + s_1429 / Km1429_295) - 1)) - (cell * Vmax_262 * (s_1095 * s_1429 - s_0233 * s_1151 / Keq_262) / (Km1095_262 * Km1429_262) / ((1 + s_1095 / Km1095_262) * (1 + s_1429 / Km1429_262) + (1 + s_0233 / Km0233_262) * (1 + s_1151 / Km1151_262) - 1));
    der(s_1430) = (cell * Vmax_17 * (s_0411 - s_0454 * s_1430 / Keq_17) / Km0411_17 / (1 + s_0411 / Km0411_17 + (1 + s_0454 / Km0454_17) * (1 + s_1430 / Km1430_17) - 1)) + (cell * Vmax_21 * (s_0195 - s_0269 * s_1430 / Keq_21) / Km0195_21 / (1 + s_0195 / Km0195_21 + (1 + s_0269 / Km0269_21) * (1 + s_1430 / Km1430_21) - 1)) + (cell * Vmax_22 * (s_0611 * s_1484 - s_0272 * s_1430 / Keq_22) / (Km0611_22 * Km1484_22) / ((1 + s_0611 / Km0611_22) * (1 + s_1484 / Km1484_22) + (1 + s_0272 / Km0272_22) * (1 + s_1430 / Km1430_22) - 1)) + (cell * Vmax_23 * (s_0621 * s_1484 - s_0195 * s_1430 / Keq_23) / (Km0621_23 * Km1484_23) / ((1 + s_0621 / Km0621_23) * (1 + s_1484 / Km1484_23) + (1 + s_0195 / Km0195_23) * (1 + s_1430 / Km1430_23) - 1)) + (cell * Vmax_27 * (s_0272 - s_0271 * s_1430 / Keq_27) / Km0272_27 / (1 + s_0272 / Km0272_27 + (1 + s_0271 / Km0271_27) * (1 + s_1430 / Km1430_27) - 1)) + (cell * Vmax_53 * (s_1484 * s_1574 - s_0359 * s_1430 / Keq_53) / (Km1484_53 * Km1574_53) / ((1 + s_1484 / Km1484_53) * (1 + s_1574 / Km1574_53) + (1 + s_0359 / Km0359_53) * (1 + s_1430 / Km1430_53) - 1)) + (cell * Vmax_76 * (s_0395 * s_0467 * s_0474 - s_0421 * s_1217 * s_1430 / Keq_76) / (Km0395_76 * Km0467_76 * Km0474_76) / ((1 + s_0395 / Km0395_76) * (1 + s_0467 / Km0467_76) * (1 + s_0474 / Km0474_76) + (1 + s_0421 / Km0421_76) * (1 + s_1217 / Km1217_76) * (1 + s_1430 / Km1430_76) - 1)) + (cell * Vmax_96 * (s_1072 * s_0945 * s_1006 - s_1327 * s_0896 * s_1430 / Keq_96) / (Km1072_96 * Km0945_96 * Km1006_96) / ((1 + s_1072 / Km1072_96) * (1 + s_0945 / Km0945_96) * (1 + s_1006 / Km1006_96) + (1 + s_1327 / Km1327_96) * (1 + s_0896 / Km0896_96) * (1 + s_1430 / Km1430_96) - 1)) + (cell * Vmax_107 * (s_1072 * s_0502 - s_1312 * s_1430 / Keq_107) / (Km1072_107 * Km0502_107) / ((1 + s_1072 / Km1072_107) * (1 + s_0502 / Km0502_107) + (1 + s_1312 / Km1312_107) * (1 + s_1430 / Km1430_107) - 1)) + (cell * Vmax_110 * (s_0332 * s_1336 - s_1075 * s_1335 * s_1430 / Keq_110) / (Km0332_110 * Km1336_110) / ((1 + s_0332 / Km0332_110) * (1 + s_1336 / Km1336_110) + (1 + s_1075 / Km1075_110) * (1 + s_1335 / Km1335_110) * (1 + s_1430 / Km1430_110) - 1)) + (cell * Vmax_121 * (s_0359 - s_0526 * s_1430 / Keq_121) / Km0359_121 / (1 + s_0359 / Km0359_121 + (1 + s_0526 / Km0526_121) * (1 + s_1430 / Km1430_121) - 1)) + (cell * Vmax_124 * (s_0467 * s_1101 * s_1792 - s_0421 * s_0575 * s_1095 * s_1430 / Keq_124) / (Km0467_124 * Km1101_124 * Km1792_124) / ((1 + s_0467 / Km0467_124) * (1 + s_1101 / Km1101_124) * (1 + s_1792 / Km1792_124) + (1 + s_0421 / Km0421_124) * (1 + s_0575 / Km0575_124) * (1 + s_1095 / Km1095_124) * (1 + s_1430 / Km1430_124) - 1)) + (cell * Vmax_129 * (pow(s_0600, 2) * s_0467 - s_0421 * s_0603 * s_1430 / Keq_129) / (pow(Km0600_129, 2) * Km0467_129) / (pow(1 + s_0600 / Km0600_129, 2) * (1 + s_0467 / Km0467_129) + (1 + s_0421 / Km0421_129) * (1 + s_0603 / Km0603_129) * (1 + s_1430 / Km1430_129) - 1)) + (cell * Vmax_131 * (s_0467 * s_0543 * s_0371 - s_0421 * s_0755 * s_1430 / Keq_131) / (Km0467_131 * Km0543_131 * Km0371_131) / ((1 + s_0467 / Km0467_131) * (1 + s_0543 / Km0543_131) * (1 + s_0371 / Km0371_131) + (1 + s_0421 / Km0421_131) * (1 + s_0755 / Km0755_131) * (1 + s_1430 / Km1430_131) - 1)) + (cell * Vmax_139 * (s_0467 * s_0767 * s_1095 - s_0421 * s_0372 * s_1430 / Keq_139) / (Km0467_139 * Km0767_139 * Km1095_139) / ((1 + s_0467 / Km0467_139) * (1 + s_0767 / Km0767_139) * (1 + s_1095 / Km1095_139) + (1 + s_0421 / Km0421_139) * (1 + s_0372 / Km0372_139) * (1 + s_1430 / Km1430_139) - 1)) + (cell * Vmax_161 * (s_0467 * s_0867 * s_0337 - s_0133 * s_0421 * s_1430 / Keq_161) / (Km0467_161 * Km0867_161 * Km0337_161) / ((1 + s_0467 / Km0467_161) * (1 + s_0867 / Km0867_161) * (1 + s_0337 / Km0337_161) + (1 + s_0133 / Km0133_161) * (1 + s_0421 / Km0421_161) * (1 + s_1430 / Km1430_161) - 1)) + (cell * Vmax_163 * (s_0467 * s_0867 * s_1318 - s_0421 * s_1322 * s_1430 / Keq_163) / (Km0467_163 * Km0867_163 * Km1318_163) / ((1 + s_0467 / Km0467_163) * (1 + s_0867 / Km0867_163) * (1 + s_1318 / Km1318_163) + (1 + s_0421 / Km0421_163) * (1 + s_1322 / Km1322_163) * (1 + s_1430 / Km1430_163) - 1)) + (cell * Vmax_172 * (s_1099 * s_1336 - s_1100 * s_1335 * s_1430 / Keq_172) / (Km1099_172 * Km1336_172) / ((1 + s_1099 / Km1099_172) * (1 + s_1336 / Km1336_172) + (1 + s_1100 / Km1100_172) * (1 + s_1335 / Km1335_172) * (1 + s_1430 / Km1430_172) - 1)) + (cell * Vmax_174 * (s_0467 * s_1095 * s_0451 - s_0421 * s_1101 * s_1430 / Keq_174) / (Km0467_174 * Km1095_174 * Km0451_174) / ((1 + s_0467 / Km0467_174) * (1 + s_1095 / Km1095_174) * (1 + s_0451 / Km0451_174) + (1 + s_0421 / Km0421_174) * (1 + s_1101 / Km1101_174) * (1 + s_1430 / Km1430_174) - 1)) + (cell * Vmax_197 * (s_1110 - s_1109 * s_1430 / Keq_197) / Km1110_197 / (1 + s_1110 / Km1110_197 + (1 + s_1109 / Km1109_197) * (1 + s_1430 / Km1430_197) - 1)) + (cell * Vmax_232 * (s_0467 * s_1141 - s_1552 * s_1430 * s_0783 / Keq_232) / (Km0467_232 * Km1141_232) / ((1 + s_0467 / Km0467_232) * (1 + s_1141 / Km1141_232) + (1 + s_1552 / Km1552_232) * (1 + s_1430 / Km1430_232) * (1 + s_0783 / Km0783_232) - 1)) + (cell * Vmax_241 * (s_1304 * s_1336 - s_1303 * s_1335 * s_1430 / Keq_241) / (Km1304_241 * Km1336_241) / ((1 + s_1304 / Km1304_241) * (1 + s_1336 / Km1336_241) + (1 + s_1303 / Km1303_241) * (1 + s_1335 / Km1335_241) * (1 + s_1430 / Km1430_241) - 1)) + (cell * Vmax_251 * (s_0467 - s_0421 * s_1430 / Keq_251) / Km0467_251 / (1 + s_0467 / Km0467_251 + (1 + s_0421 / Km0421_251) * (1 + s_1430 / Km1430_251) - 1)) + (cell * Vmax_256 * (s_0502 * s_1391 - s_1081 * s_1430 / Keq_256) / (Km0502_256 * Km1391_256) / ((1 + s_0502 / Km0502_256) * (1 + s_1391 / Km1391_256) + (1 + s_1081 / Km1081_256) * (1 + s_1430 / Km1430_256) - 1)) + (cell * Vmax_267 * (s_1364 - s_1430 * s_1170 / Keq_267) / Km1364_267 / (1 + s_1364 / Km1364_267 + (1 + s_1430 / Km1430_267) * (1 + s_1170 / Km1170_267) - 1)) + (cell * Vmax_270 * (s_0543 * s_1484 - s_1399 * s_1430 / Keq_270) / (Km0543_270 * Km1484_270) / ((1 + s_0543 / Km0543_270) * (1 + s_1484 / Km1484_270) + (1 + s_1399 / Km1399_270) * (1 + s_1430 / Km1430_270) - 1)) + (cell * Vmax_281 * (s_0342 * s_0467 * s_0474 - s_0362 * s_0421 * s_1430 / Keq_281) / (Km0342_281 * Km0467_281 * Km0474_281) / ((1 + s_0342 / Km0342_281) * (1 + s_0467 / Km0467_281) * (1 + s_0474 / Km0474_281) + (1 + s_0362 / Km0362_281) * (1 + s_0421 / Km0421_281) * (1 + s_1430 / Km1430_281) - 1)) + (cell * Vmax_283 * (s_0467 * s_0162 - s_0421 * s_0342 * s_1430 / Keq_283) / (Km0467_283 * Km0162_283) / ((1 + s_0467 / Km0467_283) * (1 + s_0162 / Km0162_283) + (1 + s_0421 / Km0421_283) * (1 + s_0342 / Km0342_283) * (1 + s_1430 / Km1430_283) - 1)) + (cell * Vmax_285 * (s_0344 * s_1072 * s_0467 - s_0040 * s_0421 * s_1430 / Keq_285) / (Km0344_285 * Km1072_285 * Km0467_285) / ((1 + s_0344 / Km0344_285) * (1 + s_1072 / Km1072_285) * (1 + s_0467 / Km0467_285) + (1 + s_0040 / Km0040_285) * (1 + s_0421 / Km0421_285) * (1 + s_1430 / Km1430_285) - 1)) + (cell * Vmax_287 * (s_0467 * s_1322 * s_1101 - s_0421 * s_0162 * s_1095 * s_1430 / Keq_287) / (Km0467_287 * Km1322_287 * Km1101_287) / ((1 + s_0467 / Km0467_287) * (1 + s_1322 / Km1322_287) * (1 + s_1101 / Km1101_287) + (1 + s_0421 / Km0421_287) * (1 + s_0162 / Km0162_287) * (1 + s_1095 / Km1095_287) * (1 + s_1430 / Km1430_287) - 1)) + (cell * Vmax_288 * (s_0467 * s_0929 * s_0361 - s_0421 * s_1318 * s_1430 / Keq_288) / (Km0467_288 * Km0929_288 * Km0361_288) / ((1 + s_0467 / Km0467_288) * (1 + s_0929 / Km0929_288) * (1 + s_0361 / Km0361_288) + (1 + s_0421 / Km0421_288) * (1 + s_1318 / Km1318_288) * (1 + s_1430 / Km1430_288) - 1)) + (cell * Vmax_291 * (s_0393 * s_0555 - s_0395 * s_1430 / Keq_291) / (Km0393_291 * Km0555_291) / ((1 + s_0393 / Km0393_291) * (1 + s_0555 / Km0555_291) + (1 + s_0395 / Km0395_291) * (1 + s_1430 / Km1430_291) - 1)) + (cell * Vmax_293 * (s_0421 * s_0783 - s_0467 * s_1430 / Keq_293) / (Km0421_293 * Km0783_293) / ((1 + s_0421 / Km0421_293) * (1 + s_0783 / Km0783_293) + (1 + s_0467 / Km0467_293) * (1 + s_1430 / Km1430_293) - 1)) + (cell * Vmax_298 * (s_0405 * s_0445 - s_0408 * s_1430 / Keq_298) / (Km0405_298 * Km0445_298) / ((1 + s_0405 / Km0405_298) * (1 + s_0445 / Km0445_298) + (1 + s_0408 / Km0408_298) * (1 + s_1430 / Km1430_298) - 1)) + (cell * Vmax_299 * (s_0116 * s_1333 * s_1362 - s_0543 * s_1334 * s_1530 * s_1430 / Keq_299) / (Km0116_299 * Km1333_299 * Km1362_299) / ((1 + s_0116 / Km0116_299) * (1 + s_1333 / Km1333_299) * (1 + s_1362 / Km1362_299) + (1 + s_0543 / Km0543_299) * (1 + s_1334 / Km1334_299) * (1 + s_1530 / Km1530_299) * (1 + s_1430 / Km1430_299) - 1)) + (cell * Vmax_304 * (s_0772 * s_1005 - s_1430 * s_1537 / Keq_304) / (Km0772_304 * Km1005_304) / ((1 + s_0772 / Km0772_304) * (1 + s_1005 / Km1005_304) + (1 + s_1430 / Km1430_304) * (1 + s_1537 / Km1537_304) - 1)) + (cell * Vmax_306 * (s_0311 * s_0255 - s_0364 * s_1430 / Keq_306) / (Km0311_306 * Km0255_306) / ((1 + s_0311 / Km0311_306) * (1 + s_0255 / Km0255_306) + (1 + s_0364 / Km0364_306) * (1 + s_1430 / Km1430_306) - 1)) + (cell * Vmax_321 * (s_0467 * s_0555 * s_1595 - s_0421 * s_1430 * s_1599 / Keq_321) / (Km0467_321 * Km0555_321 * Km1595_321) / ((1 + s_0467 / Km0467_321) * (1 + s_0555 / Km0555_321) * (1 + s_1595 / Km1595_321) + (1 + s_0421 / Km0421_321) * (1 + s_1430 / Km1430_321) * (1 + s_1599 / Km1599_321) - 1)) + (cell * Vmax_324 * (s_0467 * s_0945 * s_1609 - s_0412 * s_0896 * s_1430 * s_0783 / Keq_324) / (Km0467_324 * Km0945_324 * Km1609_324) / ((1 + s_0467 / Km0467_324) * (1 + s_0945 / Km0945_324) * (1 + s_1609 / Km1609_324) + (1 + s_0412 / Km0412_324) * (1 + s_0896 / Km0896_324) * (1 + s_1430 / Km1430_324) * (1 + s_0783 / Km0783_324) - 1)) + (cell * Vmax_334 * (s_1363 - s_1430 * s_1179 / Keq_334) / Km1363_334 / (1 + s_1363 / Km1363_334 + (1 + s_1430 / Km1430_334) * (1 + s_1179 / Km1179_334) - 1)) + (cell * Vmax_347 * (s_1484 * s_1745 - s_1430 * s_1742 / Keq_347) / (Km1484_347 * Km1745_347) / ((1 + s_1484 / Km1484_347) * (1 + s_1745 / Km1745_347) + (1 + s_1430 / Km1430_347) * (1 + s_1742 / Km1742_347) - 1)) + (cell * Vmax_351 * (s_1041 * s_0467 * s_1750 - s_0421 * s_1430 * s_1751 / Keq_351) / (Km1041_351 * Km0467_351 * Km1750_351) / ((1 + s_1041 / Km1041_351) * (1 + s_0467 / Km0467_351) * (1 + s_1750 / Km1750_351) + (1 + s_0421 / Km0421_351) * (1 + s_1430 / Km1430_351) * (1 + s_1751 / Km1751_351) - 1)) + (cell * Vmax_352 * (s_0467 * s_0671 * s_1751 - s_0421 * s_1430 * s_1754 / Keq_352) / (Km0467_352 * Km0671_352 * Km1751_352) / ((1 + s_0467 / Km0467_352) * (1 + s_0671 / Km0671_352) * (1 + s_1751 / Km1751_352) + (1 + s_0421 / Km0421_352) * (1 + s_1430 / Km1430_352) * (1 + s_1754 / Km1754_352) - 1)) + (cell * Vmax_353 * (s_1242 * s_0467 * s_1754 - s_0421 * s_1430 * s_1752 / Keq_353) / (Km1242_353 * Km0467_353 * Km1754_353) / ((1 + s_1242 / Km1242_353) * (1 + s_0467 / Km0467_353) * (1 + s_1754 / Km1754_353) + (1 + s_0421 / Km0421_353) * (1 + s_1430 / Km1430_353) * (1 + s_1752 / Km1752_353) - 1)) + (cell * Vmax_354 * (s_0603 * s_0467 * s_1752 - s_0421 * s_1430 * s_1755 / Keq_354) / (Km0603_354 * Km0467_354 * Km1752_354) / ((1 + s_0603 / Km0603_354) * (1 + s_0467 / Km0467_354) * (1 + s_1752 / Km1752_354) + (1 + s_0421 / Km0421_354) * (1 + s_1430 / Km1430_354) * (1 + s_1755 / Km1755_354) - 1)) + (cell * Vmax_358 * (s_1765 - s_1430 * s_1768 / Keq_358) / Km1765_358 / (1 + s_1765 / Km1765_358 + (1 + s_1430 / Km1430_358) * (1 + s_1768 / Km1768_358) - 1)) + (cell * Vmax_386 * (s_1432 - s_1430) / Km1432_386 / (1 + s_1432 / Km1432_386 + 1 + s_1430 / Km1430_386 - 1)) + (2.0 * cell * Vmax_390 * (s_0229 * pow(s_0467, 2) * s_1333 - s_0226 * pow(s_0421, 2) * s_1334 * pow(s_1430, 2) / Keq_390) / (Km0229_390 * pow(Km0467_390, 2) * Km1333_390) / ((1 + s_0229 / Km0229_390) * pow(1 + s_0467 / Km0467_390, 2) * (1 + s_1333 / Km1333_390) + (1 + s_0226 / Km0226_390) * pow(1 + s_0421 / Km0421_390, 2) * (1 + s_1334 / Km1334_390) * pow(1 + s_1430 / Km1430_390, 2) - 1)) + (cell * Vmax_391 * (s_0766 - s_0765 * s_1430 / Keq_391) / Km0766_391 / (1 + s_0766 / Km0766_391 + (1 + s_0765 / Km0765_391) * (1 + s_1430 / Km1430_391) - 1)) + (cell * Vmax_393 * (s_0346 - s_0311 * s_1430 / Keq_393) / Km0346_393 / (1 + s_0346 / Km0346_393 + (1 + s_0311 / Km0311_393) * (1 + s_1430 / Km1430_393) - 1)) + (53.95 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398)) - (cell * Vmax_178 * (s_0913 * s_1333 * s_1430 - s_0307 * s_1334 / Keq_178) / (Km0913_178 * Km1333_178 * Km1430_178) / ((1 + s_0913 / Km0913_178) * (1 + s_1333 / Km1333_178) * (1 + s_1430 / Km1430_178) + (1 + s_0307 / Km0307_178) * (1 + s_1334 / Km1334_178) - 1)) - (cell * Vmax_365 * (s_0421 * s_1430 - s_0467 / Keq_365) / (Km0421_365 * Km1430_365) / ((1 + s_0421 / Km0421_365) * (1 + s_1430 / Km1430_365) + 1 + s_0467 / Km0467_365 - 1));
    der(s_1432) = 0.0;
    der(s_1435) = (cell * Vmax_264 * (s_1476 - s_0543 * s_1435 / Keq_264) / Km1476_264 / (1 + s_1476 / Km1476_264 + (1 + s_0543 / Km0543_264) * (1 + s_1435 / Km1435_264) - 1)) - (0.07521 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1437) = (cell * Vmax_263 * (s_1477 - s_0543 * s_1437 / Keq_263) / Km1477_263 / (1 + s_1477 / Km1477_263 + (1 + s_0543 / Km0543_263) * (1 + s_1437 / Km1437_263) - 1)) - (0.06382 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1476) = (cell * Vmax_266 * (s_0512 * s_1170 - s_0539 * s_1476 / Keq_266) / (Km0512_266 * Km1170_266) / ((1 + s_0512 / Km0512_266) * (1 + s_1170 / Km1170_266) + (1 + s_0539 / Km0539_266) * (1 + s_1476 / Km1476_266) - 1)) - (cell * Vmax_264 * (s_1476 - s_0543 * s_1435 / Keq_264) / Km1476_264 / (1 + s_1476 / Km1476_264 + (1 + s_0543 / Km0543_264) * (1 + s_1435 / Km1435_264) - 1));
    der(s_1477) = (cell * Vmax_265 * (s_0513 * s_1170 - s_0539 * s_1477 / Keq_265) / (Km0513_265 * Km1170_265) / ((1 + s_0513 / Km0513_265) * (1 + s_1170 / Km1170_265) + (1 + s_0539 / Km0539_265) * (1 + s_1477 / Km1477_265) - 1)) - (cell * Vmax_263 * (s_1477 - s_0543 * s_1437 / Keq_263) / Km1477_263 / (1 + s_1477 / Km1477_263 + (1 + s_0543 / Km0543_263) * (1 + s_1437 / Km1437_263) - 1));
    der(s_1484) = (cell * Vmax_150 * (s_0675 - s_1484 / Keq_150) / Km0675_150 / (1 + s_0675 / Km0675_150 + 1 + s_1484 / Km1484_150 - 1)) - (cell * Vmax_22 * (s_0611 * s_1484 - s_0272 * s_1430 / Keq_22) / (Km0611_22 * Km1484_22) / ((1 + s_0611 / Km0611_22) * (1 + s_1484 / Km1484_22) + (1 + s_0272 / Km0272_22) * (1 + s_1430 / Km1430_22) - 1)) - (cell * Vmax_23 * (s_0621 * s_1484 - s_0195 * s_1430 / Keq_23) / (Km0621_23 * Km1484_23) / ((1 + s_0621 / Km0621_23) * (1 + s_1484 / Km1484_23) + (1 + s_0195 / Km0195_23) * (1 + s_1430 / Km1430_23) - 1)) - (cell * Vmax_53 * (s_1484 * s_1574 - s_0359 * s_1430 / Keq_53) / (Km1484_53 * Km1574_53) / ((1 + s_1484 / Km1484_53) * (1 + s_1574 / Km1574_53) + (1 + s_0359 / Km0359_53) * (1 + s_1430 / Km1430_53) - 1)) - (cell * Vmax_270 * (s_0543 * s_1484 - s_1399 * s_1430 / Keq_270) / (Km0543_270 * Km1484_270) / ((1 + s_0543 / Km0543_270) * (1 + s_1484 / Km1484_270) + (1 + s_1399 / Km1399_270) * (1 + s_1430 / Km1430_270) - 1)) - (cell * Vmax_347 * (s_1484 * s_1745 - s_1430 * s_1742 / Keq_347) / (Km1484_347 * Km1745_347) / ((1 + s_1484 / Km1484_347) * (1 + s_1745 / Km1745_347) + (1 + s_1430 / Km1430_347) * (1 + s_1742 / Km1742_347) - 1)) - (cell * Vmax_374 * (s_1484 * s_0657 - s_0663 * s_1531 / Keq_374) / (Km1484_374 * Km0657_374) / ((1 + s_1484 / Km1484_374) * (1 + s_0657 / Km0657_374) + (1 + s_0663 / Km0663_374) * (1 + s_1531 / Km1531_374) - 1)) - (cell * Vmax_375 * (s_1484 * s_0622 - s_0627 * s_1531 / Keq_375) / (Km1484_375 * Km0622_375) / ((1 + s_1484 / Km1484_375) * (1 + s_0622 / Km0622_375) + (1 + s_0627 / Km0627_375) * (1 + s_1531 / Km1531_375) - 1));
    der(s_1491) = (cell * Vmax_292 * (s_1492 - s_1248 * s_1491 / Keq_292) / Km1492_292 / (1 + s_1492 / Km1492_292 + (1 + s_1248 / Km1248_292) * (1 + s_1491 / Km1491_292) - 1)) - (cell * Vmax_65 * (s_1041 * s_1491 - s_0376 * s_0397 * s_0543 / Keq_65) / (Km1041_65 * Km1491_65) / ((1 + s_1041 / Km1041_65) * (1 + s_1491 / Km1491_65) + (1 + s_0376 / Km0376_65) * (1 + s_0397 / Km0397_65) * (1 + s_0543 / Km0543_65) - 1));
    der(s_1492) = (cell * Vmax_152 * (s_0813 * s_1336 - s_1335 * s_1492 / Keq_152) / (Km0813_152 * Km1336_152) / ((1 + s_0813 / Km0813_152) * (1 + s_1336 / Km1336_152) + (1 + s_1335 / Km1335_152) * (1 + s_1492 / Km1492_152) - 1)) - (cell * Vmax_292 * (s_1492 - s_1248 * s_1491 / Keq_292) / Km1492_292 / (1 + s_1492 / Km1492_292 + (1 + s_1248 / Km1248_292) * (1 + s_1491 / Km1491_292) - 1));
    der(s_1493) = (cell * Vmax_294 * (pow(s_0345, 2) - s_1493 / Keq_294) / pow(Km0345_294, 2) / (pow(1 + s_0345 / Km0345_294, 2) + 1 + s_1493 / Km1493_294 - 1)) - (4.0 * cell * Vmax_203 * (pow(s_1493, 4) - s_0998 * pow(s_0451, 4) / Keq_203) / pow(Km1493_203, 4) / (pow(1 + s_1493 / Km1493_203, 4) + (1 + s_0998 / Km0998_203) * pow(1 + s_0451 / Km0451_203, 4) - 1));
    der(s_1494) = (cell * Vmax_387 * (s_1496 - s_1494) / Km1496_387 / (1 + s_1496 / Km1496_387 + 1 + s_1494 / Km1494_387 - 1)) - (0.1952 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1496) = 0.0;
    der(s_1497) = (cell * Vmax_119 * (s_0526 - s_1497 / Keq_119) / Km0526_119 / (1 + s_0526 / Km0526_119 + 1 + s_1497 / Km1497_119 - 1)) - (cell * Vmax_295 * (s_1497 - s_0543 * s_1429 / Keq_295) / Km1497_295 / (1 + s_1497 / Km1497_295 + (1 + s_0543 / Km0543_295) * (1 + s_1429 / Km1429_295) - 1)) - (cell * Vmax_296 * (s_1333 * s_1497 - s_0262 * s_0543 * s_1334 / Keq_296) / (Km1333_296 * Km1497_296) / ((1 + s_1333 / Km1333_296) * (1 + s_1497 / Km1497_296) + (1 + s_0262 / Km0262_296) * (1 + s_0543 / Km0543_296) * (1 + s_1334 / Km1334_296) - 1));
    der(s_1508) = (cell * Vmax_159 * (s_0838 * s_1511 - s_1508 / Keq_159) / (Km0838_159 * Km1511_159) / ((1 + s_0838 / Km0838_159) * (1 + s_1511 / Km1511_159) + 1 + s_1508 / Km1508_159 - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1511) = (cell * Vmax_297 * (s_1372 * s_1512 - s_1511 / Keq_297) / (Km1372_297 * Km1512_297) / ((1 + s_1372 / Km1372_297) * (1 + s_1512 / Km1512_297) + 1 + s_1511 / Km1511_297 - 1)) - (cell * Vmax_159 * (s_0838 * s_1511 - s_1508 / Keq_159) / (Km0838_159 * Km1511_159) / ((1 + s_0838 / Km0838_159) * (1 + s_1511 / Km1511_159) + 1 + s_1508 / Km1508_159 - 1));
    der(s_1512) = (cell * Vmax_123 * (s_0565 * s_1372 - pow(s_0543, 2) * s_1512 / Keq_123) / (Km0565_123 * Km1372_123) / ((1 + s_0565 / Km0565_123) * (1 + s_1372 / Km1372_123) + pow(1 + s_0543 / Km0543_123, 2) * (1 + s_1512 / Km1512_123) - 1)) - (cell * Vmax_297 * (s_1372 * s_1512 - s_1511 / Keq_297) / (Km1372_297 * Km1512_297) / ((1 + s_1372 / Km1372_297) * (1 + s_1512 / Km1512_297) + 1 + s_1511 / Km1511_297 - 1));
    der(s_1522) = (cell * Vmax_392 * (s_1333 * s_1530 - s_1334 * s_1522 / Keq_392) / (Km1333_392 * Km1530_392) / ((1 + s_1333 / Km1333_392) * (1 + s_1530 / Km1530_392) + (1 + s_1334 / Km1334_392) * (1 + s_1522 / Km1522_392) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1530) = (cell * Vmax_299 * (s_0116 * s_1333 * s_1362 - s_0543 * s_1334 * s_1530 * s_1430 / Keq_299) / (Km0116_299 * Km1333_299 * Km1362_299) / ((1 + s_0116 / Km0116_299) * (1 + s_1333 / Km1333_299) * (1 + s_1362 / Km1362_299) + (1 + s_0543 / Km0543_299) * (1 + s_1334 / Km1334_299) * (1 + s_1530 / Km1530_299) * (1 + s_1430 / Km1430_299) - 1)) - (cell * Vmax_392 * (s_1333 * s_1530 - s_1334 * s_1522 / Keq_392) / (Km1333_392 * Km1530_392) / ((1 + s_1333 / Km1333_392) * (1 + s_1530 / Km1530_392) + (1 + s_1334 / Km1334_392) * (1 + s_1522 / Km1522_392) - 1));
    der(s_1531) = (cell * Vmax_11 * (s_0201 - s_0913 * s_1531 / Keq_11) / Km0201_11 / (1 + s_0201 / Km0201_11 + (1 + s_0913 / Km0913_11) * (1 + s_1531 / Km1531_11) - 1)) + (cell * Vmax_58 * (s_0316 - s_0318 * s_1531 / Keq_58) / Km0316_58 / (1 + s_0316 / Km0316_58 + (1 + s_0318 / Km0318_58) * (1 + s_1531 / Km1531_58) - 1)) + (cell * Vmax_101 * (s_0526 * s_1101 - s_0457 * s_1095 * s_1531 / Keq_101) / (Km0526_101 * Km1101_101) / ((1 + s_0526 / Km0526_101) * (1 + s_1101 / Km1101_101) + (1 + s_0457 / Km0457_101) * (1 + s_1095 / Km1095_101) * (1 + s_1531 / Km1531_101) - 1)) + (cell * Vmax_120 * (s_0526 - s_0325 * s_1531 / Keq_120) / Km0526_120 / (1 + s_0526 / Km0526_120 + (1 + s_0325 / Km0325_120) * (1 + s_1531 / Km1531_120) - 1)) + (cell * Vmax_126 * (s_1082 - s_1112 * s_0451 * s_1531 / Keq_126) / Km1082_126 / (1 + s_1082 / Km1082_126 + (1 + s_1112 / Km1112_126) * (1 + s_0451 / Km0451_126) * (1 + s_1531 / Km1531_126) - 1)) + (cell * Vmax_374 * (s_1484 * s_0657 - s_0663 * s_1531 / Keq_374) / (Km1484_374 * Km0657_374) / ((1 + s_1484 / Km1484_374) * (1 + s_0657 / Km0657_374) + (1 + s_0663 / Km0663_374) * (1 + s_1531 / Km1531_374) - 1)) + (cell * Vmax_375 * (s_1484 * s_0622 - s_0627 * s_1531 / Keq_375) / (Km1484_375 * Km0622_375) / ((1 + s_1484 / Km1484_375) * (1 + s_0622 / Km0622_375) + (1 + s_0627 / Km0627_375) * (1 + s_1531 / Km1531_375) - 1)) - (cell * Vmax_2 * (s_0913 * s_1531 - s_0543 * s_0116 / Keq_2) / (Km0913_2 * Km1531_2) / ((1 + s_0913 / Km0913_2) * (1 + s_1531 / Km1531_2) + (1 + s_0543 / Km0543_2) * (1 + s_0116 / Km0116_2) - 1)) - (cell * Vmax_8 * (s_0232 * s_1531 - s_0041 * s_0543 / Keq_8) / (Km0232_8 * Km1531_8) / ((1 + s_0232 / Km0232_8) * (1 + s_1531 / Km1531_8) + (1 + s_0041 / Km0041_8) * (1 + s_0543 / Km0543_8) - 1)) - (2.0 * cell * Vmax_68 * (pow(s_1531, 2) - s_0042 * s_0543 / Keq_68) / pow(Km1531_68, 2) / (pow(1 + s_1531 / Km1531_68, 2) + (1 + s_0042 / Km0042_68) * (1 + s_0543 / Km0543_68) - 1)) - (cell * Vmax_137 * (s_1075 * s_1531 - s_0155 / Keq_137) / (Km1075_137 * Km1531_137) / ((1 + s_1075 / Km1075_137) * (1 + s_1531 / Km1531_137) + 1 + s_0155 / Km0155_137 - 1)) - (cell * Vmax_220 * (s_1095 * s_1531 - s_0233 * s_1041 / Keq_220) / (Km1095_220 * Km1531_220) / ((1 + s_1095 / Km1095_220) * (1 + s_1531 / Km1531_220) + (1 + s_0233 / Km0233_220) * (1 + s_1041 / Km1041_220) - 1)) - (cell * Vmax_301 * (s_0555 * s_1333 * s_1531 - s_0395 * s_0543 * s_1334 / Keq_301) / (Km0555_301 * Km1333_301 * Km1531_301) / ((1 + s_0555 / Km0555_301) * (1 + s_1333 / Km1333_301) * (1 + s_1531 / Km1531_301) + (1 + s_0395 / Km0395_301) * (1 + s_0543 / Km0543_301) * (1 + s_1334 / Km1334_301) - 1)) - (cell * Vmax_302 * (s_0555 * s_1531 - s_0395 * s_0867 / Keq_302) / (Km0555_302 * Km1531_302) / ((1 + s_0555 / Km0555_302) * (1 + s_1531 / Km1531_302) + (1 + s_0395 / Km0395_302) * (1 + s_0867 / Km0867_302) - 1)) - (cell * Vmax_303 * (s_0555 * pow(s_0862, 2) * s_1531 - s_0395 * s_0543 * pow(s_0861, 2) / Keq_303) / (Km0555_303 * pow(Km0862_303, 2) * Km1531_303) / ((1 + s_0555 / Km0555_303) * pow(1 + s_0862 / Km0862_303, 2) * (1 + s_1531 / Km1531_303) + (1 + s_0395 / Km0395_303) * (1 + s_0543 / Km0543_303) * pow(1 + s_0861 / Km0861_303, 2) - 1)) - (cell * Vmax_341 * (s_1009 * s_0451 * s_1531 - s_1185 / Keq_341) / (Km1009_341 * Km0451_341 * Km1531_341) / ((1 + s_1009 / Km1009_341) * (1 + s_0451 / Km0451_341) * (1 + s_1531 / Km1531_341) + 1 + s_1185 / Km1185_341 - 1));
    der(s_1537) = (cell * Vmax_304 * (s_0772 * s_1005 - s_1430 * s_1537 / Keq_304) / (Km0772_304 * Km1005_304) / ((1 + s_0772 / Km0772_304) * (1 + s_1005 / Km1005_304) + (1 + s_1430 / Km1430_304) * (1 + s_1537 / Km1537_304) - 1)) - (cell * Vmax_246 * (s_0360 * s_1537 - s_0543 * s_1340 * s_0783 / Keq_246) / (Km0360_246 * Km1537_246) / ((1 + s_0360 / Km0360_246) * (1 + s_1537 / Km1537_246) + (1 + s_0543 / Km0543_246) * (1 + s_1340 / Km1340_246) * (1 + s_0783 / Km0783_246) - 1));
    der(s_1544) = (cell * Vmax_332 * (s_1336 * s_1406 - s_1335 * s_1544 / Keq_332) / (Km1336_332 * Km1406_332) / ((1 + s_1336 / Km1336_332) * (1 + s_1406 / Km1406_332) + (1 + s_1335 / Km1335_332) * (1 + s_1544 / Km1544_332) - 1)) - (cell * Vmax_269 * (s_0252 * s_1544 - s_0411 * s_1612 * s_1406 / Keq_269) / (Km0252_269 * Km1544_269) / ((1 + s_0252 / Km0252_269) * (1 + s_1544 / Km1544_269) + (1 + s_0411 / Km0411_269) * (1 + s_1612 / Km1612_269) * (1 + s_1406 / Km1406_269) - 1));
    der(s_1546) = (cell * Vmax_307 * (pow(s_0364, 2) - s_0311 * s_1546 / Keq_307) / pow(Km0364_307, 2) / (pow(1 + s_0364 / Km0364_307, 2) + (1 + s_0311 / Km0311_307) * (1 + s_1546 / Km1546_307) - 1)) - (cell * Vmax_305 * (s_0467 * s_1546 - s_0421 * s_0863 / Keq_305) / (Km0467_305 * Km1546_305) / ((1 + s_0467 / Km0467_305) * (1 + s_1546 / Km1546_305) + (1 + s_0421 / Km0421_305) * (1 + s_0863 / Km0863_305) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1550) = (cell * Vmax_93 * (s_0376 * s_1552 - s_1550 * s_0371 / Keq_93) / (Km0376_93 * Km1552_93) / ((1 + s_0376 / Km0376_93) * (1 + s_1552 / Km1552_93) + (1 + s_1550 / Km1550_93) * (1 + s_0371 / Km0371_93) - 1)) - (cell * Vmax_397 * s_1550 / Km1550_397 / (1 + s_1550 / Km1550_397));
    der(s_1551) = (cell * Vmax_229 * (s_1552 * s_1217 - s_1551 * s_1218 / Keq_229) / (Km1552_229 * Km1217_229) / ((1 + s_1552 / Km1552_229) * (1 + s_1217 / Km1217_229) + (1 + s_1551 / Km1551_229) * (1 + s_1218 / Km1218_229) - 1)) + (2.0 * cell * Vmax_360 * (pow(s_1552, 2) * s_1791 - pow(s_1551, 2) * s_0768 / Keq_360) / (pow(Km1552_360, 2) * Km1791_360) / (pow(1 + s_1552 / Km1552_360, 2) * (1 + s_1791 / Km1791_360) + pow(1 + s_1551 / Km1551_360, 2) * (1 + s_0768 / Km0768_360) - 1)) - (cell * Vmax_314 * (s_1551 - s_0405 * s_1558 / Keq_314) / Km1551_314 / (1 + s_1551 / Km1551_314 + (1 + s_0405 / Km0405_314) * (1 + s_1558 / Km1558_314) - 1));
    der(s_1552) = (cell * Vmax_232 * (s_0467 * s_1141 - s_1552 * s_1430 * s_0783 / Keq_232) / (Km0467_232 * Km1141_232) / ((1 + s_0467 / Km0467_232) * (1 + s_1141 / Km1141_232) + (1 + s_1552 / Km1552_232) * (1 + s_1430 / Km1430_232) * (1 + s_0783 / Km0783_232) - 1)) - (cell * Vmax_93 * (s_0376 * s_1552 - s_1550 * s_0371 / Keq_93) / (Km0376_93 * Km1552_93) / ((1 + s_0376 / Km0376_93) * (1 + s_1552 / Km1552_93) + (1 + s_1550 / Km1550_93) * (1 + s_0371 / Km0371_93) - 1)) - (cell * Vmax_112 * (s_0378 * s_1552 * s_0755 - s_0377 * s_0476 * s_0333 * s_1141 / Keq_112) / (Km0378_112 * Km1552_112 * Km0755_112) / ((1 + s_0378 / Km0378_112) * (1 + s_1552 / Km1552_112) * (1 + s_0755 / Km0755_112) + (1 + s_0377 / Km0377_112) * (1 + s_0476 / Km0476_112) * (1 + s_0333 / Km0333_112) * (1 + s_1141 / Km1141_112) - 1)) - (cell * Vmax_229 * (s_1552 * s_1217 - s_1551 * s_1218 / Keq_229) / (Km1552_229 * Km1217_229) / ((1 + s_1552 / Km1552_229) * (1 + s_1217 / Km1217_229) + (1 + s_1551 / Km1551_229) * (1 + s_1218 / Km1218_229) - 1)) - (cell * Vmax_342 * (s_1552 * s_1336 * s_1189 - s_1407 * s_0333 * s_0738 * s_1141 * s_1335 / Keq_342) / (Km1552_342 * Km1336_342 * Km1189_342) / ((1 + s_1552 / Km1552_342) * (1 + s_1336 / Km1336_342) * (1 + s_1189 / Km1189_342) + (1 + s_1407 / Km1407_342) * (1 + s_0333 / Km0333_342) * (1 + s_0738 / Km0738_342) * (1 + s_1141 / Km1141_342) * (1 + s_1335 / Km1335_342) - 1)) - (2.0 * cell * Vmax_360 * (pow(s_1552, 2) * s_1791 - pow(s_1551, 2) * s_0768 / Keq_360) / (pow(Km1552_360, 2) * Km1791_360) / (pow(1 + s_1552 / Km1552_360, 2) * (1 + s_1791 / Km1791_360) + pow(1 + s_1551 / Km1551_360, 2) * (1 + s_0768 / Km0768_360) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1558) = (cell * Vmax_314 * (s_1551 - s_0405 * s_1558 / Keq_314) / Km1551_314 / (1 + s_1551 / Km1551_314 + (1 + s_0405 / Km0405_314) * (1 + s_1558 / Km1558_314) - 1)) - (cell * Vmax_315 * (s_1558 - s_0310 * s_1112 / Keq_315) / Km1558_315 / (1 + s_1558 / Km1558_315 + (1 + s_0310 / Km0310_315) * (1 + s_1112 / Km1112_315) - 1));
    der(s_1561) = (cell * Vmax_336 * (s_0621 * s_0627 - s_0913 * s_1561 / Keq_336) / (Km0621_336 * Km0627_336) / ((1 + s_0621 / Km0621_336) * (1 + s_0627 / Km0627_336) + (1 + s_0913 / Km0913_336) * (1 + s_1561 / Km1561_336) - 1)) - (cell * Vmax_337 * (s_0913 * s_1561 - s_0446 * s_0721 / Keq_337) / (Km0913_337 * Km1561_337) / ((1 + s_0913 / Km0913_337) * (1 + s_1561 / Km1561_337) + (1 + s_0446 / Km0446_337) * (1 + s_0721 / Km0721_337) - 1));
    der(s_1571) = (cell * Vmax_317 * (s_0270 * s_1336 - s_1335 * s_1571 / Keq_317) / (Km0270_317 * Km1336_317) / ((1 + s_0270 / Km0270_317) * (1 + s_1336 / Km1336_317) + (1 + s_1335 / Km1335_317) * (1 + s_1571 / Km1571_317) - 1)) - (cell * Vmax_318 * (s_0467 * s_1571 - s_0421 * s_1574 / Keq_318) / (Km0467_318 * Km1571_318) / ((1 + s_0467 / Km0467_318) * (1 + s_1571 / Km1571_318) + (1 + s_0421 / Km0421_318) * (1 + s_1574 / Km1574_318) - 1));
    der(s_1574) = (cell * Vmax_318 * (s_0467 * s_1571 - s_0421 * s_1574 / Keq_318) / (Km0467_318 * Km1571_318) / ((1 + s_0467 / Km0467_318) * (1 + s_1571 / Km1571_318) + (1 + s_0421 / Km0421_318) * (1 + s_1574 / Km1574_318) - 1)) - (cell * Vmax_53 * (s_1484 * s_1574 - s_0359 * s_1430 / Keq_53) / (Km1484_53 * Km1574_53) / ((1 + s_1484 / Km1484_53) * (1 + s_1574 / Km1574_53) + (1 + s_0359 / Km0359_53) * (1 + s_1430 / Km1430_53) - 1));
    der(s_1577) = (cell * Vmax_320 * (s_0838 * s_1578 - s_1577 / Keq_320) / (Km0838_320 * Km1578_320) / ((1 + s_0838 / Km0838_320) * (1 + s_1578 / Km1578_320) + 1 + s_1577 / Km1577_320 - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1578) = (cell * Vmax_319 * (s_0768 * s_1333 - s_1334 * s_1578 / Keq_319) / (Km0768_319 * Km1333_319) / ((1 + s_0768 / Km0768_319) * (1 + s_1333 / Km1333_319) + (1 + s_1334 / Km1334_319) * (1 + s_1578 / Km1578_319) - 1)) - (cell * Vmax_320 * (s_0838 * s_1578 - s_1577 / Keq_320) / (Km0838_320 * Km1578_320) / ((1 + s_0838 / Km0838_320) * (1 + s_1578 / Km1578_320) + 1 + s_1577 / Km1577_320 - 1));
    der(s_1595) = (cell * Vmax_253 * (s_1083 * s_1367 - s_1082 * s_1595 / Keq_253) / (Km1083_253 * Km1367_253) / ((1 + s_1083 / Km1083_253) * (1 + s_1367 / Km1367_253) + (1 + s_1082 / Km1082_253) * (1 + s_1595 / Km1595_253) - 1)) + (cell * Vmax_322 * (s_1316 - s_1211 * s_1595 / Keq_322) / Km1316_322 / (1 + s_1316 / Km1316_322 + (1 + s_1211 / Km1211_322) * (1 + s_1595 / Km1595_322) - 1)) - (cell * Vmax_321 * (s_0467 * s_0555 * s_1595 - s_0421 * s_1430 * s_1599 / Keq_321) / (Km0467_321 * Km0555_321 * Km1595_321) / ((1 + s_0467 / Km0467_321) * (1 + s_0555 / Km0555_321) * (1 + s_1595 / Km1595_321) + (1 + s_0421 / Km0421_321) * (1 + s_1430 / Km1430_321) * (1 + s_1599 / Km1599_321) - 1));
    der(s_1599) = (cell * Vmax_321 * (s_0467 * s_0555 * s_1595 - s_0421 * s_1430 * s_1599 / Keq_321) / (Km0467_321 * Km0555_321 * Km1595_321) / ((1 + s_0467 / Km0467_321) * (1 + s_0555 / Km0555_321) * (1 + s_1595 / Km1595_321) + (1 + s_0421 / Km0421_321) * (1 + s_1430 / Km1430_321) * (1 + s_1599 / Km1599_321) - 1)) - (cell * Vmax_201 * (s_1113 * s_1599 - s_0555 * s_1367 / Keq_201) / (Km1113_201 * Km1599_201) / ((1 + s_1113 / Km1113_201) * (1 + s_1599 / Km1599_201) + (1 + s_0555 / Km0555_201) * (1 + s_1367 / Km1367_201) - 1)) - (cell * Vmax_328 * (s_1599 * s_0148 - s_0555 * s_1315 / Keq_328) / (Km1599_328 * Km0148_328) / ((1 + s_1599 / Km1599_328) * (1 + s_0148 / Km0148_328) + (1 + s_0555 / Km0555_328) * (1 + s_1315 / Km1315_328) - 1));
    der(s_1609) = (cell * Vmax_388 * (s_1611 - s_1609) / Km1611_388 / (1 + s_1611 / Km1611_388 + 1 + s_1609 / Km1609_388 - 1)) - (cell * Vmax_324 * (s_0467 * s_0945 * s_1609 - s_0412 * s_0896 * s_1430 * s_0783 / Keq_324) / (Km0467_324 * Km0945_324 * Km1609_324) / ((1 + s_0467 / Km0467_324) * (1 + s_0945 / Km0945_324) * (1 + s_1609 / Km1609_324) + (1 + s_0412 / Km0412_324) * (1 + s_0896 / Km0896_324) * (1 + s_1430 / Km1430_324) * (1 + s_0783 / Km0783_324) - 1)) - (0.004338 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1611) = 0.0;
    der(s_1612) = (cell * Vmax_269 * (s_0252 * s_1544 - s_0411 * s_1612 * s_1406 / Keq_269) / (Km0252_269 * Km1544_269) / ((1 + s_0252 / Km0252_269) * (1 + s_1544 / Km1544_269) + (1 + s_0411 / Km0411_269) * (1 + s_1612 / Km1612_269) * (1 + s_1406 / Km1406_269) - 1)) - (cell * Vmax_325 * (pow(s_1336, 3) * s_1612 - s_0994 * pow(s_1335, 3) / Keq_325) / (pow(Km1336_325, 3) * Km1612_325) / (pow(1 + s_1336 / Km1336_325, 3) * (1 + s_1612 / Km1612_325) + (1 + s_0994 / Km0994_325) * pow(1 + s_1335 / Km1335_325, 3) - 1));
    der(s_1632) = (cell * Vmax_91 * (s_0860 * s_1680 - s_0859 * s_1632 / Keq_91) / (Km0860_91 * Km1680_91) / ((1 + s_0860 / Km0860_91) * (1 + s_1680 / Km1680_91) + (1 + s_0859 / Km0859_91) * (1 + s_1632 / Km1632_91) - 1)) - (cell * Vmax_75 * (s_0395 * s_1632 - s_0297 * s_0555 / Keq_75) / (Km0395_75 * Km1632_75) / ((1 + s_0395 / Km0395_75) * (1 + s_1632 / Km1632_75) + (1 + s_0297 / Km0297_75) * (1 + s_0555 / Km0555_75) - 1));
    der(s_1643) = (cell * Vmax_329 * (s_0218 * s_0330 - s_0783 * s_1643 / Keq_329) / (Km0218_329 * Km0330_329) / ((1 + s_0218 / Km0218_329) * (1 + s_0330 / Km0330_329) + (1 + s_0783 / Km0783_329) * (1 + s_1643 / Km1643_329) - 1)) - (cell * Vmax_330 * (s_0467 * s_1643 - s_0421 * s_1644 / Keq_330) / (Km0467_330 * Km1643_330) / ((1 + s_0467 / Km0467_330) * (1 + s_1643 / Km1643_330) + (1 + s_0421 / Km0421_330) * (1 + s_1644 / Km1644_330) - 1));
    der(s_1644) = (cell * Vmax_330 * (s_0467 * s_1643 - s_0421 * s_1644 / Keq_330) / (Km0467_330 * Km1643_330) / ((1 + s_0467 / Km0467_330) * (1 + s_1643 / Km1643_330) + (1 + s_0421 / Km0421_330) * (1 + s_1644 / Km1644_330) - 1)) - (0.000223 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1668) = (cell * Vmax_29 * (s_0044 - s_1668 / Keq_29) / Km0044_29 / (1 + s_0044 / Km0044_29 + 1 + s_1668 / Km1668_29 - 1)) - (cell * Vmax_86 * (s_1668 * s_0860 - s_0737 * s_0859 / Keq_86) / (Km1668_86 * Km0860_86) / ((1 + s_1668 / Km1668_86) * (1 + s_0860 / Km0860_86) + (1 + s_0737 / Km0737_86) * (1 + s_0859 / Km0859_86) - 1));
    der(s_1670) = (cell * Vmax_30 * (s_0045 - s_1670 / Keq_30) / Km0045_30 / (1 + s_0045 / Km0045_30 + 1 + s_1670 / Km1670_30 - 1)) - (cell * Vmax_87 * (s_1670 * s_0860 - s_0790 * s_0859 / Keq_87) / (Km1670_87 * Km0860_87) / ((1 + s_1670 / Km1670_87) * (1 + s_0860 / Km0860_87) + (1 + s_0790 / Km0790_87) * (1 + s_0859 / Km0859_87) - 1));
    der(s_1672) = (cell * Vmax_32 * (s_0047 - s_1672 / Keq_32) / Km0047_32 / (1 + s_0047 / Km0047_32 + 1 + s_1672 / Km1672_32 - 1)) - (cell * Vmax_89 * (s_0860 * s_1672 - s_0859 * s_0984 / Keq_89) / (Km0860_89 * Km1672_89) / ((1 + s_0860 / Km0860_89) * (1 + s_1672 / Km1672_89) + (1 + s_0859 / Km0859_89) * (1 + s_0984 / Km0984_89) - 1));
    der(s_1674) = (cell * Vmax_31 * (s_0046 - s_1674 / Keq_31) / Km0046_31 / (1 + s_0046 / Km0046_31 + 1 + s_1674 / Km1674_31 - 1)) - (cell * Vmax_19 * (s_1674 - s_0979 / Keq_19) / Km1674_19 / (1 + s_1674 / Km1674_19 + 1 + s_0979 / Km0979_19 - 1)) - (cell * Vmax_88 * (s_0860 * s_1674 - s_0859 * s_1412 / Keq_88) / (Km0860_88 * Km1674_88) / ((1 + s_0860 / Km0860_88) * (1 + s_1674 / Km1674_88) + (1 + s_0859 / Km0859_88) * (1 + s_1412 / Km1412_88) - 1));
    der(s_1676) = (cell * Vmax_33 * (s_0049 - s_1676 / Keq_33) / Km0049_33 / (1 + s_0049 / Km0049_33 + 1 + s_1676 / Km1676_33 - 1)) - (cell * Vmax_90 * (s_0860 * s_1676 - s_0859 * s_1390 / Keq_90) / (Km0860_90 * Km1676_90) / ((1 + s_0860 / Km0860_90) * (1 + s_1676 / Km1676_90) + (1 + s_0859 / Km0859_90) * (1 + s_1390 / Km1390_90) - 1));
    der(s_1680) = (cell * Vmax_34 * (s_0050 - s_1680 / Keq_34) / Km0050_34 / (1 + s_0050 / Km0050_34 + 1 + s_1680 / Km1680_34 - 1)) - (cell * Vmax_91 * (s_0860 * s_1680 - s_0859 * s_1632 / Keq_91) / (Km0860_91 * Km1680_91) / ((1 + s_0860 / Km0860_91) * (1 + s_1680 / Km1680_91) + (1 + s_0859 / Km0859_91) * (1 + s_1632 / Km1632_91) - 1));
    der(s_1690) = (cell * Vmax_176 * (s_1105 * s_1336 - s_1098 * s_1335 * s_1690 / Keq_176) / (Km1105_176 * Km1336_176) / ((1 + s_1105 / Km1105_176) * (1 + s_1336 / Km1336_176) + (1 + s_1098 / Km1098_176) * (1 + s_1335 / Km1335_176) * (1 + s_1690 / Km1690_176) - 1)) - (cell * Vmax_177 * (s_0467 * s_1095 * s_1690 - s_0454 * s_1105 * s_0783 / Keq_177) / (Km0467_177 * Km1095_177 * Km1690_177) / ((1 + s_0467 / Km0467_177) * (1 + s_1095 / Km1095_177) * (1 + s_1690 / Km1690_177) + (1 + s_0454 / Km0454_177) * (1 + s_1105 / Km1105_177) * (1 + s_0783 / Km0783_177) - 1));
    der(s_1719) = (cell * Vmax_240 * (s_1725 - s_0600 * s_1719 / Keq_240) / Km1725_240 / (1 + s_1725 / Km1725_240 + (1 + s_0600 / Km0600_240) * (1 + s_1719 / Km1719_240) - 1)) - (0.01389 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1725) = (cell * Vmax_382 * (pow(s_1776, 2) - pow(s_1765, 2) * s_1725 / Keq_382) / pow(Km1776_382, 2) / (pow(1 + s_1776 / Km1776_382, 2) + pow(1 + s_1765 / Km1765_382, 2) * (1 + s_1725 / Km1725_382) - 1)) - (cell * Vmax_240 * (s_1725 - s_0600 * s_1719 / Keq_240) / Km1725_240 / (1 + s_1725 / Km1725_240 + (1 + s_0600 / Km0600_240) * (1 + s_1719 / Km1719_240) - 1));
    der(s_1731) = (cell * Vmax_135 * (s_0052 * s_1732 - s_1394 * s_1731 / Keq_135) / (Km0052_135 * Km1732_135) / ((1 + s_0052 / Km0052_135) * (1 + s_1732 / Km1732_135) + (1 + s_1394 / Km1394_135) * (1 + s_1731 / Km1731_135) - 1)) + (cell * Vmax_186 * (s_0937 * s_1732 - s_0941 * s_1731 / Keq_186) / (Km0937_186 * Km1732_186) / ((1 + s_0937 / Km0937_186) * (1 + s_1732 / Km1732_186) + (1 + s_0941 / Km0941_186) * (1 + s_1731 / Km1731_186) - 1)) - (cell * Vmax_372 * (s_1372 * s_1731 - s_1732 / Keq_372) / (Km1372_372 * Km1731_372) / ((1 + s_1372 / Km1372_372) * (1 + s_1731 / Km1731_372) + 1 + s_1732 / Km1732_372 - 1));
    der(s_1732) = (cell * Vmax_372 * (s_1372 * s_1731 - s_1732 / Keq_372) / (Km1372_372 * Km1731_372) / ((1 + s_1372 / Km1372_372) * (1 + s_1731 / Km1731_372) + 1 + s_1732 / Km1732_372 - 1)) - (cell * Vmax_135 * (s_0052 * s_1732 - s_1394 * s_1731 / Keq_135) / (Km0052_135 * Km1732_135) / ((1 + s_0052 / Km0052_135) * (1 + s_1732 / Km1732_135) + (1 + s_1394 / Km1394_135) * (1 + s_1731 / Km1731_135) - 1)) - (cell * Vmax_186 * (s_0937 * s_1732 - s_0941 * s_1731 / Keq_186) / (Km0937_186 * Km1732_186) / ((1 + s_0937 / Km0937_186) * (1 + s_1732 / Km1732_186) + (1 + s_0941 / Km0941_186) * (1 + s_1731 / Km1731_186) - 1));
    der(s_1733) = (cell * Vmax_226 * (s_0149 * s_1734 - s_1204 * s_1733 / Keq_226) / (Km0149_226 * Km1734_226) / ((1 + s_0149 / Km0149_226) * (1 + s_1734 / Km1734_226) + (1 + s_1204 / Km1204_226) * (1 + s_1733 / Km1733_226) - 1)) + (cell * Vmax_350 * (s_1745 * s_1777 - s_1776 * s_1733 / Keq_350) / (Km1745_350 * Km1777_350) / ((1 + s_1745 / Km1745_350) * (1 + s_1777 / Km1777_350) + (1 + s_1776 / Km1776_350) * (1 + s_1733 / Km1733_350) - 1)) + (cell * Vmax_356 * (s_0467 * s_1762 - s_0421 * s_1733 / Keq_356) / (Km0467_356 * Km1762_356) / ((1 + s_0467 / Km0467_356) * (1 + s_1762 / Km1762_356) + (1 + s_0421 / Km0421_356) * (1 + s_1733 / Km1733_356) - 1)) - (cell * Vmax_250 * (s_0467 * s_1733 - s_0421 * s_1792 / Keq_250) / (Km0467_250 * Km1733_250) / ((1 + s_0467 / Km0467_250) * (1 + s_1733 / Km1733_250) + (1 + s_0421 / Km0421_250) * (1 + s_1792 / Km1792_250) - 1));
    der(s_1734) = (cell * Vmax_344 * (s_0028 * s_1735 - s_0397 * s_1734 / Keq_344) / (Km0028_344 * Km1735_344) / ((1 + s_0028 / Km0028_344) * (1 + s_1735 / Km1735_344) + (1 + s_0397 / Km0397_344) * (1 + s_1734 / Km1734_344) - 1)) - (cell * Vmax_226 * (s_0149 * s_1734 - s_1204 * s_1733 / Keq_226) / (Km0149_226 * Km1734_226) / ((1 + s_0149 / Km0149_226) * (1 + s_1734 / Km1734_226) + (1 + s_1204 / Km1204_226) * (1 + s_1733 / Km1733_226) - 1)) - (cell * Vmax_355 * (s_1734 - s_0149 * s_1762 / Keq_355) / Km1734_355 / (1 + s_1734 / Km1734_355 + (1 + s_0149 / Km0149_355) * (1 + s_1762 / Km1762_355) - 1));
    der(s_1735) = (cell * Vmax_345 * (s_1736 - s_0384 * s_1735 / Keq_345) / Km1736_345 / (1 + s_1736 / Km1736_345 + (1 + s_0384 / Km0384_345) * (1 + s_1735 / Km1735_345) - 1)) - (cell * Vmax_344 * (s_0028 * s_1735 - s_0397 * s_1734 / Keq_344) / (Km0028_344 * Km1735_344) / ((1 + s_0028 / Km0028_344) * (1 + s_1735 / Km1735_344) + (1 + s_0397 / Km0397_344) * (1 + s_1734 / Km1734_344) - 1));
    der(s_1736) = (cell * Vmax_348 * (s_0028 * s_1745 - s_0397 * s_1736 / Keq_348) / (Km0028_348 * Km1745_348) / ((1 + s_0028 / Km0028_348) * (1 + s_1745 / Km1745_348) + (1 + s_0397 / Km0397_348) * (1 + s_1736 / Km1736_348) - 1)) - (cell * Vmax_345 * (s_1736 - s_0384 * s_1735 / Keq_345) / Km1736_345 / (1 + s_1736 / Km1736_345 + (1 + s_0384 / Km0384_345) * (1 + s_1735 / Km1735_345) - 1));
    der(s_1742) = (cell * Vmax_347 * (s_1484 * s_1745 - s_1430 * s_1742 / Keq_347) / (Km1484_347 * Km1745_347) / ((1 + s_1484 / Km1484_347) * (1 + s_1745 / Km1745_347) + (1 + s_1430 / Km1430_347) * (1 + s_1742 / Km1742_347) - 1)) - (cell * Vmax_346 * (s_1336 * s_1742 - s_1335 * s_1750 / Keq_346) / (Km1336_346 * Km1742_346) / ((1 + s_1336 / Km1336_346) * (1 + s_1742 / Km1742_346) + (1 + s_1335 / Km1335_346) * (1 + s_1750 / Km1750_346) - 1));
    der(s_1745) = (cell * Vmax_349 * (s_1287 * s_1792 - s_0783 * s_1745 / Keq_349) / (Km1287_349 * Km1792_349) / ((1 + s_1287 / Km1287_349) * (1 + s_1792 / Km1792_349) + (1 + s_0783 / Km0783_349) * (1 + s_1745 / Km1745_349) - 1)) - (cell * Vmax_347 * (s_1484 * s_1745 - s_1430 * s_1742 / Keq_347) / (Km1484_347 * Km1745_347) / ((1 + s_1484 / Km1484_347) * (1 + s_1745 / Km1745_347) + (1 + s_1430 / Km1430_347) * (1 + s_1742 / Km1742_347) - 1)) - (cell * Vmax_348 * (s_0028 * s_1745 - s_0397 * s_1736 / Keq_348) / (Km0028_348 * Km1745_348) / ((1 + s_0028 / Km0028_348) * (1 + s_1745 / Km1745_348) + (1 + s_0397 / Km0397_348) * (1 + s_1736 / Km1736_348) - 1)) - (cell * Vmax_350 * (s_1745 * s_1777 - s_1776 * s_1733 / Keq_350) / (Km1745_350 * Km1777_350) / ((1 + s_1745 / Km1745_350) * (1 + s_1777 / Km1777_350) + (1 + s_1776 / Km1776_350) * (1 + s_1733 / Km1733_350) - 1));
    der(s_1750) = (cell * Vmax_346 * (s_1336 * s_1742 - s_1335 * s_1750 / Keq_346) / (Km1336_346 * Km1742_346) / ((1 + s_1336 / Km1336_346) * (1 + s_1742 / Km1742_346) + (1 + s_1335 / Km1335_346) * (1 + s_1750 / Km1750_346) - 1)) - (cell * Vmax_351 * (s_1041 * s_0467 * s_1750 - s_0421 * s_1430 * s_1751 / Keq_351) / (Km1041_351 * Km0467_351 * Km1750_351) / ((1 + s_1041 / Km1041_351) * (1 + s_0467 / Km0467_351) * (1 + s_1750 / Km1750_351) + (1 + s_0421 / Km0421_351) * (1 + s_1430 / Km1430_351) * (1 + s_1751 / Km1751_351) - 1));
    der(s_1751) = (cell * Vmax_351 * (s_1041 * s_0467 * s_1750 - s_0421 * s_1430 * s_1751 / Keq_351) / (Km1041_351 * Km0467_351 * Km1750_351) / ((1 + s_1041 / Km1041_351) * (1 + s_0467 / Km0467_351) * (1 + s_1750 / Km1750_351) + (1 + s_0421 / Km0421_351) * (1 + s_1430 / Km1430_351) * (1 + s_1751 / Km1751_351) - 1)) - (cell * Vmax_352 * (s_0467 * s_0671 * s_1751 - s_0421 * s_1430 * s_1754 / Keq_352) / (Km0467_352 * Km0671_352 * Km1751_352) / ((1 + s_0467 / Km0467_352) * (1 + s_0671 / Km0671_352) * (1 + s_1751 / Km1751_352) + (1 + s_0421 / Km0421_352) * (1 + s_1430 / Km1430_352) * (1 + s_1754 / Km1754_352) - 1));
    der(s_1752) = (cell * Vmax_353 * (s_1242 * s_0467 * s_1754 - s_0421 * s_1430 * s_1752 / Keq_353) / (Km1242_353 * Km0467_353 * Km1754_353) / ((1 + s_1242 / Km1242_353) * (1 + s_0467 / Km0467_353) * (1 + s_1754 / Km1754_353) + (1 + s_0421 / Km0421_353) * (1 + s_1430 / Km1430_353) * (1 + s_1752 / Km1752_353) - 1)) - (cell * Vmax_354 * (s_0603 * s_0467 * s_1752 - s_0421 * s_1430 * s_1755 / Keq_354) / (Km0603_354 * Km0467_354 * Km1752_354) / ((1 + s_0603 / Km0603_354) * (1 + s_0467 / Km0467_354) * (1 + s_1752 / Km1752_354) + (1 + s_0421 / Km0421_354) * (1 + s_1430 / Km1430_354) * (1 + s_1755 / Km1755_354) - 1));
    der(s_1754) = (cell * Vmax_352 * (s_0467 * s_0671 * s_1751 - s_0421 * s_1430 * s_1754 / Keq_352) / (Km0467_352 * Km0671_352 * Km1751_352) / ((1 + s_0467 / Km0467_352) * (1 + s_0671 / Km0671_352) * (1 + s_1751 / Km1751_352) + (1 + s_0421 / Km0421_352) * (1 + s_1430 / Km1430_352) * (1 + s_1754 / Km1754_352) - 1)) - (cell * Vmax_353 * (s_1242 * s_0467 * s_1754 - s_0421 * s_1430 * s_1752 / Keq_353) / (Km1242_353 * Km0467_353 * Km1754_353) / ((1 + s_1242 / Km1242_353) * (1 + s_0467 / Km0467_353) * (1 + s_1754 / Km1754_353) + (1 + s_0421 / Km0421_353) * (1 + s_1430 / Km1430_353) * (1 + s_1752 / Km1752_353) - 1));
    der(s_1755) = (cell * Vmax_354 * (s_0603 * s_0467 * s_1752 - s_0421 * s_1430 * s_1755 / Keq_354) / (Km0603_354 * Km0467_354 * Km1752_354) / ((1 + s_0603 / Km0603_354) * (1 + s_0467 / Km0467_354) * (1 + s_1752 / Km1752_354) + (1 + s_0421 / Km0421_354) * (1 + s_1430 / Km1430_354) * (1 + s_1755 / Km1755_354) - 1)) - (cell * Vmax_268 * (s_1768 * s_1755 - s_1777 * s_1762 / Keq_268) / (Km1768_268 * Km1755_268) / ((1 + s_1768 / Km1768_268) * (1 + s_1755 / Km1755_268) + (1 + s_1777 / Km1777_268) * (1 + s_1762 / Km1762_268) - 1));
    der(s_1762) = (cell * Vmax_258 * (s_1397 - s_0543 * s_1762 / Keq_258) / Km1397_258 / (1 + s_1397 / Km1397_258 + (1 + s_0543 / Km0543_258) * (1 + s_1762 / Km1762_258) - 1)) + (cell * Vmax_268 * (s_1768 * s_1755 - s_1777 * s_1762 / Keq_268) / (Km1768_268 * Km1755_268) / ((1 + s_1768 / Km1768_268) * (1 + s_1755 / Km1755_268) + (1 + s_1777 / Km1777_268) * (1 + s_1762 / Km1762_268) - 1)) + (cell * Vmax_355 * (s_1734 - s_0149 * s_1762 / Keq_355) / Km1734_355 / (1 + s_1734 / Km1734_355 + (1 + s_0149 / Km0149_355) * (1 + s_1762 / Km1762_355) - 1)) - (cell * Vmax_356 * (s_0467 * s_1762 - s_0421 * s_1733 / Keq_356) / (Km0467_356 * Km1762_356) / ((1 + s_0467 / Km0467_356) * (1 + s_1762 / Km1762_356) + (1 + s_0421 / Km0421_356) * (1 + s_1733 / Km1733_356) - 1));
    der(s_1765) = (cell * Vmax_357 * (s_0826 * pow(s_1028, 8) - pow(s_0783, 8) * s_1765 / Keq_357) / (Km0826_357 * pow(Km1028_357, 8)) / ((1 + s_0826 / Km0826_357) * pow(1 + s_1028 / Km1028_357, 8) + pow(1 + s_0783 / Km0783_357, 8) * (1 + s_1765 / Km1765_357) - 1)) + (2.0 * cell * Vmax_382 * (pow(s_1776, 2) - pow(s_1765, 2) * s_1725 / Keq_382) / pow(Km1776_382, 2) / (pow(1 + s_1776 / Km1776_382, 2) + pow(1 + s_1765 / Km1765_382, 2) * (1 + s_1725 / Km1725_382) - 1)) - (cell * Vmax_358 * (s_1765 - s_1430 * s_1768 / Keq_358) / Km1765_358 / (1 + s_1765 / Km1765_358 + (1 + s_1430 / Km1430_358) * (1 + s_1768 / Km1768_358) - 1)) - (5.5e-05 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1768) = (cell * Vmax_358 * (s_1765 - s_1430 * s_1768 / Keq_358) / Km1765_358 / (1 + s_1765 / Km1765_358 + (1 + s_1430 / Km1430_358) * (1 + s_1768 / Km1768_358) - 1)) - (cell * Vmax_268 * (s_1768 * s_1755 - s_1777 * s_1762 / Keq_268) / (Km1768_268 * Km1755_268) / ((1 + s_1768 / Km1768_268) * (1 + s_1755 / Km1755_268) + (1 + s_1777 / Km1777_268) * (1 + s_1762 / Km1762_268) - 1));
    der(s_1776) = (cell * Vmax_350 * (s_1745 * s_1777 - s_1776 * s_1733 / Keq_350) / (Km1745_350 * Km1777_350) / ((1 + s_1745 / Km1745_350) * (1 + s_1777 / Km1777_350) + (1 + s_1776 / Km1776_350) * (1 + s_1733 / Km1733_350) - 1)) - (2.0 * cell * Vmax_382 * (pow(s_1776, 2) - pow(s_1765, 2) * s_1725 / Keq_382) / pow(Km1776_382, 2) / (pow(1 + s_1776 / Km1776_382, 2) + pow(1 + s_1765 / Km1765_382, 2) * (1 + s_1725 / Km1725_382) - 1));
    der(s_1777) = (cell * Vmax_268 * (s_1768 * s_1755 - s_1777 * s_1762 / Keq_268) / (Km1768_268 * Km1755_268) / ((1 + s_1768 / Km1768_268) * (1 + s_1755 / Km1755_268) + (1 + s_1777 / Km1777_268) * (1 + s_1762 / Km1762_268) - 1)) - (cell * Vmax_350 * (s_1745 * s_1777 - s_1776 * s_1733 / Keq_350) / (Km1745_350 * Km1777_350) / ((1 + s_1745 / Km1745_350) * (1 + s_1777 / Km1777_350) + (1 + s_1776 / Km1776_350) * (1 + s_1733 / Km1733_350) - 1));
    der(s_1791) = (cell * Vmax_361 * (s_0998 - s_1791 / Keq_361) / Km0998_361 / (1 + s_0998 / Km0998_361 + 1 + s_1791 / Km1791_361 - 1)) - (cell * Vmax_359 * (s_1791 - pow(s_0543, 4) * s_0565 / Keq_359) / Km1791_359 / (1 + s_1791 / Km1791_359 + pow(1 + s_0543 / Km0543_359, 4) * (1 + s_0565 / Km0565_359) - 1)) - (cell * Vmax_360 * (pow(s_1552, 2) * s_1791 - pow(s_1551, 2) * s_0768 / Keq_360) / (pow(Km1552_360, 2) * Km1791_360) / (pow(1 + s_1552 / Km1552_360, 2) * (1 + s_1791 / Km1791_360) + pow(1 + s_1551 / Km1551_360, 2) * (1 + s_0768 / Km0768_360) - 1));
    der(s_1792) = (cell * Vmax_250 * (s_0467 * s_1733 - s_0421 * s_1792 / Keq_250) / (Km0467_250 * Km1733_250) / ((1 + s_0467 / Km0467_250) * (1 + s_1733 / Km1733_250) + (1 + s_0421 / Km0421_250) * (1 + s_1792 / Km1792_250) - 1)) - (cell * Vmax_124 * (s_0467 * s_1101 * s_1792 - s_0421 * s_0575 * s_1095 * s_1430 / Keq_124) / (Km0467_124 * Km1101_124 * Km1792_124) / ((1 + s_0467 / Km0467_124) * (1 + s_1101 / Km1101_124) * (1 + s_1792 / Km1792_124) + (1 + s_0421 / Km0421_124) * (1 + s_0575 / Km0575_124) * (1 + s_1095 / Km1095_124) * (1 + s_1430 / Km1430_124) - 1)) - (cell * Vmax_311 * (pow(s_0861, 2) * s_1792 - s_0810 * pow(s_0862, 2) / Keq_311) / (pow(Km0861_311, 2) * Km1792_311) / (pow(1 + s_0861 / Km0861_311, 2) * (1 + s_1792 / Km1792_311) + (1 + s_0810 / Km0810_311) * pow(1 + s_0862 / Km0862_311, 2) - 1)) - (cell * Vmax_349 * (s_1287 * s_1792 - s_0783 * s_1745 / Keq_349) / (Km1287_349 * Km1792_349) / ((1 + s_1287 / Km1287_349) * (1 + s_1792 / Km1792_349) + (1 + s_0783 / Km0783_349) * (1 + s_1745 / Km1745_349) - 1)) - (0.1441 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1799) = (cell * Vmax_207 * (s_1006 * s_1333 - s_1334 * s_1799 / Keq_207) / (Km1006_207 * Km1333_207) / ((1 + s_1006 / Km1006_207) * (1 + s_1333 / Km1333_207) + (1 + s_1334 / Km1334_207) * (1 + s_1799 / Km1799_207) - 1)) - (cell * Vmax_189 * (s_0467 * s_1101 * s_1799 - s_0454 * s_1095 * s_0942 * s_0783 / Keq_189) / (Km0467_189 * Km1101_189 * Km1799_189) / ((1 + s_0467 / Km0467_189) * (1 + s_1101 / Km1101_189) * (1 + s_1799 / Km1799_189) + (1 + s_0454 / Km0454_189) * (1 + s_1095 / Km1095_189) * (1 + s_0942 / Km0942_189) * (1 + s_0783 / Km0783_189) - 1));
    der(s_1804) = (cell * Vmax_389 * (s_1806 - s_1804) / Km1806_389 / (1 + s_1806 / Km1806_389 + 1 + s_1804 / Km1804_389 - 1)) - (0.000341 * cell * max(V0_398 * (1 + ep0133_398 * log(s_0133 / ic0133_398) + ep0378_398 * log(s_0378 / ic0378_398) + ep0226_398 * log(s_0226 / ic0226_398) + ep0380_398 * log(s_0380 / ic0380_398) + ep1041_398 * log(s_1041 / ic1041_398) + ep1552_398 * log(s_1552 / ic1552_398) + ep1061_398 * log(s_1061 / ic1061_398) + ep1068_398 * log(s_1068 / ic1068_398) + ep1072_398 * log(s_1072 / ic1072_398) + ep0467_398 * log(s_0467 / ic0467_398) + ep0480_398 * log(s_0480 / ic0480_398) + ep0476_398 * log(s_0476 / ic0476_398) + ep0497_398 * log(s_0497 / ic0497_398) + ep0520_398 * log(s_0520 / ic0520_398) + ep0555_398 * log(s_0555 / ic0555_398) + ep0546_398 * log(s_0546 / ic0546_398) + ep0575_398 * log(s_0575 / ic0575_398) + ep0579_398 * log(s_0579 / ic0579_398) + ep1083_398 * log(s_1083 / ic1083_398) + ep0726_398 * log(s_0726 / ic0726_398) + ep0731_398 * log(s_0731 / ic0731_398) + ep0760_398 * log(s_0760 / ic0760_398) + ep0805_398 * log(s_0805 / ic0805_398) + ep0859_398 * log(s_0859 / ic0859_398) + ep0838_398 * log(s_0838 / ic0838_398) + ep0841_398 * log(s_0841 / ic0841_398) + ep1101_398 * log(s_1101 / ic1101_398) + ep1095_398 * log(s_1095 / ic1095_398) + ep0929_398 * log(s_0929 / ic0929_398) + ep0945_398 * log(s_0945 / ic0945_398) + ep1106_398 * log(s_1106 / ic1106_398) + ep1119_398 * log(s_1119 / ic1119_398) + ep1494_398 * log(s_1494 / ic1494_398) + ep1127_398 * log(s_1127 / ic1127_398) + ep1131_398 * log(s_1131 / ic1131_398) + ep1141_398 * log(s_1141 / ic1141_398) + ep1212_398 * log(s_1212 / ic1212_398) + ep0336_398 * log(s_0336 / ic0336_398) + ep1255_398 * log(s_1255 / ic1255_398) + ep1261_398 * log(s_1261 / ic1261_398) + ep1333_398 * log(s_1333 / ic1333_398) + ep1335_398 * log(s_1335 / ic1335_398) + ep0451_398 * log(s_0451 / ic0451_398) + ep1329_398 * log(s_1329 / ic1329_398) + ep1437_398 * log(s_1437 / ic1437_398) + ep1435_398 * log(s_1435 / ic1435_398) + ep1151_398 * log(s_1151 / ic1151_398) + ep1508_398 * log(s_1508 / ic1508_398) + ep1155_398 * log(s_1155 / ic1155_398) + ep1522_398 * log(s_1522 / ic1522_398) + ep1546_398 * log(s_1546 / ic1546_398) + ep1170_398 * log(s_1170 / ic1170_398) + ep1577_398 * log(s_1577 / ic1577_398) + ep1609_398 * log(s_1609 / ic1609_398) + ep0337_398 * log(s_0337 / ic0337_398) + ep1644_398 * log(s_1644 / ic1644_398) + ep1179_398 * log(s_1179 / ic1179_398) + ep1185_398 * log(s_1185 / ic1185_398) + ep1189_398 * log(s_1189 / ic1189_398) + ep1765_398 * log(s_1765 / ic1765_398) + ep1792_398 * log(s_1792 / ic1792_398) + ep1193_398 * log(s_1193 / ic1193_398) + ep1804_398 * log(s_1804 / ic1804_398) + ep1033_398 * log(s_1033 / ic1033_398) + ep1719_398 * log(s_1719 / ic1719_398)), zero_flux_398));
    der(s_1806) = 0.0;
    der(s_1807) = 0.0;
    der(s_1835) = 0.0;
    der(s_2072) = 0.0;
    der(s_2093) = 0.0;
    der(e_0001) = 0.0;
    der(e_0002) = 0.0;
    der(e_0003) = 0.0;
    der(e_0005) = 0.0;
    der(e_0006) = 0.0;
    der(e_0008) = 0.0;
    der(e_0010) = 0.0;
    der(e_0012) = 0.0;
    der(e_0020) = 0.0;
    der(e_0022) = 0.0;
    der(e_0030) = 0.0;
    der(e_0031) = 0.0;
    der(e_0032) = 0.0;
    der(e_0033) = 0.0;
    der(e_0034) = 0.0;
    der(e_0035) = 0.0;
    der(e_0036) = 0.0;
    der(e_0037) = 0.0;
    der(e_0038) = 0.0;
    der(e_0039) = 0.0;
    der(e_0040) = 0.0;
    der(e_0041) = 0.0;
    der(e_0042) = 0.0;
    der(e_0043) = 0.0;
    der(e_0044) = 0.0;
    der(e_0045) = 0.0;
    der(e_0046) = 0.0;
    der(e_0048) = 0.0;
    der(e_0051) = 0.0;
    der(e_0052) = 0.0;
    der(e_0053) = 0.0;
    der(e_0054) = 0.0;
    der(e_0060) = 0.0;
    der(e_0061) = 0.0;
    der(e_0062) = 0.0;
    der(e_0063) = 0.0;
    der(e_0064) = 0.0;
    der(e_0065) = 0.0;
    der(e_0071) = 0.0;
    der(e_0074) = 0.0;
    der(e_0076) = 0.0;
    der(e_0077) = 0.0;
    der(e_0078) = 0.0;
    der(e_0079) = 0.0;
    der(e_0080) = 0.0;
    der(e_0081) = 0.0;
    der(e_0082) = 0.0;
    der(e_0083) = 0.0;
    der(e_0084) = 0.0;
    der(e_0085) = 0.0;
    der(e_0094) = 0.0;
    der(e_0099) = 0.0;
    der(e_0100) = 0.0;
    der(e_0103) = 0.0;
    der(e_0110) = 0.0;
    der(e_0116) = 0.0;
    der(e_0125) = 0.0;
    der(e_0134) = 0.0;
    der(e_0135) = 0.0;
    der(e_0137) = 0.0;
    der(e_0138) = 0.0;
    der(e_0139) = 0.0;
    der(e_0144) = 0.0;
    der(e_0145) = 0.0;
    der(e_0146) = 0.0;
    der(e_0149) = 0.0;
    der(e_0150) = 0.0;
    der(e_0151) = 0.0;
    der(e_0152) = 0.0;
    der(e_0162) = 0.0;
    der(e_0167) = 0.0;
    der(e_0168) = 0.0;
    der(e_0175) = 0.0;
    der(e_0177) = 0.0;
    der(e_0183) = 0.0;
    der(e_0184) = 0.0;
    der(e_0185) = 0.0;
    der(e_0186) = 0.0;
    der(e_0188) = 0.0;
    der(e_0221) = 0.0;
    der(e_0223) = 0.0;
    der(e_0225) = 0.0;
    der(e_0238) = 0.0;
    der(e_0246) = 0.0;
    der(e_0253) = 0.0;
    der(e_0254) = 0.0;
    der(e_0260) = 0.0;
    der(e_0263) = 0.0;
    der(e_0264) = 0.0;
    der(e_0273) = 0.0;
    der(e_0274) = 0.0;
    der(e_0275) = 0.0;
    der(e_0276) = 0.0;
    der(e_0277) = 0.0;
    der(e_0278) = 0.0;
    der(e_0279) = 0.0;
    der(e_0280) = 0.0;
    der(e_0281) = 0.0;
    der(e_0282) = 0.0;
    der(e_0291) = 0.0;
    der(e_0292) = 0.0;
    der(e_0300) = 0.0;
    der(e_0313) = 0.0;
    der(e_0318) = 0.0;
    der(e_0323) = 0.0;
    der(e_0324) = 0.0;
    der(e_0326) = 0.0;
    der(e_0327) = 0.0;
    der(e_0328) = 0.0;
    der(e_0330) = 0.0;
    der(e_0331) = 0.0;
    der(e_0332) = 0.0;
    der(e_0342) = 0.0;
    der(e_0368) = 0.0;
    der(e_0372) = 0.0;
    der(e_0373) = 0.0;
    der(e_0374) = 0.0;
    der(e_0375) = 0.0;
    der(e_0376) = 0.0;
    der(e_0377) = 0.0;
    der(e_0378) = 0.0;
    der(e_0389) = 0.0;
    der(e_0391) = 0.0;
    der(e_0395) = 0.0;
    der(e_0403) = 0.0;
    der(e_0404) = 0.0;
    der(e_0405) = 0.0;
    der(e_0406) = 0.0;
    der(e_0416) = 0.0;
    der(e_0425) = 0.0;
    der(e_0426) = 0.0;
    der(e_0427) = 0.0;
    der(e_0428) = 0.0;
    der(e_0429) = 0.0;
    der(e_0431) = 0.0;
    der(e_0432) = 0.0;
    der(e_0433) = 0.0;
    der(e_0435) = 0.0;
    der(e_0436) = 0.0;
    der(e_0439) = 0.0;
    der(e_0451) = 0.0;
    der(e_0466) = 0.0;
    der(e_0514) = 0.0;
    der(e_0515) = 0.0;
    der(e_0516) = 0.0;
    der(e_0519) = 0.0;
    der(e_0531) = 0.0;
    der(e_0540) = 0.0;
    der(e_0541) = 0.0;
    der(e_0544) = 0.0;
    der(e_0554) = 0.0;
    der(e_0559) = 0.0;
    der(e_0561) = 0.0;
    der(e_0567) = 0.0;
    der(e_0572) = 0.0;
    der(e_0577) = 0.0;
    der(e_0578) = 0.0;
    der(e_0579) = 0.0;
    der(e_0580) = 0.0;
    der(e_0586) = 0.0;
    der(e_0605) = 0.0;
    der(e_0606) = 0.0;
    der(e_0607) = 0.0;
    der(e_0608) = 0.0;
    der(e_0609) = 0.0;
    der(e_0610) = 0.0;
    der(e_0611) = 0.0;
    der(e_0612) = 0.0;
    der(e_0641) = 0.0;
    der(e_0657) = 0.0;
    der(e_0682) = 0.0;
    der(e_0691) = 0.0;
    der(e_0717) = 0.0;
    der(e_0719) = 0.0;
    der(e_0720) = 0.0;
    der(e_0727) = 0.0;
    der(e_0728) = 0.0;
    der(e_0729) = 0.0;
    der(e_0730) = 0.0;
    der(e_0731) = 0.0;
    der(e_0732) = 0.0;
    der(e_0734) = 0.0;
    der(e_0735) = 0.0;
    der(e_0736) = 0.0;
    der(e_0742) = 0.0;
    der(e_0743) = 0.0;
    der(e_0746) = 0.0;
    der(e_0750) = 0.0;
    der(e_0757) = 0.0;
    der(e_0765) = 0.0;
    der(e_0768) = 0.0;
    der(e_0770) = 0.0;
    der(e_0771) = 0.0;
    der(e_0774) = 0.0;
    der(e_0775) = 0.0;
    der(e_0776) = 0.0;
    der(e_0791) = 0.0;
    der(e_0793) = 0.0;
    der(e_0795) = 0.0;
    der(e_0796) = 0.0;
    der(e_0798) = 0.0;
    der(e_0799) = 0.0;
    der(e_0803) = 0.0;
    der(e_0804) = 0.0;
    der(e_0805) = 0.0;
    der(e_0813) = 0.0;
    der(e_0815) = 0.0;
    der(e_0818) = 0.0;
    der(e_0819) = 0.0;
    der(e_0821) = 0.0;
    der(e_0822) = 0.0;
    der(e_0823) = 0.0;
    der(e_0825) = 0.0;
    der(e_0826) = 0.0;
    der(e_0827) = 0.0;
    der(e_0828) = 0.0;
    der(e_0839) = 0.0;
    der(e_0848) = 0.0;
    der(e_0866) = 0.0;
    der(e_0867) = 0.0;
    der(e_0868) = 0.0;
    der(e_0869) = 0.0;
    der(e_0870) = 0.0;
    der(e_0871) = 0.0;
    der(e_0872) = 0.0;
    der(e_0873) = 0.0;
    der(e_0875) = 0.0;
    der(e_0876) = 0.0;
    der(e_0893) = 0.0;
    der(e_0894) = 0.0;
    der(e_0896) = 0.0;
    der(e_0897) = 0.0;
    der(e_0903) = 0.0;
    der(e_0911) = 0.0;
    der(e_0918) = 0.0;
    der(e_0919) = 0.0;
    der(e_0925) = 0.0;
    der(e_0926) = 0.0;
    der(e_0928) = 0.0;
    der(e_0931) = 0.0;
    der(e_0941) = 0.0;
    der(e_0951) = 0.0;
    der(e_0953) = 0.0;
    der(e_0960) = 0.0;
    der(e_0962) = 0.0;
    der(e_0964) = 0.0;
    der(e_0974) = 0.0;
    der(e_0975) = 0.0;
    der(e_0977) = 0.0;
    der(e_0978) = 0.0;
    der(e_0979) = 0.0;
    der(e_0986) = 0.0;
    der(e_0987) = 0.0;
    der(e_0988) = 0.0;
    der(e_0990) = 0.0;
    der(e_0991) = 0.0;
    der(e_0993) = 0.0;
    der(e_0994) = 0.0;
    der(e_1004) = 0.0;
    der(e_1005) = 0.0;
    der(e_1006) = 0.0;
    der(e_1010) = 0.0;
    der(e_1014) = 0.0;
    der(e_1015) = 0.0;
    der(e_1019) = 0.0;
    der(e_1023) = 0.0;
    der(e_1026) = 0.0;
    der(e_1027) = 0.0;
    der(e_1028) = 0.0;
    der(e_1029) = 0.0;
    der(e_1034) = 0.0;
    der(e_1045) = 0.0;
    der(e_1086) = 0.0;
    der(e_1105) = 0.0;
    der(e_1106) = 0.0;
    der(e_1108) = 0.0;
    der(e_1109) = 0.0;
    der(e_1110) = 0.0;
    der(e_1125) = 0.0;
    der(e_1126) = 0.0;
    der(e_1127) = 0.0;
    der(e_1128) = 0.0;
    der(e_1129) = 0.0;
    der(e_1130) = 0.0;
    der(e_1136) = 0.0;
    der(e_1137) = 0.0;
    der(e_1141) = 0.0;
    der(e_1149) = 0.0;
    der(e_1150) = 0.0;
    der(e_1160) = 0.0;
    der(e_1167) = 0.0;
    der(e_1168) = 0.0;
    der(e_1169) = 0.0;
    der(e_1170) = 0.0;
    der(e_1172) = 0.0;
    der(e_1184) = 0.0;
    der(e_1185) = 0.0;
    der(e_1186) = 0.0;
    der(e_1188) = 0.0;
    der(e_1189) = 0.0;
    der(e_1196) = 0.0;
    der(e_1200) = 0.0;
    der(e_1201) = 0.0;
    der(e_1202) = 0.0;
    der(e_1203) = 0.0;
    der(e_1205) = 0.0;
    der(e_1206) = 0.0;
    der(e_1207) = 0.0;
    der(e_1210) = 0.0;
    der(e_1226) = 0.0;
    der(e_1227) = 0.0;
    der(e_1232) = 0.0;
    der(e_1233) = 0.0;
    der(e_1234) = 0.0;
    der(e_1238) = 0.0;
    der(e_1239) = 0.0;
    der(e_1240) = 0.0;
    der(e_1241) = 0.0;
    der(e_1242) = 0.0;
    der(e_1243) = 0.0;
    der(e_1244) = 0.0;
    der(e_1247) = 0.0;
    der(e_1248) = 0.0;
    der(e_1249) = 0.0;
    der(e_1250) = 0.0;
    der(e_1251) = 0.0;
    der(e_1252) = 0.0;
    der(e_1253) = 0.0;
    der(e_1254) = 0.0;
    der(e_1256) = 0.0;
    der(e_1257) = 0.0;
    der(e_1258) = 0.0;
    der(e_1259) = 0.0;
    der(e_1262) = 0.0;
    der(e_1263) = 0.0;
    der(e_1264) = 0.0;
    der(e_1271) = 0.0;
    der(e_1272) = 0.0;
    der(e_1273) = 0.0;
    der(e_1275) = 0.0;
    der(e_1276) = 0.0;
    der(e_1277) = 0.0;
    der(e_1291) = 0.0;
    der(e_1298) = 0.0;
    der(e_1312) = 0.0;
    der(e_1313) = 0.0;
    der(e_1315) = 0.0;
    der(e_1326) = 0.0;
    der(e_1334) = 0.0;
    der(e_1335) = 0.0;
    der(e_1339) = 0.0;
    der(e_1340) = 0.0;
    der(e_1341) = 0.0;
    der(e_1355) = 0.0;
    der(e_1366) = 0.0;
    der(e_1367) = 0.0;
    der(e_1369) = 0.0;
    der(e_1373) = 0.0;
    der(e_1374) = 0.0;
    der(e_1376) = 0.0;
    der(e_1377) = 0.0;




end BIOMD470;
