
#ifndef BIOMD482_PERTHREAD_SYSTEMDEFINITION_H
#define BIOMD482_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    F[4]=((198.8913525498891 * ((X[5] - X[4]) / (1.0 + (22.17294900221729 * (X[5] + X[4]))))) + ((((-0.008335135135135134 * ((1.0 + (1.722 * X[19])) * X[4])) + (0.140536013400335 * X[1])) / (1.0 + ((0.001081081081081081 * X[4]) + (1.675041876046901 * X[1])))) + (((-2.553729456384323e-05 * ((1.0 + (1.19 * X[19])) * X[4])) + (0.0005730659025787966 * X[3])) / (1.0 + ((1.264222503160556 * X[4]) + (0.01432664756446991 * X[3]))))));
    F[3]=((((2.553729456384323e-05 * ((1.0 + (1.19 * X[19])) * X[4])) + (-0.0005730659025787966 * X[3])) / (1.0 + ((1.264222503160556 * X[4]) + (0.01432664756446991 * X[3])))) + (((-0.1814126394052045 * X[3]) + (0.001637239165329053 * ((1.0 + (214.7 * X[21])) * X[6]))) / (1.0 + ((0.3717472118959108 * X[3]) + (1605.136436597111 * X[6])))));
    F[6]=(((0.1814126394052045 * X[3]) + (-0.001637239165329053 * ((1.0 + (214.7 * X[21])) * X[6]))) / (1.0 + ((0.3717472118959108 * X[3]) + (1605.136436597111 * X[6]))));
    F[10]=((0.00247 * (X[12] / (0.996 + X[12]))) + (-2.84e-05 * ((1.0 + (46.54 * X[11])) * (X[10] / (8.43 + X[10])))));
    F[9]=(((0.4184397163120568 * X[12]) + (-7.792207792207792e-05 * X[9])) / (1.0 + ((0.01773049645390071 * X[12]) + (64.93506493506493 * X[9]))));
    F[12]=((0.00229 * (X[1] / (2.92 + X[1]))) + ((0.004912280701754385 * ((X[13] - X[12]) / (1.0 + (4.385964912280701 * (X[13] + X[12]))))) + ((((-0.4184397163120568 * X[12]) + (7.792207792207792e-05 * X[9])) / (1.0 + ((0.01773049645390071 * X[12]) + (64.93506493506493 * X[9])))) + (-0.00247 * (X[12] / (0.996 + X[12]))))));
    F[1]=((((0.008335135135135134 * ((1.0 + (1.722 * X[19])) * X[4])) + (-0.140536013400335 * X[1])) / (1.0 + ((0.001081081081081081 * X[4]) + (1.675041876046901 * X[1])))) + ((2.84e-05 * ((1.0 + (46.54 * X[11])) * (X[10] / (8.43 + X[10])))) + (-0.00229 * (X[1] / (2.92 + X[1])))));
    F[5]=(-198.8913525498891 * ((X[5] - X[4]) / (1.0 + (22.17294900221729 * (X[5] + X[4])))));
    F[13]=(-0.004912280701754385 * ((X[13] - X[12]) / (1.0 + (4.385964912280701 * (X[13] + X[12])))));
    F[20]=((0.12225 * (X[19] * X[2])) + (-0.0045985 * X[20]));
    F[2]=((0.0045985 * X[20]) + (-0.12225 * (X[19] * X[2])));
    F[22]=((3.1385e-05 * (X[15] * X[19])) + (-0.0095934 * X[22]));
    F[15]=((0.0095934 * X[22]) + (-3.1385e-05 * (X[15] * X[19])));
    F[19]=((((0.008335135135135134 * ((1.0 + (1.722 * X[19])) * X[4])) + (-0.140536013400335 * X[1])) / (1.0 + ((0.001081081081081081 * X[4]) + (1.675041876046901 * X[1])))) + ((((2.553729456384323e-05 * ((1.0 + (1.19 * X[19])) * X[4])) + (-0.0005730659025787966 * X[3])) / (1.0 + ((1.264222503160556 * X[4]) + (0.01432664756446991 * X[3])))) + ((4.4307e-05 * (X[16] * X[0])) + ((((-0.008335135135135134 * ((1.0 + (1.722 * X[19])) * X[4])) + (0.140536013400335 * X[1])) / (1.0 + ((0.001081081081081081 * X[4]) + (1.675041876046901 * X[1])))) + ((((-2.553729456384323e-05 * ((1.0 + (1.19 * X[19])) * X[4])) + (0.0005730659025787966 * X[3])) / (1.0 + ((1.264222503160556 * X[4]) + (0.01432664756446991 * X[3])))) + (-0.35211 * X[19]))))));
    F[0]=((0.35211 * X[19]) + (-4.4307e-05 * (X[16] * X[0])));
    F[17]=((0.2751 * (X[16] * X[22])) + ((0.013032 * X[18]) + (-0.0367539 * X[17])));
    F[18]=((758.12 * (X[8] * X[22])) + ((-0.971904 * X[18]) + (0.000192 * X[17])));
    F[16]=((239.69 * X[8]) + ((-0.02094614 * X[16]) + ((0.0072509 * X[17]) + ((X[16] * ((4.4307e-05 * X[0]) + (-0.2751 * X[22]))) + (-4.4307e-05 * (X[16] * X[0]))))));
    F[8]=((5.5702 * (888.77 - X[8])) + ((0.91758 * X[18]) + ((-239.69 * X[8]) + ((0.020934 * X[16]) + (-758.12 * (X[8] * X[22]))))));
    F[11]=((0.00010958 * X[14]) + (-0.0018592 * X[11]));
    F[14]=((486.28 * X[2]) + (-0.0046101 * X[14]));
    F[21]=((((0.1814126394052045 * X[3]) + (-0.001637239165329053 * ((1.0 + (214.7 * X[21])) * X[6]))) / (1.0 + ((0.3717472118959108 * X[3]) + (1605.136436597111 * X[6])))) + ((112.76 * X[7]) + ((((-0.1814126394052045 * X[3]) + (0.001637239165329053 * ((1.0 + (214.7 * X[21])) * X[6]))) / (1.0 + ((0.3717472118959108 * X[3]) + (1605.136436597111 * X[6])))) + (-1.9448 * (X[21] * X[4])))));
    F[7]=((1.9448 * (X[21] * X[4])) + (-112.76 * X[7]));

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    X[0]=1.1182; //Akt
    X[1]=9.571; //F16P
    X[2]=1.069e-05; //Foxo
    X[3]=5.303; //G1P
    X[4]=0.5188; //G6P
    X[5]=114.9; //GLCex
    X[6]=4.8248; //GLY
    X[7]=0.4726; //GP
    X[8]=888.77; //IRS
    X[9]=1001.0; //LAC
    X[10]=0.0022; //OAA
    X[11]=0.7685999999999999; //PEPCK
    X[12]=0.9872; //PYRin
    X[13]=137.5; //PYRout
    X[14]=2.905; //mRNA
    X[15]=880.25; //mTOR
    X[16]=0.0; //p1IRS
    X[17]=0.0; //p1p2IRS
    X[18]=0.0; //p2IRS
    X[19]=0.0; //pAkt
    X[20]=0.0; //pFoxo
    X[21]=0.1723; //pGP
    X[22]=0.0; //pmTOR

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
