
model BIOMD472 "Smallbone2013 - Yeast metabolic model with modular rate law"

    function pow
        input  Real x;
        input  Real power;
        output Real y;
        algorithm
            y := x^power;
    end pow;
    
    function piecewise
        input Real x;
        input Boolean condition;
        input Real y;
        output Real z;
        algorithm
            z := if condition then x else y;
    end piecewise;


    function max
        	input Real x;
	input Real y;
        output Real y;
    algorithm
        y :=  (x + y + abs(x - y)) / 2;
    end max;


    parameter Real FLUX_VALUE_0 = 0.0430685067991607;
    parameter Real Vmax_0 = 0.430685067991607;
    parameter Real Keq_0 = 0.2;
    parameter Real Km1543_0 = 0.1;
    parameter Real Km0002_0 = 0.1;
    parameter Real Km1538_0 = 0.1;
    parameter Real FLUX_VALUE_1 = 0.0430685067991607;
    parameter Real Vmax_1 = 0.430685067991607;
    parameter Real Keq_1 = 0.2;
    parameter Real Km1543_1 = 0.1;
    parameter Real Km0004_1 = 0.1;
    parameter Real Km1538_1 = 0.1;
    parameter Real FLUX_VALUE_2 = 0.00251625132250899;
    parameter Real Vmax_2 = 0.0150975079350539;
    parameter Real Keq_2 = 2.0;
    parameter Real Km0077_2 = 0.1;
    parameter Real Km0312_2 = 0.1;
    parameter Real FLUX_VALUE_3 = 0.000240277332169094;
    parameter Real Vmax_3 = 0.00336388265036732;
    parameter Real Keq_3 = 2.0;
    parameter Real Km0082_3 = 0.1;
    parameter Real Km0380_3 = 0.1;
    parameter Real Km0529_3 = 0.1;
    parameter Real Km1331_3 = 0.1;
    parameter Real FLUX_VALUE_4 = 0.00625077817220527;
    parameter Real Vmax_4 = 0.0875108944108738;
    parameter Real Keq_4 = 2.0;
    parameter Real Km0991_4 = 0.1;
    parameter Real Km1203_4 = 0.1;
    parameter Real Km0118_4 = 0.1;
    parameter Real Km1198_4 = 0.1;
    parameter Real FLUX_VALUE_5 = 3.75729835487922e-05;
    parameter Real Vmax_5 = 0.000375729835487922;
    parameter Real Keq_5 = 0.2;
    parameter Real Km0142_5 = 0.1;
    parameter Real Km0313_5 = 0.1;
    parameter Real Km0419_5 = 0.1;
    parameter Real FLUX_VALUE_6 = 3.75729835487922e-05;
    parameter Real Vmax_6 = 0.000526021769683091;
    parameter Real Keq_6 = 2.0;
    parameter Real Km0141_6 = 0.1;
    parameter Real Km1212_6 = 0.1;
    parameter Real Km0142_6 = 0.1;
    parameter Real Km1207_6 = 0.1;
    parameter Real FLUX_VALUE_7 = 0.00965062714996943;
    parameter Real Vmax_7 = 0.135108780099572;
    parameter Real Keq_7 = 2.0;
    parameter Real Km0178_7 = 0.1;
    parameter Real Km1399_7 = 0.1;
    parameter Real Km0039_7 = 0.1;
    parameter Real Km0456_7 = 0.1;
    parameter Real FLUX_VALUE_8 = 0.01086200797138;
    parameter Real Vmax_8 = 0.15206811159932;
    parameter Real Keq_8 = 2.0;
    parameter Real Km0176_8 = 0.1;
    parameter Real Km0991_8 = 0.1;
    parameter Real Km0180_8 = 0.1;
    parameter Real Km0953_8 = 0.1;
    parameter Real FLUX_VALUE_9 = 0.0100308480322675;
    parameter Real Vmax_9 = 0.140431872451745;
    parameter Real Keq_9 = 2.0;
    parameter Real Km0551_9 = 0.1;
    parameter Real Km1360_9 = 0.1;
    parameter Real Km0349_9 = 0.1;
    parameter Real Km1322_9 = 0.1;
    parameter Real FLUX_VALUE_10 = 0.0112491235594474;
    parameter Real Vmax_10 = 0.0674947413566844;
    parameter Real Keq_10 = 2.0;
    parameter Real Km0162_10 = 0.1;
    parameter Real Km0165_10 = 0.1;
    parameter Real FLUX_VALUE_11 = 0.0112491235594486;
    parameter Real Vmax_11 = 0.15748772983228;
    parameter Real Keq_11 = 2.0;
    parameter Real Km0232_11 = 0.1;
    parameter Real Km0373_11 = 0.1;
    parameter Real Km0162_11 = 0.1;
    parameter Real Km0529_11 = 0.1;
    parameter Real FLUX_VALUE_12 = 0.01086200797138;
    parameter Real Vmax_12 = 0.06517204782828;
    parameter Real Keq_12 = 2.0;
    parameter Real Km0835_12 = 0.1;
    parameter Real Km0454_12 = 0.1;
    parameter Real FLUX_VALUE_13 = 0.0112491235594566;
    parameter Real Vmax_13 = 0.112491235594566;
    parameter Real Keq_13 = 0.2;
    parameter Real Km0010_13 = 0.1;
    parameter Real Km0291_13 = 0.1;
    parameter Real Km0456_13 = 0.1;
    parameter Real FLUX_VALUE_14 = 0.00217467874479323;
    parameter Real Vmax_14 = 0.0217467874479323;
    parameter Real Keq_14 = 0.2;
    parameter Real Km0390_14 = 0.1;
    parameter Real Km0423_14 = 0.1;
    parameter Real Km1322_14 = 0.1;
    parameter Real FLUX_VALUE_15 = 7.51459670975844e-05;
    parameter Real Vmax_15 = 0.000751459670975844;
    parameter Real Keq_15 = 0.2;
    parameter Real Km0577_15 = 0.1;
    parameter Real Km0158_15 = 0.1;
    parameter Real Km0722_15 = 0.1;
    parameter Real FLUX_VALUE_16 = 0.0100308480322675;
    parameter Real Vmax_16 = 0.060185088193605;
    parameter Real Keq_16 = 2.0;
    parameter Real Km0210_16 = 0.1;
    parameter Real Km0211_16 = 0.1;
    parameter Real FLUX_VALUE_17 = 0.0100308480322675;
    parameter Real Vmax_17 = 0.100308480322675;
    parameter Real Keq_17 = 0.2;
    parameter Real Km0349_17 = 0.1;
    parameter Real Km0210_17 = 0.1;
    parameter Real Km1322_17 = 0.1;
    parameter Real FLUX_VALUE_18 = 2.04421699920047e-05;
    parameter Real Vmax_18 = 0.000286190379888066;
    parameter Real Keq_18 = 2.0;
    parameter Real Km0231_18 = 0.1;
    parameter Real Km1212_18 = 0.1;
    parameter Real Km1207_18 = 0.1;
    parameter Real Km1445_18 = 0.1;
    parameter Real FLUX_VALUE_19 = 0.0112491235594474;
    parameter Real Vmax_19 = 0.0674947413566844;
    parameter Real Keq_19 = 2.0;
    parameter Real Km0165_19 = 0.1;
    parameter Real Km0009_19 = 0.1;
    parameter Real FLUX_VALUE_20 = 0.0112491235594474;
    parameter Real Vmax_20 = 0.157487729832264;
    parameter Real Keq_20 = 2.0;
    parameter Real Km0009_20 = 0.1;
    parameter Real Km1198_20 = 0.1;
    parameter Real Km0010_20 = 0.1;
    parameter Real Km1203_20 = 0.1;
    parameter Real FLUX_VALUE_21 = 0.0100308480322675;
    parameter Real Vmax_21 = 0.140431872451745;
    parameter Real Keq_21 = 2.0;
    parameter Real Km0261_21 = 0.1;
    parameter Real Km1360_21 = 0.1;
    parameter Real Km0324_21 = 0.1;
    parameter Real Km1322_21 = 0.1;
    parameter Real FLUX_VALUE_22 = 0.00375691882979276;
    parameter Real Vmax_22 = 0.172818266170467;
    parameter Real Keq_22 = 0.2;
    parameter Real Km0301_22 = 0.1;
    parameter Real Km0434_22 = 0.1;
    parameter Real Km0999_22 = 0.1;
    parameter Real Km0302_22 = 0.1;
    parameter Real Km0394_22 = 0.1;
    parameter Real Km0991_22 = 0.1;
    parameter Real Km1322_22 = 0.1;
    parameter Real FLUX_VALUE_23 = 0.00250816743817059;
    parameter Real Vmax_23 = 0.0351143441343883;
    parameter Real Keq_23 = 2.0;
    parameter Real Km0306_23 = 0.1;
    parameter Real Km1212_23 = 0.1;
    parameter Real Km0322_23 = 0.1;
    parameter Real Km1207_23 = 0.1;
    parameter Real FLUX_VALUE_24 = 0.0212913573443156;
    parameter Real Vmax_24 = 0.298079002820418;
    parameter Real Keq_24 = 2.0;
    parameter Real Km0146_24 = 0.1;
    parameter Real Km1212_24 = 0.1;
    parameter Real Km0016_24 = 0.1;
    parameter Real Km1207_24 = 0.1;
    parameter Real FLUX_VALUE_25 = 0.0212913573443156;
    parameter Real Vmax_25 = 0.298079002820418;
    parameter Real Keq_25 = 2.0;
    parameter Real Km1399_25 = 0.1;
    parameter Real Km0146_25 = 0.1;
    parameter Real Km0456_25 = 0.1;
    parameter Real FLUX_VALUE_26 = 0.00155984810490327;
    parameter Real Vmax_26 = 0.0218378734686458;
    parameter Real Keq_26 = 2.0;
    parameter Real Km0373_26 = 0.1;
    parameter Real Km0367_26 = 0.1;
    parameter Real Km0529_26 = 0.1;
    parameter Real FLUX_VALUE_27 = 0.00036795905905662;
    parameter Real Vmax_27 = 0.0110387717716986;
    parameter Real Keq_27 = 2.0;
    parameter Real Km0373_27 = 0.1;
    parameter Real Km0434_27 = 0.1;
    parameter Real Km0445_27 = 0.1;
    parameter Real Km0394_27 = 0.1;
    parameter Real Km1101_27 = 0.1;
    parameter Real Km1322_27 = 0.1;
    parameter Real FLUX_VALUE_28 = 0.0115748193382789;
    parameter Real Vmax_28 = 0.115748193382789;
    parameter Real Keq_28 = 20.0;
    parameter Real Km0362_28 = 0.1;
    parameter Real Km0529_28 = 0.1;
    parameter Real Km0373_28 = 0.1;
    parameter Real FLUX_VALUE_29 = 0.00609896813767666;
    parameter Real Vmax_29 = 0.0853855539274732;
    parameter Real Keq_29 = 2.0;
    parameter Real Km0434_29 = 0.1;
    parameter Real Km1192_29 = 0.1;
    parameter Real Km0394_29 = 0.1;
    parameter Real Km1191_29 = 0.1;
    parameter Real FLUX_VALUE_30 = 0.00609896813767666;
    parameter Real Vmax_30 = 0.0853855539274732;
    parameter Real Keq_30 = 2.0;
    parameter Real Km0145_30 = 0.1;
    parameter Real Km0991_30 = 0.1;
    parameter Real Km0180_30 = 0.1;
    parameter Real Km1182_30 = 0.1;
    parameter Real FLUX_VALUE_31 = 0.000583975250318604;
    parameter Real Vmax_31 = 0.00817565350446046;
    parameter Real Keq_31 = 2.0;
    parameter Real Km0386_31 = 0.1;
    parameter Real Km0434_31 = 0.1;
    parameter Real Km0394_31 = 0.1;
    parameter Real Km0423_31 = 0.1;
    parameter Real FLUX_VALUE_32 = 0.000583975250368712;
    parameter Real Vmax_32 = 0.00583975250368712;
    parameter Real Keq_32 = 0.2;
    parameter Real Km1413_32 = 0.1;
    parameter Real Km0386_32 = 0.1;
    parameter Real Km1012_32 = 0.1;
    parameter Real FLUX_VALUE_33 = 0.168650639524106;
    parameter Real Vmax_33 = 2.36110895333748;
    parameter Real Keq_33 = 2.0;
    parameter Real Km0423_33 = 0.1;
    parameter Real Km0434_33 = 0.1;
    parameter Real Km0394_33 = 0.1;
    parameter Real FLUX_VALUE_34 = 0.00375691882979276;
    parameter Real Vmax_34 = 0.0375691882979276;
    parameter Real Keq_34 = 0.2;
    parameter Real Km0299_34 = 0.1;
    parameter Real Km0403_34 = 0.1;
    parameter Real Km0725_34 = 0.1;
    parameter Real FLUX_VALUE_35 = 0.00439869575080998;
    parameter Real Vmax_35 = 0.0439869575080998;
    parameter Real Keq_35 = 0.2;
    parameter Real Km0393_35 = 0.1;
    parameter Real Km0423_35 = 0.1;
    parameter Real Km0725_35 = 0.1;
    parameter Real FLUX_VALUE_36 = 0.00439869575080998;
    parameter Real Vmax_36 = 0.131960872524299;
    parameter Real Keq_36 = 2.0;
    parameter Real Km0785_36 = 0.1;
    parameter Real Km0849_36 = 0.1;
    parameter Real Km0973_36 = 0.1;
    parameter Real Km0393_36 = 0.1;
    parameter Real Km0739_36 = 0.1;
    parameter Real Km1322_36 = 0.1;
    parameter Real FLUX_VALUE_37 = 0.00217467874478967;
    parameter Real Vmax_37 = 0.0304455024270554;
    parameter Real Keq_37 = 2.0;
    parameter Real Km0298_37 = 0.1;
    parameter Real Km0434_37 = 0.1;
    parameter Real Km0201_37 = 0.1;
    parameter Real Km0394_37 = 0.1;
    parameter Real FLUX_VALUE_38 = 0.0174126109618039;
    parameter Real Vmax_38 = 0.522378328854117;
    parameter Real Keq_38 = 2.0;
    parameter Real Km0434_38 = 0.1;
    parameter Real Km0955_38 = 0.1;
    parameter Real Km1582_38 = 0.1;
    parameter Real Km0404_38 = 0.1;
    parameter Real Km0423_38 = 0.1;
    parameter Real Km0633_38 = 0.1;
    parameter Real FLUX_VALUE_39 = 0.000888088702058448;
    parameter Real Vmax_39 = 0.0124332418288183;
    parameter Real Keq_39 = 2.0;
    parameter Real Km0568_39 = 0.1;
    parameter Real Km1543_39 = 0.1;
    parameter Real Km0409_39 = 0.1;
    parameter Real Km1538_39 = 0.1;
    parameter Real FLUX_VALUE_40 = 0.00107785124523996;
    parameter Real Vmax_40 = 0.0150899174333594;
    parameter Real Keq_40 = 2.0;
    parameter Real Km0427_40 = 0.1;
    parameter Real Km1386_40 = 0.1;
    parameter Real Km0633_40 = 0.1;
    parameter Real Km1187_40 = 0.1;
    parameter Real FLUX_VALUE_41 = 0.00107785124523716;
    parameter Real Vmax_41 = 0.0237127273952175;
    parameter Real Keq_41 = 0.2;
    parameter Real Km0515_41 = 0.1;
    parameter Real Km0999_41 = 0.1;
    parameter Real Km0427_41 = 0.1;
    parameter Real Km0991_41 = 0.1;
    parameter Real Km1399_41 = 0.1;
    parameter Real FLUX_VALUE_42 = 0.00609896813766667;
    parameter Real Vmax_42 = 0.0609896813766667;
    parameter Real Keq_42 = 0.2;
    parameter Real Km0015_42 = 0.1;
    parameter Real Km0725_42 = 0.1;
    parameter Real Km0965_42 = 0.1;
    parameter Real FLUX_VALUE_43 = 0.00609896813766667;
    parameter Real Vmax_43 = 0.18296904413;
    parameter Real Keq_43 = 2.0;
    parameter Real Km0434_43 = 0.1;
    parameter Real Km0973_43 = 0.1;
    parameter Real Km0979_43 = 0.1;
    parameter Real Km0015_43 = 0.1;
    parameter Real Km0423_43 = 0.1;
    parameter Real Km0633_43 = 0.1;
    parameter Real FLUX_VALUE_44 = 0.00609896813766758;
    parameter Real Vmax_44 = 0.182969044130027;
    parameter Real Keq_44 = 2.0;
    parameter Real Km0434_44 = 0.1;
    parameter Real Km0965_44 = 0.1;
    parameter Real Km1583_44 = 0.1;
    parameter Real Km0423_44 = 0.1;
    parameter Real Km0428_44 = 0.1;
    parameter Real Km0633_44 = 0.1;
    parameter Real FLUX_VALUE_45 = 0.00385977012819758;
    parameter Real Vmax_45 = 0.177549425897089;
    parameter Real Keq_45 = 0.2;
    parameter Real Km0434_45 = 0.1;
    parameter Real Km0973_45 = 0.1;
    parameter Real Km0999_45 = 0.1;
    parameter Real Km0423_45 = 0.1;
    parameter Real Km0633_45 = 0.1;
    parameter Real Km0969_45 = 0.1;
    parameter Real Km0991_45 = 0.1;
    parameter Real FLUX_VALUE_46 = 0.00385977012819411;
    parameter Real Vmax_46 = 0.115793103845823;
    parameter Real Keq_46 = 2.0;
    parameter Real Km0434_46 = 0.1;
    parameter Real Km0969_46 = 0.1;
    parameter Real Km1585_46 = 0.1;
    parameter Real Km0423_46 = 0.1;
    parameter Real Km0430_46 = 0.1;
    parameter Real Km0633_46 = 0.1;
    parameter Real FLUX_VALUE_47 = 0.00419754745504612;
    parameter Real Vmax_47 = 0.0587656643706457;
    parameter Real Keq_47 = 2.0;
    parameter Real Km0455_47 = 0.1;
    parameter Real Km0973_47 = 0.1;
    parameter Real Km1194_47 = 0.1;
    parameter Real Km1322_47 = 0.1;
    parameter Real FLUX_VALUE_48 = 0.0188389294905409;
    parameter Real Vmax_48 = 0.263745012867573;
    parameter Real Keq_48 = 2.0;
    parameter Real Km0434_48 = 0.1;
    parameter Real Km0973_48 = 0.1;
    parameter Real Km0295_48 = 0.1;
    parameter Real Km0394_48 = 0.1;
    parameter Real FLUX_VALUE_49 = 0.0524417011110143;
    parameter Real Vmax_49 = 0.7341838155542;
    parameter Real Keq_49 = 2.0;
    parameter Real Km0991_49 = 0.1;
    parameter Real Km1271_49 = 0.1;
    parameter Real Km0180_49 = 0.1;
    parameter Real Km0973_49 = 0.1;
    parameter Real FLUX_VALUE_50 = 0.0188389294905409;
    parameter Real Vmax_50 = 0.4144564487919;
    parameter Real Keq_50 = 0.2;
    parameter Real Km0295_50 = 0.1;
    parameter Real Km1212_50 = 0.1;
    parameter Real Km0978_50 = 0.1;
    parameter Real Km1207_50 = 0.1;
    parameter Real Km1322_50 = 0.1;
    parameter Real FLUX_VALUE_51 = 0.0112908713189552;
    parameter Real Vmax_51 = 0.338726139568656;
    parameter Real Keq_51 = 2.0;
    parameter Real Km0434_51 = 0.1;
    parameter Real Km0973_51 = 0.1;
    parameter Real Km1587_51 = 0.1;
    parameter Real Km0423_51 = 0.1;
    parameter Real Km0432_51 = 0.1;
    parameter Real Km0633_51 = 0.1;
    parameter Real FLUX_VALUE_52 = 0.00251625132250899;
    parameter Real Vmax_52 = 0.0352275185151259;
    parameter Real Keq_52 = 2.0;
    parameter Real Km0434_52 = 0.1;
    parameter Real Km1386_52 = 0.1;
    parameter Real Km0326_52 = 0.1;
    parameter Real Km0633_52 = 0.1;
    parameter Real FLUX_VALUE_53 = 0.000258760203874159;
    parameter Real Vmax_53 = 0.00362264285423823;
    parameter Real Keq_53 = 2.0;
    parameter Real Km0262_53 = 0.1;
    parameter Real Km1212_53 = 0.1;
    parameter Real Km0122_53 = 0.1;
    parameter Real Km1207_53 = 0.1;
    parameter Real FLUX_VALUE_54 = 0.000248095549098117;
    parameter Real Vmax_54 = 0.00545810208015857;
    parameter Real Keq_54 = 20.0;
    parameter Real Km0664_54 = 0.1;
    parameter Real Km1212_54 = 0.1;
    parameter Real Km1275_54 = 0.1;
    parameter Real Km0662_54 = 0.1;
    parameter Real Km1207_54 = 0.1;
    parameter Real FLUX_VALUE_55 = 0.000256634863390825;
    parameter Real Vmax_55 = 0.00564596699459815;
    parameter Real Keq_55 = 0.2;
    parameter Real Km1207_55 = 0.1;
    parameter Real Km1578_55 = 0.1;
    parameter Real Km0456_55 = 0.1;
    parameter Real Km1212_55 = 0.1;
    parameter Real Km1579_55 = 0.1;
    parameter Real FLUX_VALUE_56 = 0.000256634863390825;
    parameter Real Vmax_56 = 0.00564596699459815;
    parameter Real Keq_56 = 0.2;
    parameter Real Km0297_56 = 0.1;
    parameter Real Km1198_56 = 0.1;
    parameter Real Km0209_56 = 0.1;
    parameter Real Km0456_56 = 0.1;
    parameter Real Km1203_56 = 0.1;
    parameter Real FLUX_VALUE_57 = 0.000256634863390825;
    parameter Real Vmax_57 = 0.00359288808747155;
    parameter Real Keq_57 = 2.0;
    parameter Real Km0209_57 = 0.1;
    parameter Real Km1212_57 = 0.1;
    parameter Real Km0296_57 = 0.1;
    parameter Real Km1207_57 = 0.1;
    parameter Real FLUX_VALUE_58 = 0.000256634863390825;
    parameter Real Vmax_58 = 0.00359288808747155;
    parameter Real Keq_58 = 2.0;
    parameter Real Km1212_58 = 0.1;
    parameter Real Km1579_58 = 0.1;
    parameter Real Km1207_58 = 0.1;
    parameter Real Km1569_58 = 0.1;
    parameter Real FLUX_VALUE_59 = 0.000256634863390825;
    parameter Real Vmax_59 = 0.00564596699459815;
    parameter Real Keq_59 = 20.0;
    parameter Real Km0296_59 = 0.1;
    parameter Real Km1212_59 = 0.1;
    parameter Real Km1275_59 = 0.1;
    parameter Real Km1207_59 = 0.1;
    parameter Real Km1576_59 = 0.1;
    parameter Real FLUX_VALUE_60 = 0.000256634863390825;
    parameter Real Vmax_60 = 0.00564596699459815;
    parameter Real Keq_60 = 20.0;
    parameter Real Km1212_60 = 0.1;
    parameter Real Km1275_60 = 0.1;
    parameter Real Km1576_60 = 0.1;
    parameter Real Km1207_60 = 0.1;
    parameter Real Km1577_60 = 0.1;
    parameter Real FLUX_VALUE_61 = 0.000256634863390825;
    parameter Real Vmax_61 = 0.00564596699459815;
    parameter Real Keq_61 = 20.0;
    parameter Real Km1212_61 = 0.1;
    parameter Real Km1275_61 = 0.1;
    parameter Real Km1577_61 = 0.1;
    parameter Real Km1207_61 = 0.1;
    parameter Real Km1578_61 = 0.1;
    parameter Real FLUX_VALUE_62 = 0.000256634863390825;
    parameter Real Vmax_62 = 0.0733975709297759;
    parameter Real Keq_62 = 2000.0;
    parameter Real Km0122_62 = 0.1;
    parameter Real Km1212_62 = 0.1;
    parameter Real Km1275_62 = 0.1;
    parameter Real Km0297_62 = 0.1;
    parameter Real Km1207_62 = 0.1;
    parameter Real FLUX_VALUE_63 = 0.000248095549098117;
    parameter Real Vmax_63 = 0.00545810208015857;
    parameter Real Keq_63 = 20.0;
    parameter Real Km0657_63 = 0.1;
    parameter Real Km1212_63 = 0.1;
    parameter Real Km1275_63 = 0.1;
    parameter Real Km0664_63 = 0.1;
    parameter Real Km1207_63 = 0.1;
    parameter Real FLUX_VALUE_64 = 0.00025173898992709;
    parameter Real Vmax_64 = 0.00151043393956254;
    parameter Real Keq_64 = 2.0;
    parameter Real Km0700_64 = 0.1;
    parameter Real Km0657_64 = 0.1;
    parameter Real FLUX_VALUE_65 = 0.000243351485368152;
    parameter Real Vmax_65 = 0.00340692079515413;
    parameter Real Keq_65 = 2.0;
    parameter Real Km0662_65 = 0.1;
    parameter Real Km1212_65 = 0.1;
    parameter Real Km0666_65 = 0.1;
    parameter Real Km1207_65 = 0.1;
    parameter Real FLUX_VALUE_66 = 0.0102965155927141;
    parameter Real Vmax_66 = 0.967872465715125;
    parameter Real Keq_66 = 0.2;
    parameter Real Km0434_66 = 0.1;
    parameter Real Km0445_66 = 0.1;
    parameter Real Km0999_66 = 0.1;
    parameter Real Km0394_66 = 0.1;
    parameter Real Km0455_66 = 0.1;
    parameter Real Km0991_66 = 0.1;
    parameter Real Km1322_66 = 0.1;
    parameter Real FLUX_VALUE_67 = 0.00023107859282821;
    parameter Real Vmax_67 = 0.00323510029959494;
    parameter Real Keq_67 = 2.0;
    parameter Real Km0539_67 = 0.1;
    parameter Real Km1331_67 = 0.1;
    parameter Real Km0471_67 = 0.1;
    parameter Real Km0633_67 = 0.1;
    parameter Real FLUX_VALUE_68 = 1.02210849818021e-05;
    parameter Real Vmax_68 = 0.000224863869599646;
    parameter Real Keq_68 = 20.0;
    parameter Real Km0475_68 = 0.1;
    parameter Real Km1212_68 = 0.1;
    parameter Real Km1275_68 = 0.1;
    parameter Real Km0481_68 = 0.1;
    parameter Real Km1207_68 = 0.1;
    parameter Real FLUX_VALUE_69 = 2.04421701081157e-05;
    parameter Real Vmax_69 = 0.000449727742378545;
    parameter Real Keq_69 = 20.0;
    parameter Real Km0481_69 = 0.1;
    parameter Real Km1212_69 = 0.1;
    parameter Real Km1275_69 = 0.1;
    parameter Real Km0493_69 = 0.1;
    parameter Real Km1207_69 = 0.1;
    parameter Real FLUX_VALUE_70 = 2.04421702621944e-05;
    parameter Real Vmax_70 = 0.000449727745768277;
    parameter Real Keq_70 = 20.0;
    parameter Real Km0493_70 = 0.1;
    parameter Real Km1212_70 = 0.1;
    parameter Real Km1275_70 = 0.1;
    parameter Real Km0499_70 = 0.1;
    parameter Real Km1207_70 = 0.1;
    parameter Real FLUX_VALUE_71 = 0.00895299678702938;
    parameter Real Vmax_71 = 0.0537179807221763;
    parameter Real Keq_71 = 2.0;
    parameter Real Km0515_71 = 0.1;
    parameter Real Km1377_71 = 0.1;
    parameter Real FLUX_VALUE_72 = 0.0100308480322675;
    parameter Real Vmax_72 = 0.100308480322675;
    parameter Real Keq_72 = 0.2;
    parameter Real Km0324_72 = 0.1;
    parameter Real Km0515_72 = 0.1;
    parameter Real Km1322_72 = 0.1;
    parameter Real FLUX_VALUE_73 = 0.0386660157978829;
    parameter Real Vmax_73 = 0.231996094787297;
    parameter Real Keq_73 = 2.0;
    parameter Real Km0516_73 = 0.1;
    parameter Real Km0940_73 = 0.1;
    parameter Real FLUX_VALUE_74 = 0.0386660157978829;
    parameter Real Vmax_74 = 0.54132422117036;
    parameter Real Keq_74 = 2.0;
    parameter Real Km0373_74 = 0.1;
    parameter Real Km1271_74 = 0.1;
    parameter Real Km0522_74 = 0.1;
    parameter Real Km0529_74 = 0.1;
    parameter Real FLUX_VALUE_75 = 0.0386660157978829;
    parameter Real Vmax_75 = 0.231996094787297;
    parameter Real Keq_75 = 2.0;
    parameter Real Km0522_75 = 0.1;
    parameter Real Km0516_75 = 0.1;
    parameter Real FLUX_VALUE_76 = 0.00179092669763194;
    parameter Real Vmax_76 = 0.0537278009289582;
    parameter Real Keq_76 = 2.0;
    parameter Real Km0419_76 = 0.1;
    parameter Real Km0434_76 = 0.1;
    parameter Real Km1559_76 = 0.1;
    parameter Real Km0394_76 = 0.1;
    parameter Real Km0539_76 = 0.1;
    parameter Real Km1322_76 = 0.1;
    parameter Real FLUX_VALUE_77 = 0.000250486556092046;
    parameter Real Vmax_77 = 0.00250486556092046;
    parameter Real Keq_77 = 20.0;
    parameter Real Km1012_77 = 0.1;
    parameter Real Km1039_77 = 0.1;
    parameter Real Km0980_77 = 0.1;
    parameter Real FLUX_VALUE_78 = 0.00965062714998262;
    parameter Real Vmax_78 = 0.173711288699687;
    parameter Real Keq_78 = 0.02;
    parameter Real Km0980_78 = 0.1;
    parameter Real Km0178_78 = 0.1;
    parameter Real Km0419_78 = 0.1;
    parameter Real Km0981_78 = 0.1;
    parameter Real FLUX_VALUE_79 = 0.0094001405938857;
    parameter Real Vmax_79 = 0.1316019683144;
    parameter Real Keq_79 = 2.0;
    parameter Real Km0981_79 = 0.1;
    parameter Real Km1233_79 = 0.1;
    parameter Real Km0362_79 = 0.1;
    parameter Real Km0980_79 = 0.1;
    parameter Real FLUX_VALUE_80 = 0.000250486556991948;
    parameter Real Vmax_80 = 0.00751459670975844;
    parameter Real Keq_80 = 2.0;
    parameter Real Km0434_80 = 0.1;
    parameter Real Km0981_80 = 0.1;
    parameter Real Km1589_80 = 0.1;
    parameter Real Km0423_80 = 0.1;
    parameter Real Km0542_80 = 0.1;
    parameter Real Km0633_80 = 0.1;
    parameter Real FLUX_VALUE_81 = 0.000258760203874159;
    parameter Real Vmax_81 = 0.0822857448319826;
    parameter Real Keq_81 = 200.0;
    parameter Real Km1059_81 = 0.1;
    parameter Real Km1212_81 = 0.1;
    parameter Real Km1275_81 = 0.1;
    parameter Real Km0262_81 = 0.1;
    parameter Real Km0722_81 = 0.1;
    parameter Real Km1207_81 = 0.1;
    parameter Real FLUX_VALUE_82 = 3.36354094523684e-06;
    parameter Real Vmax_82 = 3.36354094523684e-05;
    parameter Real Keq_82 = 0.2;
    parameter Real Km0589_82 = 0.1;
    parameter Real Km0419_82 = 0.1;
    parameter Real Km0654_82 = 0.1;
    parameter Real FLUX_VALUE_83 = 9.10860206737184e-05;
    parameter Real Vmax_83 = 0.00127520428943206;
    parameter Real Keq_83 = 2.0;
    parameter Real Km0394_83 = 0.1;
    parameter Real Km0613_83 = 0.1;
    parameter Real Km0434_83 = 0.1;
    parameter Real Km0615_83 = 0.1;
    parameter Real FLUX_VALUE_84 = 0.000480554664340808;
    parameter Real Vmax_84 = 0.00672776530077131;
    parameter Real Keq_84 = 2.0;
    parameter Real Km0529_84 = 0.1;
    parameter Real Km1524_84 = 0.1;
    parameter Real Km0380_84 = 0.1;
    parameter Real Km0619_84 = 0.1;
    parameter Real FLUX_VALUE_85 = 9.19873934027924e-06;
    parameter Real Vmax_85 = 9.19873934027924e-05;
    parameter Real Keq_85 = 0.2;
    parameter Real Km1331_85 = 0.1;
    parameter Real Km0619_85 = 0.1;
    parameter Real Km1322_85 = 0.1;
    parameter Real FLUX_VALUE_86 = 0.00419754745533934;
    parameter Real Vmax_86 = 0.0587656643747508;
    parameter Real Keq_86 = 2.0;
    parameter Real Km0061_86 = 0.1;
    parameter Real Km1275_86 = 0.1;
    parameter Real Km0837_86 = 0.1;
    parameter Real Km1269_86 = 0.1;
    parameter Real FLUX_VALUE_87 = 1.02210849818021e-05;
    parameter Real Vmax_87 = 0.000102210849818021;
    parameter Real Keq_87 = 20.0;
    parameter Real Km1084_87 = 0.1;
    parameter Real Km1445_87 = 0.1;
    parameter Real Km0475_87 = 0.1;
    parameter Real FLUX_VALUE_88 = 0.000136629031089924;
    parameter Real Vmax_88 = 0.00191280643525894;
    parameter Real Keq_88 = 2.0;
    parameter Real Km0625_88 = 0.1;
    parameter Real Km1212_88 = 0.1;
    parameter Real Km1207_88 = 0.1;
    parameter Real Km1487_88 = 0.1;
    parameter Real FLUX_VALUE_89 = 0.00419754745504612;
    parameter Real Vmax_89 = 0.0251852847302767;
    parameter Real Keq_89 = 2.0;
    parameter Real Km1194_89 = 0.1;
    parameter Real Km0061_89 = 0.1;
    parameter Real FLUX_VALUE_90 = 0.0212913573443156;
    parameter Real Vmax_90 = 0.127748144065894;
    parameter Real Keq_90 = 2.0;
    parameter Real Km0016_90 = 0.1;
    parameter Real Km0232_90 = 0.1;
    parameter Real FLUX_VALUE_91 = 0.00965062714996943;
    parameter Real Vmax_91 = 0.0579037628998166;
    parameter Real Keq_91 = 2.0;
    parameter Real Km0008_91 = 0.1;
    parameter Real Km0056_91 = 0.1;
    parameter Real FLUX_VALUE_92 = 0.000519949368301002;
    parameter Real Vmax_92 = 0.00727929115621403;
    parameter Real Keq_92 = 2.0;
    parameter Real Km0943_92 = 0.1;
    parameter Real Km1376_92 = 0.1;
    parameter Real Km0633_92 = 0.1;
    parameter Real Km0745_92 = 0.1;
    parameter Real FLUX_VALUE_93 = 0.0306618317263326;
    parameter Real Vmax_93 = 0.429265644168656;
    parameter Real Keq_93 = 2.0;
    parameter Real Km0645_93 = 0.1;
    parameter Real Km0743_93 = 0.1;
    parameter Real Km0644_93 = 0.1;
    parameter Real Km0739_93 = 0.1;
    parameter Real FLUX_VALUE_94 = 0.0306618317263326;
    parameter Real Vmax_94 = 0.306618317263326;
    parameter Real Keq_94 = 0.2;
    parameter Real Km0644_94 = 0.1;
    parameter Real Km0645_94 = 0.1;
    parameter Real Km1107_94 = 0.1;
    parameter Real FLUX_VALUE_95 = 0.000133265490575614;
    parameter Real Vmax_95 = 0.00133265490575614;
    parameter Real Keq_95 = 0.2;
    parameter Real Km0656_95 = 0.1;
    parameter Real Km0633_95 = 0.1;
    parameter Real Km0654_95 = 0.1;
    parameter Real FLUX_VALUE_96 = 0.231348466852626;
    parameter Real Vmax_96 = 1.38809080111576;
    parameter Real Keq_96 = 2.0;
    parameter Real Km0188_96 = 0.1;
    parameter Real Km1360_96 = 0.1;
    parameter Real FLUX_VALUE_97 = 1.02210849110579e-05;
    parameter Real Vmax_97 = 0.000960781981639442;
    parameter Real Keq_97 = 0.2;
    parameter Real Km0595_97 = 0.1;
    parameter Real Km1101_97 = 0.1;
    parameter Real Km1212_97 = 0.1;
    parameter Real Km0456_97 = 0.1;
    parameter Real Km0529_97 = 0.1;
    parameter Real Km1065_97 = 0.1;
    parameter Real Km1207_97 = 0.1;
    parameter Real FLUX_VALUE_98 = 1.02210846264081e-05;
    parameter Real Vmax_98 = 0.000960781954882361;
    parameter Real Keq_98 = 0.2;
    parameter Real Km1065_98 = 0.1;
    parameter Real Km1101_98 = 0.1;
    parameter Real Km1212_98 = 0.1;
    parameter Real Km0456_98 = 0.1;
    parameter Real Km0529_98 = 0.1;
    parameter Real Km1161_98 = 0.1;
    parameter Real Km1207_98 = 0.1;
    parameter Real FLUX_VALUE_99 = 1.02210846264081e-05;
    parameter Real Vmax_99 = 0.000960781954882362;
    parameter Real Keq_99 = 0.2;
    parameter Real Km1101_99 = 0.1;
    parameter Real Km1161_99 = 0.1;
    parameter Real Km1212_99 = 0.1;
    parameter Real Km0456_99 = 0.1;
    parameter Real Km0529_99 = 0.1;
    parameter Real Km1207_99 = 0.1;
    parameter Real Km1286_99 = 0.1;
    parameter Real FLUX_VALUE_100 = 1.02210846264081e-05;
    parameter Real Vmax_100 = 0.000960781954882362;
    parameter Real Keq_100 = 0.2;
    parameter Real Km1101_100 = 0.1;
    parameter Real Km1212_100 = 0.1;
    parameter Real Km1286_100 = 0.1;
    parameter Real Km0456_100 = 0.1;
    parameter Real Km0529_100 = 0.1;
    parameter Real Km1207_100 = 0.1;
    parameter Real Km1449_100 = 0.1;
    parameter Real FLUX_VALUE_101 = 2.04421699980673e-05;
    parameter Real Vmax_101 = 0.37674919306438;
    parameter Real Keq_101 = 0.002;
    parameter Real Km1101_101 = 0.1;
    parameter Real Km1212_101 = 0.1;
    parameter Real Km1449_101 = 0.1;
    parameter Real Km0456_101 = 0.1;
    parameter Real Km0529_101 = 0.1;
    parameter Real Km1084_101 = 0.1;
    parameter Real Km1207_101 = 0.1;
    parameter Real FLUX_VALUE_102 = 4.0884339927971e-05;
    parameter Real Vmax_102 = 0.00384312795322927;
    parameter Real Keq_102 = 0.2;
    parameter Real Km1101_102 = 0.1;
    parameter Real Km1212_102 = 0.1;
    parameter Real Km1255_102 = 0.1;
    parameter Real Km0456_102 = 0.1;
    parameter Real Km0529_102 = 0.1;
    parameter Real Km0602_102 = 0.1;
    parameter Real Km1207_102 = 0.1;
    parameter Real FLUX_VALUE_103 = 4.08843399368032e-05;
    parameter Real Vmax_103 = 0.753498385035283;
    parameter Real Keq_103 = 0.002;
    parameter Real Km0373_103 = 0.1;
    parameter Real Km1101_103 = 0.1;
    parameter Real Km1212_103 = 0.1;
    parameter Real Km0456_103 = 0.1;
    parameter Real Km0529_103 = 0.1;
    parameter Real Km1207_103 = 0.1;
    parameter Real Km1255_103 = 0.1;
    parameter Real FLUX_VALUE_104 = 1.02210849110579e-05;
    parameter Real Vmax_104 = 0.000306632547331737;
    parameter Real Keq_104 = 2.0;
    parameter Real Km0423_104 = 0.1;
    parameter Real Km0602_104 = 0.1;
    parameter Real Km0633_104 = 0.1;
    parameter Real Km0434_104 = 0.1;
    parameter Real Km0529_104 = 0.1;
    parameter Real Km0595_104 = 0.1;
    parameter Real FLUX_VALUE_105 = 1.32100771565048e-12;
    parameter Real Vmax_105 = 3.96302314695144e-11;
    parameter Real Keq_105 = 2.0;
    parameter Real Km0423_105 = 0.1;
    parameter Real Km0633_105 = 0.1;
    parameter Real Km1073_105 = 0.1;
    parameter Real Km0434_105 = 0.1;
    parameter Real Km0529_105 = 0.1;
    parameter Real Km1065_105 = 0.1;
    parameter Real FLUX_VALUE_106 = 1.02210853716592e-05;
    parameter Real Vmax_106 = 0.000306632561149776;
    parameter Real Keq_106 = 2.0;
    parameter Real Km0423_106 = 0.1;
    parameter Real Km0633_106 = 0.1;
    parameter Real Km1454_106 = 0.1;
    parameter Real Km0434_106 = 0.1;
    parameter Real Km0529_106 = 0.1;
    parameter Real Km1449_106 = 0.1;
    parameter Real FLUX_VALUE_107 = 3.06632550169132e-05;
    parameter Real Vmax_107 = 0.00288234597158984;
    parameter Real Keq_107 = 0.2;
    parameter Real Km0602_107 = 0.1;
    parameter Real Km1101_107 = 0.1;
    parameter Real Km1212_107 = 0.1;
    parameter Real Km0456_107 = 0.1;
    parameter Real Km0529_107 = 0.1;
    parameter Real Km1073_107 = 0.1;
    parameter Real Km1207_107 = 0.1;
    parameter Real FLUX_VALUE_108 = 3.06632551696157e-05;
    parameter Real Vmax_108 = 0.00288234598594387;
    parameter Real Keq_108 = 0.2;
    parameter Real Km1073_108 = 0.1;
    parameter Real Km1101_108 = 0.1;
    parameter Real Km1212_108 = 0.1;
    parameter Real Km0456_108 = 0.1;
    parameter Real Km0529_108 = 0.1;
    parameter Real Km1176_108 = 0.1;
    parameter Real Km1207_108 = 0.1;
    parameter Real FLUX_VALUE_109 = 3.06632551696157e-05;
    parameter Real Vmax_109 = 0.00288234598594388;
    parameter Real Keq_109 = 0.2;
    parameter Real Km1101_109 = 0.1;
    parameter Real Km1176_109 = 0.1;
    parameter Real Km1212_109 = 0.1;
    parameter Real Km0456_109 = 0.1;
    parameter Real Km0529_109 = 0.1;
    parameter Real Km1207_109 = 0.1;
    parameter Real Km1302_109 = 0.1;
    parameter Real FLUX_VALUE_110 = 1.0221085177611e-05;
    parameter Real Vmax_110 = 0.000960782006695434;
    parameter Real Keq_110 = 0.2;
    parameter Real Km1101_110 = 0.1;
    parameter Real Km1212_110 = 0.1;
    parameter Real Km1302_110 = 0.1;
    parameter Real Km0456_110 = 0.1;
    parameter Real Km0529_110 = 0.1;
    parameter Real Km1207_110 = 0.1;
    parameter Real Km1454_110 = 0.1;
    parameter Real FLUX_VALUE_111 = 2.93389817698765;
    parameter Real Vmax_111 = 275.786428636839;
    parameter Real Keq_111 = 20.0;
    parameter Real Km0710_111 = 0.1;
    parameter Real Km1275_111 = 0.1;
    parameter Real Km0709_111 = 0.1;
    parameter Real FLUX_VALUE_112 = 5.86779635397514;
    parameter Real Vmax_112 = 176.033890619254;
    parameter Real Keq_112 = 2.0;
    parameter Real Km0709_112 = 0.1;
    parameter Real Km1535_112 = 0.1;
    parameter Real Km0710_112 = 0.1;
    parameter Real Km1537_112 = 0.1;
    parameter Real FLUX_VALUE_113 = 2.87562321404181;
    parameter Real Vmax_113 = 86.2686964212543;
    parameter Real Keq_113 = 2.0;
    parameter Real Km0120_113 = 0.1;
    parameter Real Km0394_113 = 0.1;
    parameter Real Km1322_113 = 0.1;
    parameter Real Km0434_113 = 0.1;
    parameter Real Km0722_113 = 0.1;
    parameter Real Km1487_113 = 0.1;
    parameter Real FLUX_VALUE_114 = 0.850573321329957;
    parameter Real Vmax_114 = 8.50573321329957;
    parameter Real Keq_114 = 0.2;
    parameter Real Km0555_114 = 0.1;
    parameter Real Km0629_114 = 0.1;
    parameter Real Km0764_114 = 0.1;
    parameter Real FLUX_VALUE_115 = 0.0142545827184152;
    parameter Real Vmax_115 = 0.0855274963104912;
    parameter Real Keq_115 = 2.0;
    parameter Real Km0725_115 = 0.1;
    parameter Real Km0066_115 = 0.1;
    parameter Real FLUX_VALUE_116 = 0.000519949368301002;
    parameter Real Vmax_116 = 0.00727929115621403;
    parameter Real Keq_116 = 2.0;
    parameter Real Km0745_116 = 0.1;
    parameter Real Km0943_116 = 0.1;
    parameter Real Km0190_116 = 0.1;
    parameter Real Km0633_116 = 0.1;
    parameter Real FLUX_VALUE_117 = 0.892327912279146;
    parameter Real Vmax_117 = 5.35396747367488;
    parameter Real Keq_117 = 2.0;
    parameter Real Km0568_117 = 0.1;
    parameter Real Km0557_117 = 0.1;
    parameter Real FLUX_VALUE_118 = 0.812814651968887;
    parameter Real Vmax_118 = 17.8819223433155;
    parameter Real Keq_118 = 20.0;
    parameter Real Km0180_118 = 0.1;
    parameter Real Km0419_118 = 0.1;
    parameter Real Km1203_118 = 0.1;
    parameter Real Km0991_118 = 0.1;
    parameter Real Km1198_118 = 0.1;
    parameter Real FLUX_VALUE_119 = 0.812814651968585;
    parameter Real Vmax_119 = 17.8819223433089;
    parameter Real Keq_119 = 20.0;
    parameter Real Km0180_119 = 0.1;
    parameter Real Km0419_119 = 0.1;
    parameter Real Km1212_119 = 0.1;
    parameter Real Km0991_119 = 0.1;
    parameter Real Km1207_119 = 0.1;
    parameter Real FLUX_VALUE_120 = 0.0311388947598679;
    parameter Real Vmax_120 = 0.934166842796037;
    parameter Real Keq_120 = 2.0;
    parameter Real Km0419_120 = 0.1;
    parameter Real Km0434_120 = 0.1;
    parameter Real Km0991_120 = 0.1;
    parameter Real Km0394_120 = 0.1;
    parameter Real Km0999_120 = 0.1;
    parameter Real Km1322_120 = 0.1;
    parameter Real FLUX_VALUE_121 = 0.00400019441014414;
    parameter Real Vmax_121 = 0.120005832304324;
    parameter Real Keq_121 = 2.0;
    parameter Real Km0434_121 = 0.1;
    parameter Real Km0999_121 = 0.1;
    parameter Real Km1590_121 = 0.1;
    parameter Real Km0423_121 = 0.1;
    parameter Real Km0633_121 = 0.1;
    parameter Real Km0747_121 = 0.1;
    parameter Real FLUX_VALUE_122 = 0.0114540671060863;
    parameter Real Vmax_122 = 0.343622013182589;
    parameter Real Keq_122 = 2.0;
    parameter Real Km0434_122 = 0.1;
    parameter Real Km0991_122 = 0.1;
    parameter Real Km1591_122 = 0.1;
    parameter Real Km0423_122 = 0.1;
    parameter Real Km0633_122 = 0.1;
    parameter Real Km0748_122 = 0.1;
    parameter Real FLUX_VALUE_123 = 0.00209877372752306;
    parameter Real Vmax_123 = 0.0461730220055073;
    parameter Real Keq_123 = 0.2;
    parameter Real Km0754_123 = 0.1;
    parameter Real Km1212_123 = 0.1;
    parameter Real Km0750_123 = 0.1;
    parameter Real Km1207_123 = 0.1;
    parameter Real FLUX_VALUE_124 = 0.00209877372752306;
    parameter Real Vmax_124 = 0.0377779270954151;
    parameter Real Keq_124 = 200.0;
    parameter Real Km0750_124 = 0.1;
    parameter Real Km0837_124 = 0.1;
    parameter Real Km0754_124 = 0.1;
    parameter Real FLUX_VALUE_125 = 1.69142241294296;
    parameter Real Vmax_125 = 37.2112930847451;
    parameter Real Keq_125 = 20.0;
    parameter Real Km0764_125 = 0.1;
    parameter Real Km1198_125 = 0.1;
    parameter Real Km1322_125 = 0.1;
    parameter Real Km0075_125 = 0.1;
    parameter Real Km1203_125 = 0.1;
    parameter Real FLUX_VALUE_126 = 0.000240277331835412;
    parameter Real Vmax_126 = 0.00336388264569577;
    parameter Real Keq_126 = 2.0;
    parameter Real Km0629_126 = 0.1;
    parameter Real Km1203_126 = 0.1;
    parameter Real Km0767_126 = 0.1;
    parameter Real Km1198_126 = 0.1;
    parameter Real FLUX_VALUE_127 = 0.000240277332169094;
    parameter Real Vmax_127 = 0.00336388265036732;
    parameter Real Keq_127 = 2.0;
    parameter Real Km0380_127 = 0.1;
    parameter Real Km0767_127 = 0.1;
    parameter Real Km0082_127 = 0.1;
    parameter Real Km0529_127 = 0.1;
    parameter Real FLUX_VALUE_128 = 0.00375691882979276;
    parameter Real Vmax_128 = 0.0525968636170986;
    parameter Real Keq_128 = 2.0;
    parameter Real Km0120_128 = 0.1;
    parameter Real Km0325_128 = 0.1;
    parameter Real Km0301_128 = 0.1;
    parameter Real Km1487_128 = 0.1;
    parameter Real FLUX_VALUE_129 = 1.43675988607776;
    parameter Real Vmax_129 = 66.090954759577;
    parameter Real Keq_129 = 0.2;
    parameter Real Km1003_129 = 0.1;
    parameter Real Km1198_129 = 0.1;
    parameter Real Km1487_129 = 0.1;
    parameter Real Km0306_129 = 0.1;
    parameter Real Km0419_129 = 0.1;
    parameter Real Km0456_129 = 0.1;
    parameter Real Km1203_129 = 0.1;
    parameter Real FLUX_VALUE_130 = 1.45153821341539;
    parameter Real Vmax_130 = 20.3215349878155;
    parameter Real Keq_130 = 2.0;
    parameter Real Km1039_130 = 0.1;
    parameter Real Km1487_130 = 0.1;
    parameter Real Km0306_130 = 0.1;
    parameter Real Km1003_130 = 0.1;
    parameter Real FLUX_VALUE_131 = 0.0196783757273199;
    parameter Real Vmax_131 = 0.196783757273199;
    parameter Real Keq_131 = 0.2;
    parameter Real Km1543_131 = 0.1;
    parameter Real Km0773_131 = 0.1;
    parameter Real Km1538_131 = 0.1;
    parameter Real FLUX_VALUE_132 = 0.0110214085076458;
    parameter Real Vmax_132 = 0.330642255229374;
    parameter Real Keq_132 = 2.0;
    parameter Real Km0434_132 = 0.1;
    parameter Real Km1003_132 = 0.1;
    parameter Real Km1593_132 = 0.1;
    parameter Real Km0423_132 = 0.1;
    parameter Real Km0633_132 = 0.1;
    parameter Real Km0757_132 = 0.1;
    parameter Real FLUX_VALUE_133 = 0.00187447440148675;
    parameter Real Vmax_133 = 0.0862258224683905;
    parameter Real Keq_133 = 0.2;
    parameter Real Km0434_133 = 0.1;
    parameter Real Km0999_133 = 0.1;
    parameter Real Km1565_133 = 0.1;
    parameter Real Km0423_133 = 0.1;
    parameter Real Km0633_133 = 0.1;
    parameter Real Km0782_133 = 0.1;
    parameter Real Km0991_133 = 0.1;
    parameter Real FLUX_VALUE_134 = 3.75729835487922e-05;
    parameter Real Vmax_134 = 0.00067631370387826;
    parameter Real Keq_134 = 0.02;
    parameter Real Km0785_134 = 0.1;
    parameter Real Km0141_134 = 0.1;
    parameter Real Km0633_134 = 0.1;
    parameter Real Km0722_134 = 0.1;
    parameter Real FLUX_VALUE_135 = 6.43295020859241e-05;
    parameter Real Vmax_135 = 0.000900613029202938;
    parameter Real Keq_135 = 2.0;
    parameter Real Km0434_135 = 0.1;
    parameter Real Km0782_135 = 0.1;
    parameter Real Km0394_135 = 0.1;
    parameter Real Km0739_135 = 0.1;
    parameter Real FLUX_VALUE_136 = 6.43295039602845e-05;
    parameter Real Vmax_136 = 0.000900613055443983;
    parameter Real Keq_136 = 2.0;
    parameter Real Km0586_136 = 0.1;
    parameter Real Km0782_136 = 0.1;
    parameter Real Km0582_136 = 0.1;
    parameter Real Km0739_136 = 0.1;
    parameter Real FLUX_VALUE_137 = 0.999999999999993;
    parameter Real Vmax_137 = 13.9999999999999;
    parameter Real Keq_137 = 2.0;
    parameter Real Km0434_137 = 0.1;
    parameter Real Km0563_137 = 0.1;
    parameter Real Km0394_137 = 0.1;
    parameter Real Km0568_137 = 0.1;
    parameter Real FLUX_VALUE_138 = 0.00251625132250899;
    parameter Real Vmax_138 = 0.0754875396752697;
    parameter Real Keq_138 = 2.0;
    parameter Real Km1010_138 = 0.1;
    parameter Real Km1198_138 = 0.1;
    parameter Real Km1006_138 = 0.1;
    parameter Real Km1203_138 = 0.1;
    parameter Real FLUX_VALUE_139 = 0.00251625132250899;
    parameter Real Vmax_139 = 0.0251625132250899;
    parameter Real Keq_139 = 0.2;
    parameter Real Km1011_139 = 0.1;
    parameter Real Km1010_139 = 0.1;
    parameter Real Km1322_139 = 0.1;
    parameter Real FLUX_VALUE_140 = 0.00251625132250899;
    parameter Real Vmax_140 = 0.0352275185151259;
    parameter Real Keq_140 = 2.0;
    parameter Real Km0207_140 = 0.1;
    parameter Real Km0991_140 = 0.1;
    parameter Real Km0180_140 = 0.1;
    parameter Real Km1011_140 = 0.1;
    parameter Real FLUX_VALUE_141 = 0.00251625132251002;
    parameter Real Vmax_141 = 0.0754875396753006;
    parameter Real Keq_141 = 2.0;
    parameter Real Km0434_141 = 0.1;
    parameter Real Km1006_141 = 0.1;
    parameter Real Km1594_141 = 0.1;
    parameter Real Km0423_141 = 0.1;
    parameter Real Km0633_141 = 0.1;
    parameter Real Km0832_141 = 0.1;
    parameter Real FLUX_VALUE_142 = 0.01086200797138;
    parameter Real Vmax_142 = 0.06517204782828;
    parameter Real Keq_142 = 2.0;
    parameter Real Km0454_142 = 0.1;
    parameter Real Km0836_142 = 0.1;
    parameter Real FLUX_VALUE_143 = 0.01086200797138;
    parameter Real Vmax_143 = 0.15206811159932;
    parameter Real Keq_143 = 2.0;
    parameter Real Km0180_143 = 0.1;
    parameter Real Km0373_143 = 0.1;
    parameter Real Km0529_143 = 0.1;
    parameter Real Km0835_143 = 0.1;
    parameter Real FLUX_VALUE_144 = 0.01086200797138;
    parameter Real Vmax_144 = 0.23896417537036;
    parameter Real Keq_144 = 0.2;
    parameter Real Km0836_144 = 0.1;
    parameter Real Km1198_144 = 0.1;
    parameter Real Km0176_144 = 0.1;
    parameter Real Km1203_144 = 0.1;
    parameter Real Km0456_144 = 0.1;
    parameter Real FLUX_VALUE_145 = 0.0188389294905409;
    parameter Real Vmax_145 = 0.263745012867573;
    parameter Real Keq_145 = 2.0;
    parameter Real Km0978_145 = 0.1;
    parameter Real Km1212_145 = 0.1;
    parameter Real Km1014_145 = 0.1;
    parameter Real Km1207_145 = 0.1;
    parameter Real FLUX_VALUE_146 = 0.00726411015276989;
    parameter Real Vmax_146 = 0.101697542138778;
    parameter Real Keq_146 = 2.0;
    parameter Real Km0434_146 = 0.1;
    parameter Real Km1014_146 = 0.1;
    parameter Real Km0394_146 = 0.1;
    parameter Real Km1238_146 = 0.1;
    parameter Real FLUX_VALUE_147 = 0.0115748193375687;
    parameter Real Vmax_147 = 0.162047470725962;
    parameter Real Keq_147 = 2.0;
    parameter Real Km0373_147 = 0.1;
    parameter Real Km1014_147 = 0.1;
    parameter Real Km0529_147 = 0.1;
    parameter Real Km1233_147 = 0.1;
    parameter Real FLUX_VALUE_148 = 0.00209877372781628;
    parameter Real Vmax_148 = 0.0209877372781628;
    parameter Real Keq_148 = 20.0;
    parameter Real Km0837_148 = 0.1;
    parameter Real Km1616_148 = 0.1;
    parameter Real Km1620_148 = 0.1;
    parameter Real FLUX_VALUE_149 = 0.00155984810490327;
    parameter Real Vmax_149 = 0.0717530128255505;
    parameter Real Keq_149 = 0.2;
    parameter Real Km0218_149 = 0.1;
    parameter Real Km1212_149 = 0.1;
    parameter Real Km0028_149 = 0.1;
    parameter Real Km0529_149 = 0.1;
    parameter Real Km1207_149 = 0.1;
    parameter Real FLUX_VALUE_150 = 0.00155984810490327;
    parameter Real Vmax_150 = 0.0218378734686458;
    parameter Real Keq_150 = 2.0;
    parameter Real Km0367_150 = 0.1;
    parameter Real Km0373_150 = 0.1;
    parameter Real Km0218_150 = 0.1;
    parameter Real Km0529_150 = 0.1;
    parameter Real FLUX_VALUE_151 = 0.00251625132250899;
    parameter Real Vmax_151 = 0.0553575290951978;
    parameter Real Keq_151 = 0.2;
    parameter Real Km0312_151 = 0.1;
    parameter Real Km0999_151 = 0.1;
    parameter Real Km0403_151 = 0.1;
    parameter Real Km0550_151 = 0.1;
    parameter Real Km0991_151 = 0.1;
    parameter Real FLUX_VALUE_152 = 0.00251625132250899;
    parameter Real Vmax_152 = 0.0150975079350539;
    parameter Real Keq_152 = 2.0;
    parameter Real Km0550_152 = 0.1;
    parameter Real Km0207_152 = 0.1;
    parameter Real FLUX_VALUE_153 = 0.00187447440148864;
    parameter Real Vmax_153 = 0.026242641620841;
    parameter Real Keq_153 = 2.0;
    parameter Real Km0849_153 = 0.1;
    parameter Real Km1198_153 = 0.1;
    parameter Real Km1203_153 = 0.1;
    parameter Real Km1565_153 = 0.1;
    parameter Real FLUX_VALUE_154 = 0.00107785124523996;
    parameter Real Vmax_154 = 0.0107785124523996;
    parameter Real Keq_154 = 0.2;
    parameter Real Km0076_154 = 0.1;
    parameter Real Km0086_154 = 0.1;
    parameter Real Km0456_154 = 0.1;
    parameter Real FLUX_VALUE_155 = 0.305666406674421;
    parameter Real Vmax_155 = 3.05666406674421;
    parameter Real Keq_155 = 0.2;
    parameter Real Km0633_155 = 0.1;
    parameter Real Km1322_155 = 0.1;
    parameter Real FLUX_VALUE_156 = 0.00627317015230181;
    parameter Real Vmax_156 = 0.0376390209138109;
    parameter Real Keq_156 = 2.0;
    parameter Real Km1365_156 = 0.1;
    parameter Real Km0849_156 = 0.1;
    parameter Real FLUX_VALUE_157 = 2.04421705708177e-05;
    parameter Real Vmax_157 = 0.000286190387991448;
    parameter Real Keq_157 = 2.0;
    parameter Real Km0089_157 = 0.1;
    parameter Real Km0499_157 = 0.1;
    parameter Real Km0619_157 = 0.1;
    parameter Real Km0918_157 = 0.1;
    parameter Real FLUX_VALUE_158 = 0.0193330078987431;
    parameter Real Vmax_158 = 0.425326173772348;
    parameter Real Keq_158 = 0.2;
    parameter Real Km0940_158 = 0.1;
    parameter Real Km1198_158 = 0.1;
    parameter Real Km0180_158 = 0.1;
    parameter Real Km0456_158 = 0.1;
    parameter Real Km1203_158 = 0.1;
    parameter Real FLUX_VALUE_159 = 0.0193330078983478;
    parameter Real Vmax_159 = 0.425326173763652;
    parameter Real Keq_159 = 0.2;
    parameter Real Km0940_159 = 0.1;
    parameter Real Km1207_159 = 0.1;
    parameter Real Km0180_159 = 0.1;
    parameter Real Km0456_159 = 0.1;
    parameter Real Km1212_159 = 0.1;
    parameter Real FLUX_VALUE_160 = 0.00731344841399458;
    parameter Real Vmax_160 = 0.102388277795924;
    parameter Real Keq_160 = 2.0;
    parameter Real Km0056_160 = 0.1;
    parameter Real Km0991_160 = 0.1;
    parameter Real Km0180_160 = 0.1;
    parameter Real Km1016_160 = 0.1;
    parameter Real FLUX_VALUE_161 = 0.00731344841399218;
    parameter Real Vmax_161 = 0.219403452419765;
    parameter Real Keq_161 = 2.0;
    parameter Real Km0434_161 = 0.1;
    parameter Real Km1016_161 = 0.1;
    parameter Real Km1596_161 = 0.1;
    parameter Real Km0423_161 = 0.1;
    parameter Real Km0633_161 = 0.1;
    parameter Real Km0847_161 = 0.1;
    parameter Real FLUX_VALUE_162 = 0.000519949368301002;
    parameter Real Vmax_162 = 0.00311969620980601;
    parameter Real Keq_162 = 2.0;
    parameter Real Km0943_162 = 0.1;
    parameter Real Km1376_162 = 0.1;
    parameter Real FLUX_VALUE_163 = 0.00965062714996943;
    parameter Real Vmax_163 = 0.135108780099572;
    parameter Real Keq_163 = 2.0;
    parameter Real Km0039_163 = 0.1;
    parameter Real Km1212_163 = 0.1;
    parameter Real Km0008_163 = 0.1;
    parameter Real Km1207_163 = 0.1;
    parameter Real FLUX_VALUE_164 = 0.0174126109617655;
    parameter Real Vmax_164 = 0.243776553464717;
    parameter Real Keq_164 = 2.0;
    parameter Real Km0991_164 = 0.1;
    parameter Real Km1399_164 = 0.1;
    parameter Real Km0180_164 = 0.1;
    parameter Real Km0955_164 = 0.1;
    parameter Real FLUX_VALUE_165 = 0.01086200797138;
    parameter Real Vmax_165 = 0.15206811159932;
    parameter Real Keq_165 = 2.0;
    parameter Real Km0953_165 = 0.1;
    parameter Real Km1212_165 = 0.1;
    parameter Real Km0959_165 = 0.1;
    parameter Real Km1207_165 = 0.1;
    parameter Real FLUX_VALUE_166 = 0.000259974684150501;
    parameter Real Vmax_166 = 0.00155984810490301;
    parameter Real Keq_166 = 2.0;
    parameter Real Km0037_166 = 0.1;
    parameter Real Km1059_166 = 0.1;
    parameter Real FLUX_VALUE_167 = 0.0112491235594554;
    parameter Real Vmax_167 = 0.157487729832376;
    parameter Real Keq_167 = 2.0;
    parameter Real Km0291_167 = 0.1;
    parameter Real Km0991_167 = 0.1;
    parameter Real Km0180_167 = 0.1;
    parameter Real Km1021_167 = 0.1;
    parameter Real FLUX_VALUE_168 = 0.0112491235594566;
    parameter Real Vmax_168 = 0.337473706783698;
    parameter Real Keq_168 = 2.0;
    parameter Real Km0434_168 = 0.1;
    parameter Real Km1021_168 = 0.1;
    parameter Real Km1598_168 = 0.1;
    parameter Real Km0423_168 = 0.1;
    parameter Real Km0633_168 = 0.1;
    parameter Real Km1077_168 = 0.1;
    parameter Real FLUX_VALUE_169 = 0.0108620079713781;
    parameter Real Vmax_169 = 0.325860239141343;
    parameter Real Keq_169 = 2.0;
    parameter Real Km0434_169 = 0.1;
    parameter Real Km1025_169 = 0.1;
    parameter Real Km1600_169 = 0.1;
    parameter Real Km0423_169 = 0.1;
    parameter Real Km0633_169 = 0.1;
    parameter Real Km1099_169 = 0.1;
    parameter Real FLUX_VALUE_170 = 0.0142545827185181;
    parameter Real Vmax_170 = 0.199564158059253;
    parameter Real Keq_170 = 2.0;
    parameter Real Km0066_170 = 0.1;
    parameter Real Km1198_170 = 0.1;
    parameter Real Km1203_170 = 0.1;
    parameter Real Km1271_170 = 0.1;
    parameter Real FLUX_VALUE_171 = 0.0306618317263325;
    parameter Real Vmax_171 = 0.429265644168655;
    parameter Real Keq_171 = 2.0;
    parameter Real Km0573_171 = 0.1;
    parameter Real Km0785_171 = 0.1;
    parameter Real Km0633_171 = 0.1;
    parameter Real Km0743_171 = 0.1;
    parameter Real FLUX_VALUE_172 = 0.0306618317263325;
    parameter Real Vmax_172 = 0.183970990357995;
    parameter Real Keq_172 = 2.0;
    parameter Real Km0557_172 = 0.1;
    parameter Real Km0574_172 = 0.1;
    parameter Real FLUX_VALUE_173 = 2.88565330302391;
    parameter Real Vmax_173 = 17.3139198181435;
    parameter Real Keq_173 = 2.0;
    parameter Real Km0304_173 = 0.1;
    parameter Real Km0120_173 = 0.1;
    parameter Real FLUX_VALUE_174 = 0.000583975250367414;
    parameter Real Vmax_174 = 0.0128474555080831;
    parameter Real Keq_174 = 0.2;
    parameter Real Km0434_174 = 0.1;
    parameter Real Km1029_174 = 0.1;
    parameter Real Km0633_174 = 0.1;
    parameter Real Km1322_174 = 0.1;
    parameter Real Km1416_174 = 0.1;
    parameter Real FLUX_VALUE_175 = 0.00250816743817059;
    parameter Real Vmax_175 = 0.0351143441343883;
    parameter Real Keq_175 = 2.0;
    parameter Real Km0322_175 = 0.1;
    parameter Real Km1012_175 = 0.1;
    parameter Real Km1029_175 = 0.1;
    parameter Real Km1487_175 = 0.1;
    parameter Real FLUX_VALUE_176 = 0.00192419218780178;
    parameter Real Vmax_176 = 0.0577257656340534;
    parameter Real Keq_176 = 2.0;
    parameter Real Km0434_176 = 0.1;
    parameter Real Km1029_176 = 0.1;
    parameter Real Km1602_176 = 0.1;
    parameter Real Km0423_176 = 0.1;
    parameter Real Km0633_176 = 0.1;
    parameter Real Km1148_176 = 0.1;
    parameter Real FLUX_VALUE_177 = 1.95938592660585;
    parameter Real Vmax_177 = 27.4314029724819;
    parameter Real Keq_177 = 2.0;
    parameter Real Km0306_177 = 0.1;
    parameter Real Km1198_177 = 0.1;
    parameter Real Km0304_177 = 0.1;
    parameter Real Km1203_177 = 0.1;
    parameter Real FLUX_VALUE_178 = 0.926267376418038;
    parameter Real Vmax_178 = 12.9677432698525;
    parameter Real Keq_178 = 2.0;
    parameter Real Km0306_178 = 0.1;
    parameter Real Km1207_178 = 0.1;
    parameter Real Km0304_178 = 0.1;
    parameter Real Km1212_178 = 0.1;
    parameter Real FLUX_VALUE_179 = 0.00155984810489089;
    parameter Real Vmax_179 = 0.0218378734684725;
    parameter Real Keq_179 = 2.0;
    parameter Real Km0028_179 = 0.1;
    parameter Real Km0539_179 = 0.1;
    parameter Real Km0019_179 = 0.1;
    parameter Real Km0467_179 = 0.1;
    parameter Real FLUX_VALUE_180 = 0.00155984810490301;
    parameter Real Vmax_180 = 0.0592742279863144;
    parameter Real Keq_180 = 0.02;
    parameter Real Km0018_180 = 0.1;
    parameter Real Km0434_180 = 0.1;
    parameter Real Km0394_180 = 0.1;
    parameter Real Km0456_180 = 0.1;
    parameter Real Km0943_180 = 0.1;
    parameter Real Km1322_180 = 0.1;
    parameter Real FLUX_VALUE_181 = 8.05209910738368e-05;
    parameter Real Vmax_181 = 0.000805209910738368;
    parameter Real Keq_181 = 0.2;
    parameter Real Km0126_181 = 0.1;
    parameter Real Km1153_181 = 0.1;
    parameter Real Km1322_181 = 0.1;
    parameter Real FLUX_VALUE_182 = 8.05209911324267e-05;
    parameter Real Vmax_182 = 0.00048312594679456;
    parameter Real Keq_182 = 2.0;
    parameter Real Km0568_182 = 0.1;
    parameter Real Km0126_182 = 0.1;
    parameter Real FLUX_VALUE_183 = 0.00609896813767666;
    parameter Real Vmax_183 = 0.134177299028887;
    parameter Real Keq_183 = 0.2;
    parameter Real Km1191_183 = 0.1;
    parameter Real Km1212_183 = 0.1;
    parameter Real Km0145_183 = 0.1;
    parameter Real Km1207_183 = 0.1;
    parameter Real Km1322_183 = 0.1;
    parameter Real FLUX_VALUE_184 = 5.86779635397505;
    parameter Real Vmax_184 = 82.1491489556507;
    parameter Real Keq_184 = 2.0;
    parameter Real Km1203_184 = 0.1;
    parameter Real Km1537_184 = 0.1;
    parameter Real Km1198_184 = 0.1;
    parameter Real Km1535_184 = 0.1;
    parameter Real FLUX_VALUE_185 = 0.0014653985431621;
    parameter Real Vmax_185 = 0.014653985431621;
    parameter Real Keq_185 = 0.2;
    parameter Real Km0467_185 = 0.1;
    parameter Real Km0526_185 = 0.1;
    parameter Real Km1322_185 = 0.1;
    parameter Real FLUX_VALUE_186 = 0.0350981004584189;
    parameter Real Vmax_186 = 0.491373406417865;
    parameter Real Keq_186 = 2.0;
    parameter Real Km0434_186 = 0.1;
    parameter Real Km0739_186 = 0.1;
    parameter Real Km0394_186 = 0.1;
    parameter Real Km0785_186 = 0.1;
    parameter Real FLUX_VALUE_187 = 0.10862767021555;
    parameter Real Vmax_187 = 1.5207873830177;
    parameter Real Keq_187 = 2.0;
    parameter Real Km0434_187 = 0.1;
    parameter Real Km1538_187 = 0.1;
    parameter Real Km0394_187 = 0.1;
    parameter Real Km1559_187 = 0.1;
    parameter Real FLUX_VALUE_188 = 0.00217467874388578;
    parameter Real Vmax_188 = 0.0304455024144009;
    parameter Real Keq_188 = 2.0;
    parameter Real Km0841_188 = 0.1;
    parameter Real Km1233_188 = 0.1;
    parameter Real Km0362_188 = 0.1;
    parameter Real Km1012_188 = 0.1;
    parameter Real FLUX_VALUE_189 = 0.00609896813766667;
    parameter Real Vmax_189 = 0.0853855539273334;
    parameter Real Keq_189 = 2.0;
    parameter Real Km0455_189 = 0.1;
    parameter Real Km1266_189 = 0.1;
    parameter Real Km0979_189 = 0.1;
    parameter Real Km1322_189 = 0.1;
    parameter Real FLUX_VALUE_190 = 0.00609896813767666;
    parameter Real Vmax_190 = 0.0853855539274732;
    parameter Real Keq_190 = 2.0;
    parameter Real Km0991_190 = 0.1;
    parameter Real Km1182_190 = 0.1;
    parameter Real Km1192_190 = 0.1;
    parameter Real Km1266_190 = 0.1;
    parameter Real FLUX_VALUE_191 = 0.00419754745504612;
    parameter Real Vmax_191 = 0.0587656643706457;
    parameter Real Keq_191 = 2.0;
    parameter Real Km1269_191 = 0.1;
    parameter Real Km1386_191 = 0.1;
    parameter Real Km0633_191 = 0.1;
    parameter Real Km1270_191 = 0.1;
    parameter Real FLUX_VALUE_192 = 0.00419754745504612;
    parameter Real Vmax_192 = 0.0419754745504612;
    parameter Real Keq_192 = 0.2;
    parameter Real Km1270_192 = 0.1;
    parameter Real Km0456_192 = 0.1;
    parameter Real Km1545_192 = 0.1;
    parameter Real FLUX_VALUE_193 = 0.00508184090605392;
    parameter Real Vmax_193 = 0.0711457726847549;
    parameter Real Keq_193 = 2.0;
    parameter Real Km0951_193 = 0.1;
    parameter Real Km0991_193 = 0.1;
    parameter Real Km0180_193 = 0.1;
    parameter Real Km1032_193 = 0.1;
    parameter Real FLUX_VALUE_194 = 0.00508184090624576;
    parameter Real Vmax_194 = 0.152455227187373;
    parameter Real Keq_194 = 2.0;
    parameter Real Km0434_194 = 0.1;
    parameter Real Km1032_194 = 0.1;
    parameter Real Km1604_194 = 0.1;
    parameter Real Km0423_194 = 0.1;
    parameter Real Km0633_194 = 0.1;
    parameter Real Km1314_194 = 0.1;
    parameter Real FLUX_VALUE_195 = 0.00375691882979276;
    parameter Real Vmax_195 = 0.0826522142554407;
    parameter Real Keq_195 = 0.2;
    parameter Real Km0302_195 = 0.1;
    parameter Real Km0434_195 = 0.1;
    parameter Real Km0300_195 = 0.1;
    parameter Real Km0394_195 = 0.1;
    parameter Real Km1322_195 = 0.1;
    parameter Real FLUX_VALUE_196 = 0.000109303224869629;
    parameter Real Vmax_196 = 0.00153024514817481;
    parameter Real Keq_196 = 2.0;
    parameter Real Km1351_196 = 0.1;
    parameter Real Km1416_196 = 0.1;
    parameter Real Km1343_196 = 0.1;
    parameter Real Km1413_196 = 0.1;
    parameter Real FLUX_VALUE_197 = 8.05209910738368e-05;
    parameter Real Vmax_197 = 0.00112729387503372;
    parameter Real Keq_197 = 2.0;
    parameter Real Km0471_197 = 0.1;
    parameter Real Km1153_197 = 0.1;
    parameter Real Km0089_197 = 0.1;
    parameter Real Km0526_197 = 0.1;
    parameter Real FLUX_VALUE_198 = 0.00013575612338737;
    parameter Real Vmax_198 = 0.0013575612338737;
    parameter Real Keq_198 = 0.2;
    parameter Real Km1337_198 = 0.1;
    parameter Real Km0456_198 = 0.1;
    parameter Real Km1351_198 = 0.1;
    parameter Real FLUX_VALUE_199 = 0.000150557601754342;
    parameter Real Vmax_199 = 0.00210780642456079;
    parameter Real Keq_199 = 2.0;
    parameter Real Km0471_199 = 0.1;
    parameter Real Km1039_199 = 0.1;
    parameter Real Km0526_199 = 0.1;
    parameter Real Km1337_199 = 0.1;
    parameter Real FLUX_VALUE_200 = 0.00217467874478967;
    parameter Real Vmax_200 = 0.0478429323853727;
    parameter Real Keq_200 = 0.2;
    parameter Real Km0201_200 = 0.1;
    parameter Real Km1616_200 = 0.1;
    parameter Real Km0390_200 = 0.1;
    parameter Real Km1469_200 = 0.1;
    parameter Real Km1620_200 = 0.1;
    parameter Real FLUX_VALUE_201 = 0.850573321329957;
    parameter Real Vmax_201 = 11.9080264986194;
    parameter Real Keq_201 = 2.0;
    parameter Real Km0434_201 = 0.1;
    parameter Real Km0557_201 = 0.1;
    parameter Real Km0394_201 = 0.1;
    parameter Real Km0555_201 = 0.1;
    parameter Real FLUX_VALUE_202 = 0.106703478027702;
    parameter Real Vmax_202 = 0.640220868166212;
    parameter Real Keq_202 = 2.0;
    parameter Real Km0568_202 = 0.1;
    parameter Real Km0567_202 = 0.1;
    parameter Real FLUX_VALUE_203 = 1.46007394609031;
    parameter Real Vmax_203 = 20.4410352452643;
    parameter Real Keq_203 = 2.0;
    parameter Real Km0260_203 = 0.1;
    parameter Real Km1198_203 = 0.1;
    parameter Real Km0258_203 = 0.1;
    parameter Real Km1203_203 = 0.1;
    parameter Real FLUX_VALUE_204 = 1.69142241294296;
    parameter Real Vmax_204 = 23.6799137812014;
    parameter Real Keq_204 = 2.0;
    parameter Real Km0075_204 = 0.1;
    parameter Real Km0394_204 = 0.1;
    parameter Real Km0260_204 = 0.1;
    parameter Real Km0434_204 = 0.1;
    parameter Real FLUX_VALUE_205 = 0.231348466852626;
    parameter Real Vmax_205 = 1.38809080111576;
    parameter Real Keq_205 = 2.0;
    parameter Real Km0260_205 = 0.1;
    parameter Real Km0188_205 = 0.1;
    parameter Real FLUX_VALUE_206 = 0.000109303224869629;
    parameter Real Vmax_206 = 0.00153024514817481;
    parameter Real Keq_206 = 2.0;
    parameter Real Km1342_206 = 0.1;
    parameter Real Km1416_206 = 0.1;
    parameter Real Km1346_206 = 0.1;
    parameter Real Km1413_206 = 0.1;
    parameter Real FLUX_VALUE_207 = 0.000109303224869629;
    parameter Real Vmax_207 = 0.00153024514817481;
    parameter Real Keq_207 = 2.0;
    parameter Real Km1343_207 = 0.1;
    parameter Real Km1416_207 = 0.1;
    parameter Real Km1342_207 = 0.1;
    parameter Real Km1413_207 = 0.1;
    parameter Real FLUX_VALUE_208 = 0.0306618317263325;
    parameter Real Vmax_208 = 0.183970990357995;
    parameter Real Keq_208 = 2.0;
    parameter Real Km0574_208 = 0.1;
    parameter Real Km0573_208 = 0.1;
    parameter Real FLUX_VALUE_209 = 0.00155984810490301;
    parameter Real Vmax_209 = 0.0218378734686421;
    parameter Real Keq_209 = 2.0;
    parameter Real Km0019_209 = 0.1;
    parameter Real Km0434_209 = 0.1;
    parameter Real Km0018_209 = 0.1;
    parameter Real Km0394_209 = 0.1;
    parameter Real FLUX_VALUE_210 = 0.00375691882979276;
    parameter Real Vmax_210 = 0.112707564893783;
    parameter Real Keq_210 = 2.0;
    parameter Real Km0434_210 = 0.1;
    parameter Real Km0973_210 = 0.1;
    parameter Real Km1364_210 = 0.1;
    parameter Real Km0299_210 = 0.1;
    parameter Real Km0394_210 = 0.1;
    parameter Real Km1322_210 = 0.1;
    parameter Real FLUX_VALUE_211 = 0.00251625132250899;
    parameter Real Vmax_211 = 0.0150975079350539;
    parameter Real Keq_211 = 2.0;
    parameter Real Km0078_211 = 0.1;
    parameter Real Km0077_211 = 0.1;
    parameter Real FLUX_VALUE_212 = 0.00251625132250899;
    parameter Real Vmax_212 = 0.0251625132250899;
    parameter Real Keq_212 = 0.2;
    parameter Real Km0326_212 = 0.1;
    parameter Real Km0078_212 = 0.1;
    parameter Real Km0633_212 = 0.1;
    parameter Real FLUX_VALUE_213 = 0.00375691882979276;
    parameter Real Vmax_213 = 0.112707564893783;
    parameter Real Keq_213 = 2.0;
    parameter Real Km0300_213 = 0.1;
    parameter Real Km0456_213 = 0.1;
    parameter Real Km0434_213 = 0.1;
    parameter Real Km1364_213 = 0.1;
    parameter Real Km0394_213 = 0.1;
    parameter Real Km1322_213 = 0.1;
    parameter Real FLUX_VALUE_214 = 0.00627317015230181;
    parameter Real Vmax_214 = 0.0878243821322253;
    parameter Real Keq_214 = 2.0;
    parameter Real Km0120_214 = 0.1;
    parameter Real Km0403_214 = 0.1;
    parameter Real Km1365_214 = 0.1;
    parameter Real Km1487_214 = 0.1;
    parameter Real FLUX_VALUE_215 = 0.00107785124523996;
    parameter Real Vmax_215 = 0.00646710747143976;
    parameter Real Keq_215 = 2.0;
    parameter Real Km1187_215 = 0.1;
    parameter Real Km0076_215 = 0.1;
    parameter Real FLUX_VALUE_216 = 0.00375691882979276;
    parameter Real Vmax_216 = 0.112707564893783;
    parameter Real Keq_216 = 2.0;
    parameter Real Km0327_216 = 0.1;
    parameter Real Km0434_216 = 0.1;
    parameter Real Km1003_216 = 0.1;
    parameter Real Km0325_216 = 0.1;
    parameter Real Km0394_216 = 0.1;
    parameter Real Km1322_216 = 0.1;
    parameter Real FLUX_VALUE_217 = 0.00375691882979276;
    parameter Real Vmax_217 = 0.0826522142554407;
    parameter Real Keq_217 = 0.2;
    parameter Real Km0999_217 = 0.1;
    parameter Real Km1386_217 = 0.1;
    parameter Real Km0327_217 = 0.1;
    parameter Real Km0633_217 = 0.1;
    parameter Real Km0991_217 = 0.1;
    parameter Real FLUX_VALUE_218 = 0.0115485688525797;
    parameter Real Vmax_218 = 0.161679963936116;
    parameter Real Keq_218 = 2.0;
    parameter Real Km0434_218 = 0.1;
    parameter Real Km1408_218 = 0.1;
    parameter Real Km0423_218 = 0.1;
    parameter Real Km1386_218 = 0.1;
    parameter Real FLUX_VALUE_219 = 1.46007394609031;
    parameter Real Vmax_219 = 14.6007394609031;
    parameter Real Keq_219 = 0.2;
    parameter Real Km0259_219 = 0.1;
    parameter Real Km1039_219 = 0.1;
    parameter Real Km1322_219 = 0.1;
    parameter Real FLUX_VALUE_220 = 1.46007394609031;
    parameter Real Vmax_220 = 20.4410352452643;
    parameter Real Keq_220 = 2.0;
    parameter Real Km0258_220 = 0.1;
    parameter Real Km0991_220 = 0.1;
    parameter Real Km0180_220 = 0.1;
    parameter Real Km0259_220 = 0.1;
    parameter Real FLUX_VALUE_221 = 1.02210851263136e-05;
    parameter Real Vmax_221 = 0.000102210851263136;
    parameter Real Keq_221 = 20.0;
    parameter Real Km1084_221 = 0.1;
    parameter Real Km1366_221 = 0.1;
    parameter Real Km0481_221 = 0.1;
    parameter Real FLUX_VALUE_222 = 1.02210838883012e-05;
    parameter Real Vmax_222 = 0.000224863845542626;
    parameter Real Keq_222 = 20.0;
    parameter Real Km1212_222 = 0.1;
    parameter Real Km1275_222 = 0.1;
    parameter Real Km1445_222 = 0.1;
    parameter Real Km1207_222 = 0.1;
    parameter Real Km1366_222 = 0.1;
    parameter Real FLUX_VALUE_223 = 0.00508184090624473;
    parameter Real Vmax_223 = 0.0508184090624473;
    parameter Real Keq_223 = 0.2;
    parameter Real Km1377_223 = 0.1;
    parameter Real Km0456_223 = 0.1;
    parameter Real Km0951_223 = 0.1;
    parameter Real FLUX_VALUE_224 = 0.00387115588078458;
    parameter Real Vmax_224 = 0.0851654293772608;
    parameter Real Keq_224 = 0.2;
    parameter Real Km1207_224 = 0.1;
    parameter Real Km1377_224 = 0.1;
    parameter Real Km0204_224 = 0.1;
    parameter Real Km0456_224 = 0.1;
    parameter Real Km1212_224 = 0.1;
    parameter Real FLUX_VALUE_225 = 0.00625077817220815;
    parameter Real Vmax_225 = 0.187523345166245;
    parameter Real Keq_225 = 2.0;
    parameter Real Km0434_225 = 0.1;
    parameter Real Km1035_225 = 0.1;
    parameter Real Km1606_225 = 0.1;
    parameter Real Km0423_225 = 0.1;
    parameter Real Km0633_225 = 0.1;
    parameter Real Km1379_225 = 0.1;
    parameter Real FLUX_VALUE_226 = 0.00625077817220671;
    parameter Real Vmax_226 = 0.0875108944108939;
    parameter Real Keq_226 = 2.0;
    parameter Real Km0118_226 = 0.1;
    parameter Real Km1212_226 = 0.1;
    parameter Real Km1035_226 = 0.1;
    parameter Real Km1207_226 = 0.1;
    parameter Real FLUX_VALUE_227 = 0.0768531341901953;
    parameter Real Vmax_227 = 2.30559402570586;
    parameter Real Keq_227 = 2.0;
    parameter Real Km0434_227 = 0.1;
    parameter Real Km0445_227 = 0.1;
    parameter Real Km1399_227 = 0.1;
    parameter Real Km0394_227 = 0.1;
    parameter Real Km1271_227 = 0.1;
    parameter Real Km1322_227 = 0.1;
    parameter Real FLUX_VALUE_228 = 0.0658655350433608;
    parameter Real Vmax_228 = 1.97596605130082;
    parameter Real Keq_228 = 2.0;
    parameter Real Km0529_228 = 0.1;
    parameter Real Km1198_228 = 0.1;
    parameter Real Km1399_228 = 0.1;
    parameter Real Km0373_228 = 0.1;
    parameter Real Km0456_228 = 0.1;
    parameter Real Km1203_228 = 0.1;
    parameter Real FLUX_VALUE_229 = 0.211286770788091;
    parameter Real Vmax_229 = 2.95801479103327;
    parameter Real Keq_229 = 2.0;
    parameter Real Km0394_229 = 0.1;
    parameter Real Km1360_229 = 0.1;
    parameter Real Km0434_229 = 0.1;
    parameter Real Km1399_229 = 0.1;
    parameter Real FLUX_VALUE_230 = 7.51459670975844e-05;
    parameter Real Vmax_230 = 0.00105204353936618;
    parameter Real Keq_230 = 2.0;
    parameter Real Km0158_230 = 0.1;
    parameter Real Km0314_230 = 0.1;
    parameter Real Km0328_230 = 0.1;
    parameter Real Km1322_230 = 0.1;
    parameter Real FLUX_VALUE_231 = 3.75729835487922e-05;
    parameter Real Vmax_231 = 0.000526021769683091;
    parameter Real Keq_231 = 2.0;
    parameter Real Km0328_231 = 0.1;
    parameter Real Km0314_231 = 0.1;
    parameter Real Km1405_231 = 0.1;
    parameter Real FLUX_VALUE_232 = 6.43295039602845e-05;
    parameter Real Vmax_232 = 0.000900613055443983;
    parameter Real Keq_232 = 2.0;
    parameter Real Km0434_232 = 0.1;
    parameter Real Km1616_232 = 0.1;
    parameter Real Km0586_232 = 0.1;
    parameter Real Km1620_232 = 0.1;
    parameter Real FLUX_VALUE_233 = 0.000133265490575614;
    parameter Real Vmax_233 = 0.0018657168680586;
    parameter Real Keq_233 = 2.0;
    parameter Real Km1559_233 = 0.1;
    parameter Real Km1616_233 = 0.1;
    parameter Real Km0656_233 = 0.1;
    parameter Real Km1620_233 = 0.1;
    parameter Real FLUX_VALUE_234 = 7.22995270761245e-05;
    parameter Real Vmax_234 = 0.00101219337906574;
    parameter Real Keq_234 = 2.0;
    parameter Real Km0394_234 = 0.1;
    parameter Real Km1616_234 = 0.1;
    parameter Real Km0582_234 = 0.1;
    parameter Real Km1620_234 = 0.1;
    parameter Real FLUX_VALUE_235 = 9.44495616410234e-05;
    parameter Real Vmax_235 = 0.00132229386297433;
    parameter Real Keq_235 = 2.0;
    parameter Real Km0467_235 = 0.1;
    parameter Real Km1616_235 = 0.1;
    parameter Real Km0587_235 = 0.1;
    parameter Real Km1620_235 = 0.1;
    parameter Real FLUX_VALUE_236 = 9.10860206851083e-05;
    parameter Real Vmax_236 = 0.00127520428959152;
    parameter Real Keq_236 = 2.0;
    parameter Real Km0739_236 = 0.1;
    parameter Real Km1616_236 = 0.1;
    parameter Real Km0613_236 = 0.1;
    parameter Real Km1620_236 = 0.1;
    parameter Real FLUX_VALUE_237 = 0.0110176132567827;
    parameter Real Vmax_237 = 0.0661056795406962;
    parameter Real Keq_237 = 2.0;
    parameter Real Km0577_237 = 0.1;
    parameter Real Km1408_237 = 0.1;
    parameter Real FLUX_VALUE_238 = 0.0110927592238809;
    parameter Real Vmax_238 = 0.0665565553432854;
    parameter Real Keq_238 = 2.0;
    parameter Real Km0581_238 = 0.1;
    parameter Real Km0577_238 = 0.1;
    parameter Real FLUX_VALUE_239 = 0.000256065575909038;
    parameter Real Vmax_239 = 0.00358491806272653;
    parameter Real Keq_239 = 2.0;
    parameter Real Km1416_239 = 0.1;
    parameter Real Km1569_239 = 0.1;
    parameter Real Km0700_239 = 0.1;
    parameter Real Km1413_239 = 0.1;
    parameter Real FLUX_VALUE_240 = 0.01086200797138;
    parameter Real Vmax_240 = 0.23896417537036;
    parameter Real Keq_240 = 0.2;
    parameter Real Km1038_240 = 0.1;
    parameter Real Km1198_240 = 0.1;
    parameter Real Km0180_240 = 0.1;
    parameter Real Km1025_240 = 0.1;
    parameter Real Km1203_240 = 0.1;
    parameter Real FLUX_VALUE_241 = 0.01086200797138;
    parameter Real Vmax_241 = 0.23896417537036;
    parameter Real Keq_241 = 20.0;
    parameter Real Km0959_241 = 0.1;
    parameter Real Km0991_241 = 0.1;
    parameter Real Km1212_241 = 0.1;
    parameter Real Km1038_241 = 0.1;
    parameter Real Km1207_241 = 0.1;
    parameter Real FLUX_VALUE_242 = 2.04421699920047e-05;
    parameter Real Vmax_242 = 0.000449727739824103;
    parameter Real Keq_242 = 0.2;
    parameter Real Km1039_242 = 0.1;
    parameter Real Km1302_242 = 0.1;
    parameter Real Km0231_242 = 0.1;
    parameter Real Km0456_242 = 0.1;
    parameter Real Km0529_242 = 0.1;
    parameter Real FLUX_VALUE_243 = 0.00703639510095562;
    parameter Real Vmax_243 = 0.211091853028669;
    parameter Real Keq_243 = 2.0;
    parameter Real Km0434_243 = 0.1;
    parameter Real Km1039_243 = 0.1;
    parameter Real Km1607_243 = 0.1;
    parameter Real Km0423_243 = 0.1;
    parameter Real Km0633_243 = 0.1;
    parameter Real Km1428_243 = 0.1;
    parameter Real FLUX_VALUE_244 = 0.0100308480322675;
    parameter Real Vmax_244 = 0.140431872451745;
    parameter Real Keq_244 = 2.0;
    parameter Real Km0211_244 = 0.1;
    parameter Real Km1212_244 = 0.1;
    parameter Real Km1207_244 = 0.1;
    parameter Real Km1429_244 = 0.1;
    parameter Real FLUX_VALUE_245 = 0.0100308480322675;
    parameter Real Vmax_245 = 0.140431872451745;
    parameter Real Keq_245 = 2.0;
    parameter Real Km0434_245 = 0.1;
    parameter Real Km1429_245 = 0.1;
    parameter Real Km0261_245 = 0.1;
    parameter Real Km0394_245 = 0.1;
    parameter Real FLUX_VALUE_246 = 0.000129987342075721;
    parameter Real Vmax_246 = 0.00285972152566586;
    parameter Real Keq_246 = 20.0;
    parameter Real Km1203_246 = 0.1;
    parameter Real Km1275_246 = 0.1;
    parameter Real Km1447_246 = 0.1;
    parameter Real Km0037_246 = 0.1;
    parameter Real Km1198_246 = 0.1;
    parameter Real FLUX_VALUE_247 = 0.00012998734207478;
    parameter Real Vmax_247 = 0.00285972152564516;
    parameter Real Keq_247 = 20.0;
    parameter Real Km1212_247 = 0.1;
    parameter Real Km1275_247 = 0.1;
    parameter Real Km1447_247 = 0.1;
    parameter Real Km0037_247 = 0.1;
    parameter Real Km1207_247 = 0.1;
    parameter Real FLUX_VALUE_248 = 0.000259974684150501;
    parameter Real Vmax_248 = 0.011958835470923;
    parameter Real Keq_248 = 0.2;
    parameter Real Km0190_248 = 0.1;
    parameter Real Km1212_248 = 0.1;
    parameter Real Km0633_248 = 0.1;
    parameter Real Km1207_248 = 0.1;
    parameter Real Km1447_248 = 0.1;
    parameter Real FLUX_VALUE_249 = 3.08174379214594e-05;
    parameter Real Vmax_249 = 0.00104779288932962;
    parameter Real Keq_249 = 2000.0;
    parameter Real Km0666_249 = 0.1;
    parameter Real Km0056_249 = 0.1;
    parameter Real Km0672_249 = 0.1;
    parameter Real FLUX_VALUE_250 = 0.00217467874480193;
    parameter Real Vmax_250 = 0.030445502427227;
    parameter Real Keq_250 = 2.0;
    parameter Real Km0394_250 = 0.1;
    parameter Real Km1467_250 = 0.1;
    parameter Real Km0298_250 = 0.1;
    parameter Real Km1322_250 = 0.1;
    parameter Real FLUX_VALUE_251 = 0.00217467874480475;
    parameter Real Vmax_251 = 0.134830082177894;
    parameter Real Keq_251 = 2.0;
    parameter Real Km1212_251 = 0.1;
    parameter Real Km1469_251 = 0.1;
    parameter Real Km0841_251 = 0.1;
    parameter Real Km1207_251 = 0.1;
    parameter Real FLUX_VALUE_252 = 0.0047288825765441;
    parameter Real Vmax_252 = 0.0662043560716174;
    parameter Real Keq_252 = 2.0;
    parameter Real Km1212_252 = 0.1;
    parameter Real Km1620_252 = 0.1;
    parameter Real Km1207_252 = 0.1;
    parameter Real Km1616_252 = 0.1;
    parameter Real FLUX_VALUE_253 = 0.00726411015276989;
    parameter Real Vmax_253 = 0.0726411015276989;
    parameter Real Keq_253 = 0.2;
    parameter Real Km1238_253 = 0.1;
    parameter Real Km1045_253 = 0.1;
    parameter Real Km1322_253 = 0.1;
    parameter Real FLUX_VALUE_254 = 0.00726411015276649;
    parameter Real Vmax_254 = 0.217923304582995;
    parameter Real Keq_254 = 2.0;
    parameter Real Km0434_254 = 0.1;
    parameter Real Km1045_254 = 0.1;
    parameter Real Km1608_254 = 0.1;
    parameter Real Km0423_254 = 0.1;
    parameter Real Km0633_254 = 0.1;
    parameter Real Km1491_254 = 0.1;
    parameter Real FLUX_VALUE_255 = 0.000136629031085814;
    parameter Real Vmax_255 = 0.0019128064352014;
    parameter Real Keq_255 = 2.0;
    parameter Real Km0306_255 = 0.1;
    parameter Real Km0654_255 = 0.1;
    parameter Real Km0625_255 = 0.1;
    parameter Real Km0649_255 = 0.1;
    parameter Real FLUX_VALUE_256 = 0.000530955594768567;
    parameter Real Vmax_256 = 0.00743337832675994;
    parameter Real Keq_256 = 2.0;
    parameter Real Km0551_256 = 0.1;
    parameter Real Km0557_256 = 0.1;
    parameter Real Km0764_256 = 0.1;
    parameter Real Km1427_256 = 0.1;
    parameter Real FLUX_VALUE_257 = 0.000530955595806181;
    parameter Real Vmax_257 = 0.00743337834128653;
    parameter Real Keq_257 = 2.0;
    parameter Real Km0764_257 = 0.1;
    parameter Real Km1427_257 = 0.1;
    parameter Real Km0581_257 = 0.1;
    parameter Real Km1408_257 = 0.1;
    parameter Real FLUX_VALUE_258 = 0.0105618036280732;
    parameter Real Vmax_258 = 0.147865250793025;
    parameter Real Keq_258 = 2.0;
    parameter Real Km0557_258 = 0.1;
    parameter Real Km0764_258 = 0.1;
    parameter Real Km0551_258 = 0.1;
    parameter Real Km0581_258 = 0.1;
    parameter Real FLUX_VALUE_259 = 0.000888088702062361;
    parameter Real Vmax_259 = 0.00888088702062361;
    parameter Real Keq_259 = 0.2;
    parameter Real Km0409_259 = 0.1;
    parameter Real Km1322_259 = 0.1;
    parameter Real Km1520_259 = 0.1;
    parameter Real FLUX_VALUE_260 = 0.000510195573579038;
    parameter Real Vmax_260 = 0.00510195573579038;
    parameter Real Keq_260 = 20.0;
    parameter Real Km0619_260 = 0.1;
    parameter Real Km0056_260 = 0.1;
    parameter Real Km1524_260 = 0.1;
    parameter Real FLUX_VALUE_261 = 0.850333043996831;
    parameter Real Vmax_261 = 5.10199826398099;
    parameter Real Keq_261 = 2.0;
    parameter Real Km0629_261 = 0.1;
    parameter Real Km0764_261 = 0.1;
    parameter Real FLUX_VALUE_262 = 0.00107785124523996;
    parameter Real Vmax_262 = 0.0150899174333594;
    parameter Real Keq_262 = 2.0;
    parameter Real Km0086_262 = 0.1;
    parameter Real Km1039_262 = 0.1;
    parameter Real Km0764_262 = 0.1;
    parameter Real Km1048_262 = 0.1;
    parameter Real FLUX_VALUE_263 = 0.00107785124523807;
    parameter Real Vmax_263 = 0.0323355373571421;
    parameter Real Keq_263 = 2.0;
    parameter Real Km0434_263 = 0.1;
    parameter Real Km1048_263 = 0.1;
    parameter Real Km1610_263 = 0.1;
    parameter Real Km0423_263 = 0.1;
    parameter Real Km0633_263 = 0.1;
    parameter Real Km1527_263 = 0.1;
    parameter Real FLUX_VALUE_264 = 0.00387115588138798;
    parameter Real Vmax_264 = 0.0541961823394317;
    parameter Real Keq_264 = 2.0;
    parameter Real Km0204_264 = 0.1;
    parameter Real Km0991_264 = 0.1;
    parameter Real Km0180_264 = 0.1;
    parameter Real Km1051_264 = 0.1;
    parameter Real FLUX_VALUE_265 = 0.00387115588078469;
    parameter Real Vmax_265 = 0.116134676423541;
    parameter Real Keq_265 = 2.0;
    parameter Real Km0434_265 = 0.1;
    parameter Real Km1051_265 = 0.1;
    parameter Real Km1612_265 = 0.1;
    parameter Real Km0423_265 = 0.1;
    parameter Real Km0633_265 = 0.1;
    parameter Real Km1533_265 = 0.1;
    parameter Real FLUX_VALUE_266 = 0.00192419218784248;
    parameter Real Vmax_266 = 0.0269386906297947;
    parameter Real Keq_266 = 2.0;
    parameter Real Km0434_266 = 0.1;
    parameter Real Km1545_266 = 0.1;
    parameter Real Km0394_266 = 0.1;
    parameter Real Km1538_266 = 0.1;
    parameter Real FLUX_VALUE_267 = 0.106703478028585;
    parameter Real Vmax_267 = 1.49384869240019;
    parameter Real Keq_267 = 2.0;
    parameter Real Km0567_267 = 0.1;
    parameter Real Km1559_267 = 0.1;
    parameter Real Km0633_267 = 0.1;
    parameter Real Km1543_267 = 0.1;
    parameter Real FLUX_VALUE_268 = 0.01004223378483;
    parameter Real Vmax_268 = 0.14059127298762;
    parameter Real Keq_268 = 2.0;
    parameter Real Km0232_268 = 0.1;
    parameter Real Km0991_268 = 0.1;
    parameter Real Km0180_268 = 0.1;
    parameter Real Km1056_268 = 0.1;
    parameter Real FLUX_VALUE_269 = 0.010042233784859;
    parameter Real Vmax_269 = 0.30126701354577;
    parameter Real Keq_269 = 2.0;
    parameter Real Km0434_269 = 0.1;
    parameter Real Km1056_269 = 0.1;
    parameter Real Km1614_269 = 0.1;
    parameter Real Km0423_269 = 0.1;
    parameter Real Km0633_269 = 0.1;
    parameter Real Km1561_269 = 0.1;
    parameter Real FLUX_VALUE_270 = 0.212107675642733;
    parameter Real Vmax_270 = 0.707025585475777;
    parameter Real Km0420_270 = 1.0;
    parameter Real Km0419_270 = 0.1;
    parameter Real FLUX_VALUE_271 = 1.0;
    parameter Real Vmax_271 = 3.33333333333333;
    parameter Real Km0565_271 = 1.0;
    parameter Real Km0563_271 = 0.1;
    parameter Real FLUX_VALUE_272 = 0.0300082373429098;
    parameter Real Vmax_272 = 0.100027457809699;
    parameter Real Km1324_272 = 1.0;
    parameter Real Km1322_272 = 0.1;
    parameter Real FLUX_VALUE_273 = 0.00293372891749683;
    parameter Real Vmax_273 = 0.0097790963916561;
    parameter Real Km1468_273 = 1.0;
    parameter Real Km1467_273 = 0.1;
    parameter Real FLUX_VALUE_274 = 0.087517608841966;
    parameter Real Vmax_274 = 0.525105653051796;
    parameter Real Keq_274 = 2.0;
    parameter Real Km0456_274 = 0.1;
    parameter Real Km0445_274 = 0.1;
    parameter Real FLUX_VALUE_275 = 1.51989569594335;
    parameter Real Vmax_275 = 3.0397913918867;
    parameter Real Km0456_275 = 0.1;
    parameter Real FLUX_VALUE_276 = 9.44495616916319e-05;
    parameter Real Vmax_276 = 0.00132229386368285;
    parameter Real Keq_276 = 2.0;
    parameter Real Km0394_276 = 0.1;
    parameter Real Km0587_276 = 0.1;
    parameter Real Km0434_276 = 0.1;
    parameter Real Km0589_276 = 0.1;
    parameter Real FLUX_VALUE_277 = 0.000136629031036409;
    parameter Real Vmax_277 = 0.00191280643450973;
    parameter Real Keq_277 = 2.0;
    parameter Real Km0394_277 = 0.1;
    parameter Real Km0582_277 = 0.1;
    parameter Real Km0434_277 = 0.1;
    parameter Real Km0584_277 = 0.1;
    parameter Real FLUX_VALUE_278 = 2.87599469319674;
    parameter Real Vmax_278 = 5.75198938639348;
    parameter Real Km0722_278 = 0.1;
    parameter Real FLUX_VALUE_279 = 2.94122930652654;
    parameter Real Vmax_279 = 9.8040976884218;
    parameter Real Km1277_279 = 1.0;
    parameter Real Km1275_279 = 0.1;
    parameter Real FLUX_VALUE_280 = 3.75729835487922e-05;
    parameter Real Vmax_280 = 0.000375729835487922;
    parameter Real Keq_280 = 0.2;
    parameter Real Km0313_280 = 0.1;
    parameter Real Km0314_280 = 0.1;
    parameter Real Km1322_280 = 0.1;
    parameter Real FLUX_VALUE_281 = 0.0379525086351436;
    parameter Real zero_flux_281 = 0.0;
    parameter Real V0_281 = 0.0379525086351872;
    parameter Real ic0002_281 = 0.1;
    parameter Real ep0002_281 = 1.1348;
    parameter Real ic0423_281 = 0.1;
    parameter Real ep0423_281 = 0.046;
    parameter Real ic0434_281 = 0.1;
    parameter Real ep0434_281 = 59.276;
    parameter Real ic0526_281 = 0.1;
    parameter Real ep0526_281 = 0.0447;
    parameter Real ic0584_281 = 0.1;
    parameter Real ep0584_281 = 0.0036;
    parameter Real ic0589_281 = 0.1;
    parameter Real ep0589_281 = 0.0024;
    parameter Real ic0615_281 = 0.1;
    parameter Real ep0615_281 = 0.0024;
    parameter Real ic0649_281 = 0.1;
    parameter Real ep0649_281 = 0.0036;
    parameter Real ic0773_281 = 0.1;
    parameter Real ep0773_281 = 0.5185;
    parameter Real ic0782_281 = 0.1;
    parameter Real ep0782_281 = 0.046;
    parameter Real ic1107_281 = 0.1;
    parameter Real ep1107_281 = 0.8079;
    parameter Real ic1405_281 = 0.1;
    parameter Real ep1405_281 = 0.00099;
    parameter Real ic1467_281 = 0.1;
    parameter Real ep1467_281 = 0.02;
    parameter Real ic1520_281 = 0.1;
    parameter Real ep1520_281 = 0.0234;
    parameter Real ic1545_281 = 0.1;
    parameter Real ep1545_281 = 0.0599;
    parameter Real ic0004_281 = 0.1;
    parameter Real ep0004_281 = 1.1348;
    parameter Real ic0404_281 = 0.1;
    parameter Real ep0404_281 = 0.4588;
    parameter Real ic0428_281 = 0.1;
    parameter Real ep0428_281 = 0.1607;
    parameter Real ic0430_281 = 0.1;
    parameter Real ep0430_281 = 0.1017;
    parameter Real ic0432_281 = 0.1;
    parameter Real ep0432_281 = 0.2975;
    parameter Real ic0542_281 = 0.1;
    parameter Real ep0542_281 = 0.0066;
    parameter Real ic0747_281 = 0.1;
    parameter Real ep0747_281 = 0.1054;
    parameter Real ic0748_281 = 0.1;
    parameter Real ep0748_281 = 0.3018;
    parameter Real ic0757_281 = 0.1;
    parameter Real ep0757_281 = 0.2904;
    parameter Real ic0832_281 = 0.1;
    parameter Real ep0832_281 = 0.0663;
    parameter Real ic0847_281 = 0.1;
    parameter Real ep0847_281 = 0.1927;
    parameter Real ic1077_281 = 0.1;
    parameter Real ep1077_281 = 0.2964;
    parameter Real ic1099_281 = 0.1;
    parameter Real ep1099_281 = 0.2862;
    parameter Real ic1148_281 = 0.1;
    parameter Real ep1148_281 = 0.0507;
    parameter Real ic1314_281 = 0.1;
    parameter Real ep1314_281 = 0.1339;
    parameter Real ic1379_281 = 0.1;
    parameter Real ep1379_281 = 0.1647;
    parameter Real ic1337_281 = 0.1;
    parameter Real ep1337_281 = 0.00039;
    parameter Real ic0089_281 = 0.1;
    parameter Real ep0089_281 = 0.001583;
    parameter Real ic1428_281 = 0.1;
    parameter Real ep1428_281 = 0.1854;
    parameter Real ic1491_281 = 0.1;
    parameter Real ep1491_281 = 0.1914;
    parameter Real ic1527_281 = 0.1;
    parameter Real ep1527_281 = 0.0284;
    parameter Real ic1533_281 = 0.1;
    parameter Real ep1533_281 = 0.102;
    parameter Real ic1561_281 = 0.1;
    parameter Real ep1561_281 = 0.2646;
    parameter Real ic0122_281 = 0.1;
    parameter Real ep0122_281 = 5.6e-05;
    parameter Real ic0918_281 = 0.1;
    parameter Real ep0918_281 = 0.000538625;
    parameter Real ic0657_281 = 0.1;
    parameter Real ep0657_281 = 9.6e-05;
    parameter Real ic0662_281 = 0.1;
    parameter Real ep0662_281 = 0.000125;
    parameter Real ic0666_281 = 0.1;
    parameter Real ep0666_281 = 0.0056;
    parameter Real ic0672_281 = 0.1;
    parameter Real ep0672_281 = 0.000812;
    parameter Real ic0056_281 = 0.1;
    parameter Real ep0056_281 = 0.000892666666666666;
    parameter Real ic0700_281 = 0.1;
    parameter Real ep0700_281 = 0.000114;
    parameter Real ic1059_281 = 0.1;
    parameter Real ep1059_281 = 3.2e-05;
    parameter Real ic1346_281 = 0.1;
    parameter Real ep1346_281 = 0.00288;
    parameter Real ic1351_281 = 0.1;
    parameter Real ep1351_281 = 0.000697;
    parameter Real ic1524_281 = 0.1;
    parameter Real ep1524_281 = 0.000781;
    parameter Real ic1569_281 = 0.1;
    parameter Real ep1569_281 = 1.5e-05;
    parameter Real cell = 1.0;
    parameter Real extracellular = 1.0;



    Real s_0002;
    Real s_0004;
    Real s_0008;
    Real s_0009;
    Real s_0010;
    Real s_0015;
    Real s_0016;
    Real s_0018;
    Real s_0019;
    Real s_0028;
    Real s_0037;
    Real s_0039;
    Real s_0056;
    Real s_0061;
    Real s_0066;
    Real s_0075;
    Real s_0076;
    Real s_0077;
    Real s_0078;
    Real s_0082;
    Real s_0086;
    Real s_0089;
    Real s_0118;
    Real s_0120;
    Real s_0122;
    Real s_0126;
    Real s_0141;
    Real s_0142;
    Real s_0145;
    Real s_0146;
    Real s_0158;
    Real s_0162;
    Real s_0165;
    Real s_0176;
    Real s_0178;
    Real s_0180;
    Real s_0188;
    Real s_0190;
    Real s_0201;
    Real s_0204;
    Real s_0207;
    Real s_0209;
    Real s_0210;
    Real s_0211;
    Real s_0218;
    Real s_0231;
    Real s_0232;
    Real s_0258;
    Real s_0259;
    Real s_0260;
    Real s_0261;
    Real s_0262;
    Real s_0291;
    Real s_0295;
    Real s_0296;
    Real s_0297;
    Real s_0298;
    Real s_0299;
    Real s_0300;
    Real s_0301;
    Real s_0302;
    Real s_0304;
    Real s_0306;
    Real s_0312;
    Real s_0313;
    Real s_0314;
    Real s_0322;
    Real s_0324;
    Real s_0325;
    Real s_0326;
    Real s_0327;
    Real s_0328;
    Real s_0349;
    Real s_0362;
    Real s_0367;
    Real s_0373;
    Real s_0380;
    Real s_0386;
    Real s_0390;
    Real s_0393;
    Real s_0394;
    Real s_0403;
    Real s_0404;
    Real s_0409;
    Real s_0419;
    Real s_0420;
    Real s_0423;
    Real s_0427;
    Real s_0428;
    Real s_0430;
    Real s_0432;
    Real s_0434;
    Real s_0445;
    Real s_0454;
    Real s_0455;
    Real s_0456;
    Real s_0458;
    Real s_0467;
    Real s_0471;
    Real s_0475;
    Real s_0481;
    Real s_0493;
    Real s_0499;
    Real s_0515;
    Real s_0516;
    Real s_0522;
    Real s_0526;
    Real s_0529;
    Real s_0539;
    Real s_0542;
    Real s_0550;
    Real s_0551;
    Real s_0555;
    Real s_0557;
    Real s_0563;
    Real s_0565;
    Real s_0567;
    Real s_0568;
    Real s_0573;
    Real s_0574;
    Real s_0577;
    Real s_0581;
    Real s_0582;
    Real s_0584;
    Real s_0586;
    Real s_0587;
    Real s_0589;
    Real s_0595;
    Real s_0602;
    Real s_0613;
    Real s_0615;
    Real s_0619;
    Real s_0625;
    Real s_0629;
    Real s_0633;
    Real s_0644;
    Real s_0645;
    Real s_0649;
    Real s_0654;
    Real s_0656;
    Real s_0657;
    Real s_0662;
    Real s_0664;
    Real s_0666;
    Real s_0672;
    Real s_0700;
    Real s_0709;
    Real s_0710;
    Real s_0722;
    Real s_0723;
    Real s_0725;
    Real s_0739;
    Real s_0743;
    Real s_0745;
    Real s_0747;
    Real s_0748;
    Real s_0750;
    Real s_0754;
    Real s_0757;
    Real s_0764;
    Real s_0767;
    Real s_0773;
    Real s_0782;
    Real s_0785;
    Real s_0832;
    Real s_0835;
    Real s_0836;
    Real s_0837;
    Real s_0841;
    Real s_0847;
    Real s_0849;
    Real s_0918;
    Real s_0940;
    Real s_0943;
    Real s_0951;
    Real s_0953;
    Real s_0955;
    Real s_0959;
    Real s_0965;
    Real s_0969;
    Real s_0973;
    Real s_0978;
    Real s_0979;
    Real s_0980;
    Real s_0981;
    Real s_0991;
    Real s_0999;
    Real s_1003;
    Real s_1006;
    Real s_1010;
    Real s_1011;
    Real s_1012;
    Real s_1014;
    Real s_1016;
    Real s_1021;
    Real s_1025;
    Real s_1029;
    Real s_1032;
    Real s_1035;
    Real s_1038;
    Real s_1039;
    Real s_1045;
    Real s_1048;
    Real s_1051;
    Real s_1056;
    Real s_1059;
    Real s_1065;
    Real s_1073;
    Real s_1077;
    Real s_1084;
    Real s_1099;
    Real s_1101;
    Real s_1107;
    Real s_1148;
    Real s_1153;
    Real s_1161;
    Real s_1176;
    Real s_1182;
    Real s_1187;
    Real s_1191;
    Real s_1192;
    Real s_1194;
    Real s_1198;
    Real s_1203;
    Real s_1207;
    Real s_1212;
    Real s_1233;
    Real s_1238;
    Real s_1255;
    Real s_1266;
    Real s_1269;
    Real s_1270;
    Real s_1271;
    Real s_1275;
    Real s_1277;
    Real s_1286;
    Real s_1302;
    Real s_1314;
    Real s_1322;
    Real s_1324;
    Real s_1331;
    Real s_1337;
    Real s_1342;
    Real s_1343;
    Real s_1346;
    Real s_1351;
    Real s_1360;
    Real s_1364;
    Real s_1365;
    Real s_1366;
    Real s_1376;
    Real s_1377;
    Real s_1379;
    Real s_1386;
    Real s_1399;
    Real s_1405;
    Real s_1408;
    Real s_1413;
    Real s_1416;
    Real s_1427;
    Real s_1428;
    Real s_1429;
    Real s_1445;
    Real s_1447;
    Real s_1449;
    Real s_1454;
    Real s_1467;
    Real s_1468;
    Real s_1469;
    Real s_1487;
    Real s_1491;
    Real s_1520;
    Real s_1524;
    Real s_1527;
    Real s_1533;
    Real s_1535;
    Real s_1537;
    Real s_1538;
    Real s_1543;
    Real s_1545;
    Real s_1559;
    Real s_1561;
    Real s_1565;
    Real s_1569;
    Real s_1576;
    Real s_1577;
    Real s_1578;
    Real s_1579;
    Real s_1582;
    Real s_1583;
    Real s_1585;
    Real s_1587;
    Real s_1589;
    Real s_1590;
    Real s_1591;
    Real s_1593;
    Real s_1594;
    Real s_1596;
    Real s_1598;
    Real s_1600;
    Real s_1602;
    Real s_1604;
    Real s_1606;
    Real s_1607;
    Real s_1608;
    Real s_1610;
    Real s_1612;
    Real s_1614;
    Real s_1616;
    Real s_1620;
    Real e_0001;
    Real e_0004;
    Real e_0006;
    Real e_0007;
    Real e_0008;
    Real e_0010;
    Real e_0011;
    Real e_0012;
    Real e_0016;
    Real e_0017;
    Real e_0020;
    Real e_0022;
    Real e_0025;
    Real e_0026;
    Real e_0028;
    Real e_0029;
    Real e_0030;
    Real e_0031;
    Real e_0038;
    Real e_0045;
    Real e_0054;
    Real e_0057;
    Real e_0062;
    Real e_0063;
    Real e_0064;
    Real e_0065;
    Real e_0071;
    Real e_0074;
    Real e_0077;
    Real e_0079;
    Real e_0084;
    Real e_0085;
    Real e_0086;
    Real e_0087;
    Real e_0088;
    Real e_0089;
    Real e_0090;
    Real e_0091;
    Real e_0092;
    Real e_0100;
    Real e_0101;
    Real e_0103;
    Real e_0104;
    Real e_0106;
    Real e_0107;
    Real e_0111;
    Real e_0113;
    Real e_0117;
    Real e_0122;
    Real e_0124;
    Real e_0128;
    Real e_0129;
    Real e_0133;
    Real e_0134;
    Real e_0135;
    Real e_0136;
    Real e_0137;
    Real e_0139;
    Real e_0141;
    Real e_0142;
    Real e_0146;
    Real e_0154;
    Real e_0160;
    Real e_0165;
    Real e_0167;
    Real e_0168;
    Real e_0169;
    Real e_0171;
    Real e_0175;
    Real e_0176;
    Real e_0177;
    Real e_0179;
    Real e_0181;
    Real e_0182;
    Real e_0186;
    Real e_0194;
    Real e_0196;
    Real e_0203;
    Real e_0204;
    Real e_0206;
    Real e_0214;
    Real e_0218;
    Real e_0219;
    Real e_0220;
    Real e_0231;
    Real e_0233;
    Real e_0234;
    Real e_0237;
    Real e_0239;
    Real e_0242;
    Real e_0243;
    Real e_0249;
    Real e_0250;
    Real e_0255;
    Real e_0269;
    Real e_0271;
    Real e_0273;
    Real e_0276;
    Real e_0278;
    Real e_0280;
    Real e_0281;
    Real e_0283;
    Real e_0290;
    Real e_0291;
    Real e_0294;
    Real e_0296;
    Real e_0297;
    Real e_0298;
    Real e_0299;
    Real e_0303;
    Real e_0304;
    Real e_0306;
    Real e_0311;
    Real e_0312;
    Real e_0314;
    Real e_0317;
    Real e_0320;
    Real e_0321;
    Real e_0322;
    Real e_0325;
    Real e_0326;
    Real e_0328;
    Real e_0329;
    Real e_0330;
    Real e_0334;
    Real e_0340;
    Real e_0342;
    Real e_0343;
    Real e_0346;
    Real e_0347;
    Real e_0348;
    Real e_0352;
    Real e_0353;
    Real e_0355;
    Real e_0364;
    Real e_0365;
    Real e_0367;
    Real e_0368;
    Real e_0372;
    Real e_0376;
    Real e_0379;
    Real e_0380;
    Real e_0381;
    Real e_0382;
    Real e_0385;
    Real e_0387;
    Real e_0389;
    Real e_0390;
    Real e_0392;
    Real e_0393;
    Real e_0396;
    Real e_0397;
    Real e_0398;
    Real e_0401;
    Real e_0405;
    Real e_0409;
    Real e_0418;
    Real e_0422;
    Real e_0424;
    Real e_0425;
    Real e_0426;
    Real e_0427;
    Real e_0428;
    Real e_0431;
    Real e_0434;
    Real e_0435;
    Real e_0436;
    Real e_0440;
    Real e_0448;
    Real e_0452;
    Real e_0454;
    Real e_0456;
    Real e_0457;
    Real e_0458;
    Real e_0462;
    Real e_0463;
    Real e_0465;
    Real e_0467;
    Real e_0469;
    Real e_0470;
    Real e_0472;
    Real e_0475;
    Real e_0476;
    Real e_0489;
    Real e_0490;
    Real e_0492;
    Real e_0495;
    Real e_0496;
    Real e_0499;
    Real e_0506;
    Real e_0508;
    Real e_0510;
    Real e_0512;
    Real e_0514;
    Real e_0515;
    Real e_0525;
    Real e_0528;
    Real e_0531;
    Real e_0536;
    Real e_0540;
    Real e_0541;
    Real e_0542;
    Real e_0545;
    Real e_0547;
    Real e_0548;
    Real e_0549;
    Real e_0550;
    Real e_0556;
    Real e_0557;
    Real e_0561;
    Real e_0563;
    Real e_0565;
    Real e_0567;
    Real e_0568;
    Real e_0571;
    Real e_0574;
    Real e_0576;
    Real e_0578;
    Real e_0582;
    Real e_0585;
    Real e_0586;
    Real e_0591;
    Real e_0594;
    Real e_0603;
    Real e_0607;
    Real e_0610;
    Real e_0611;
    Real e_0613;
    Real e_0615;
    Real e_0629;
    Real e_0631;
    Real e_0632;
    Real e_0633;
    Real e_0637;
    Real e_0638;
    Real e_0639;
    Real e_0642;
    Real e_0644;
    Real e_0645;
    Real e_0658;
    Real e_0667;
    Real e_0674;
    Real e_0675;
    Real e_0682;
    Real e_0684;
    Real e_0685;
    Real e_0686;
    Real e_0687;
    Real e_0690;
    Real e_0692;
    Real e_0693;
    Real e_0697;
    Real e_0699;
    Real e_0705;
    Real e_0708;
    Real e_0711;
    Real e_0712;
    Real e_0714;
    Real e_0716;
    Real e_0724;
    Real e_0729;
    Real e_0733;
    Real e_0734;
    Real e_0736;
    Real e_0737;
    Real e_0741;
    Real e_0742;
    Real e_0743;
    Real e_0744;
    Real e_0745;
    Real e_0746;
    Real e_0747;
    Real e_0750;
    Real e_0752;
    Real e_0753;
    Real e_0754;
    Real e_0755;
    Real e_0756;
    Real e_0757;
    Real e_0761;
    Real e_0763;
    Real e_0765;
    Real e_0769;
    Real e_0771;
    Real e_0774;
    Real e_0775;
    Real e_0778;
    Real e_0788;
    Real e_0791;
    Real e_0793;
    Real e_0799;
    Real e_0800;
    Real e_0802;
    Real e_0805;
    Real e_0808;
    Real e_0812;
    Real e_0813;
    Real e_0826;
    Real e_0827;
    Real e_0829;
    Real e_0830;
    Real e_0832;
    Real e_0836;
    Real e_0838;
    Real e_0840;
    Real e_0841;
    Real e_0848;
    Real e_0850;
    Real e_0851;
    Real e_0852;
    Real e_0855;
    Real e_0860;
    Real e_0862;
    Real e_0867;
    Real e_0869;
    Real e_0872;
    Real e_0875;
    Real e_0880;
    Real e_0883;
    Real e_0888;
    Real e_0889;
    Real e_0890;
    Real e_0894;
    Real e_0895;
    Real e_0899;
    Real e_0903;
    Real e_0904;
    Real e_0910;
    Real e_0914;
    Real e_0915;
    Real e_0922;
    Real e_0926;
    Real e_0934;
    Real e_0940;
    Real e_0947;
    Real e_0953;
    Real e_0955;
    Real e_0959;
    Real e_0962;
    Real e_0963;
    Real e_0964;
    Real e_0970;
    Real e_0973;
    Real e_0975;
    Real e_0976;
    Real e_0978;
    Real e_0980;

initial equation
    s_0002 = 0.1;
    s_0004 = 0.1;
    s_0008 = 0.1;
    s_0009 = 0.1;
    s_0010 = 0.1;
    s_0015 = 0.1;
    s_0016 = 0.1;
    s_0018 = 0.1;
    s_0019 = 0.1;
    s_0028 = 0.1;
    s_0037 = 0.1;
    s_0039 = 0.1;
    s_0056 = 0.1;
    s_0061 = 0.1;
    s_0066 = 0.1;
    s_0075 = 0.1;
    s_0076 = 0.1;
    s_0077 = 0.1;
    s_0078 = 0.1;
    s_0082 = 0.1;
    s_0086 = 0.1;
    s_0089 = 0.1;
    s_0118 = 0.1;
    s_0120 = 0.1;
    s_0122 = 0.1;
    s_0126 = 0.1;
    s_0141 = 0.1;
    s_0142 = 0.1;
    s_0145 = 0.1;
    s_0146 = 0.1;
    s_0158 = 0.1;
    s_0162 = 0.1;
    s_0165 = 0.1;
    s_0176 = 0.1;
    s_0178 = 0.1;
    s_0180 = 0.1;
    s_0188 = 0.1;
    s_0190 = 0.1;
    s_0201 = 0.1;
    s_0204 = 0.1;
    s_0207 = 0.1;
    s_0209 = 0.1;
    s_0210 = 0.1;
    s_0211 = 0.1;
    s_0218 = 0.1;
    s_0231 = 0.1;
    s_0232 = 0.1;
    s_0258 = 0.1;
    s_0259 = 0.1;
    s_0260 = 0.1;
    s_0261 = 0.1;
    s_0262 = 0.1;
    s_0291 = 0.1;
    s_0295 = 0.1;
    s_0296 = 0.1;
    s_0297 = 0.1;
    s_0298 = 0.1;
    s_0299 = 0.1;
    s_0300 = 0.1;
    s_0301 = 0.1;
    s_0302 = 0.1;
    s_0304 = 0.1;
    s_0306 = 0.1;
    s_0312 = 0.1;
    s_0313 = 0.1;
    s_0314 = 0.1;
    s_0322 = 0.1;
    s_0324 = 0.1;
    s_0325 = 0.1;
    s_0326 = 0.1;
    s_0327 = 0.1;
    s_0328 = 0.1;
    s_0349 = 0.1;
    s_0362 = 0.1;
    s_0367 = 0.1;
    s_0373 = 0.1;
    s_0380 = 0.1;
    s_0386 = 0.1;
    s_0390 = 0.1;
    s_0393 = 0.1;
    s_0394 = 0.1;
    s_0403 = 0.1;
    s_0404 = 0.1;
    s_0409 = 0.1;
    s_0419 = 0.1;
    s_0420 = 1.0;
    s_0423 = 0.1;
    s_0427 = 0.1;
    s_0428 = 0.1;
    s_0430 = 0.1;
    s_0432 = 0.1;
    s_0434 = 0.1;
    s_0445 = 0.1;
    s_0454 = 0.1;
    s_0455 = 0.1;
    s_0456 = 0.1;
    s_0458 = 0.0;
    s_0467 = 0.1;
    s_0471 = 0.1;
    s_0475 = 0.1;
    s_0481 = 0.1;
    s_0493 = 0.1;
    s_0499 = 0.1;
    s_0515 = 0.1;
    s_0516 = 0.1;
    s_0522 = 0.1;
    s_0526 = 0.1;
    s_0529 = 0.1;
    s_0539 = 0.1;
    s_0542 = 0.1;
    s_0550 = 0.1;
    s_0551 = 0.1;
    s_0555 = 0.1;
    s_0557 = 0.1;
    s_0563 = 0.1;
    s_0565 = 1.0;
    s_0567 = 0.1;
    s_0568 = 0.1;
    s_0573 = 0.1;
    s_0574 = 0.1;
    s_0577 = 0.1;
    s_0581 = 0.1;
    s_0582 = 0.1;
    s_0584 = 0.1;
    s_0586 = 0.1;
    s_0587 = 0.1;
    s_0589 = 0.1;
    s_0595 = 0.1;
    s_0602 = 0.1;
    s_0613 = 0.1;
    s_0615 = 0.1;
    s_0619 = 0.1;
    s_0625 = 0.1;
    s_0629 = 0.1;
    s_0633 = 0.1;
    s_0644 = 0.1;
    s_0645 = 0.1;
    s_0649 = 0.1;
    s_0654 = 0.1;
    s_0656 = 0.1;
    s_0657 = 0.1;
    s_0662 = 0.1;
    s_0664 = 0.1;
    s_0666 = 0.1;
    s_0672 = 0.1;
    s_0700 = 0.1;
    s_0709 = 0.1;
    s_0710 = 0.1;
    s_0722 = 0.1;
    s_0723 = 0.0;
    s_0725 = 0.1;
    s_0739 = 0.1;
    s_0743 = 0.1;
    s_0745 = 0.1;
    s_0747 = 0.1;
    s_0748 = 0.1;
    s_0750 = 0.1;
    s_0754 = 0.1;
    s_0757 = 0.1;
    s_0764 = 0.1;
    s_0767 = 0.1;
    s_0773 = 0.1;
    s_0782 = 0.1;
    s_0785 = 0.1;
    s_0832 = 0.1;
    s_0835 = 0.1;
    s_0836 = 0.1;
    s_0837 = 0.1;
    s_0841 = 0.1;
    s_0847 = 0.1;
    s_0849 = 0.1;
    s_0918 = 0.1;
    s_0940 = 0.1;
    s_0943 = 0.1;
    s_0951 = 0.1;
    s_0953 = 0.1;
    s_0955 = 0.1;
    s_0959 = 0.1;
    s_0965 = 0.1;
    s_0969 = 0.1;
    s_0973 = 0.1;
    s_0978 = 0.1;
    s_0979 = 0.1;
    s_0980 = 0.1;
    s_0981 = 0.1;
    s_0991 = 0.1;
    s_0999 = 0.1;
    s_1003 = 0.1;
    s_1006 = 0.1;
    s_1010 = 0.1;
    s_1011 = 0.1;
    s_1012 = 0.1;
    s_1014 = 0.1;
    s_1016 = 0.1;
    s_1021 = 0.1;
    s_1025 = 0.1;
    s_1029 = 0.1;
    s_1032 = 0.1;
    s_1035 = 0.1;
    s_1038 = 0.1;
    s_1039 = 0.1;
    s_1045 = 0.1;
    s_1048 = 0.1;
    s_1051 = 0.1;
    s_1056 = 0.1;
    s_1059 = 0.1;
    s_1065 = 0.1;
    s_1073 = 0.1;
    s_1077 = 0.1;
    s_1084 = 0.1;
    s_1099 = 0.1;
    s_1101 = 0.1;
    s_1107 = 0.1;
    s_1148 = 0.1;
    s_1153 = 0.1;
    s_1161 = 0.1;
    s_1176 = 0.1;
    s_1182 = 0.1;
    s_1187 = 0.1;
    s_1191 = 0.1;
    s_1192 = 0.1;
    s_1194 = 0.1;
    s_1198 = 0.1;
    s_1203 = 0.1;
    s_1207 = 0.1;
    s_1212 = 0.1;
    s_1233 = 0.1;
    s_1238 = 0.1;
    s_1255 = 0.1;
    s_1266 = 0.1;
    s_1269 = 0.1;
    s_1270 = 0.1;
    s_1271 = 0.1;
    s_1275 = 0.1;
    s_1277 = 1.0;
    s_1286 = 0.1;
    s_1302 = 0.1;
    s_1314 = 0.1;
    s_1322 = 0.1;
    s_1324 = 1.0;
    s_1331 = 0.1;
    s_1337 = 0.1;
    s_1342 = 0.1;
    s_1343 = 0.1;
    s_1346 = 0.1;
    s_1351 = 0.1;
    s_1360 = 0.1;
    s_1364 = 0.1;
    s_1365 = 0.1;
    s_1366 = 0.1;
    s_1376 = 0.1;
    s_1377 = 0.1;
    s_1379 = 0.1;
    s_1386 = 0.1;
    s_1399 = 0.1;
    s_1405 = 0.1;
    s_1408 = 0.1;
    s_1413 = 0.1;
    s_1416 = 0.1;
    s_1427 = 0.1;
    s_1428 = 0.1;
    s_1429 = 0.1;
    s_1445 = 0.1;
    s_1447 = 0.1;
    s_1449 = 0.1;
    s_1454 = 0.1;
    s_1467 = 0.1;
    s_1468 = 1.0;
    s_1469 = 0.1;
    s_1487 = 0.1;
    s_1491 = 0.1;
    s_1520 = 0.1;
    s_1524 = 0.1;
    s_1527 = 0.1;
    s_1533 = 0.1;
    s_1535 = 0.1;
    s_1537 = 0.1;
    s_1538 = 0.1;
    s_1543 = 0.1;
    s_1545 = 0.1;
    s_1559 = 0.1;
    s_1561 = 0.1;
    s_1565 = 0.1;
    s_1569 = 0.1;
    s_1576 = 0.1;
    s_1577 = 0.1;
    s_1578 = 0.1;
    s_1579 = 0.1;
    s_1582 = 0.1;
    s_1583 = 0.1;
    s_1585 = 0.1;
    s_1587 = 0.1;
    s_1589 = 0.1;
    s_1590 = 0.1;
    s_1591 = 0.1;
    s_1593 = 0.1;
    s_1594 = 0.1;
    s_1596 = 0.1;
    s_1598 = 0.1;
    s_1600 = 0.1;
    s_1602 = 0.1;
    s_1604 = 0.1;
    s_1606 = 0.1;
    s_1607 = 0.1;
    s_1608 = 0.1;
    s_1610 = 0.1;
    s_1612 = 0.1;
    s_1614 = 0.1;
    s_1616 = 0.1;
    s_1620 = 0.1;
    e_0001 = 0.001;
    e_0004 = 0.001;
    e_0006 = 0.001;
    e_0007 = 0.001;
    e_0008 = 0.001;
    e_0010 = 0.001;
    e_0011 = 0.001;
    e_0012 = 0.001;
    e_0016 = 0.001;
    e_0017 = 0.001;
    e_0020 = 0.001;
    e_0022 = 0.001;
    e_0025 = 0.001;
    e_0026 = 0.001;
    e_0028 = 0.001;
    e_0029 = 0.001;
    e_0030 = 0.001;
    e_0031 = 0.001;
    e_0038 = 0.001;
    e_0045 = 0.001;
    e_0054 = 0.001;
    e_0057 = 0.001;
    e_0062 = 0.001;
    e_0063 = 0.001;
    e_0064 = 0.001;
    e_0065 = 0.001;
    e_0071 = 0.001;
    e_0074 = 0.001;
    e_0077 = 0.001;
    e_0079 = 0.001;
    e_0084 = 0.001;
    e_0085 = 0.001;
    e_0086 = 0.001;
    e_0087 = 0.001;
    e_0088 = 0.001;
    e_0089 = 0.001;
    e_0090 = 0.001;
    e_0091 = 0.001;
    e_0092 = 0.001;
    e_0100 = 0.001;
    e_0101 = 0.001;
    e_0103 = 0.001;
    e_0104 = 0.001;
    e_0106 = 0.001;
    e_0107 = 0.001;
    e_0111 = 0.001;
    e_0113 = 0.001;
    e_0117 = 0.001;
    e_0122 = 0.001;
    e_0124 = 0.001;
    e_0128 = 0.001;
    e_0129 = 0.001;
    e_0133 = 0.001;
    e_0134 = 0.001;
    e_0135 = 0.001;
    e_0136 = 0.001;
    e_0137 = 0.001;
    e_0139 = 0.001;
    e_0141 = 0.001;
    e_0142 = 0.001;
    e_0146 = 0.001;
    e_0154 = 0.001;
    e_0160 = 0.001;
    e_0165 = 0.001;
    e_0167 = 0.001;
    e_0168 = 0.001;
    e_0169 = 0.001;
    e_0171 = 0.001;
    e_0175 = 0.001;
    e_0176 = 0.001;
    e_0177 = 0.001;
    e_0179 = 0.001;
    e_0181 = 0.001;
    e_0182 = 0.001;
    e_0186 = 0.001;
    e_0194 = 0.001;
    e_0196 = 0.001;
    e_0203 = 0.001;
    e_0204 = 0.001;
    e_0206 = 0.001;
    e_0214 = 0.001;
    e_0218 = 0.001;
    e_0219 = 0.001;
    e_0220 = 0.001;
    e_0231 = 0.001;
    e_0233 = 0.001;
    e_0234 = 0.001;
    e_0237 = 0.001;
    e_0239 = 0.001;
    e_0242 = 0.001;
    e_0243 = 0.001;
    e_0249 = 0.001;
    e_0250 = 0.001;
    e_0255 = 0.001;
    e_0269 = 0.001;
    e_0271 = 0.001;
    e_0273 = 0.001;
    e_0276 = 0.001;
    e_0278 = 0.001;
    e_0280 = 0.001;
    e_0281 = 0.001;
    e_0283 = 0.001;
    e_0290 = 0.001;
    e_0291 = 0.001;
    e_0294 = 0.001;
    e_0296 = 0.001;
    e_0297 = 0.001;
    e_0298 = 0.001;
    e_0299 = 0.001;
    e_0303 = 0.001;
    e_0304 = 0.001;
    e_0306 = 0.001;
    e_0311 = 0.001;
    e_0312 = 0.001;
    e_0314 = 0.001;
    e_0317 = 0.001;
    e_0320 = 0.001;
    e_0321 = 0.001;
    e_0322 = 0.001;
    e_0325 = 0.001;
    e_0326 = 0.001;
    e_0328 = 0.001;
    e_0329 = 0.001;
    e_0330 = 0.001;
    e_0334 = 0.001;
    e_0340 = 0.001;
    e_0342 = 0.001;
    e_0343 = 0.001;
    e_0346 = 0.001;
    e_0347 = 0.001;
    e_0348 = 0.001;
    e_0352 = 0.001;
    e_0353 = 0.001;
    e_0355 = 0.001;
    e_0364 = 0.001;
    e_0365 = 0.001;
    e_0367 = 0.001;
    e_0368 = 0.001;
    e_0372 = 0.001;
    e_0376 = 0.001;
    e_0379 = 0.001;
    e_0380 = 0.001;
    e_0381 = 0.001;
    e_0382 = 0.001;
    e_0385 = 0.001;
    e_0387 = 0.001;
    e_0389 = 0.001;
    e_0390 = 0.001;
    e_0392 = 0.001;
    e_0393 = 0.001;
    e_0396 = 0.001;
    e_0397 = 0.001;
    e_0398 = 0.001;
    e_0401 = 0.001;
    e_0405 = 0.001;
    e_0409 = 0.001;
    e_0418 = 0.001;
    e_0422 = 0.001;
    e_0424 = 0.001;
    e_0425 = 0.001;
    e_0426 = 0.001;
    e_0427 = 0.001;
    e_0428 = 0.001;
    e_0431 = 0.001;
    e_0434 = 0.001;
    e_0435 = 0.001;
    e_0436 = 0.001;
    e_0440 = 0.001;
    e_0448 = 0.001;
    e_0452 = 0.001;
    e_0454 = 0.001;
    e_0456 = 0.001;
    e_0457 = 0.001;
    e_0458 = 0.001;
    e_0462 = 0.001;
    e_0463 = 0.001;
    e_0465 = 0.001;
    e_0467 = 0.001;
    e_0469 = 0.001;
    e_0470 = 0.001;
    e_0472 = 0.001;
    e_0475 = 0.001;
    e_0476 = 0.001;
    e_0489 = 0.001;
    e_0490 = 0.001;
    e_0492 = 0.001;
    e_0495 = 0.001;
    e_0496 = 0.001;
    e_0499 = 0.001;
    e_0506 = 0.001;
    e_0508 = 0.001;
    e_0510 = 0.001;
    e_0512 = 0.001;
    e_0514 = 0.001;
    e_0515 = 0.001;
    e_0525 = 0.001;
    e_0528 = 0.001;
    e_0531 = 0.001;
    e_0536 = 0.001;
    e_0540 = 0.001;
    e_0541 = 0.001;
    e_0542 = 0.001;
    e_0545 = 0.001;
    e_0547 = 0.001;
    e_0548 = 0.001;
    e_0549 = 0.001;
    e_0550 = 0.001;
    e_0556 = 0.001;
    e_0557 = 0.001;
    e_0561 = 0.001;
    e_0563 = 0.001;
    e_0565 = 0.001;
    e_0567 = 0.001;
    e_0568 = 0.001;
    e_0571 = 0.001;
    e_0574 = 0.001;
    e_0576 = 0.001;
    e_0578 = 0.001;
    e_0582 = 0.001;
    e_0585 = 0.001;
    e_0586 = 0.001;
    e_0591 = 0.001;
    e_0594 = 0.001;
    e_0603 = 0.001;
    e_0607 = 0.001;
    e_0610 = 0.001;
    e_0611 = 0.001;
    e_0613 = 0.001;
    e_0615 = 0.001;
    e_0629 = 0.001;
    e_0631 = 0.001;
    e_0632 = 0.001;
    e_0633 = 0.001;
    e_0637 = 0.001;
    e_0638 = 0.001;
    e_0639 = 0.001;
    e_0642 = 0.001;
    e_0644 = 0.001;
    e_0645 = 0.001;
    e_0658 = 0.001;
    e_0667 = 0.001;
    e_0674 = 0.001;
    e_0675 = 0.001;
    e_0682 = 0.001;
    e_0684 = 0.001;
    e_0685 = 0.001;
    e_0686 = 0.001;
    e_0687 = 0.001;
    e_0690 = 0.001;
    e_0692 = 0.001;
    e_0693 = 0.001;
    e_0697 = 0.001;
    e_0699 = 0.001;
    e_0705 = 0.001;
    e_0708 = 0.001;
    e_0711 = 0.001;
    e_0712 = 0.001;
    e_0714 = 0.001;
    e_0716 = 0.001;
    e_0724 = 0.001;
    e_0729 = 0.001;
    e_0733 = 0.001;
    e_0734 = 0.001;
    e_0736 = 0.001;
    e_0737 = 0.001;
    e_0741 = 0.001;
    e_0742 = 0.001;
    e_0743 = 0.001;
    e_0744 = 0.001;
    e_0745 = 0.001;
    e_0746 = 0.001;
    e_0747 = 0.001;
    e_0750 = 0.001;
    e_0752 = 0.001;
    e_0753 = 0.001;
    e_0754 = 0.001;
    e_0755 = 0.001;
    e_0756 = 0.001;
    e_0757 = 0.001;
    e_0761 = 0.001;
    e_0763 = 0.001;
    e_0765 = 0.001;
    e_0769 = 0.001;
    e_0771 = 0.001;
    e_0774 = 0.001;
    e_0775 = 0.001;
    e_0778 = 0.001;
    e_0788 = 0.001;
    e_0791 = 0.001;
    e_0793 = 0.001;
    e_0799 = 0.001;
    e_0800 = 0.001;
    e_0802 = 0.001;
    e_0805 = 0.001;
    e_0808 = 0.001;
    e_0812 = 0.001;
    e_0813 = 0.001;
    e_0826 = 0.001;
    e_0827 = 0.001;
    e_0829 = 0.001;
    e_0830 = 0.001;
    e_0832 = 0.001;
    e_0836 = 0.001;
    e_0838 = 0.001;
    e_0840 = 0.001;
    e_0841 = 0.001;
    e_0848 = 0.001;
    e_0850 = 0.001;
    e_0851 = 0.001;
    e_0852 = 0.001;
    e_0855 = 0.001;
    e_0860 = 0.001;
    e_0862 = 0.001;
    e_0867 = 0.001;
    e_0869 = 0.001;
    e_0872 = 0.001;
    e_0875 = 0.001;
    e_0880 = 0.001;
    e_0883 = 0.001;
    e_0888 = 0.001;
    e_0889 = 0.001;
    e_0890 = 0.001;
    e_0894 = 0.001;
    e_0895 = 0.001;
    e_0899 = 0.001;
    e_0903 = 0.001;
    e_0904 = 0.001;
    e_0910 = 0.001;
    e_0914 = 0.001;
    e_0915 = 0.001;
    e_0922 = 0.001;
    e_0926 = 0.001;
    e_0934 = 0.001;
    e_0940 = 0.001;
    e_0947 = 0.001;
    e_0953 = 0.001;
    e_0955 = 0.001;
    e_0959 = 0.001;
    e_0962 = 0.001;
    e_0963 = 0.001;
    e_0964 = 0.001;
    e_0970 = 0.001;
    e_0973 = 0.001;
    e_0975 = 0.001;
    e_0976 = 0.001;
    e_0978 = 0.001;
    e_0980 = 0.001;

equation

    der(s_0002) = (cell * Vmax_0 * (s_1543 - s_0002 * s_1538 / Keq_0) / Km1543_0 / (1 + s_1543 / Km1543_0 + (1 + s_0002 / Km0002_0) * (1 + s_1538 / Km1538_0) - 1)) - (1.1348 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0004) = (cell * Vmax_1 * (s_1543 - s_0004 * s_1538 / Keq_1) / Km1543_1 / (1 + s_1543 / Km1543_1 + (1 + s_0004 / Km0004_1) * (1 + s_1538 / Km1538_1) - 1)) - (1.1348 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0008) = (cell * Vmax_163 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_163) / (Km0039_163 * Km1212_163) / ((1 + s_0039 / Km0039_163) * (1 + s_1212 / Km1212_163) + (1 + s_0008 / Km0008_163) * (1 + s_1207 / Km1207_163) - 1)) - (cell * Vmax_91 * (s_0008 - s_0056 / Keq_91) / Km0008_91 / (1 + s_0008 / Km0008_91 + 1 + s_0056 / Km0056_91 - 1));
    der(s_0009) = (cell * Vmax_19 * (s_0165 - s_0009 / Keq_19) / Km0165_19 / (1 + s_0165 / Km0165_19 + 1 + s_0009 / Km0009_19 - 1)) - (cell * Vmax_20 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_20) / (Km0009_20 * Km1198_20) / ((1 + s_0009 / Km0009_20) * (1 + s_1198 / Km1198_20) + (1 + s_0010 / Km0010_20) * (1 + s_1203 / Km1203_20) - 1));
    der(s_0010) = (cell * Vmax_20 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_20) / (Km0009_20 * Km1198_20) / ((1 + s_0009 / Km0009_20) * (1 + s_1198 / Km1198_20) + (1 + s_0010 / Km0010_20) * (1 + s_1203 / Km1203_20) - 1)) - (cell * Vmax_13 * (s_0010 - s_0291 * s_0456 / Keq_13) / Km0010_13 / (1 + s_0010 / Km0010_13 + (1 + s_0291 / Km0291_13) * (1 + s_0456 / Km0456_13) - 1));
    der(s_0015) = (cell * Vmax_43 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_43) / (Km0434_43 * Km0973_43 * Km0979_43) / ((1 + s_0434 / Km0434_43) * (1 + s_0973 / Km0973_43) * (1 + s_0979 / Km0979_43) + (1 + s_0015 / Km0015_43) * (1 + s_0423 / Km0423_43) * (1 + s_0633 / Km0633_43) - 1)) - (cell * Vmax_42 * (s_0015 - s_0725 * s_0965 / Keq_42) / Km0015_42 / (1 + s_0015 / Km0015_42 + (1 + s_0725 / Km0725_42) * (1 + s_0965 / Km0965_42) - 1));
    der(s_0016) = (cell * Vmax_24 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_24) / (Km0146_24 * Km1212_24) / ((1 + s_0146 / Km0146_24) * (1 + s_1212 / Km1212_24) + (1 + s_0016 / Km0016_24) * (1 + s_1207 / Km1207_24) - 1)) - (cell * Vmax_90 * (s_0016 - s_0232 / Keq_90) / Km0016_90 / (1 + s_0016 / Km0016_90 + 1 + s_0232 / Km0232_90 - 1));
    der(s_0018) = (cell * Vmax_209 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_209) / (Km0019_209 * Km0434_209) / ((1 + s_0019 / Km0019_209) * (1 + s_0434 / Km0434_209) + (1 + s_0018 / Km0018_209) * (1 + s_0394 / Km0394_209) - 1)) - (cell * Vmax_180 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_180) / (Km0018_180 * Km0434_180) / ((1 + s_0018 / Km0018_180) * (1 + s_0434 / Km0434_180) + (1 + s_0394 / Km0394_180) * (1 + s_0456 / Km0456_180) * (1 + s_0943 / Km0943_180) * (1 + s_1322 / Km1322_180) - 1));
    der(s_0019) = (cell * Vmax_179 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_179) / (Km0028_179 * Km0539_179) / ((1 + s_0028 / Km0028_179) * (1 + s_0539 / Km0539_179) + (1 + s_0019 / Km0019_179) * (1 + s_0467 / Km0467_179) - 1)) - (cell * Vmax_209 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_209) / (Km0019_209 * Km0434_209) / ((1 + s_0019 / Km0019_209) * (1 + s_0434 / Km0434_209) + (1 + s_0018 / Km0018_209) * (1 + s_0394 / Km0394_209) - 1));
    der(s_0028) = (cell * Vmax_149 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_149) / (Km0218_149 * pow(Km1212_149, 2)) / ((1 + s_0218 / Km0218_149) * pow(1 + s_1212 / Km1212_149, 2) + (1 + s_0028 / Km0028_149) * (1 + s_0529 / Km0529_149) * pow(1 + s_1207 / Km1207_149, 2) - 1)) - (cell * Vmax_179 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_179) / (Km0028_179 * Km0539_179) / ((1 + s_0028 / Km0028_179) * (1 + s_0539 / Km0539_179) + (1 + s_0019 / Km0019_179) * (1 + s_0467 / Km0467_179) - 1));
    der(s_0037) = (cell * Vmax_246 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_246) / (Km1203_246 * Km1275_246 * Km1447_246) / ((1 + s_1203 / Km1203_246) * (1 + s_1275 / Km1275_246) * (1 + s_1447 / Km1447_246) + (1 + s_0037 / Km0037_246) * (1 + s_1198 / Km1198_246) - 1)) + (cell * Vmax_247 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_247) / (Km1212_247 * Km1275_247 * Km1447_247) / ((1 + s_1212 / Km1212_247) * (1 + s_1275 / Km1275_247) * (1 + s_1447 / Km1447_247) + (1 + s_0037 / Km0037_247) * (1 + s_1207 / Km1207_247) - 1)) - (cell * Vmax_166 * (s_0037 - s_1059 / Keq_166) / Km0037_166 / (1 + s_0037 / Km0037_166 + 1 + s_1059 / Km1059_166 - 1));
    der(s_0039) = (cell * Vmax_7 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_7) / (Km0178_7 * Km1399_7) / ((1 + s_0178 / Km0178_7) * (1 + s_1399 / Km1399_7) + (1 + s_0039 / Km0039_7) * (1 + s_0456 / Km0456_7) - 1)) - (cell * Vmax_163 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_163) / (Km0039_163 * Km1212_163) / ((1 + s_0039 / Km0039_163) * (1 + s_1212 / Km1212_163) + (1 + s_0008 / Km0008_163) * (1 + s_1207 / Km1207_163) - 1));
    der(s_0056) = (cell * Vmax_91 * (s_0008 - s_0056 / Keq_91) / Km0008_91 / (1 + s_0008 / Km0008_91 + 1 + s_0056 / Km0056_91 - 1)) - (cell * Vmax_160 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_160) / (Km0056_160 * Km0991_160) / ((1 + s_0056 / Km0056_160) * (1 + s_0991 / Km0991_160) + (1 + s_0180 / Km0180_160) * (1 + s_1016 / Km1016_160) - 1)) - (3.0 * cell * Vmax_249 * (s_0666 * pow(s_0056, 3) - s_0672 / Keq_249) / (Km0666_249 * pow(Km0056_249, 3)) / ((1 + s_0666 / Km0666_249) * pow(1 + s_0056 / Km0056_249, 3) + 1 + s_0672 / Km0672_249 - 1)) - (4.33333333333333 * cell * Vmax_260 * (s_0619 * s_0056 - s_1524 / Keq_260) / (Km0619_260 * Km0056_260) / ((1 + s_0619 / Km0619_260) * (1 + s_0056 / Km0056_260) + 1 + s_1524 / Km1524_260 - 1)) - (0.000892666666666666 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0061) = (cell * Vmax_89 * (s_1194 - s_0061 / Keq_89) / Km1194_89 / (1 + s_1194 / Km1194_89 + 1 + s_0061 / Km0061_89 - 1)) - (cell * Vmax_86 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_86) / (Km0061_86 * Km1275_86) / ((1 + s_0061 / Km0061_86) * (1 + s_1275 / Km1275_86) + (1 + s_0837 / Km0837_86) * (1 + s_1269 / Km1269_86) - 1));
    der(s_0066) = (cell * Vmax_115 * (s_0725 - s_0066 / Keq_115) / Km0725_115 / (1 + s_0725 / Km0725_115 + 1 + s_0066 / Km0066_115 - 1)) - (cell * Vmax_170 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_170) / (Km0066_170 * Km1198_170) / ((1 + s_0066 / Km0066_170) * (1 + s_1198 / Km1198_170) + (1 + s_1203 / Km1203_170) * (1 + s_1271 / Km1271_170) - 1));
    der(s_0075) = (cell * Vmax_125 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_125) / (Km0764_125 * Km1198_125 * Km1322_125) / ((1 + s_0764 / Km0764_125) * (1 + s_1198 / Km1198_125) * (1 + s_1322 / Km1322_125) + (1 + s_0075 / Km0075_125) * (1 + s_1203 / Km1203_125) - 1)) - (cell * Vmax_204 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_204) / (Km0075_204 * Km0394_204) / ((1 + s_0075 / Km0075_204) * (1 + s_0394 / Km0394_204) + (1 + s_0260 / Km0260_204) * (1 + s_0434 / Km0434_204) - 1));
    der(s_0076) = (cell * Vmax_215 * (s_1187 - s_0076 / Keq_215) / Km1187_215 / (1 + s_1187 / Km1187_215 + 1 + s_0076 / Km0076_215 - 1)) - (cell * Vmax_154 * (s_0076 - s_0086 * s_0456 / Keq_154) / Km0076_154 / (1 + s_0076 / Km0076_154 + (1 + s_0086 / Km0086_154) * (1 + s_0456 / Km0456_154) - 1));
    der(s_0077) = (cell * Vmax_211 * (s_0078 - s_0077 / Keq_211) / Km0078_211 / (1 + s_0078 / Km0078_211 + 1 + s_0077 / Km0077_211 - 1)) - (cell * Vmax_2 * (s_0077 - s_0312 / Keq_2) / Km0077_2 / (1 + s_0077 / Km0077_2 + 1 + s_0312 / Km0312_2 - 1));
    der(s_0078) = (cell * Vmax_212 * (s_0326 - s_0078 * s_0633 / Keq_212) / Km0326_212 / (1 + s_0326 / Km0326_212 + (1 + s_0078 / Km0078_212) * (1 + s_0633 / Km0633_212) - 1)) - (cell * Vmax_211 * (s_0078 - s_0077 / Keq_211) / Km0078_211 / (1 + s_0078 / Km0078_211 + 1 + s_0077 / Km0077_211 - 1));
    der(s_0082) = (cell * Vmax_127 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_127) / (Km0380_127 * Km0767_127) / ((1 + s_0380 / Km0380_127) * (1 + s_0767 / Km0767_127) + (1 + s_0082 / Km0082_127) * (1 + s_0529 / Km0529_127) - 1)) - (cell * Vmax_3 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_3) / (Km0082_3 * Km0380_3) / ((1 + s_0082 / Km0082_3) * (1 + s_0380 / Km0380_3) + (1 + s_0529 / Km0529_3) * (1 + s_1331 / Km1331_3) - 1));
    der(s_0086) = (cell * Vmax_154 * (s_0076 - s_0086 * s_0456 / Keq_154) / Km0076_154 / (1 + s_0076 / Km0076_154 + (1 + s_0086 / Km0086_154) * (1 + s_0456 / Km0456_154) - 1)) - (cell * Vmax_262 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_262) / (Km0086_262 * Km1039_262) / ((1 + s_0086 / Km0086_262) * (1 + s_1039 / Km1039_262) + (1 + s_0764 / Km0764_262) * (1 + s_1048 / Km1048_262) - 1));
    der(s_0089) = (cell * Vmax_197 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_197) / (Km0471_197 * Km1153_197) / ((1 + s_0471 / Km0471_197) * (1 + s_1153 / Km1153_197) + (1 + s_0089 / Km0089_197) * (1 + s_0526 / Km0526_197) - 1)) - (cell * Vmax_157 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_157) / (Km0089_157 * Km0499_157) / ((1 + s_0089 / Km0089_157) * (1 + s_0499 / Km0499_157) + (1 + s_0619 / Km0619_157) * (1 + s_0918 / Km0918_157) - 1)) - (0.001583 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0118) = (cell * Vmax_4 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_4) / (Km0991_4 * Km1203_4) / ((1 + s_0991 / Km0991_4) * (1 + s_1203 / Km1203_4) + (1 + s_0118 / Km0118_4) * (1 + s_1198 / Km1198_4) - 1)) - (cell * Vmax_226 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_226) / (Km0118_226 * Km1212_226) / ((1 + s_0118 / Km0118_226) * (1 + s_1212 / Km1212_226) + (1 + s_1035 / Km1035_226) * (1 + s_1207 / Km1207_226) - 1));
    der(s_0120) = (cell * Vmax_173 * (s_0304 - s_0120 / Keq_173) / Km0304_173 / (1 + s_0304 / Km0304_173 + 1 + s_0120 / Km0120_173 - 1)) - (cell * Vmax_113 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_113) / (Km0120_113 * Km0394_113 * Km1322_113) / ((1 + s_0120 / Km0120_113) * (1 + s_0394 / Km0394_113) * (1 + s_1322 / Km1322_113) + (1 + s_0434 / Km0434_113) * (1 + s_0722 / Km0722_113) * (1 + s_1487 / Km1487_113) - 1)) - (cell * Vmax_128 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_128) / (Km0120_128 * Km0325_128) / ((1 + s_0120 / Km0120_128) * (1 + s_0325 / Km0325_128) + (1 + s_0301 / Km0301_128) * (1 + s_1487 / Km1487_128) - 1)) - (cell * Vmax_214 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_214) / (Km0120_214 * Km0403_214) / ((1 + s_0120 / Km0120_214) * (1 + s_0403 / Km0403_214) + (1 + s_1365 / Km1365_214) * (1 + s_1487 / Km1487_214) - 1));
    der(s_0122) = (cell * Vmax_53 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_53) / (Km0262_53 * Km1212_53) / ((1 + s_0262 / Km0262_53) * (1 + s_1212 / Km1212_53) + (1 + s_0122 / Km0122_53) * (1 + s_1207 / Km1207_53) - 1)) - (cell * Vmax_62 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_62) / (Km0122_62 * pow(Km1212_62, 3) * pow(Km1275_62, 3)) / ((1 + s_0122 / Km0122_62) * pow(1 + s_1212 / Km1212_62, 3) * pow(1 + s_1275 / Km1275_62, 3) + (1 + s_0297 / Km0297_62) * pow(1 + s_1207 / Km1207_62, 3) - 1)) - (5.6e-05 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0126) = (cell * Vmax_182 * (s_0568 - s_0126 / Keq_182) / Km0568_182 / (1 + s_0568 / Km0568_182 + 1 + s_0126 / Km0126_182 - 1)) - (cell * Vmax_181 * (s_0126 - s_1153 * s_1322 / Keq_181) / Km0126_181 / (1 + s_0126 / Km0126_181 + (1 + s_1153 / Km1153_181) * (1 + s_1322 / Km1322_181) - 1));
    der(s_0141) = (cell * Vmax_134 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_134) / Km0785_134 / (1 + s_0785 / Km0785_134 + (1 + s_0141 / Km0141_134) * (1 + s_0633 / Km0633_134) * (1 + s_0722 / Km0722_134) - 1)) - (cell * Vmax_6 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_6) / (Km0141_6 * Km1212_6) / ((1 + s_0141 / Km0141_6) * (1 + s_1212 / Km1212_6) + (1 + s_0142 / Km0142_6) * (1 + s_1207 / Km1207_6) - 1));
    der(s_0142) = (cell * Vmax_6 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_6) / (Km0141_6 * Km1212_6) / ((1 + s_0141 / Km0141_6) * (1 + s_1212 / Km1212_6) + (1 + s_0142 / Km0142_6) * (1 + s_1207 / Km1207_6) - 1)) - (cell * Vmax_5 * (s_0142 - s_0313 * s_0419 / Keq_5) / Km0142_5 / (1 + s_0142 / Km0142_5 + (1 + s_0313 / Km0313_5) * (1 + s_0419 / Km0419_5) - 1));
    der(s_0145) = (cell * Vmax_183 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_183) / (Km1191_183 * Km1212_183) / ((1 + s_1191 / Km1191_183) * (1 + s_1212 / Km1212_183) + (1 + s_0145 / Km0145_183) * (1 + s_1207 / Km1207_183) * (1 + s_1322 / Km1322_183) - 1)) - (cell * Vmax_30 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_30) / (Km0145_30 * Km0991_30) / ((1 + s_0145 / Km0145_30) * (1 + s_0991 / Km0991_30) + (1 + s_0180 / Km0180_30) * (1 + s_1182 / Km1182_30) - 1));
    der(s_0146) = (cell * Vmax_25 * (pow(s_1399, 2) - s_0146 * s_0456 / Keq_25) / pow(Km1399_25, 2) / (pow(1 + s_1399 / Km1399_25, 2) + (1 + s_0146 / Km0146_25) * (1 + s_0456 / Km0456_25) - 1)) - (cell * Vmax_24 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_24) / (Km0146_24 * Km1212_24) / ((1 + s_0146 / Km0146_24) * (1 + s_1212 / Km1212_24) + (1 + s_0016 / Km0016_24) * (1 + s_1207 / Km1207_24) - 1));
    der(s_0158) = (cell * Vmax_15 * (s_0577 - s_0158 * s_0722 / Keq_15) / Km0577_15 / (1 + s_0577 / Km0577_15 + (1 + s_0158 / Km0158_15) * (1 + s_0722 / Km0722_15) - 1)) - (cell * Vmax_230 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_230) / (Km0158_230 * Km0314_230) / ((1 + s_0158 / Km0158_230) * (1 + s_0314 / Km0314_230) + (1 + s_0328 / Km0328_230) * (1 + s_1322 / Km1322_230) - 1));
    der(s_0162) = (cell * Vmax_11 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_11) / (Km0232_11 * Km0373_11) / ((1 + s_0232 / Km0232_11) * (1 + s_0373 / Km0373_11) + (1 + s_0162 / Km0162_11) * (1 + s_0529 / Km0529_11) - 1)) - (cell * Vmax_10 * (s_0162 - s_0165 / Keq_10) / Km0162_10 / (1 + s_0162 / Km0162_10 + 1 + s_0165 / Km0165_10 - 1));
    der(s_0165) = (cell * Vmax_10 * (s_0162 - s_0165 / Keq_10) / Km0162_10 / (1 + s_0162 / Km0162_10 + 1 + s_0165 / Km0165_10 - 1)) - (cell * Vmax_19 * (s_0165 - s_0009 / Keq_19) / Km0165_19 / (1 + s_0165 / Km0165_19 + 1 + s_0009 / Km0009_19 - 1));
    der(s_0176) = (cell * Vmax_144 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_144) / (Km0836_144 * Km1198_144) / ((1 + s_0836 / Km0836_144) * (1 + s_1198 / Km1198_144) + (1 + s_0176 / Km0176_144) * (1 + s_1203 / Km1203_144) * (1 + s_0456 / Km0456_144) - 1)) - (cell * Vmax_8 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_8) / (Km0176_8 * Km0991_8) / ((1 + s_0176 / Km0176_8) * (1 + s_0991 / Km0991_8) + (1 + s_0180 / Km0180_8) * (1 + s_0953 / Km0953_8) - 1));
    der(s_0178) = (cell * Vmax_78 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_78) / Km0980_78 / (1 + s_0980 / Km0980_78 + (1 + s_0178 / Km0178_78) * (1 + s_0419 / Km0419_78) * (1 + s_0981 / Km0981_78) - 1)) - (cell * Vmax_7 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_7) / (Km0178_7 * Km1399_7) / ((1 + s_0178 / Km0178_7) * (1 + s_1399 / Km1399_7) + (1 + s_0039 / Km0039_7) * (1 + s_0456 / Km0456_7) - 1));
    der(s_0180) = (cell * Vmax_8 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_8) / (Km0176_8 * Km0991_8) / ((1 + s_0176 / Km0176_8) * (1 + s_0991 / Km0991_8) + (1 + s_0180 / Km0180_8) * (1 + s_0953 / Km0953_8) - 1)) + (cell * Vmax_30 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_30) / (Km0145_30 * Km0991_30) / ((1 + s_0145 / Km0145_30) * (1 + s_0991 / Km0991_30) + (1 + s_0180 / Km0180_30) * (1 + s_1182 / Km1182_30) - 1)) + (cell * Vmax_49 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_49) / (Km0991_49 * Km1271_49) / ((1 + s_0991 / Km0991_49) * (1 + s_1271 / Km1271_49) + (1 + s_0180 / Km0180_49) * (1 + s_0973 / Km0973_49) - 1)) + (cell * Vmax_140 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_140) / (Km0207_140 * Km0991_140) / ((1 + s_0207 / Km0207_140) * (1 + s_0991 / Km0991_140) + (1 + s_0180 / Km0180_140) * (1 + s_1011 / Km1011_140) - 1)) + (cell * Vmax_158 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_158) / (Km0940_158 * Km1198_158) / ((1 + s_0940 / Km0940_158) * (1 + s_1198 / Km1198_158) + (1 + s_0180 / Km0180_158) * (1 + s_0456 / Km0456_158) * (1 + s_1203 / Km1203_158) - 1)) + (cell * Vmax_159 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_159) / (Km0940_159 * Km1207_159) / ((1 + s_0940 / Km0940_159) * (1 + s_1207 / Km1207_159) + (1 + s_0180 / Km0180_159) * (1 + s_0456 / Km0456_159) * (1 + s_1212 / Km1212_159) - 1)) + (cell * Vmax_160 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_160) / (Km0056_160 * Km0991_160) / ((1 + s_0056 / Km0056_160) * (1 + s_0991 / Km0991_160) + (1 + s_0180 / Km0180_160) * (1 + s_1016 / Km1016_160) - 1)) + (cell * Vmax_164 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_164) / (Km0991_164 * Km1399_164) / ((1 + s_0991 / Km0991_164) * (1 + s_1399 / Km1399_164) + (1 + s_0180 / Km0180_164) * (1 + s_0955 / Km0955_164) - 1)) + (cell * Vmax_167 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_167) / (Km0291_167 * Km0991_167) / ((1 + s_0291 / Km0291_167) * (1 + s_0991 / Km0991_167) + (1 + s_0180 / Km0180_167) * (1 + s_1021 / Km1021_167) - 1)) + (cell * Vmax_193 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_193) / (Km0951_193 * Km0991_193) / ((1 + s_0951 / Km0951_193) * (1 + s_0991 / Km0991_193) + (1 + s_0180 / Km0180_193) * (1 + s_1032 / Km1032_193) - 1)) + (cell * Vmax_220 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_220) / (Km0258_220 * Km0991_220) / ((1 + s_0258 / Km0258_220) * (1 + s_0991 / Km0991_220) + (1 + s_0180 / Km0180_220) * (1 + s_0259 / Km0259_220) - 1)) + (cell * Vmax_240 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_240) / (Km1038_240 * Km1198_240) / ((1 + s_1038 / Km1038_240) * (1 + s_1198 / Km1198_240) + (1 + s_0180 / Km0180_240) * (1 + s_1025 / Km1025_240) * (1 + s_1203 / Km1203_240) - 1)) + (cell * Vmax_264 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_264) / (Km0204_264 * Km0991_264) / ((1 + s_0204 / Km0204_264) * (1 + s_0991 / Km0991_264) + (1 + s_0180 / Km0180_264) * (1 + s_1051 / Km1051_264) - 1)) + (cell * Vmax_268 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_268) / (Km0232_268 * Km0991_268) / ((1 + s_0232 / Km0232_268) * (1 + s_0991 / Km0991_268) + (1 + s_0180 / Km0180_268) * (1 + s_1056 / Km1056_268) - 1)) - (cell * Vmax_118 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_118) / (Km0180_118 * Km0419_118 * Km1203_118) / ((1 + s_0180 / Km0180_118) * (1 + s_0419 / Km0419_118) * (1 + s_1203 / Km1203_118) + (1 + s_0991 / Km0991_118) * (1 + s_1198 / Km1198_118) - 1)) - (cell * Vmax_119 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_119) / (Km0180_119 * Km0419_119 * Km1212_119) / ((1 + s_0180 / Km0180_119) * (1 + s_0419 / Km0419_119) * (1 + s_1212 / Km1212_119) + (1 + s_0991 / Km0991_119) * (1 + s_1207 / Km1207_119) - 1)) - (cell * Vmax_143 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_143) / (Km0180_143 * Km0373_143) / ((1 + s_0180 / Km0180_143) * (1 + s_0373 / Km0373_143) + (1 + s_0529 / Km0529_143) * (1 + s_0835 / Km0835_143) - 1));
    der(s_0188) = (cell * Vmax_205 * (s_0260 - s_0188 / Keq_205) / Km0260_205 / (1 + s_0260 / Km0260_205 + 1 + s_0188 / Km0188_205 - 1)) - (cell * Vmax_96 * (s_0188 - s_1360 / Keq_96) / Km0188_96 / (1 + s_0188 / Km0188_96 + 1 + s_1360 / Km1360_96 - 1));
    der(s_0190) = (cell * Vmax_116 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_116) / (Km0745_116 * Km0943_116) / ((1 + s_0745 / Km0745_116) * (1 + s_0943 / Km0943_116) + (1 + s_0190 / Km0190_116) * (1 + s_0633 / Km0633_116) - 1)) - (2.0 * cell * Vmax_248 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_248) / (pow(Km0190_248, 2) * Km1212_248) / (pow(1 + s_0190 / Km0190_248, 2) * (1 + s_1212 / Km1212_248) + pow(1 + s_0633 / Km0633_248, 2) * (1 + s_1207 / Km1207_248) * (1 + s_1447 / Km1447_248) - 1));
    der(s_0201) = (cell * Vmax_37 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_37) / (Km0298_37 * Km0434_37) / ((1 + s_0298 / Km0298_37) * (1 + s_0434 / Km0434_37) + (1 + s_0201 / Km0201_37) * (1 + s_0394 / Km0394_37) - 1)) - (cell * Vmax_200 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_200) / (Km0201_200 * Km1616_200) / ((1 + s_0201 / Km0201_200) * (1 + s_1616 / Km1616_200) + (1 + s_0390 / Km0390_200) * (1 + s_1469 / Km1469_200) * (1 + s_1620 / Km1620_200) - 1));
    der(s_0204) = (cell * Vmax_224 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_224) / (Km1207_224 * Km1377_224) / ((1 + s_1207 / Km1207_224) * (1 + s_1377 / Km1377_224) + (1 + s_0204 / Km0204_224) * (1 + s_0456 / Km0456_224) * (1 + s_1212 / Km1212_224) - 1)) - (cell * Vmax_264 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_264) / (Km0204_264 * Km0991_264) / ((1 + s_0204 / Km0204_264) * (1 + s_0991 / Km0991_264) + (1 + s_0180 / Km0180_264) * (1 + s_1051 / Km1051_264) - 1));
    der(s_0207) = (cell * Vmax_152 * (s_0550 - s_0207 / Keq_152) / Km0550_152 / (1 + s_0550 / Km0550_152 + 1 + s_0207 / Km0207_152 - 1)) - (cell * Vmax_140 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_140) / (Km0207_140 * Km0991_140) / ((1 + s_0207 / Km0207_140) * (1 + s_0991 / Km0991_140) + (1 + s_0180 / Km0180_140) * (1 + s_1011 / Km1011_140) - 1));
    der(s_0209) = (cell * Vmax_56 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_56) / (Km0297_56 * Km1198_56) / ((1 + s_0297 / Km0297_56) * (1 + s_1198 / Km1198_56) + (1 + s_0209 / Km0209_56) * (1 + s_0456 / Km0456_56) * (1 + s_1203 / Km1203_56) - 1)) - (cell * Vmax_57 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_57) / (Km0209_57 * Km1212_57) / ((1 + s_0209 / Km0209_57) * (1 + s_1212 / Km1212_57) + (1 + s_0296 / Km0296_57) * (1 + s_1207 / Km1207_57) - 1));
    der(s_0210) = (cell * Vmax_17 * (s_0349 - s_0210 * s_1322 / Keq_17) / Km0349_17 / (1 + s_0349 / Km0349_17 + (1 + s_0210 / Km0210_17) * (1 + s_1322 / Km1322_17) - 1)) - (cell * Vmax_16 * (s_0210 - s_0211 / Keq_16) / Km0210_16 / (1 + s_0210 / Km0210_16 + 1 + s_0211 / Km0211_16 - 1));
    der(s_0211) = (cell * Vmax_16 * (s_0210 - s_0211 / Keq_16) / Km0210_16 / (1 + s_0210 / Km0210_16 + 1 + s_0211 / Km0211_16 - 1)) - (cell * Vmax_244 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_244) / (Km0211_244 * Km1212_244) / ((1 + s_0211 / Km0211_244) * (1 + s_1212 / Km1212_244) + (1 + s_1207 / Km1207_244) * (1 + s_1429 / Km1429_244) - 1));
    der(s_0218) = (cell * Vmax_150 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_150) / (Km0367_150 * Km0373_150) / ((1 + s_0367 / Km0367_150) * (1 + s_0373 / Km0373_150) + (1 + s_0218 / Km0218_150) * (1 + s_0529 / Km0529_150) - 1)) - (cell * Vmax_149 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_149) / (Km0218_149 * pow(Km1212_149, 2)) / ((1 + s_0218 / Km0218_149) * pow(1 + s_1212 / Km1212_149, 2) + (1 + s_0028 / Km0028_149) * (1 + s_0529 / Km0529_149) * pow(1 + s_1207 / Km1207_149, 2) - 1));
    der(s_0231) = (cell * Vmax_242 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_242) / (Km1039_242 * Km1302_242) / ((1 + s_1039 / Km1039_242) * (1 + s_1302 / Km1302_242) + (1 + s_0231 / Km0231_242) * (1 + s_0456 / Km0456_242) * (1 + s_0529 / Km0529_242) - 1)) - (cell * Vmax_18 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_18) / (Km0231_18 * Km1212_18) / ((1 + s_0231 / Km0231_18) * (1 + s_1212 / Km1212_18) + (1 + s_1207 / Km1207_18) * (1 + s_1445 / Km1445_18) - 1));
    der(s_0232) = (cell * Vmax_90 * (s_0016 - s_0232 / Keq_90) / Km0016_90 / (1 + s_0016 / Km0016_90 + 1 + s_0232 / Km0232_90 - 1)) - (cell * Vmax_11 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_11) / (Km0232_11 * Km0373_11) / ((1 + s_0232 / Km0232_11) * (1 + s_0373 / Km0373_11) + (1 + s_0162 / Km0162_11) * (1 + s_0529 / Km0529_11) - 1)) - (cell * Vmax_268 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_268) / (Km0232_268 * Km0991_268) / ((1 + s_0232 / Km0232_268) * (1 + s_0991 / Km0991_268) + (1 + s_0180 / Km0180_268) * (1 + s_1056 / Km1056_268) - 1));
    der(s_0258) = (cell * Vmax_203 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_203) / (Km0260_203 * Km1198_203) / ((1 + s_0260 / Km0260_203) * (1 + s_1198 / Km1198_203) + (1 + s_0258 / Km0258_203) * (1 + s_1203 / Km1203_203) - 1)) - (cell * Vmax_220 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_220) / (Km0258_220 * Km0991_220) / ((1 + s_0258 / Km0258_220) * (1 + s_0991 / Km0991_220) + (1 + s_0180 / Km0180_220) * (1 + s_0259 / Km0259_220) - 1));
    der(s_0259) = (cell * Vmax_220 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_220) / (Km0258_220 * Km0991_220) / ((1 + s_0258 / Km0258_220) * (1 + s_0991 / Km0991_220) + (1 + s_0180 / Km0180_220) * (1 + s_0259 / Km0259_220) - 1)) - (cell * Vmax_219 * (s_0259 - s_1039 * s_1322 / Keq_219) / Km0259_219 / (1 + s_0259 / Km0259_219 + (1 + s_1039 / Km1039_219) * (1 + s_1322 / Km1322_219) - 1));
    der(s_0260) = (cell * Vmax_204 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_204) / (Km0075_204 * Km0394_204) / ((1 + s_0075 / Km0075_204) * (1 + s_0394 / Km0394_204) + (1 + s_0260 / Km0260_204) * (1 + s_0434 / Km0434_204) - 1)) - (cell * Vmax_203 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_203) / (Km0260_203 * Km1198_203) / ((1 + s_0260 / Km0260_203) * (1 + s_1198 / Km1198_203) + (1 + s_0258 / Km0258_203) * (1 + s_1203 / Km1203_203) - 1)) - (cell * Vmax_205 * (s_0260 - s_0188 / Keq_205) / Km0260_205 / (1 + s_0260 / Km0260_205 + 1 + s_0188 / Km0188_205 - 1));
    der(s_0261) = (cell * Vmax_245 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_245) / (Km0434_245 * Km1429_245) / ((1 + s_0434 / Km0434_245) * (1 + s_1429 / Km1429_245) + (1 + s_0261 / Km0261_245) * (1 + s_0394 / Km0394_245) - 1)) - (cell * Vmax_21 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_21) / (Km0261_21 * Km1360_21) / ((1 + s_0261 / Km0261_21) * (1 + s_1360 / Km1360_21) + (1 + s_0324 / Km0324_21) * (1 + s_1322 / Km1322_21) - 1));
    der(s_0262) = (cell * Vmax_81 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_81) / (Km1059_81 * pow(Km1212_81, 3) * pow(Km1275_81, 3)) / ((1 + s_1059 / Km1059_81) * pow(1 + s_1212 / Km1212_81, 3) * pow(1 + s_1275 / Km1275_81, 3) + (1 + s_0262 / Km0262_81) * (1 + s_0722 / Km0722_81) * pow(1 + s_1207 / Km1207_81, 3) - 1)) - (cell * Vmax_53 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_53) / (Km0262_53 * Km1212_53) / ((1 + s_0262 / Km0262_53) * (1 + s_1212 / Km1212_53) + (1 + s_0122 / Km0122_53) * (1 + s_1207 / Km1207_53) - 1));
    der(s_0291) = (cell * Vmax_13 * (s_0010 - s_0291 * s_0456 / Keq_13) / Km0010_13 / (1 + s_0010 / Km0010_13 + (1 + s_0291 / Km0291_13) * (1 + s_0456 / Km0456_13) - 1)) - (cell * Vmax_167 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_167) / (Km0291_167 * Km0991_167) / ((1 + s_0291 / Km0291_167) * (1 + s_0991 / Km0991_167) + (1 + s_0180 / Km0180_167) * (1 + s_1021 / Km1021_167) - 1));
    der(s_0295) = (cell * Vmax_48 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_48) / (Km0434_48 * Km0973_48) / ((1 + s_0434 / Km0434_48) * (1 + s_0973 / Km0973_48) + (1 + s_0295 / Km0295_48) * (1 + s_0394 / Km0394_48) - 1)) - (cell * Vmax_50 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_50) / (Km0295_50 * Km1212_50) / ((1 + s_0295 / Km0295_50) * (1 + s_1212 / Km1212_50) + (1 + s_0978 / Km0978_50) * (1 + s_1207 / Km1207_50) * (1 + s_1322 / Km1322_50) - 1));
    der(s_0296) = (cell * Vmax_57 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_57) / (Km0209_57 * Km1212_57) / ((1 + s_0209 / Km0209_57) * (1 + s_1212 / Km1212_57) + (1 + s_0296 / Km0296_57) * (1 + s_1207 / Km1207_57) - 1)) - (cell * Vmax_59 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_59) / (Km0296_59 * Km1212_59 * Km1275_59) / ((1 + s_0296 / Km0296_59) * (1 + s_1212 / Km1212_59) * (1 + s_1275 / Km1275_59) + (1 + s_1207 / Km1207_59) * (1 + s_1576 / Km1576_59) - 1));
    der(s_0297) = (cell * Vmax_62 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_62) / (Km0122_62 * pow(Km1212_62, 3) * pow(Km1275_62, 3)) / ((1 + s_0122 / Km0122_62) * pow(1 + s_1212 / Km1212_62, 3) * pow(1 + s_1275 / Km1275_62, 3) + (1 + s_0297 / Km0297_62) * pow(1 + s_1207 / Km1207_62, 3) - 1)) - (cell * Vmax_56 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_56) / (Km0297_56 * Km1198_56) / ((1 + s_0297 / Km0297_56) * (1 + s_1198 / Km1198_56) + (1 + s_0209 / Km0209_56) * (1 + s_0456 / Km0456_56) * (1 + s_1203 / Km1203_56) - 1));
    der(s_0298) = (cell * Vmax_250 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_250) / (Km0394_250 * Km1467_250) / ((1 + s_0394 / Km0394_250) * (1 + s_1467 / Km1467_250) + (1 + s_0298 / Km0298_250) * (1 + s_1322 / Km1322_250) - 1)) - (cell * Vmax_37 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_37) / (Km0298_37 * Km0434_37) / ((1 + s_0298 / Km0298_37) * (1 + s_0434 / Km0434_37) + (1 + s_0201 / Km0201_37) * (1 + s_0394 / Km0394_37) - 1));
    der(s_0299) = (cell * Vmax_210 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_210) / (Km0434_210 * Km0973_210 * Km1364_210) / ((1 + s_0434 / Km0434_210) * (1 + s_0973 / Km0973_210) * (1 + s_1364 / Km1364_210) + (1 + s_0299 / Km0299_210) * (1 + s_0394 / Km0394_210) * (1 + s_1322 / Km1322_210) - 1)) - (cell * Vmax_34 * (s_0299 - s_0403 * s_0725 / Keq_34) / Km0299_34 / (1 + s_0299 / Km0299_34 + (1 + s_0403 / Km0403_34) * (1 + s_0725 / Km0725_34) - 1));
    der(s_0300) = (cell * Vmax_195 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_195) / (Km0302_195 * Km0434_195) / ((1 + s_0302 / Km0302_195) * (1 + s_0434 / Km0434_195) + (1 + s_0300 / Km0300_195) * (1 + s_0394 / Km0394_195) * (1 + s_1322 / Km1322_195) - 1)) - (cell * Vmax_213 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_213) / (Km0300_213 * Km0456_213 * Km0434_213) / ((1 + s_0300 / Km0300_213) * (1 + s_0456 / Km0456_213) * (1 + s_0434 / Km0434_213) + (1 + s_1364 / Km1364_213) * (1 + s_0394 / Km0394_213) * (1 + s_1322 / Km1322_213) - 1));
    der(s_0301) = (cell * Vmax_128 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_128) / (Km0120_128 * Km0325_128) / ((1 + s_0120 / Km0120_128) * (1 + s_0325 / Km0325_128) + (1 + s_0301 / Km0301_128) * (1 + s_1487 / Km1487_128) - 1)) - (cell * Vmax_22 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_22) / (Km0301_22 * Km0434_22 * Km0999_22) / ((1 + s_0301 / Km0301_22) * (1 + s_0434 / Km0434_22) * (1 + s_0999 / Km0999_22) + (1 + s_0302 / Km0302_22) * (1 + s_0394 / Km0394_22) * (1 + s_0991 / Km0991_22) * (1 + s_1322 / Km1322_22) - 1));
    der(s_0302) = (cell * Vmax_22 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_22) / (Km0301_22 * Km0434_22 * Km0999_22) / ((1 + s_0301 / Km0301_22) * (1 + s_0434 / Km0434_22) * (1 + s_0999 / Km0999_22) + (1 + s_0302 / Km0302_22) * (1 + s_0394 / Km0394_22) * (1 + s_0991 / Km0991_22) * (1 + s_1322 / Km1322_22) - 1)) - (cell * Vmax_195 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_195) / (Km0302_195 * Km0434_195) / ((1 + s_0302 / Km0302_195) * (1 + s_0434 / Km0434_195) + (1 + s_0300 / Km0300_195) * (1 + s_0394 / Km0394_195) * (1 + s_1322 / Km1322_195) - 1));
    der(s_0304) = (cell * Vmax_177 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_177) / (Km0306_177 * Km1198_177) / ((1 + s_0306 / Km0306_177) * (1 + s_1198 / Km1198_177) + (1 + s_0304 / Km0304_177) * (1 + s_1203 / Km1203_177) - 1)) + (cell * Vmax_178 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_178) / (Km0306_178 * Km1207_178) / ((1 + s_0306 / Km0306_178) * (1 + s_1207 / Km1207_178) + (1 + s_0304 / Km0304_178) * (1 + s_1212 / Km1212_178) - 1)) - (cell * Vmax_173 * (s_0304 - s_0120 / Keq_173) / Km0304_173 / (1 + s_0304 / Km0304_173 + 1 + s_0120 / Km0120_173 - 1));
    der(s_0306) = (cell * Vmax_129 * (s_1003 * s_1198 * s_1487 - s_0306 * s_0419 * s_0456 * s_1203 / Keq_129) / (Km1003_129 * Km1198_129 * Km1487_129) / ((1 + s_1003 / Km1003_129) * (1 + s_1198 / Km1198_129) * (1 + s_1487 / Km1487_129) + (1 + s_0306 / Km0306_129) * (1 + s_0419 / Km0419_129) * (1 + s_0456 / Km0456_129) * (1 + s_1203 / Km1203_129) - 1)) + (cell * Vmax_130 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_130) / (Km1039_130 * Km1487_130) / ((1 + s_1039 / Km1039_130) * (1 + s_1487 / Km1487_130) + (1 + s_0306 / Km0306_130) * (1 + s_1003 / Km1003_130) - 1)) - (cell * Vmax_23 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_23) / (Km0306_23 * Km1212_23) / ((1 + s_0306 / Km0306_23) * (1 + s_1212 / Km1212_23) + (1 + s_0322 / Km0322_23) * (1 + s_1207 / Km1207_23) - 1)) - (cell * Vmax_177 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_177) / (Km0306_177 * Km1198_177) / ((1 + s_0306 / Km0306_177) * (1 + s_1198 / Km1198_177) + (1 + s_0304 / Km0304_177) * (1 + s_1203 / Km1203_177) - 1)) - (cell * Vmax_178 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_178) / (Km0306_178 * Km1207_178) / ((1 + s_0306 / Km0306_178) * (1 + s_1207 / Km1207_178) + (1 + s_0304 / Km0304_178) * (1 + s_1212 / Km1212_178) - 1)) - (cell * Vmax_255 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_255) / (Km0306_255 * Km0654_255) / ((1 + s_0306 / Km0306_255) * (1 + s_0654 / Km0654_255) + (1 + s_0625 / Km0625_255) * (1 + s_0649 / Km0649_255) - 1));
    der(s_0312) = (cell * Vmax_2 * (s_0077 - s_0312 / Keq_2) / Km0077_2 / (1 + s_0077 / Km0077_2 + 1 + s_0312 / Km0312_2 - 1)) - (cell * Vmax_151 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_151) / (Km0312_151 * Km0999_151) / ((1 + s_0312 / Km0312_151) * (1 + s_0999 / Km0999_151) + (1 + s_0403 / Km0403_151) * (1 + s_0550 / Km0550_151) * (1 + s_0991 / Km0991_151) - 1));
    der(s_0313) = (cell * Vmax_5 * (s_0142 - s_0313 * s_0419 / Keq_5) / Km0142_5 / (1 + s_0142 / Km0142_5 + (1 + s_0313 / Km0313_5) * (1 + s_0419 / Km0419_5) - 1)) - (cell * Vmax_280 * (s_0313 - s_0314 * s_1322 / Keq_280) / Km0313_280 / (1 + s_0313 / Km0313_280 + (1 + s_0314 / Km0314_280) * (1 + s_1322 / Km1322_280) - 1));
    der(s_0314) = (cell * Vmax_231 * (pow(s_0328, 2) - s_0314 * s_1405 / Keq_231) / pow(Km0328_231, 2) / (pow(1 + s_0328 / Km0328_231, 2) + (1 + s_0314 / Km0314_231) * (1 + s_1405 / Km1405_231) - 1)) + (cell * Vmax_280 * (s_0313 - s_0314 * s_1322 / Keq_280) / Km0313_280 / (1 + s_0313 / Km0313_280 + (1 + s_0314 / Km0314_280) * (1 + s_1322 / Km1322_280) - 1)) - (cell * Vmax_230 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_230) / (Km0158_230 * Km0314_230) / ((1 + s_0158 / Km0158_230) * (1 + s_0314 / Km0314_230) + (1 + s_0328 / Km0328_230) * (1 + s_1322 / Km1322_230) - 1));
    der(s_0322) = (cell * Vmax_23 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_23) / (Km0306_23 * Km1212_23) / ((1 + s_0306 / Km0306_23) * (1 + s_1212 / Km1212_23) + (1 + s_0322 / Km0322_23) * (1 + s_1207 / Km1207_23) - 1)) - (cell * Vmax_175 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_175) / (Km0322_175 * Km1012_175) / ((1 + s_0322 / Km0322_175) * (1 + s_1012 / Km1012_175) + (1 + s_1029 / Km1029_175) * (1 + s_1487 / Km1487_175) - 1));
    der(s_0324) = (cell * Vmax_21 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_21) / (Km0261_21 * Km1360_21) / ((1 + s_0261 / Km0261_21) * (1 + s_1360 / Km1360_21) + (1 + s_0324 / Km0324_21) * (1 + s_1322 / Km1322_21) - 1)) - (cell * Vmax_72 * (s_0324 - s_0515 * s_1322 / Keq_72) / Km0324_72 / (1 + s_0324 / Km0324_72 + (1 + s_0515 / Km0515_72) * (1 + s_1322 / Km1322_72) - 1));
    der(s_0325) = (cell * Vmax_216 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_216) / (Km0327_216 * Km0434_216 * Km1003_216) / ((1 + s_0327 / Km0327_216) * (1 + s_0434 / Km0434_216) * (1 + s_1003 / Km1003_216) + (1 + s_0325 / Km0325_216) * (1 + s_0394 / Km0394_216) * (1 + s_1322 / Km1322_216) - 1)) - (cell * Vmax_128 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_128) / (Km0120_128 * Km0325_128) / ((1 + s_0120 / Km0120_128) * (1 + s_0325 / Km0325_128) + (1 + s_0301 / Km0301_128) * (1 + s_1487 / Km1487_128) - 1));
    der(s_0326) = (cell * Vmax_52 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_52) / (Km0434_52 * Km1386_52) / ((1 + s_0434 / Km0434_52) * (1 + s_1386 / Km1386_52) + (1 + s_0326 / Km0326_52) * (1 + s_0633 / Km0633_52) - 1)) - (cell * Vmax_212 * (s_0326 - s_0078 * s_0633 / Keq_212) / Km0326_212 / (1 + s_0326 / Km0326_212 + (1 + s_0078 / Km0078_212) * (1 + s_0633 / Km0633_212) - 1));
    der(s_0327) = (cell * Vmax_217 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_217) / (Km0999_217 * Km1386_217) / ((1 + s_0999 / Km0999_217) * (1 + s_1386 / Km1386_217) + (1 + s_0327 / Km0327_217) * (1 + s_0633 / Km0633_217) * (1 + s_0991 / Km0991_217) - 1)) - (cell * Vmax_216 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_216) / (Km0327_216 * Km0434_216 * Km1003_216) / ((1 + s_0327 / Km0327_216) * (1 + s_0434 / Km0434_216) * (1 + s_1003 / Km1003_216) + (1 + s_0325 / Km0325_216) * (1 + s_0394 / Km0394_216) * (1 + s_1322 / Km1322_216) - 1));
    der(s_0328) = (cell * Vmax_230 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_230) / (Km0158_230 * Km0314_230) / ((1 + s_0158 / Km0158_230) * (1 + s_0314 / Km0314_230) + (1 + s_0328 / Km0328_230) * (1 + s_1322 / Km1322_230) - 1)) - (2.0 * cell * Vmax_231 * (pow(s_0328, 2) - s_0314 * s_1405 / Keq_231) / pow(Km0328_231, 2) / (pow(1 + s_0328 / Km0328_231, 2) + (1 + s_0314 / Km0314_231) * (1 + s_1405 / Km1405_231) - 1));
    der(s_0349) = (cell * Vmax_9 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_9) / (Km0551_9 * Km1360_9) / ((1 + s_0551 / Km0551_9) * (1 + s_1360 / Km1360_9) + (1 + s_0349 / Km0349_9) * (1 + s_1322 / Km1322_9) - 1)) - (cell * Vmax_17 * (s_0349 - s_0210 * s_1322 / Keq_17) / Km0349_17 / (1 + s_0349 / Km0349_17 + (1 + s_0210 / Km0210_17) * (1 + s_1322 / Km1322_17) - 1));
    der(s_0362) = (cell * Vmax_79 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_79) / (Km0981_79 * Km1233_79) / ((1 + s_0981 / Km0981_79) * (1 + s_1233 / Km1233_79) + (1 + s_0362 / Km0362_79) * (1 + s_0980 / Km0980_79) - 1)) + (cell * Vmax_188 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_188) / (Km0841_188 * Km1233_188) / ((1 + s_0841 / Km0841_188) * (1 + s_1233 / Km1233_188) + (1 + s_0362 / Km0362_188) * (1 + s_1012 / Km1012_188) - 1)) - (cell * Vmax_28 * (s_0362 * s_0529 - s_0373 / Keq_28) / (Km0362_28 * Km0529_28) / ((1 + s_0362 / Km0362_28) * (1 + s_0529 / Km0529_28) + 1 + s_0373 / Km0373_28 - 1));
    der(s_0367) = (cell * Vmax_26 * (pow(s_0373, 2) - s_0367 * s_0529 / Keq_26) / pow(Km0373_26, 2) / (pow(1 + s_0373 / Km0373_26, 2) + (1 + s_0367 / Km0367_26) * (1 + s_0529 / Km0529_26) - 1)) - (cell * Vmax_150 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_150) / (Km0367_150 * Km0373_150) / ((1 + s_0367 / Km0367_150) * (1 + s_0373 / Km0373_150) + (1 + s_0218 / Km0218_150) * (1 + s_0529 / Km0529_150) - 1));
    der(s_0373) = (cell * Vmax_28 * (s_0362 * s_0529 - s_0373 / Keq_28) / (Km0362_28 * Km0529_28) / ((1 + s_0362 / Km0362_28) * (1 + s_0529 / Km0529_28) + 1 + s_0373 / Km0373_28 - 1)) + (cell * Vmax_228 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_228) / (Km0529_228 * Km1198_228 * Km1399_228) / ((1 + s_0529 / Km0529_228) * (1 + s_1198 / Km1198_228) * (1 + s_1399 / Km1399_228) + (1 + s_0373 / Km0373_228) * (1 + s_0456 / Km0456_228) * (1 + s_1203 / Km1203_228) - 1)) - (cell * Vmax_11 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_11) / (Km0232_11 * Km0373_11) / ((1 + s_0232 / Km0232_11) * (1 + s_0373 / Km0373_11) + (1 + s_0162 / Km0162_11) * (1 + s_0529 / Km0529_11) - 1)) - (2.0 * cell * Vmax_26 * (pow(s_0373, 2) - s_0367 * s_0529 / Keq_26) / pow(Km0373_26, 2) / (pow(1 + s_0373 / Km0373_26, 2) + (1 + s_0367 / Km0367_26) * (1 + s_0529 / Km0529_26) - 1)) - (cell * Vmax_27 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_27) / (Km0373_27 * Km0434_27 * Km0445_27) / ((1 + s_0373 / Km0373_27) * (1 + s_0434 / Km0434_27) * (1 + s_0445 / Km0445_27) + (1 + s_0394 / Km0394_27) * (1 + s_1101 / Km1101_27) * (1 + s_1322 / Km1322_27) - 1)) - (cell * Vmax_74 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_74) / (Km0373_74 * Km1271_74) / ((1 + s_0373 / Km0373_74) * (1 + s_1271 / Km1271_74) + (1 + s_0522 / Km0522_74) * (1 + s_0529 / Km0529_74) - 1)) - (cell * Vmax_103 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(s_0456, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_103) / (Km0373_103 * pow(Km1101_103, 3) * pow(Km1212_103, 6)) / ((1 + s_0373 / Km0373_103) * pow(1 + s_1101 / Km1101_103, 3) * pow(1 + s_1212 / Km1212_103, 6) + pow(1 + s_0456 / Km0456_103, 3) * pow(1 + s_0529 / Km0529_103, 3) * pow(1 + s_1207 / Km1207_103, 6) * (1 + s_1255 / Km1255_103) - 1)) - (cell * Vmax_143 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_143) / (Km0180_143 * Km0373_143) / ((1 + s_0180 / Km0180_143) * (1 + s_0373 / Km0373_143) + (1 + s_0529 / Km0529_143) * (1 + s_0835 / Km0835_143) - 1)) - (cell * Vmax_147 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_147) / (Km0373_147 * Km1014_147) / ((1 + s_0373 / Km0373_147) * (1 + s_1014 / Km1014_147) + (1 + s_0529 / Km0529_147) * (1 + s_1233 / Km1233_147) - 1)) - (cell * Vmax_150 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_150) / (Km0367_150 * Km0373_150) / ((1 + s_0367 / Km0367_150) * (1 + s_0373 / Km0373_150) + (1 + s_0218 / Km0218_150) * (1 + s_0529 / Km0529_150) - 1));
    der(s_0380) = (cell * Vmax_84 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_84) / (Km0529_84 * Km1524_84) / ((1 + s_0529 / Km0529_84) * (1 + s_1524 / Km1524_84) + (1 + s_0380 / Km0380_84) * (1 + s_0619 / Km0619_84) - 1)) - (cell * Vmax_3 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_3) / (Km0082_3 * Km0380_3) / ((1 + s_0082 / Km0082_3) * (1 + s_0380 / Km0380_3) + (1 + s_0529 / Km0529_3) * (1 + s_1331 / Km1331_3) - 1)) - (cell * Vmax_127 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_127) / (Km0380_127 * Km0767_127) / ((1 + s_0380 / Km0380_127) * (1 + s_0767 / Km0767_127) + (1 + s_0082 / Km0082_127) * (1 + s_0529 / Km0529_127) - 1));
    der(s_0386) = (cell * Vmax_32 * (s_1413 - s_0386 * s_1012 / Keq_32) / Km1413_32 / (1 + s_1413 / Km1413_32 + (1 + s_0386 / Km0386_32) * (1 + s_1012 / Km1012_32) - 1)) - (cell * Vmax_31 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_31) / (Km0386_31 * Km0434_31) / ((1 + s_0386 / Km0386_31) * (1 + s_0434 / Km0434_31) + (1 + s_0394 / Km0394_31) * (1 + s_0423 / Km0423_31) - 1));
    der(s_0390) = (cell * Vmax_200 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_200) / (Km0201_200 * Km1616_200) / ((1 + s_0201 / Km0201_200) * (1 + s_1616 / Km1616_200) + (1 + s_0390 / Km0390_200) * (1 + s_1469 / Km1469_200) * (1 + s_1620 / Km1620_200) - 1)) - (cell * Vmax_14 * (s_0390 - s_0423 * s_1322 / Keq_14) / Km0390_14 / (1 + s_0390 / Km0390_14 + (1 + s_0423 / Km0423_14) * (1 + s_1322 / Km1322_14) - 1));
    der(s_0393) = (cell * Vmax_36 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_36) / (Km0785_36 * Km0849_36 * Km0973_36) / ((1 + s_0785 / Km0785_36) * (1 + s_0849 / Km0849_36) * (1 + s_0973 / Km0973_36) + (1 + s_0393 / Km0393_36) * (1 + s_0739 / Km0739_36) * (1 + s_1322 / Km1322_36) - 1)) - (cell * Vmax_35 * (s_0393 - s_0423 * s_0725 / Keq_35) / Km0393_35 / (1 + s_0393 / Km0393_35 + (1 + s_0423 / Km0423_35) * (1 + s_0725 / Km0725_35) - 1));
    der(s_0394) = (cell * Vmax_22 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_22) / (Km0301_22 * Km0434_22 * Km0999_22) / ((1 + s_0301 / Km0301_22) * (1 + s_0434 / Km0434_22) * (1 + s_0999 / Km0999_22) + (1 + s_0302 / Km0302_22) * (1 + s_0394 / Km0394_22) * (1 + s_0991 / Km0991_22) * (1 + s_1322 / Km1322_22) - 1)) + (cell * Vmax_27 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_27) / (Km0373_27 * Km0434_27 * Km0445_27) / ((1 + s_0373 / Km0373_27) * (1 + s_0434 / Km0434_27) * (1 + s_0445 / Km0445_27) + (1 + s_0394 / Km0394_27) * (1 + s_1101 / Km1101_27) * (1 + s_1322 / Km1322_27) - 1)) + (cell * Vmax_29 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_29) / (Km0434_29 * Km1192_29) / ((1 + s_0434 / Km0434_29) * (1 + s_1192 / Km1192_29) + (1 + s_0394 / Km0394_29) * (1 + s_1191 / Km1191_29) - 1)) + (cell * Vmax_31 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_31) / (Km0386_31 * Km0434_31) / ((1 + s_0386 / Km0386_31) * (1 + s_0434 / Km0434_31) + (1 + s_0394 / Km0394_31) * (1 + s_0423 / Km0423_31) - 1)) + (2.0 * cell * Vmax_33 * (s_0423 * s_0434 - pow(s_0394, 2) / Keq_33) / (Km0423_33 * Km0434_33) / ((1 + s_0423 / Km0423_33) * (1 + s_0434 / Km0434_33) + pow(1 + s_0394 / Km0394_33, 2) - 1)) + (cell * Vmax_37 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_37) / (Km0298_37 * Km0434_37) / ((1 + s_0298 / Km0298_37) * (1 + s_0434 / Km0434_37) + (1 + s_0201 / Km0201_37) * (1 + s_0394 / Km0394_37) - 1)) + (cell * Vmax_48 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_48) / (Km0434_48 * Km0973_48) / ((1 + s_0434 / Km0434_48) * (1 + s_0973 / Km0973_48) + (1 + s_0295 / Km0295_48) * (1 + s_0394 / Km0394_48) - 1)) + (2.0 * cell * Vmax_66 * (pow(s_0434, 2) * s_0445 * s_0999 - pow(s_0394, 2) * s_0455 * s_0991 * s_1322 / Keq_66) / (pow(Km0434_66, 2) * Km0445_66 * Km0999_66) / (pow(1 + s_0434 / Km0434_66, 2) * (1 + s_0445 / Km0445_66) * (1 + s_0999 / Km0999_66) + pow(1 + s_0394 / Km0394_66, 2) * (1 + s_0455 / Km0455_66) * (1 + s_0991 / Km0991_66) * (1 + s_1322 / Km1322_66) - 1)) + (cell * Vmax_76 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_76) / (Km0419_76 * Km0434_76 * Km1559_76) / ((1 + s_0419 / Km0419_76) * (1 + s_0434 / Km0434_76) * (1 + s_1559 / Km1559_76) + (1 + s_0394 / Km0394_76) * (1 + s_0539 / Km0539_76) * (1 + s_1322 / Km1322_76) - 1)) + (cell * Vmax_120 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_120) / (Km0419_120 * Km0434_120 * Km0991_120) / ((1 + s_0419 / Km0419_120) * (1 + s_0434 / Km0434_120) * (1 + s_0991 / Km0991_120) + (1 + s_0394 / Km0394_120) * (1 + s_0999 / Km0999_120) * (1 + s_1322 / Km1322_120) - 1)) + (cell * Vmax_135 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_135) / (Km0434_135 * Km0782_135) / ((1 + s_0434 / Km0434_135) * (1 + s_0782 / Km0782_135) + (1 + s_0394 / Km0394_135) * (1 + s_0739 / Km0739_135) - 1)) + (cell * Vmax_137 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_137) / (Km0434_137 * Km0563_137) / ((1 + s_0434 / Km0434_137) * (1 + s_0563 / Km0563_137) + (1 + s_0394 / Km0394_137) * (1 + s_0568 / Km0568_137) - 1)) + (cell * Vmax_146 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_146) / (Km0434_146 * Km1014_146) / ((1 + s_0434 / Km0434_146) * (1 + s_1014 / Km1014_146) + (1 + s_0394 / Km0394_146) * (1 + s_1238 / Km1238_146) - 1)) + (cell * Vmax_180 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_180) / (Km0018_180 * Km0434_180) / ((1 + s_0018 / Km0018_180) * (1 + s_0434 / Km0434_180) + (1 + s_0394 / Km0394_180) * (1 + s_0456 / Km0456_180) * (1 + s_0943 / Km0943_180) * (1 + s_1322 / Km1322_180) - 1)) + (cell * Vmax_186 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_186) / (Km0434_186 * Km0739_186) / ((1 + s_0434 / Km0434_186) * (1 + s_0739 / Km0739_186) + (1 + s_0394 / Km0394_186) * (1 + s_0785 / Km0785_186) - 1)) + (cell * Vmax_187 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_187) / (Km0434_187 * Km1538_187) / ((1 + s_0434 / Km0434_187) * (1 + s_1538 / Km1538_187) + (1 + s_0394 / Km0394_187) * (1 + s_1559 / Km1559_187) - 1)) + (cell * Vmax_195 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_195) / (Km0302_195 * Km0434_195) / ((1 + s_0302 / Km0302_195) * (1 + s_0434 / Km0434_195) + (1 + s_0300 / Km0300_195) * (1 + s_0394 / Km0394_195) * (1 + s_1322 / Km1322_195) - 1)) + (cell * Vmax_201 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_201) / (Km0434_201 * Km0557_201) / ((1 + s_0434 / Km0434_201) * (1 + s_0557 / Km0557_201) + (1 + s_0394 / Km0394_201) * (1 + s_0555 / Km0555_201) - 1)) + (cell * Vmax_209 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_209) / (Km0019_209 * Km0434_209) / ((1 + s_0019 / Km0019_209) * (1 + s_0434 / Km0434_209) + (1 + s_0018 / Km0018_209) * (1 + s_0394 / Km0394_209) - 1)) + (cell * Vmax_210 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_210) / (Km0434_210 * Km0973_210 * Km1364_210) / ((1 + s_0434 / Km0434_210) * (1 + s_0973 / Km0973_210) * (1 + s_1364 / Km1364_210) + (1 + s_0299 / Km0299_210) * (1 + s_0394 / Km0394_210) * (1 + s_1322 / Km1322_210) - 1)) + (cell * Vmax_213 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_213) / (Km0300_213 * Km0456_213 * Km0434_213) / ((1 + s_0300 / Km0300_213) * (1 + s_0456 / Km0456_213) * (1 + s_0434 / Km0434_213) + (1 + s_1364 / Km1364_213) * (1 + s_0394 / Km0394_213) * (1 + s_1322 / Km1322_213) - 1)) + (cell * Vmax_216 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_216) / (Km0327_216 * Km0434_216 * Km1003_216) / ((1 + s_0327 / Km0327_216) * (1 + s_0434 / Km0434_216) * (1 + s_1003 / Km1003_216) + (1 + s_0325 / Km0325_216) * (1 + s_0394 / Km0394_216) * (1 + s_1322 / Km1322_216) - 1)) + (cell * Vmax_227 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_227) / (Km0434_227 * Km0445_227 * Km1399_227) / ((1 + s_0434 / Km0434_227) * (1 + s_0445 / Km0445_227) * (1 + s_1399 / Km1399_227) + (1 + s_0394 / Km0394_227) * (1 + s_1271 / Km1271_227) * (1 + s_1322 / Km1322_227) - 1)) + (cell * Vmax_245 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_245) / (Km0434_245 * Km1429_245) / ((1 + s_0434 / Km0434_245) * (1 + s_1429 / Km1429_245) + (1 + s_0261 / Km0261_245) * (1 + s_0394 / Km0394_245) - 1)) + (cell * Vmax_266 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_266) / (Km0434_266 * Km1545_266) / ((1 + s_0434 / Km0434_266) * (1 + s_1545 / Km1545_266) + (1 + s_0394 / Km0394_266) * (1 + s_1538 / Km1538_266) - 1)) + (59.276 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_83 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_83) / (Km0394_83 * Km0613_83) / ((1 + s_0394 / Km0394_83) * (1 + s_0613 / Km0613_83) + (1 + s_0434 / Km0434_83) * (1 + s_0615 / Km0615_83) - 1)) - (cell * Vmax_113 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_113) / (Km0120_113 * Km0394_113 * Km1322_113) / ((1 + s_0120 / Km0120_113) * (1 + s_0394 / Km0394_113) * (1 + s_1322 / Km1322_113) + (1 + s_0434 / Km0434_113) * (1 + s_0722 / Km0722_113) * (1 + s_1487 / Km1487_113) - 1)) - (cell * Vmax_204 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_204) / (Km0075_204 * Km0394_204) / ((1 + s_0075 / Km0075_204) * (1 + s_0394 / Km0394_204) + (1 + s_0260 / Km0260_204) * (1 + s_0434 / Km0434_204) - 1)) - (cell * Vmax_229 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_229) / (Km0394_229 * Km1360_229) / ((1 + s_0394 / Km0394_229) * (1 + s_1360 / Km1360_229) + (1 + s_0434 / Km0434_229) * (1 + s_1399 / Km1399_229) - 1)) - (cell * Vmax_234 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_234) / (Km0394_234 * Km1616_234) / ((1 + s_0394 / Km0394_234) * (1 + s_1616 / Km1616_234) + (1 + s_0582 / Km0582_234) * (1 + s_1620 / Km1620_234) - 1)) - (cell * Vmax_250 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_250) / (Km0394_250 * Km1467_250) / ((1 + s_0394 / Km0394_250) * (1 + s_1467 / Km1467_250) + (1 + s_0298 / Km0298_250) * (1 + s_1322 / Km1322_250) - 1)) - (cell * Vmax_276 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_276) / (Km0394_276 * Km0587_276) / ((1 + s_0394 / Km0394_276) * (1 + s_0587 / Km0587_276) + (1 + s_0434 / Km0434_276) * (1 + s_0589 / Km0589_276) - 1)) - (cell * Vmax_277 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_277) / (Km0394_277 * Km0582_277) / ((1 + s_0394 / Km0394_277) * (1 + s_0582 / Km0582_277) + (1 + s_0434 / Km0434_277) * (1 + s_0584 / Km0584_277) - 1));
    der(s_0403) = (cell * Vmax_34 * (s_0299 - s_0403 * s_0725 / Keq_34) / Km0299_34 / (1 + s_0299 / Km0299_34 + (1 + s_0403 / Km0403_34) * (1 + s_0725 / Km0725_34) - 1)) + (cell * Vmax_151 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_151) / (Km0312_151 * Km0999_151) / ((1 + s_0312 / Km0312_151) * (1 + s_0999 / Km0999_151) + (1 + s_0403 / Km0403_151) * (1 + s_0550 / Km0550_151) * (1 + s_0991 / Km0991_151) - 1)) - (cell * Vmax_214 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_214) / (Km0120_214 * Km0403_214) / ((1 + s_0120 / Km0120_214) * (1 + s_0403 / Km0403_214) + (1 + s_1365 / Km1365_214) * (1 + s_1487 / Km1487_214) - 1));
    der(s_0404) = (cell * Vmax_38 * (s_0434 * s_0955 * s_1582 - s_0404 * s_0423 * s_0633 / Keq_38) / (Km0434_38 * Km0955_38 * Km1582_38) / ((1 + s_0434 / Km0434_38) * (1 + s_0955 / Km0955_38) * (1 + s_1582 / Km1582_38) + (1 + s_0404 / Km0404_38) * (1 + s_0423 / Km0423_38) * (1 + s_0633 / Km0633_38) - 1)) - (0.4588 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0409) = (cell * Vmax_39 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_39) / (Km0568_39 * Km1543_39) / ((1 + s_0568 / Km0568_39) * (1 + s_1543 / Km1543_39) + (1 + s_0409 / Km0409_39) * (1 + s_1538 / Km1538_39) - 1)) - (cell * Vmax_259 * (s_0409 - s_1322 * s_1520 / Keq_259) / Km0409_259 / (1 + s_0409 / Km0409_259 + (1 + s_1322 / Km1322_259) * (1 + s_1520 / Km1520_259) - 1));
    der(s_0419) = (cell * Vmax_5 * (s_0142 - s_0313 * s_0419 / Keq_5) / Km0142_5 / (1 + s_0142 / Km0142_5 + (1 + s_0313 / Km0313_5) * (1 + s_0419 / Km0419_5) - 1)) + (cell * Vmax_78 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_78) / Km0980_78 / (1 + s_0980 / Km0980_78 + (1 + s_0178 / Km0178_78) * (1 + s_0419 / Km0419_78) * (1 + s_0981 / Km0981_78) - 1)) + (cell * Vmax_82 * (s_0589 - s_0419 * s_0654 / Keq_82) / Km0589_82 / (1 + s_0589 / Km0589_82 + (1 + s_0419 / Km0419_82) * (1 + s_0654 / Km0654_82) - 1)) + (cell * Vmax_129 * (s_1003 * s_1198 * s_1487 - s_0306 * s_0419 * s_0456 * s_1203 / Keq_129) / (Km1003_129 * Km1198_129 * Km1487_129) / ((1 + s_1003 / Km1003_129) * (1 + s_1198 / Km1198_129) * (1 + s_1487 / Km1487_129) + (1 + s_0306 / Km0306_129) * (1 + s_0419 / Km0419_129) * (1 + s_0456 / Km0456_129) * (1 + s_1203 / Km1203_129) - 1)) + (cell * Vmax_270 * (s_0420 - s_0419) / Km0420_270 / (1 + s_0420 / Km0420_270 + 1 + s_0419 / Km0419_270 - 1)) - (cell * Vmax_76 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_76) / (Km0419_76 * Km0434_76 * Km1559_76) / ((1 + s_0419 / Km0419_76) * (1 + s_0434 / Km0434_76) * (1 + s_1559 / Km1559_76) + (1 + s_0394 / Km0394_76) * (1 + s_0539 / Km0539_76) * (1 + s_1322 / Km1322_76) - 1)) - (cell * Vmax_118 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_118) / (Km0180_118 * Km0419_118 * Km1203_118) / ((1 + s_0180 / Km0180_118) * (1 + s_0419 / Km0419_118) * (1 + s_1203 / Km1203_118) + (1 + s_0991 / Km0991_118) * (1 + s_1198 / Km1198_118) - 1)) - (cell * Vmax_119 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_119) / (Km0180_119 * Km0419_119 * Km1212_119) / ((1 + s_0180 / Km0180_119) * (1 + s_0419 / Km0419_119) * (1 + s_1212 / Km1212_119) + (1 + s_0991 / Km0991_119) * (1 + s_1207 / Km1207_119) - 1)) - (cell * Vmax_120 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_120) / (Km0419_120 * Km0434_120 * Km0991_120) / ((1 + s_0419 / Km0419_120) * (1 + s_0434 / Km0434_120) * (1 + s_0991 / Km0991_120) + (1 + s_0394 / Km0394_120) * (1 + s_0999 / Km0999_120) * (1 + s_1322 / Km1322_120) - 1));
    der(s_0420) = 0.0;
    der(s_0423) = (cell * Vmax_14 * (s_0390 - s_0423 * s_1322 / Keq_14) / Km0390_14 / (1 + s_0390 / Km0390_14 + (1 + s_0423 / Km0423_14) * (1 + s_1322 / Km1322_14) - 1)) + (cell * Vmax_31 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_31) / (Km0386_31 * Km0434_31) / ((1 + s_0386 / Km0386_31) * (1 + s_0434 / Km0434_31) + (1 + s_0394 / Km0394_31) * (1 + s_0423 / Km0423_31) - 1)) + (cell * Vmax_35 * (s_0393 - s_0423 * s_0725 / Keq_35) / Km0393_35 / (1 + s_0393 / Km0393_35 + (1 + s_0423 / Km0423_35) * (1 + s_0725 / Km0725_35) - 1)) + (cell * Vmax_38 * (s_0434 * s_0955 * s_1582 - s_0404 * s_0423 * s_0633 / Keq_38) / (Km0434_38 * Km0955_38 * Km1582_38) / ((1 + s_0434 / Km0434_38) * (1 + s_0955 / Km0955_38) * (1 + s_1582 / Km1582_38) + (1 + s_0404 / Km0404_38) * (1 + s_0423 / Km0423_38) * (1 + s_0633 / Km0633_38) - 1)) + (cell * Vmax_43 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_43) / (Km0434_43 * Km0973_43 * Km0979_43) / ((1 + s_0434 / Km0434_43) * (1 + s_0973 / Km0973_43) * (1 + s_0979 / Km0979_43) + (1 + s_0015 / Km0015_43) * (1 + s_0423 / Km0423_43) * (1 + s_0633 / Km0633_43) - 1)) + (cell * Vmax_44 * (s_0434 * s_0965 * s_1583 - s_0423 * s_0428 * s_0633 / Keq_44) / (Km0434_44 * Km0965_44 * Km1583_44) / ((1 + s_0434 / Km0434_44) * (1 + s_0965 / Km0965_44) * (1 + s_1583 / Km1583_44) + (1 + s_0423 / Km0423_44) * (1 + s_0428 / Km0428_44) * (1 + s_0633 / Km0633_44) - 1)) + (cell * Vmax_45 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_45) / (Km0434_45 * Km0973_45 * Km0999_45) / ((1 + s_0434 / Km0434_45) * (1 + s_0973 / Km0973_45) * (1 + s_0999 / Km0999_45) + (1 + s_0423 / Km0423_45) * (1 + s_0633 / Km0633_45) * (1 + s_0969 / Km0969_45) * (1 + s_0991 / Km0991_45) - 1)) + (cell * Vmax_46 * (s_0434 * s_0969 * s_1585 - s_0423 * s_0430 * s_0633 / Keq_46) / (Km0434_46 * Km0969_46 * Km1585_46) / ((1 + s_0434 / Km0434_46) * (1 + s_0969 / Km0969_46) * (1 + s_1585 / Km1585_46) + (1 + s_0423 / Km0423_46) * (1 + s_0430 / Km0430_46) * (1 + s_0633 / Km0633_46) - 1)) + (cell * Vmax_51 * (s_0434 * s_0973 * s_1587 - s_0423 * s_0432 * s_0633 / Keq_51) / (Km0434_51 * Km0973_51 * Km1587_51) / ((1 + s_0434 / Km0434_51) * (1 + s_0973 / Km0973_51) * (1 + s_1587 / Km1587_51) + (1 + s_0423 / Km0423_51) * (1 + s_0432 / Km0432_51) * (1 + s_0633 / Km0633_51) - 1)) + (cell * Vmax_80 * (s_0434 * s_0981 * s_1589 - s_0423 * s_0542 * s_0633 / Keq_80) / (Km0434_80 * Km0981_80 * Km1589_80) / ((1 + s_0434 / Km0434_80) * (1 + s_0981 / Km0981_80) * (1 + s_1589 / Km1589_80) + (1 + s_0423 / Km0423_80) * (1 + s_0542 / Km0542_80) * (1 + s_0633 / Km0633_80) - 1)) + (cell * Vmax_121 * (s_0434 * s_0999 * s_1590 - s_0423 * s_0633 * s_0747 / Keq_121) / (Km0434_121 * Km0999_121 * Km1590_121) / ((1 + s_0434 / Km0434_121) * (1 + s_0999 / Km0999_121) * (1 + s_1590 / Km1590_121) + (1 + s_0423 / Km0423_121) * (1 + s_0633 / Km0633_121) * (1 + s_0747 / Km0747_121) - 1)) + (cell * Vmax_122 * (s_0434 * s_0991 * s_1591 - s_0423 * s_0633 * s_0748 / Keq_122) / (Km0434_122 * Km0991_122 * Km1591_122) / ((1 + s_0434 / Km0434_122) * (1 + s_0991 / Km0991_122) * (1 + s_1591 / Km1591_122) + (1 + s_0423 / Km0423_122) * (1 + s_0633 / Km0633_122) * (1 + s_0748 / Km0748_122) - 1)) + (cell * Vmax_132 * (s_0434 * s_1003 * s_1593 - s_0423 * s_0633 * s_0757 / Keq_132) / (Km0434_132 * Km1003_132 * Km1593_132) / ((1 + s_0434 / Km0434_132) * (1 + s_1003 / Km1003_132) * (1 + s_1593 / Km1593_132) + (1 + s_0423 / Km0423_132) * (1 + s_0633 / Km0633_132) * (1 + s_0757 / Km0757_132) - 1)) + (cell * Vmax_133 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_133) / (Km0434_133 * Km0999_133 * Km1565_133) / ((1 + s_0434 / Km0434_133) * (1 + s_0999 / Km0999_133) * (1 + s_1565 / Km1565_133) + (1 + s_0423 / Km0423_133) * (1 + s_0633 / Km0633_133) * (1 + s_0782 / Km0782_133) * (1 + s_0991 / Km0991_133) - 1)) + (cell * Vmax_141 * (s_0434 * s_1006 * s_1594 - s_0423 * s_0633 * s_0832 / Keq_141) / (Km0434_141 * Km1006_141 * Km1594_141) / ((1 + s_0434 / Km0434_141) * (1 + s_1006 / Km1006_141) * (1 + s_1594 / Km1594_141) + (1 + s_0423 / Km0423_141) * (1 + s_0633 / Km0633_141) * (1 + s_0832 / Km0832_141) - 1)) + (cell * Vmax_161 * (s_0434 * s_1016 * s_1596 - s_0423 * s_0633 * s_0847 / Keq_161) / (Km0434_161 * Km1016_161 * Km1596_161) / ((1 + s_0434 / Km0434_161) * (1 + s_1016 / Km1016_161) * (1 + s_1596 / Km1596_161) + (1 + s_0423 / Km0423_161) * (1 + s_0633 / Km0633_161) * (1 + s_0847 / Km0847_161) - 1)) + (cell * Vmax_168 * (s_0434 * s_1021 * s_1598 - s_0423 * s_0633 * s_1077 / Keq_168) / (Km0434_168 * Km1021_168 * Km1598_168) / ((1 + s_0434 / Km0434_168) * (1 + s_1021 / Km1021_168) * (1 + s_1598 / Km1598_168) + (1 + s_0423 / Km0423_168) * (1 + s_0633 / Km0633_168) * (1 + s_1077 / Km1077_168) - 1)) + (cell * Vmax_169 * (s_0434 * s_1025 * s_1600 - s_0423 * s_0633 * s_1099 / Keq_169) / (Km0434_169 * Km1025_169 * Km1600_169) / ((1 + s_0434 / Km0434_169) * (1 + s_1025 / Km1025_169) * (1 + s_1600 / Km1600_169) + (1 + s_0423 / Km0423_169) * (1 + s_0633 / Km0633_169) * (1 + s_1099 / Km1099_169) - 1)) + (cell * Vmax_176 * (s_0434 * s_1029 * s_1602 - s_0423 * s_0633 * s_1148 / Keq_176) / (Km0434_176 * Km1029_176 * Km1602_176) / ((1 + s_0434 / Km0434_176) * (1 + s_1029 / Km1029_176) * (1 + s_1602 / Km1602_176) + (1 + s_0423 / Km0423_176) * (1 + s_0633 / Km0633_176) * (1 + s_1148 / Km1148_176) - 1)) + (cell * Vmax_194 * (s_0434 * s_1032 * s_1604 - s_0423 * s_0633 * s_1314 / Keq_194) / (Km0434_194 * Km1032_194 * Km1604_194) / ((1 + s_0434 / Km0434_194) * (1 + s_1032 / Km1032_194) * (1 + s_1604 / Km1604_194) + (1 + s_0423 / Km0423_194) * (1 + s_0633 / Km0633_194) * (1 + s_1314 / Km1314_194) - 1)) + (cell * Vmax_218 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_218) / (Km0434_218 * Km1408_218) / ((1 + s_0434 / Km0434_218) * (1 + s_1408 / Km1408_218) + (1 + s_0423 / Km0423_218) * (1 + s_1386 / Km1386_218) - 1)) + (cell * Vmax_225 * (s_0434 * s_1035 * s_1606 - s_0423 * s_0633 * s_1379 / Keq_225) / (Km0434_225 * Km1035_225 * Km1606_225) / ((1 + s_0434 / Km0434_225) * (1 + s_1035 / Km1035_225) * (1 + s_1606 / Km1606_225) + (1 + s_0423 / Km0423_225) * (1 + s_0633 / Km0633_225) * (1 + s_1379 / Km1379_225) - 1)) + (cell * Vmax_243 * (s_0434 * s_1039 * s_1607 - s_0423 * s_0633 * s_1428 / Keq_243) / (Km0434_243 * Km1039_243 * Km1607_243) / ((1 + s_0434 / Km0434_243) * (1 + s_1039 / Km1039_243) * (1 + s_1607 / Km1607_243) + (1 + s_0423 / Km0423_243) * (1 + s_0633 / Km0633_243) * (1 + s_1428 / Km1428_243) - 1)) + (cell * Vmax_254 * (s_0434 * s_1045 * s_1608 - s_0423 * s_0633 * s_1491 / Keq_254) / (Km0434_254 * Km1045_254 * Km1608_254) / ((1 + s_0434 / Km0434_254) * (1 + s_1045 / Km1045_254) * (1 + s_1608 / Km1608_254) + (1 + s_0423 / Km0423_254) * (1 + s_0633 / Km0633_254) * (1 + s_1491 / Km1491_254) - 1)) + (cell * Vmax_263 * (s_0434 * s_1048 * s_1610 - s_0423 * s_0633 * s_1527 / Keq_263) / (Km0434_263 * Km1048_263 * Km1610_263) / ((1 + s_0434 / Km0434_263) * (1 + s_1048 / Km1048_263) * (1 + s_1610 / Km1610_263) + (1 + s_0423 / Km0423_263) * (1 + s_0633 / Km0633_263) * (1 + s_1527 / Km1527_263) - 1)) + (cell * Vmax_265 * (s_0434 * s_1051 * s_1612 - s_0423 * s_0633 * s_1533 / Keq_265) / (Km0434_265 * Km1051_265 * Km1612_265) / ((1 + s_0434 / Km0434_265) * (1 + s_1051 / Km1051_265) * (1 + s_1612 / Km1612_265) + (1 + s_0423 / Km0423_265) * (1 + s_0633 / Km0633_265) * (1 + s_1533 / Km1533_265) - 1)) + (cell * Vmax_269 * (s_0434 * s_1056 * s_1614 - s_0423 * s_0633 * s_1561 / Keq_269) / (Km0434_269 * Km1056_269 * Km1614_269) / ((1 + s_0434 / Km0434_269) * (1 + s_1056 / Km1056_269) * (1 + s_1614 / Km1614_269) + (1 + s_0423 / Km0423_269) * (1 + s_0633 / Km0633_269) * (1 + s_1561 / Km1561_269) - 1)) - (cell * Vmax_33 * (s_0423 * s_0434 - pow(s_0394, 2) / Keq_33) / (Km0423_33 * Km0434_33) / ((1 + s_0423 / Km0423_33) * (1 + s_0434 / Km0434_33) + pow(1 + s_0394 / Km0394_33, 2) - 1)) - (cell * Vmax_104 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_104) / (Km0423_104 * Km0602_104 * Km0633_104) / ((1 + s_0423 / Km0423_104) * (1 + s_0602 / Km0602_104) * (1 + s_0633 / Km0633_104) + (1 + s_0434 / Km0434_104) * (1 + s_0529 / Km0529_104) * (1 + s_0595 / Km0595_104) - 1)) - (cell * Vmax_105 * (s_0423 * s_0633 * s_1073 - s_0434 * s_0529 * s_1065 / Keq_105) / (Km0423_105 * Km0633_105 * Km1073_105) / ((1 + s_0423 / Km0423_105) * (1 + s_0633 / Km0633_105) * (1 + s_1073 / Km1073_105) + (1 + s_0434 / Km0434_105) * (1 + s_0529 / Km0529_105) * (1 + s_1065 / Km1065_105) - 1)) - (cell * Vmax_106 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_106) / (Km0423_106 * Km0633_106 * Km1454_106) / ((1 + s_0423 / Km0423_106) * (1 + s_0633 / Km0633_106) * (1 + s_1454 / Km1454_106) + (1 + s_0434 / Km0434_106) * (1 + s_0529 / Km0529_106) * (1 + s_1449 / Km1449_106) - 1)) - (0.046 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0427) = (cell * Vmax_41 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_41) / (Km0515_41 * Km0999_41) / ((1 + s_0515 / Km0515_41) * (1 + s_0999 / Km0999_41) + (1 + s_0427 / Km0427_41) * (1 + s_0991 / Km0991_41) * (1 + s_1399 / Km1399_41) - 1)) - (cell * Vmax_40 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_40) / (Km0427_40 * Km1386_40) / ((1 + s_0427 / Km0427_40) * (1 + s_1386 / Km1386_40) + (1 + s_0633 / Km0633_40) * (1 + s_1187 / Km1187_40) - 1));
    der(s_0428) = (cell * Vmax_44 * (s_0434 * s_0965 * s_1583 - s_0423 * s_0428 * s_0633 / Keq_44) / (Km0434_44 * Km0965_44 * Km1583_44) / ((1 + s_0434 / Km0434_44) * (1 + s_0965 / Km0965_44) * (1 + s_1583 / Km1583_44) + (1 + s_0423 / Km0423_44) * (1 + s_0428 / Km0428_44) * (1 + s_0633 / Km0633_44) - 1)) - (0.1607 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0430) = (cell * Vmax_46 * (s_0434 * s_0969 * s_1585 - s_0423 * s_0430 * s_0633 / Keq_46) / (Km0434_46 * Km0969_46 * Km1585_46) / ((1 + s_0434 / Km0434_46) * (1 + s_0969 / Km0969_46) * (1 + s_1585 / Km1585_46) + (1 + s_0423 / Km0423_46) * (1 + s_0430 / Km0430_46) * (1 + s_0633 / Km0633_46) - 1)) - (0.1017 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0432) = (cell * Vmax_51 * (s_0434 * s_0973 * s_1587 - s_0423 * s_0432 * s_0633 / Keq_51) / (Km0434_51 * Km0973_51 * Km1587_51) / ((1 + s_0434 / Km0434_51) * (1 + s_0973 / Km0973_51) * (1 + s_1587 / Km1587_51) + (1 + s_0423 / Km0423_51) * (1 + s_0432 / Km0432_51) * (1 + s_0633 / Km0633_51) - 1)) - (0.2975 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0434) = (cell * Vmax_83 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_83) / (Km0394_83 * Km0613_83) / ((1 + s_0394 / Km0394_83) * (1 + s_0613 / Km0613_83) + (1 + s_0434 / Km0434_83) * (1 + s_0615 / Km0615_83) - 1)) + (cell * Vmax_104 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_104) / (Km0423_104 * Km0602_104 * Km0633_104) / ((1 + s_0423 / Km0423_104) * (1 + s_0602 / Km0602_104) * (1 + s_0633 / Km0633_104) + (1 + s_0434 / Km0434_104) * (1 + s_0529 / Km0529_104) * (1 + s_0595 / Km0595_104) - 1)) + (cell * Vmax_105 * (s_0423 * s_0633 * s_1073 - s_0434 * s_0529 * s_1065 / Keq_105) / (Km0423_105 * Km0633_105 * Km1073_105) / ((1 + s_0423 / Km0423_105) * (1 + s_0633 / Km0633_105) * (1 + s_1073 / Km1073_105) + (1 + s_0434 / Km0434_105) * (1 + s_0529 / Km0529_105) * (1 + s_1065 / Km1065_105) - 1)) + (cell * Vmax_106 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_106) / (Km0423_106 * Km0633_106 * Km1454_106) / ((1 + s_0423 / Km0423_106) * (1 + s_0633 / Km0633_106) * (1 + s_1454 / Km1454_106) + (1 + s_0434 / Km0434_106) * (1 + s_0529 / Km0529_106) * (1 + s_1449 / Km1449_106) - 1)) + (cell * Vmax_113 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_113) / (Km0120_113 * Km0394_113 * Km1322_113) / ((1 + s_0120 / Km0120_113) * (1 + s_0394 / Km0394_113) * (1 + s_1322 / Km1322_113) + (1 + s_0434 / Km0434_113) * (1 + s_0722 / Km0722_113) * (1 + s_1487 / Km1487_113) - 1)) + (cell * Vmax_204 * (s_0075 * s_0394 - s_0260 * s_0434 / Keq_204) / (Km0075_204 * Km0394_204) / ((1 + s_0075 / Km0075_204) * (1 + s_0394 / Km0394_204) + (1 + s_0260 / Km0260_204) * (1 + s_0434 / Km0434_204) - 1)) + (cell * Vmax_229 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_229) / (Km0394_229 * Km1360_229) / ((1 + s_0394 / Km0394_229) * (1 + s_1360 / Km1360_229) + (1 + s_0434 / Km0434_229) * (1 + s_1399 / Km1399_229) - 1)) + (cell * Vmax_276 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_276) / (Km0394_276 * Km0587_276) / ((1 + s_0394 / Km0394_276) * (1 + s_0587 / Km0587_276) + (1 + s_0434 / Km0434_276) * (1 + s_0589 / Km0589_276) - 1)) + (cell * Vmax_277 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_277) / (Km0394_277 * Km0582_277) / ((1 + s_0394 / Km0394_277) * (1 + s_0582 / Km0582_277) + (1 + s_0434 / Km0434_277) * (1 + s_0584 / Km0584_277) - 1)) - (cell * Vmax_22 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_22) / (Km0301_22 * Km0434_22 * Km0999_22) / ((1 + s_0301 / Km0301_22) * (1 + s_0434 / Km0434_22) * (1 + s_0999 / Km0999_22) + (1 + s_0302 / Km0302_22) * (1 + s_0394 / Km0394_22) * (1 + s_0991 / Km0991_22) * (1 + s_1322 / Km1322_22) - 1)) - (cell * Vmax_27 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_27) / (Km0373_27 * Km0434_27 * Km0445_27) / ((1 + s_0373 / Km0373_27) * (1 + s_0434 / Km0434_27) * (1 + s_0445 / Km0445_27) + (1 + s_0394 / Km0394_27) * (1 + s_1101 / Km1101_27) * (1 + s_1322 / Km1322_27) - 1)) - (cell * Vmax_29 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_29) / (Km0434_29 * Km1192_29) / ((1 + s_0434 / Km0434_29) * (1 + s_1192 / Km1192_29) + (1 + s_0394 / Km0394_29) * (1 + s_1191 / Km1191_29) - 1)) - (cell * Vmax_31 * (s_0386 * s_0434 - s_0394 * s_0423 / Keq_31) / (Km0386_31 * Km0434_31) / ((1 + s_0386 / Km0386_31) * (1 + s_0434 / Km0434_31) + (1 + s_0394 / Km0394_31) * (1 + s_0423 / Km0423_31) - 1)) - (cell * Vmax_33 * (s_0423 * s_0434 - pow(s_0394, 2) / Keq_33) / (Km0423_33 * Km0434_33) / ((1 + s_0423 / Km0423_33) * (1 + s_0434 / Km0434_33) + pow(1 + s_0394 / Km0394_33, 2) - 1)) - (cell * Vmax_37 * (s_0298 * s_0434 - s_0201 * s_0394 / Keq_37) / (Km0298_37 * Km0434_37) / ((1 + s_0298 / Km0298_37) * (1 + s_0434 / Km0434_37) + (1 + s_0201 / Km0201_37) * (1 + s_0394 / Km0394_37) - 1)) - (cell * Vmax_38 * (s_0434 * s_0955 * s_1582 - s_0404 * s_0423 * s_0633 / Keq_38) / (Km0434_38 * Km0955_38 * Km1582_38) / ((1 + s_0434 / Km0434_38) * (1 + s_0955 / Km0955_38) * (1 + s_1582 / Km1582_38) + (1 + s_0404 / Km0404_38) * (1 + s_0423 / Km0423_38) * (1 + s_0633 / Km0633_38) - 1)) - (cell * Vmax_43 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_43) / (Km0434_43 * Km0973_43 * Km0979_43) / ((1 + s_0434 / Km0434_43) * (1 + s_0973 / Km0973_43) * (1 + s_0979 / Km0979_43) + (1 + s_0015 / Km0015_43) * (1 + s_0423 / Km0423_43) * (1 + s_0633 / Km0633_43) - 1)) - (cell * Vmax_44 * (s_0434 * s_0965 * s_1583 - s_0423 * s_0428 * s_0633 / Keq_44) / (Km0434_44 * Km0965_44 * Km1583_44) / ((1 + s_0434 / Km0434_44) * (1 + s_0965 / Km0965_44) * (1 + s_1583 / Km1583_44) + (1 + s_0423 / Km0423_44) * (1 + s_0428 / Km0428_44) * (1 + s_0633 / Km0633_44) - 1)) - (cell * Vmax_45 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_45) / (Km0434_45 * Km0973_45 * Km0999_45) / ((1 + s_0434 / Km0434_45) * (1 + s_0973 / Km0973_45) * (1 + s_0999 / Km0999_45) + (1 + s_0423 / Km0423_45) * (1 + s_0633 / Km0633_45) * (1 + s_0969 / Km0969_45) * (1 + s_0991 / Km0991_45) - 1)) - (cell * Vmax_46 * (s_0434 * s_0969 * s_1585 - s_0423 * s_0430 * s_0633 / Keq_46) / (Km0434_46 * Km0969_46 * Km1585_46) / ((1 + s_0434 / Km0434_46) * (1 + s_0969 / Km0969_46) * (1 + s_1585 / Km1585_46) + (1 + s_0423 / Km0423_46) * (1 + s_0430 / Km0430_46) * (1 + s_0633 / Km0633_46) - 1)) - (cell * Vmax_48 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_48) / (Km0434_48 * Km0973_48) / ((1 + s_0434 / Km0434_48) * (1 + s_0973 / Km0973_48) + (1 + s_0295 / Km0295_48) * (1 + s_0394 / Km0394_48) - 1)) - (cell * Vmax_51 * (s_0434 * s_0973 * s_1587 - s_0423 * s_0432 * s_0633 / Keq_51) / (Km0434_51 * Km0973_51 * Km1587_51) / ((1 + s_0434 / Km0434_51) * (1 + s_0973 / Km0973_51) * (1 + s_1587 / Km1587_51) + (1 + s_0423 / Km0423_51) * (1 + s_0432 / Km0432_51) * (1 + s_0633 / Km0633_51) - 1)) - (cell * Vmax_52 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_52) / (Km0434_52 * Km1386_52) / ((1 + s_0434 / Km0434_52) * (1 + s_1386 / Km1386_52) + (1 + s_0326 / Km0326_52) * (1 + s_0633 / Km0633_52) - 1)) - (2.0 * cell * Vmax_66 * (pow(s_0434, 2) * s_0445 * s_0999 - pow(s_0394, 2) * s_0455 * s_0991 * s_1322 / Keq_66) / (pow(Km0434_66, 2) * Km0445_66 * Km0999_66) / (pow(1 + s_0434 / Km0434_66, 2) * (1 + s_0445 / Km0445_66) * (1 + s_0999 / Km0999_66) + pow(1 + s_0394 / Km0394_66, 2) * (1 + s_0455 / Km0455_66) * (1 + s_0991 / Km0991_66) * (1 + s_1322 / Km1322_66) - 1)) - (cell * Vmax_76 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_76) / (Km0419_76 * Km0434_76 * Km1559_76) / ((1 + s_0419 / Km0419_76) * (1 + s_0434 / Km0434_76) * (1 + s_1559 / Km1559_76) + (1 + s_0394 / Km0394_76) * (1 + s_0539 / Km0539_76) * (1 + s_1322 / Km1322_76) - 1)) - (cell * Vmax_80 * (s_0434 * s_0981 * s_1589 - s_0423 * s_0542 * s_0633 / Keq_80) / (Km0434_80 * Km0981_80 * Km1589_80) / ((1 + s_0434 / Km0434_80) * (1 + s_0981 / Km0981_80) * (1 + s_1589 / Km1589_80) + (1 + s_0423 / Km0423_80) * (1 + s_0542 / Km0542_80) * (1 + s_0633 / Km0633_80) - 1)) - (cell * Vmax_120 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_120) / (Km0419_120 * Km0434_120 * Km0991_120) / ((1 + s_0419 / Km0419_120) * (1 + s_0434 / Km0434_120) * (1 + s_0991 / Km0991_120) + (1 + s_0394 / Km0394_120) * (1 + s_0999 / Km0999_120) * (1 + s_1322 / Km1322_120) - 1)) - (cell * Vmax_121 * (s_0434 * s_0999 * s_1590 - s_0423 * s_0633 * s_0747 / Keq_121) / (Km0434_121 * Km0999_121 * Km1590_121) / ((1 + s_0434 / Km0434_121) * (1 + s_0999 / Km0999_121) * (1 + s_1590 / Km1590_121) + (1 + s_0423 / Km0423_121) * (1 + s_0633 / Km0633_121) * (1 + s_0747 / Km0747_121) - 1)) - (cell * Vmax_122 * (s_0434 * s_0991 * s_1591 - s_0423 * s_0633 * s_0748 / Keq_122) / (Km0434_122 * Km0991_122 * Km1591_122) / ((1 + s_0434 / Km0434_122) * (1 + s_0991 / Km0991_122) * (1 + s_1591 / Km1591_122) + (1 + s_0423 / Km0423_122) * (1 + s_0633 / Km0633_122) * (1 + s_0748 / Km0748_122) - 1)) - (cell * Vmax_132 * (s_0434 * s_1003 * s_1593 - s_0423 * s_0633 * s_0757 / Keq_132) / (Km0434_132 * Km1003_132 * Km1593_132) / ((1 + s_0434 / Km0434_132) * (1 + s_1003 / Km1003_132) * (1 + s_1593 / Km1593_132) + (1 + s_0423 / Km0423_132) * (1 + s_0633 / Km0633_132) * (1 + s_0757 / Km0757_132) - 1)) - (cell * Vmax_133 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_133) / (Km0434_133 * Km0999_133 * Km1565_133) / ((1 + s_0434 / Km0434_133) * (1 + s_0999 / Km0999_133) * (1 + s_1565 / Km1565_133) + (1 + s_0423 / Km0423_133) * (1 + s_0633 / Km0633_133) * (1 + s_0782 / Km0782_133) * (1 + s_0991 / Km0991_133) - 1)) - (cell * Vmax_135 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_135) / (Km0434_135 * Km0782_135) / ((1 + s_0434 / Km0434_135) * (1 + s_0782 / Km0782_135) + (1 + s_0394 / Km0394_135) * (1 + s_0739 / Km0739_135) - 1)) - (cell * Vmax_137 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_137) / (Km0434_137 * Km0563_137) / ((1 + s_0434 / Km0434_137) * (1 + s_0563 / Km0563_137) + (1 + s_0394 / Km0394_137) * (1 + s_0568 / Km0568_137) - 1)) - (cell * Vmax_141 * (s_0434 * s_1006 * s_1594 - s_0423 * s_0633 * s_0832 / Keq_141) / (Km0434_141 * Km1006_141 * Km1594_141) / ((1 + s_0434 / Km0434_141) * (1 + s_1006 / Km1006_141) * (1 + s_1594 / Km1594_141) + (1 + s_0423 / Km0423_141) * (1 + s_0633 / Km0633_141) * (1 + s_0832 / Km0832_141) - 1)) - (cell * Vmax_146 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_146) / (Km0434_146 * Km1014_146) / ((1 + s_0434 / Km0434_146) * (1 + s_1014 / Km1014_146) + (1 + s_0394 / Km0394_146) * (1 + s_1238 / Km1238_146) - 1)) - (cell * Vmax_161 * (s_0434 * s_1016 * s_1596 - s_0423 * s_0633 * s_0847 / Keq_161) / (Km0434_161 * Km1016_161 * Km1596_161) / ((1 + s_0434 / Km0434_161) * (1 + s_1016 / Km1016_161) * (1 + s_1596 / Km1596_161) + (1 + s_0423 / Km0423_161) * (1 + s_0633 / Km0633_161) * (1 + s_0847 / Km0847_161) - 1)) - (cell * Vmax_168 * (s_0434 * s_1021 * s_1598 - s_0423 * s_0633 * s_1077 / Keq_168) / (Km0434_168 * Km1021_168 * Km1598_168) / ((1 + s_0434 / Km0434_168) * (1 + s_1021 / Km1021_168) * (1 + s_1598 / Km1598_168) + (1 + s_0423 / Km0423_168) * (1 + s_0633 / Km0633_168) * (1 + s_1077 / Km1077_168) - 1)) - (cell * Vmax_169 * (s_0434 * s_1025 * s_1600 - s_0423 * s_0633 * s_1099 / Keq_169) / (Km0434_169 * Km1025_169 * Km1600_169) / ((1 + s_0434 / Km0434_169) * (1 + s_1025 / Km1025_169) * (1 + s_1600 / Km1600_169) + (1 + s_0423 / Km0423_169) * (1 + s_0633 / Km0633_169) * (1 + s_1099 / Km1099_169) - 1)) - (cell * Vmax_174 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_174) / (Km0434_174 * Km1029_174) / ((1 + s_0434 / Km0434_174) * (1 + s_1029 / Km1029_174) + (1 + s_0633 / Km0633_174) * (1 + s_1322 / Km1322_174) * (1 + s_1416 / Km1416_174) - 1)) - (cell * Vmax_176 * (s_0434 * s_1029 * s_1602 - s_0423 * s_0633 * s_1148 / Keq_176) / (Km0434_176 * Km1029_176 * Km1602_176) / ((1 + s_0434 / Km0434_176) * (1 + s_1029 / Km1029_176) * (1 + s_1602 / Km1602_176) + (1 + s_0423 / Km0423_176) * (1 + s_0633 / Km0633_176) * (1 + s_1148 / Km1148_176) - 1)) - (cell * Vmax_180 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_180) / (Km0018_180 * Km0434_180) / ((1 + s_0018 / Km0018_180) * (1 + s_0434 / Km0434_180) + (1 + s_0394 / Km0394_180) * (1 + s_0456 / Km0456_180) * (1 + s_0943 / Km0943_180) * (1 + s_1322 / Km1322_180) - 1)) - (cell * Vmax_186 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_186) / (Km0434_186 * Km0739_186) / ((1 + s_0434 / Km0434_186) * (1 + s_0739 / Km0739_186) + (1 + s_0394 / Km0394_186) * (1 + s_0785 / Km0785_186) - 1)) - (cell * Vmax_187 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_187) / (Km0434_187 * Km1538_187) / ((1 + s_0434 / Km0434_187) * (1 + s_1538 / Km1538_187) + (1 + s_0394 / Km0394_187) * (1 + s_1559 / Km1559_187) - 1)) - (cell * Vmax_194 * (s_0434 * s_1032 * s_1604 - s_0423 * s_0633 * s_1314 / Keq_194) / (Km0434_194 * Km1032_194 * Km1604_194) / ((1 + s_0434 / Km0434_194) * (1 + s_1032 / Km1032_194) * (1 + s_1604 / Km1604_194) + (1 + s_0423 / Km0423_194) * (1 + s_0633 / Km0633_194) * (1 + s_1314 / Km1314_194) - 1)) - (cell * Vmax_195 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_195) / (Km0302_195 * Km0434_195) / ((1 + s_0302 / Km0302_195) * (1 + s_0434 / Km0434_195) + (1 + s_0300 / Km0300_195) * (1 + s_0394 / Km0394_195) * (1 + s_1322 / Km1322_195) - 1)) - (cell * Vmax_201 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_201) / (Km0434_201 * Km0557_201) / ((1 + s_0434 / Km0434_201) * (1 + s_0557 / Km0557_201) + (1 + s_0394 / Km0394_201) * (1 + s_0555 / Km0555_201) - 1)) - (cell * Vmax_209 * (s_0019 * s_0434 - s_0018 * s_0394 / Keq_209) / (Km0019_209 * Km0434_209) / ((1 + s_0019 / Km0019_209) * (1 + s_0434 / Km0434_209) + (1 + s_0018 / Km0018_209) * (1 + s_0394 / Km0394_209) - 1)) - (cell * Vmax_210 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_210) / (Km0434_210 * Km0973_210 * Km1364_210) / ((1 + s_0434 / Km0434_210) * (1 + s_0973 / Km0973_210) * (1 + s_1364 / Km1364_210) + (1 + s_0299 / Km0299_210) * (1 + s_0394 / Km0394_210) * (1 + s_1322 / Km1322_210) - 1)) - (cell * Vmax_213 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_213) / (Km0300_213 * Km0456_213 * Km0434_213) / ((1 + s_0300 / Km0300_213) * (1 + s_0456 / Km0456_213) * (1 + s_0434 / Km0434_213) + (1 + s_1364 / Km1364_213) * (1 + s_0394 / Km0394_213) * (1 + s_1322 / Km1322_213) - 1)) - (cell * Vmax_216 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_216) / (Km0327_216 * Km0434_216 * Km1003_216) / ((1 + s_0327 / Km0327_216) * (1 + s_0434 / Km0434_216) * (1 + s_1003 / Km1003_216) + (1 + s_0325 / Km0325_216) * (1 + s_0394 / Km0394_216) * (1 + s_1322 / Km1322_216) - 1)) - (cell * Vmax_218 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_218) / (Km0434_218 * Km1408_218) / ((1 + s_0434 / Km0434_218) * (1 + s_1408 / Km1408_218) + (1 + s_0423 / Km0423_218) * (1 + s_1386 / Km1386_218) - 1)) - (cell * Vmax_225 * (s_0434 * s_1035 * s_1606 - s_0423 * s_0633 * s_1379 / Keq_225) / (Km0434_225 * Km1035_225 * Km1606_225) / ((1 + s_0434 / Km0434_225) * (1 + s_1035 / Km1035_225) * (1 + s_1606 / Km1606_225) + (1 + s_0423 / Km0423_225) * (1 + s_0633 / Km0633_225) * (1 + s_1379 / Km1379_225) - 1)) - (cell * Vmax_227 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_227) / (Km0434_227 * Km0445_227 * Km1399_227) / ((1 + s_0434 / Km0434_227) * (1 + s_0445 / Km0445_227) * (1 + s_1399 / Km1399_227) + (1 + s_0394 / Km0394_227) * (1 + s_1271 / Km1271_227) * (1 + s_1322 / Km1322_227) - 1)) - (cell * Vmax_232 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_232) / (Km0434_232 * Km1616_232) / ((1 + s_0434 / Km0434_232) * (1 + s_1616 / Km1616_232) + (1 + s_0586 / Km0586_232) * (1 + s_1620 / Km1620_232) - 1)) - (cell * Vmax_243 * (s_0434 * s_1039 * s_1607 - s_0423 * s_0633 * s_1428 / Keq_243) / (Km0434_243 * Km1039_243 * Km1607_243) / ((1 + s_0434 / Km0434_243) * (1 + s_1039 / Km1039_243) * (1 + s_1607 / Km1607_243) + (1 + s_0423 / Km0423_243) * (1 + s_0633 / Km0633_243) * (1 + s_1428 / Km1428_243) - 1)) - (cell * Vmax_245 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_245) / (Km0434_245 * Km1429_245) / ((1 + s_0434 / Km0434_245) * (1 + s_1429 / Km1429_245) + (1 + s_0261 / Km0261_245) * (1 + s_0394 / Km0394_245) - 1)) - (cell * Vmax_254 * (s_0434 * s_1045 * s_1608 - s_0423 * s_0633 * s_1491 / Keq_254) / (Km0434_254 * Km1045_254 * Km1608_254) / ((1 + s_0434 / Km0434_254) * (1 + s_1045 / Km1045_254) * (1 + s_1608 / Km1608_254) + (1 + s_0423 / Km0423_254) * (1 + s_0633 / Km0633_254) * (1 + s_1491 / Km1491_254) - 1)) - (cell * Vmax_263 * (s_0434 * s_1048 * s_1610 - s_0423 * s_0633 * s_1527 / Keq_263) / (Km0434_263 * Km1048_263 * Km1610_263) / ((1 + s_0434 / Km0434_263) * (1 + s_1048 / Km1048_263) * (1 + s_1610 / Km1610_263) + (1 + s_0423 / Km0423_263) * (1 + s_0633 / Km0633_263) * (1 + s_1527 / Km1527_263) - 1)) - (cell * Vmax_265 * (s_0434 * s_1051 * s_1612 - s_0423 * s_0633 * s_1533 / Keq_265) / (Km0434_265 * Km1051_265 * Km1612_265) / ((1 + s_0434 / Km0434_265) * (1 + s_1051 / Km1051_265) * (1 + s_1612 / Km1612_265) + (1 + s_0423 / Km0423_265) * (1 + s_0633 / Km0633_265) * (1 + s_1533 / Km1533_265) - 1)) - (cell * Vmax_266 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_266) / (Km0434_266 * Km1545_266) / ((1 + s_0434 / Km0434_266) * (1 + s_1545 / Km1545_266) + (1 + s_0394 / Km0394_266) * (1 + s_1538 / Km1538_266) - 1)) - (cell * Vmax_269 * (s_0434 * s_1056 * s_1614 - s_0423 * s_0633 * s_1561 / Keq_269) / (Km0434_269 * Km1056_269 * Km1614_269) / ((1 + s_0434 / Km0434_269) * (1 + s_1056 / Km1056_269) * (1 + s_1614 / Km1614_269) + (1 + s_0423 / Km0423_269) * (1 + s_0633 / Km0633_269) * (1 + s_1561 / Km1561_269) - 1)) - (59.276 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0445) = (cell * Vmax_274 * (s_0456 - s_0445 / Keq_274) / Km0456_274 / (1 + s_0456 / Km0456_274 + 1 + s_0445 / Km0445_274 - 1)) - (cell * Vmax_27 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_27) / (Km0373_27 * Km0434_27 * Km0445_27) / ((1 + s_0373 / Km0373_27) * (1 + s_0434 / Km0434_27) * (1 + s_0445 / Km0445_27) + (1 + s_0394 / Km0394_27) * (1 + s_1101 / Km1101_27) * (1 + s_1322 / Km1322_27) - 1)) - (cell * Vmax_66 * (pow(s_0434, 2) * s_0445 * s_0999 - pow(s_0394, 2) * s_0455 * s_0991 * s_1322 / Keq_66) / (pow(Km0434_66, 2) * Km0445_66 * Km0999_66) / (pow(1 + s_0434 / Km0434_66, 2) * (1 + s_0445 / Km0445_66) * (1 + s_0999 / Km0999_66) + pow(1 + s_0394 / Km0394_66, 2) * (1 + s_0455 / Km0455_66) * (1 + s_0991 / Km0991_66) * (1 + s_1322 / Km1322_66) - 1)) - (cell * Vmax_227 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_227) / (Km0434_227 * Km0445_227 * Km1399_227) / ((1 + s_0434 / Km0434_227) * (1 + s_0445 / Km0445_227) * (1 + s_1399 / Km1399_227) + (1 + s_0394 / Km0394_227) * (1 + s_1271 / Km1271_227) * (1 + s_1322 / Km1322_227) - 1));
    der(s_0454) = (cell * Vmax_12 * (s_0835 - s_0454 / Keq_12) / Km0835_12 / (1 + s_0835 / Km0835_12 + 1 + s_0454 / Km0454_12 - 1)) - (cell * Vmax_142 * (s_0454 - s_0836 / Keq_142) / Km0454_142 / (1 + s_0454 / Km0454_142 + 1 + s_0836 / Km0836_142 - 1));
    der(s_0455) = (cell * Vmax_66 * (pow(s_0434, 2) * s_0445 * s_0999 - pow(s_0394, 2) * s_0455 * s_0991 * s_1322 / Keq_66) / (pow(Km0434_66, 2) * Km0445_66 * Km0999_66) / (pow(1 + s_0434 / Km0434_66, 2) * (1 + s_0445 / Km0445_66) * (1 + s_0999 / Km0999_66) + pow(1 + s_0394 / Km0394_66, 2) * (1 + s_0455 / Km0455_66) * (1 + s_0991 / Km0991_66) * (1 + s_1322 / Km1322_66) - 1)) - (cell * Vmax_47 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_47) / (Km0455_47 * Km0973_47) / ((1 + s_0455 / Km0455_47) * (1 + s_0973 / Km0973_47) + (1 + s_1194 / Km1194_47) * (1 + s_1322 / Km1322_47) - 1)) - (cell * Vmax_189 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_189) / (Km0455_189 * Km1266_189) / ((1 + s_0455 / Km0455_189) * (1 + s_1266 / Km1266_189) + (1 + s_0979 / Km0979_189) * (1 + s_1322 / Km1322_189) - 1));
    der(s_0456) = (cell * Vmax_7 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_7) / (Km0178_7 * Km1399_7) / ((1 + s_0178 / Km0178_7) * (1 + s_1399 / Km1399_7) + (1 + s_0039 / Km0039_7) * (1 + s_0456 / Km0456_7) - 1)) + (cell * Vmax_13 * (s_0010 - s_0291 * s_0456 / Keq_13) / Km0010_13 / (1 + s_0010 / Km0010_13 + (1 + s_0291 / Km0291_13) * (1 + s_0456 / Km0456_13) - 1)) + (cell * Vmax_25 * (pow(s_1399, 2) - s_0146 * s_0456 / Keq_25) / pow(Km1399_25, 2) / (pow(1 + s_1399 / Km1399_25, 2) + (1 + s_0146 / Km0146_25) * (1 + s_0456 / Km0456_25) - 1)) + (cell * Vmax_55 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_55) / (Km1207_55 * Km1578_55) / ((1 + s_1207 / Km1207_55) * (1 + s_1578 / Km1578_55) + (1 + s_0456 / Km0456_55) * (1 + s_1212 / Km1212_55) * (1 + s_1579 / Km1579_55) - 1)) + (cell * Vmax_56 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_56) / (Km0297_56 * Km1198_56) / ((1 + s_0297 / Km0297_56) * (1 + s_1198 / Km1198_56) + (1 + s_0209 / Km0209_56) * (1 + s_0456 / Km0456_56) * (1 + s_1203 / Km1203_56) - 1)) + (cell * Vmax_97 * (s_0595 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_97) / (Km0595_97 * Km1101_97 * pow(Km1212_97, 2)) / ((1 + s_0595 / Km0595_97) * (1 + s_1101 / Km1101_97) * pow(1 + s_1212 / Km1212_97, 2) + (1 + s_0456 / Km0456_97) * (1 + s_0529 / Km0529_97) * (1 + s_1065 / Km1065_97) * pow(1 + s_1207 / Km1207_97, 2) - 1)) + (cell * Vmax_98 * (s_1065 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_98) / (Km1065_98 * Km1101_98 * pow(Km1212_98, 2)) / ((1 + s_1065 / Km1065_98) * (1 + s_1101 / Km1101_98) * pow(1 + s_1212 / Km1212_98, 2) + (1 + s_0456 / Km0456_98) * (1 + s_0529 / Km0529_98) * (1 + s_1161 / Km1161_98) * pow(1 + s_1207 / Km1207_98, 2) - 1)) + (cell * Vmax_99 * (s_1101 * s_1161 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_99) / (Km1101_99 * Km1161_99 * pow(Km1212_99, 2)) / ((1 + s_1101 / Km1101_99) * (1 + s_1161 / Km1161_99) * pow(1 + s_1212 / Km1212_99, 2) + (1 + s_0456 / Km0456_99) * (1 + s_0529 / Km0529_99) * pow(1 + s_1207 / Km1207_99, 2) * (1 + s_1286 / Km1286_99) - 1)) + (cell * Vmax_100 * (s_1101 * pow(s_1212, 2) * s_1286 - s_0456 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_100) / (Km1101_100 * pow(Km1212_100, 2) * Km1286_100) / ((1 + s_1101 / Km1101_100) * pow(1 + s_1212 / Km1212_100, 2) * (1 + s_1286 / Km1286_100) + (1 + s_0456 / Km0456_100) * (1 + s_0529 / Km0529_100) * pow(1 + s_1207 / Km1207_100, 2) * (1 + s_1449 / Km1449_100) - 1)) + (3.0 * cell * Vmax_101 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(s_0456, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_101) / (pow(Km1101_101, 3) * pow(Km1212_101, 6) * Km1449_101) / (pow(1 + s_1101 / Km1101_101, 3) * pow(1 + s_1212 / Km1212_101, 6) * (1 + s_1449 / Km1449_101) + pow(1 + s_0456 / Km0456_101, 3) * pow(1 + s_0529 / Km0529_101, 3) * (1 + s_1084 / Km1084_101) * pow(1 + s_1207 / Km1207_101, 6) - 1)) + (cell * Vmax_102 * (s_1101 * pow(s_1212, 2) * s_1255 - s_0456 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_102) / (Km1101_102 * pow(Km1212_102, 2) * Km1255_102) / ((1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) * (1 + s_1255 / Km1255_102) + (1 + s_0456 / Km0456_102) * (1 + s_0529 / Km0529_102) * (1 + s_0602 / Km0602_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) + (3.0 * cell * Vmax_103 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(s_0456, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_103) / (Km0373_103 * pow(Km1101_103, 3) * pow(Km1212_103, 6)) / ((1 + s_0373 / Km0373_103) * pow(1 + s_1101 / Km1101_103, 3) * pow(1 + s_1212 / Km1212_103, 6) + pow(1 + s_0456 / Km0456_103, 3) * pow(1 + s_0529 / Km0529_103, 3) * pow(1 + s_1207 / Km1207_103, 6) * (1 + s_1255 / Km1255_103) - 1)) + (cell * Vmax_107 * (s_0602 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_107) / (Km0602_107 * Km1101_107 * pow(Km1212_107, 2)) / ((1 + s_0602 / Km0602_107) * (1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) + (1 + s_0456 / Km0456_107) * (1 + s_0529 / Km0529_107) * (1 + s_1073 / Km1073_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) + (cell * Vmax_108 * (s_1073 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_108) / (Km1073_108 * Km1101_108 * pow(Km1212_108, 2)) / ((1 + s_1073 / Km1073_108) * (1 + s_1101 / Km1101_108) * pow(1 + s_1212 / Km1212_108, 2) + (1 + s_0456 / Km0456_108) * (1 + s_0529 / Km0529_108) * (1 + s_1176 / Km1176_108) * pow(1 + s_1207 / Km1207_108, 2) - 1)) + (cell * Vmax_109 * (s_1101 * s_1176 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_109) / (Km1101_109 * Km1176_109 * pow(Km1212_109, 2)) / ((1 + s_1101 / Km1101_109) * (1 + s_1176 / Km1176_109) * pow(1 + s_1212 / Km1212_109, 2) + (1 + s_0456 / Km0456_109) * (1 + s_0529 / Km0529_109) * pow(1 + s_1207 / Km1207_109, 2) * (1 + s_1302 / Km1302_109) - 1)) + (cell * Vmax_110 * (s_1101 * pow(s_1212, 2) * s_1302 - s_0456 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_110) / (Km1101_110 * pow(Km1212_110, 2) * Km1302_110) / ((1 + s_1101 / Km1101_110) * pow(1 + s_1212 / Km1212_110, 2) * (1 + s_1302 / Km1302_110) + (1 + s_0456 / Km0456_110) * (1 + s_0529 / Km0529_110) * pow(1 + s_1207 / Km1207_110, 2) * (1 + s_1454 / Km1454_110) - 1)) + (cell * Vmax_129 * (s_1003 * s_1198 * s_1487 - s_0306 * s_0419 * s_0456 * s_1203 / Keq_129) / (Km1003_129 * Km1198_129 * Km1487_129) / ((1 + s_1003 / Km1003_129) * (1 + s_1198 / Km1198_129) * (1 + s_1487 / Km1487_129) + (1 + s_0306 / Km0306_129) * (1 + s_0419 / Km0419_129) * (1 + s_0456 / Km0456_129) * (1 + s_1203 / Km1203_129) - 1)) + (cell * Vmax_144 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_144) / (Km0836_144 * Km1198_144) / ((1 + s_0836 / Km0836_144) * (1 + s_1198 / Km1198_144) + (1 + s_0176 / Km0176_144) * (1 + s_1203 / Km1203_144) * (1 + s_0456 / Km0456_144) - 1)) + (cell * Vmax_154 * (s_0076 - s_0086 * s_0456 / Keq_154) / Km0076_154 / (1 + s_0076 / Km0076_154 + (1 + s_0086 / Km0086_154) * (1 + s_0456 / Km0456_154) - 1)) + (cell * Vmax_158 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_158) / (Km0940_158 * Km1198_158) / ((1 + s_0940 / Km0940_158) * (1 + s_1198 / Km1198_158) + (1 + s_0180 / Km0180_158) * (1 + s_0456 / Km0456_158) * (1 + s_1203 / Km1203_158) - 1)) + (cell * Vmax_159 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_159) / (Km0940_159 * Km1207_159) / ((1 + s_0940 / Km0940_159) * (1 + s_1207 / Km1207_159) + (1 + s_0180 / Km0180_159) * (1 + s_0456 / Km0456_159) * (1 + s_1212 / Km1212_159) - 1)) + (cell * Vmax_180 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_180) / (Km0018_180 * Km0434_180) / ((1 + s_0018 / Km0018_180) * (1 + s_0434 / Km0434_180) + (1 + s_0394 / Km0394_180) * (1 + s_0456 / Km0456_180) * (1 + s_0943 / Km0943_180) * (1 + s_1322 / Km1322_180) - 1)) + (cell * Vmax_192 * (s_1270 - s_0456 * s_1545 / Keq_192) / Km1270_192 / (1 + s_1270 / Km1270_192 + (1 + s_0456 / Km0456_192) * (1 + s_1545 / Km1545_192) - 1)) + (cell * Vmax_198 * (s_1337 - s_0456 * s_1351 / Keq_198) / Km1337_198 / (1 + s_1337 / Km1337_198 + (1 + s_0456 / Km0456_198) * (1 + s_1351 / Km1351_198) - 1)) + (cell * Vmax_223 * (s_1377 - s_0456 * s_0951 / Keq_223) / Km1377_223 / (1 + s_1377 / Km1377_223 + (1 + s_0456 / Km0456_223) * (1 + s_0951 / Km0951_223) - 1)) + (cell * Vmax_224 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_224) / (Km1207_224 * Km1377_224) / ((1 + s_1207 / Km1207_224) * (1 + s_1377 / Km1377_224) + (1 + s_0204 / Km0204_224) * (1 + s_0456 / Km0456_224) * (1 + s_1212 / Km1212_224) - 1)) + (cell * Vmax_228 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_228) / (Km0529_228 * Km1198_228 * Km1399_228) / ((1 + s_0529 / Km0529_228) * (1 + s_1198 / Km1198_228) * (1 + s_1399 / Km1399_228) + (1 + s_0373 / Km0373_228) * (1 + s_0456 / Km0456_228) * (1 + s_1203 / Km1203_228) - 1)) + (cell * Vmax_242 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_242) / (Km1039_242 * Km1302_242) / ((1 + s_1039 / Km1039_242) * (1 + s_1302 / Km1302_242) + (1 + s_0231 / Km0231_242) * (1 + s_0456 / Km0456_242) * (1 + s_0529 / Km0529_242) - 1)) - (cell * Vmax_213 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_213) / (Km0300_213 * Km0456_213 * Km0434_213) / ((1 + s_0300 / Km0300_213) * (1 + s_0456 / Km0456_213) * (1 + s_0434 / Km0434_213) + (1 + s_1364 / Km1364_213) * (1 + s_0394 / Km0394_213) * (1 + s_1322 / Km1322_213) - 1)) - (cell * Vmax_274 * (s_0456 - s_0445 / Keq_274) / Km0456_274 / (1 + s_0456 / Km0456_274 + 1 + s_0445 / Km0445_274 - 1)) - (cell * Vmax_275 * s_0456 / Km0456_275 / (1 + s_0456 / Km0456_275));
    der(s_0458) = 0.0;
    der(s_0467) = (cell * Vmax_179 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_179) / (Km0028_179 * Km0539_179) / ((1 + s_0028 / Km0028_179) * (1 + s_0539 / Km0539_179) + (1 + s_0019 / Km0019_179) * (1 + s_0467 / Km0467_179) - 1)) - (cell * Vmax_185 * (s_0467 - s_0526 * s_1322 / Keq_185) / Km0467_185 / (1 + s_0467 / Km0467_185 + (1 + s_0526 / Km0526_185) * (1 + s_1322 / Km1322_185) - 1)) - (cell * Vmax_235 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_235) / (Km0467_235 * Km1616_235) / ((1 + s_0467 / Km0467_235) * (1 + s_1616 / Km1616_235) + (1 + s_0587 / Km0587_235) * (1 + s_1620 / Km1620_235) - 1));
    der(s_0471) = (cell * Vmax_67 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_67) / (Km0539_67 * Km1331_67) / ((1 + s_0539 / Km0539_67) * (1 + s_1331 / Km1331_67) + (1 + s_0471 / Km0471_67) * (1 + s_0633 / Km0633_67) - 1)) - (cell * Vmax_197 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_197) / (Km0471_197 * Km1153_197) / ((1 + s_0471 / Km0471_197) * (1 + s_1153 / Km1153_197) + (1 + s_0089 / Km0089_197) * (1 + s_0526 / Km0526_197) - 1)) - (cell * Vmax_199 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_199) / (Km0471_199 * Km1039_199) / ((1 + s_0471 / Km0471_199) * (1 + s_1039 / Km1039_199) + (1 + s_0526 / Km0526_199) * (1 + s_1337 / Km1337_199) - 1));
    der(s_0475) = (cell * Vmax_87 * (s_1084 * s_1445 - s_0475 / Keq_87) / (Km1084_87 * Km1445_87) / ((1 + s_1084 / Km1084_87) * (1 + s_1445 / Km1445_87) + 1 + s_0475 / Km0475_87 - 1)) - (cell * Vmax_68 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_68) / (Km0475_68 * Km1212_68 * Km1275_68) / ((1 + s_0475 / Km0475_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_0481 / Km0481_68) * (1 + s_1207 / Km1207_68) - 1));
    der(s_0481) = (cell * Vmax_68 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_68) / (Km0475_68 * Km1212_68 * Km1275_68) / ((1 + s_0475 / Km0475_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_0481 / Km0481_68) * (1 + s_1207 / Km1207_68) - 1)) + (cell * Vmax_221 * (s_1084 * s_1366 - s_0481 / Keq_221) / (Km1084_221 * Km1366_221) / ((1 + s_1084 / Km1084_221) * (1 + s_1366 / Km1366_221) + 1 + s_0481 / Km0481_221 - 1)) - (cell * Vmax_69 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_69) / (Km0481_69 * Km1212_69 * Km1275_69) / ((1 + s_0481 / Km0481_69) * (1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) + (1 + s_0493 / Km0493_69) * (1 + s_1207 / Km1207_69) - 1));
    der(s_0493) = (cell * Vmax_69 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_69) / (Km0481_69 * Km1212_69 * Km1275_69) / ((1 + s_0481 / Km0481_69) * (1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) + (1 + s_0493 / Km0493_69) * (1 + s_1207 / Km1207_69) - 1)) - (cell * Vmax_70 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_70) / (Km0493_70 * Km1212_70 * Km1275_70) / ((1 + s_0493 / Km0493_70) * (1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) + (1 + s_0499 / Km0499_70) * (1 + s_1207 / Km1207_70) - 1));
    der(s_0499) = (cell * Vmax_70 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_70) / (Km0493_70 * Km1212_70 * Km1275_70) / ((1 + s_0493 / Km0493_70) * (1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) + (1 + s_0499 / Km0499_70) * (1 + s_1207 / Km1207_70) - 1)) - (cell * Vmax_157 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_157) / (Km0089_157 * Km0499_157) / ((1 + s_0089 / Km0089_157) * (1 + s_0499 / Km0499_157) + (1 + s_0619 / Km0619_157) * (1 + s_0918 / Km0918_157) - 1));
    der(s_0515) = (cell * Vmax_72 * (s_0324 - s_0515 * s_1322 / Keq_72) / Km0324_72 / (1 + s_0324 / Km0324_72 + (1 + s_0515 / Km0515_72) * (1 + s_1322 / Km1322_72) - 1)) - (cell * Vmax_41 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_41) / (Km0515_41 * Km0999_41) / ((1 + s_0515 / Km0515_41) * (1 + s_0999 / Km0999_41) + (1 + s_0427 / Km0427_41) * (1 + s_0991 / Km0991_41) * (1 + s_1399 / Km1399_41) - 1)) - (cell * Vmax_71 * (s_0515 - s_1377 / Keq_71) / Km0515_71 / (1 + s_0515 / Km0515_71 + 1 + s_1377 / Km1377_71 - 1));
    der(s_0516) = (cell * Vmax_75 * (s_0522 - s_0516 / Keq_75) / Km0522_75 / (1 + s_0522 / Km0522_75 + 1 + s_0516 / Km0516_75 - 1)) - (cell * Vmax_73 * (s_0516 - s_0940 / Keq_73) / Km0516_73 / (1 + s_0516 / Km0516_73 + 1 + s_0940 / Km0940_73 - 1));
    der(s_0522) = (cell * Vmax_74 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_74) / (Km0373_74 * Km1271_74) / ((1 + s_0373 / Km0373_74) * (1 + s_1271 / Km1271_74) + (1 + s_0522 / Km0522_74) * (1 + s_0529 / Km0529_74) - 1)) - (cell * Vmax_75 * (s_0522 - s_0516 / Keq_75) / Km0522_75 / (1 + s_0522 / Km0522_75 + 1 + s_0516 / Km0516_75 - 1));
    der(s_0526) = (cell * Vmax_185 * (s_0467 - s_0526 * s_1322 / Keq_185) / Km0467_185 / (1 + s_0467 / Km0467_185 + (1 + s_0526 / Km0526_185) * (1 + s_1322 / Km1322_185) - 1)) + (cell * Vmax_197 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_197) / (Km0471_197 * Km1153_197) / ((1 + s_0471 / Km0471_197) * (1 + s_1153 / Km1153_197) + (1 + s_0089 / Km0089_197) * (1 + s_0526 / Km0526_197) - 1)) + (cell * Vmax_199 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_199) / (Km0471_199 * Km1039_199) / ((1 + s_0471 / Km0471_199) * (1 + s_1039 / Km1039_199) + (1 + s_0526 / Km0526_199) * (1 + s_1337 / Km1337_199) - 1)) - (0.0447 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0529) = (cell * Vmax_3 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_3) / (Km0082_3 * Km0380_3) / ((1 + s_0082 / Km0082_3) * (1 + s_0380 / Km0380_3) + (1 + s_0529 / Km0529_3) * (1 + s_1331 / Km1331_3) - 1)) + (cell * Vmax_11 * (s_0232 * s_0373 - s_0162 * s_0529 / Keq_11) / (Km0232_11 * Km0373_11) / ((1 + s_0232 / Km0232_11) * (1 + s_0373 / Km0373_11) + (1 + s_0162 / Km0162_11) * (1 + s_0529 / Km0529_11) - 1)) + (cell * Vmax_26 * (pow(s_0373, 2) - s_0367 * s_0529 / Keq_26) / pow(Km0373_26, 2) / (pow(1 + s_0373 / Km0373_26, 2) + (1 + s_0367 / Km0367_26) * (1 + s_0529 / Km0529_26) - 1)) + (cell * Vmax_74 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_74) / (Km0373_74 * Km1271_74) / ((1 + s_0373 / Km0373_74) * (1 + s_1271 / Km1271_74) + (1 + s_0522 / Km0522_74) * (1 + s_0529 / Km0529_74) - 1)) + (cell * Vmax_97 * (s_0595 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_97) / (Km0595_97 * Km1101_97 * pow(Km1212_97, 2)) / ((1 + s_0595 / Km0595_97) * (1 + s_1101 / Km1101_97) * pow(1 + s_1212 / Km1212_97, 2) + (1 + s_0456 / Km0456_97) * (1 + s_0529 / Km0529_97) * (1 + s_1065 / Km1065_97) * pow(1 + s_1207 / Km1207_97, 2) - 1)) + (cell * Vmax_98 * (s_1065 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_98) / (Km1065_98 * Km1101_98 * pow(Km1212_98, 2)) / ((1 + s_1065 / Km1065_98) * (1 + s_1101 / Km1101_98) * pow(1 + s_1212 / Km1212_98, 2) + (1 + s_0456 / Km0456_98) * (1 + s_0529 / Km0529_98) * (1 + s_1161 / Km1161_98) * pow(1 + s_1207 / Km1207_98, 2) - 1)) + (cell * Vmax_99 * (s_1101 * s_1161 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_99) / (Km1101_99 * Km1161_99 * pow(Km1212_99, 2)) / ((1 + s_1101 / Km1101_99) * (1 + s_1161 / Km1161_99) * pow(1 + s_1212 / Km1212_99, 2) + (1 + s_0456 / Km0456_99) * (1 + s_0529 / Km0529_99) * pow(1 + s_1207 / Km1207_99, 2) * (1 + s_1286 / Km1286_99) - 1)) + (cell * Vmax_100 * (s_1101 * pow(s_1212, 2) * s_1286 - s_0456 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_100) / (Km1101_100 * pow(Km1212_100, 2) * Km1286_100) / ((1 + s_1101 / Km1101_100) * pow(1 + s_1212 / Km1212_100, 2) * (1 + s_1286 / Km1286_100) + (1 + s_0456 / Km0456_100) * (1 + s_0529 / Km0529_100) * pow(1 + s_1207 / Km1207_100, 2) * (1 + s_1449 / Km1449_100) - 1)) + (3.0 * cell * Vmax_101 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(s_0456, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_101) / (pow(Km1101_101, 3) * pow(Km1212_101, 6) * Km1449_101) / (pow(1 + s_1101 / Km1101_101, 3) * pow(1 + s_1212 / Km1212_101, 6) * (1 + s_1449 / Km1449_101) + pow(1 + s_0456 / Km0456_101, 3) * pow(1 + s_0529 / Km0529_101, 3) * (1 + s_1084 / Km1084_101) * pow(1 + s_1207 / Km1207_101, 6) - 1)) + (cell * Vmax_102 * (s_1101 * pow(s_1212, 2) * s_1255 - s_0456 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_102) / (Km1101_102 * pow(Km1212_102, 2) * Km1255_102) / ((1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) * (1 + s_1255 / Km1255_102) + (1 + s_0456 / Km0456_102) * (1 + s_0529 / Km0529_102) * (1 + s_0602 / Km0602_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) + (3.0 * cell * Vmax_103 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(s_0456, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_103) / (Km0373_103 * pow(Km1101_103, 3) * pow(Km1212_103, 6)) / ((1 + s_0373 / Km0373_103) * pow(1 + s_1101 / Km1101_103, 3) * pow(1 + s_1212 / Km1212_103, 6) + pow(1 + s_0456 / Km0456_103, 3) * pow(1 + s_0529 / Km0529_103, 3) * pow(1 + s_1207 / Km1207_103, 6) * (1 + s_1255 / Km1255_103) - 1)) + (cell * Vmax_104 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_104) / (Km0423_104 * Km0602_104 * Km0633_104) / ((1 + s_0423 / Km0423_104) * (1 + s_0602 / Km0602_104) * (1 + s_0633 / Km0633_104) + (1 + s_0434 / Km0434_104) * (1 + s_0529 / Km0529_104) * (1 + s_0595 / Km0595_104) - 1)) + (cell * Vmax_105 * (s_0423 * s_0633 * s_1073 - s_0434 * s_0529 * s_1065 / Keq_105) / (Km0423_105 * Km0633_105 * Km1073_105) / ((1 + s_0423 / Km0423_105) * (1 + s_0633 / Km0633_105) * (1 + s_1073 / Km1073_105) + (1 + s_0434 / Km0434_105) * (1 + s_0529 / Km0529_105) * (1 + s_1065 / Km1065_105) - 1)) + (cell * Vmax_106 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_106) / (Km0423_106 * Km0633_106 * Km1454_106) / ((1 + s_0423 / Km0423_106) * (1 + s_0633 / Km0633_106) * (1 + s_1454 / Km1454_106) + (1 + s_0434 / Km0434_106) * (1 + s_0529 / Km0529_106) * (1 + s_1449 / Km1449_106) - 1)) + (cell * Vmax_107 * (s_0602 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_107) / (Km0602_107 * Km1101_107 * pow(Km1212_107, 2)) / ((1 + s_0602 / Km0602_107) * (1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) + (1 + s_0456 / Km0456_107) * (1 + s_0529 / Km0529_107) * (1 + s_1073 / Km1073_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) + (cell * Vmax_108 * (s_1073 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_108) / (Km1073_108 * Km1101_108 * pow(Km1212_108, 2)) / ((1 + s_1073 / Km1073_108) * (1 + s_1101 / Km1101_108) * pow(1 + s_1212 / Km1212_108, 2) + (1 + s_0456 / Km0456_108) * (1 + s_0529 / Km0529_108) * (1 + s_1176 / Km1176_108) * pow(1 + s_1207 / Km1207_108, 2) - 1)) + (cell * Vmax_109 * (s_1101 * s_1176 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_109) / (Km1101_109 * Km1176_109 * pow(Km1212_109, 2)) / ((1 + s_1101 / Km1101_109) * (1 + s_1176 / Km1176_109) * pow(1 + s_1212 / Km1212_109, 2) + (1 + s_0456 / Km0456_109) * (1 + s_0529 / Km0529_109) * pow(1 + s_1207 / Km1207_109, 2) * (1 + s_1302 / Km1302_109) - 1)) + (cell * Vmax_110 * (s_1101 * pow(s_1212, 2) * s_1302 - s_0456 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_110) / (Km1101_110 * pow(Km1212_110, 2) * Km1302_110) / ((1 + s_1101 / Km1101_110) * pow(1 + s_1212 / Km1212_110, 2) * (1 + s_1302 / Km1302_110) + (1 + s_0456 / Km0456_110) * (1 + s_0529 / Km0529_110) * pow(1 + s_1207 / Km1207_110, 2) * (1 + s_1454 / Km1454_110) - 1)) + (cell * Vmax_127 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_127) / (Km0380_127 * Km0767_127) / ((1 + s_0380 / Km0380_127) * (1 + s_0767 / Km0767_127) + (1 + s_0082 / Km0082_127) * (1 + s_0529 / Km0529_127) - 1)) + (cell * Vmax_143 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_143) / (Km0180_143 * Km0373_143) / ((1 + s_0180 / Km0180_143) * (1 + s_0373 / Km0373_143) + (1 + s_0529 / Km0529_143) * (1 + s_0835 / Km0835_143) - 1)) + (cell * Vmax_147 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_147) / (Km0373_147 * Km1014_147) / ((1 + s_0373 / Km0373_147) * (1 + s_1014 / Km1014_147) + (1 + s_0529 / Km0529_147) * (1 + s_1233 / Km1233_147) - 1)) + (cell * Vmax_149 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_149) / (Km0218_149 * pow(Km1212_149, 2)) / ((1 + s_0218 / Km0218_149) * pow(1 + s_1212 / Km1212_149, 2) + (1 + s_0028 / Km0028_149) * (1 + s_0529 / Km0529_149) * pow(1 + s_1207 / Km1207_149, 2) - 1)) + (cell * Vmax_150 * (s_0367 * s_0373 - s_0218 * s_0529 / Keq_150) / (Km0367_150 * Km0373_150) / ((1 + s_0367 / Km0367_150) * (1 + s_0373 / Km0373_150) + (1 + s_0218 / Km0218_150) * (1 + s_0529 / Km0529_150) - 1)) + (cell * Vmax_242 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_242) / (Km1039_242 * Km1302_242) / ((1 + s_1039 / Km1039_242) * (1 + s_1302 / Km1302_242) + (1 + s_0231 / Km0231_242) * (1 + s_0456 / Km0456_242) * (1 + s_0529 / Km0529_242) - 1)) - (cell * Vmax_28 * (s_0362 * s_0529 - s_0373 / Keq_28) / (Km0362_28 * Km0529_28) / ((1 + s_0362 / Km0362_28) * (1 + s_0529 / Km0529_28) + 1 + s_0373 / Km0373_28 - 1)) - (cell * Vmax_84 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_84) / (Km0529_84 * Km1524_84) / ((1 + s_0529 / Km0529_84) * (1 + s_1524 / Km1524_84) + (1 + s_0380 / Km0380_84) * (1 + s_0619 / Km0619_84) - 1)) - (cell * Vmax_228 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_228) / (Km0529_228 * Km1198_228 * Km1399_228) / ((1 + s_0529 / Km0529_228) * (1 + s_1198 / Km1198_228) * (1 + s_1399 / Km1399_228) + (1 + s_0373 / Km0373_228) * (1 + s_0456 / Km0456_228) * (1 + s_1203 / Km1203_228) - 1));
    der(s_0539) = (cell * Vmax_76 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_76) / (Km0419_76 * Km0434_76 * Km1559_76) / ((1 + s_0419 / Km0419_76) * (1 + s_0434 / Km0434_76) * (1 + s_1559 / Km1559_76) + (1 + s_0394 / Km0394_76) * (1 + s_0539 / Km0539_76) * (1 + s_1322 / Km1322_76) - 1)) - (cell * Vmax_67 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_67) / (Km0539_67 * Km1331_67) / ((1 + s_0539 / Km0539_67) * (1 + s_1331 / Km1331_67) + (1 + s_0471 / Km0471_67) * (1 + s_0633 / Km0633_67) - 1)) - (cell * Vmax_179 * (s_0028 * s_0539 - s_0019 * s_0467 / Keq_179) / (Km0028_179 * Km0539_179) / ((1 + s_0028 / Km0028_179) * (1 + s_0539 / Km0539_179) + (1 + s_0019 / Km0019_179) * (1 + s_0467 / Km0467_179) - 1));
    der(s_0542) = (cell * Vmax_80 * (s_0434 * s_0981 * s_1589 - s_0423 * s_0542 * s_0633 / Keq_80) / (Km0434_80 * Km0981_80 * Km1589_80) / ((1 + s_0434 / Km0434_80) * (1 + s_0981 / Km0981_80) * (1 + s_1589 / Km1589_80) + (1 + s_0423 / Km0423_80) * (1 + s_0542 / Km0542_80) * (1 + s_0633 / Km0633_80) - 1)) - (0.0066 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0550) = (cell * Vmax_151 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_151) / (Km0312_151 * Km0999_151) / ((1 + s_0312 / Km0312_151) * (1 + s_0999 / Km0999_151) + (1 + s_0403 / Km0403_151) * (1 + s_0550 / Km0550_151) * (1 + s_0991 / Km0991_151) - 1)) - (cell * Vmax_152 * (s_0550 - s_0207 / Keq_152) / Km0550_152 / (1 + s_0550 / Km0550_152 + 1 + s_0207 / Km0207_152 - 1));
    der(s_0551) = (cell * Vmax_258 * (s_0557 * s_0764 - s_0551 * s_0581 / Keq_258) / (Km0557_258 * Km0764_258) / ((1 + s_0557 / Km0557_258) * (1 + s_0764 / Km0764_258) + (1 + s_0551 / Km0551_258) * (1 + s_0581 / Km0581_258) - 1)) - (cell * Vmax_9 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_9) / (Km0551_9 * Km1360_9) / ((1 + s_0551 / Km0551_9) * (1 + s_1360 / Km1360_9) + (1 + s_0349 / Km0349_9) * (1 + s_1322 / Km1322_9) - 1)) - (cell * Vmax_256 * (s_0551 * s_0557 - s_0764 * s_1427 / Keq_256) / (Km0551_256 * Km0557_256) / ((1 + s_0551 / Km0551_256) * (1 + s_0557 / Km0557_256) + (1 + s_0764 / Km0764_256) * (1 + s_1427 / Km1427_256) - 1));
    der(s_0555) = (cell * Vmax_201 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_201) / (Km0434_201 * Km0557_201) / ((1 + s_0434 / Km0434_201) * (1 + s_0557 / Km0557_201) + (1 + s_0394 / Km0394_201) * (1 + s_0555 / Km0555_201) - 1)) - (cell * Vmax_114 * (s_0555 - s_0629 * s_0764 / Keq_114) / Km0555_114 / (1 + s_0555 / Km0555_114 + (1 + s_0629 / Km0629_114) * (1 + s_0764 / Km0764_114) - 1));
    der(s_0557) = (cell * Vmax_117 * (s_0568 - s_0557 / Keq_117) / Km0568_117 / (1 + s_0568 / Km0568_117 + 1 + s_0557 / Km0557_117 - 1)) - (cell * Vmax_172 * (s_0557 - s_0574 / Keq_172) / Km0557_172 / (1 + s_0557 / Km0557_172 + 1 + s_0574 / Km0574_172 - 1)) - (cell * Vmax_201 * (s_0434 * s_0557 - s_0394 * s_0555 / Keq_201) / (Km0434_201 * Km0557_201) / ((1 + s_0434 / Km0434_201) * (1 + s_0557 / Km0557_201) + (1 + s_0394 / Km0394_201) * (1 + s_0555 / Km0555_201) - 1)) - (cell * Vmax_256 * (s_0551 * s_0557 - s_0764 * s_1427 / Keq_256) / (Km0551_256 * Km0557_256) / ((1 + s_0551 / Km0551_256) * (1 + s_0557 / Km0557_256) + (1 + s_0764 / Km0764_256) * (1 + s_1427 / Km1427_256) - 1)) - (cell * Vmax_258 * (s_0557 * s_0764 - s_0551 * s_0581 / Keq_258) / (Km0557_258 * Km0764_258) / ((1 + s_0557 / Km0557_258) * (1 + s_0764 / Km0764_258) + (1 + s_0551 / Km0551_258) * (1 + s_0581 / Km0581_258) - 1));
    der(s_0563) = (cell * Vmax_271 * (s_0565 - s_0563) / Km0565_271 / (1 + s_0565 / Km0565_271 + 1 + s_0563 / Km0563_271 - 1)) - (cell * Vmax_137 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_137) / (Km0434_137 * Km0563_137) / ((1 + s_0434 / Km0434_137) * (1 + s_0563 / Km0563_137) + (1 + s_0394 / Km0394_137) * (1 + s_0568 / Km0568_137) - 1));
    der(s_0565) = 0.0;
    der(s_0567) = (cell * Vmax_202 * (s_0568 - s_0567 / Keq_202) / Km0568_202 / (1 + s_0568 / Km0568_202 + 1 + s_0567 / Km0567_202 - 1)) - (cell * Vmax_267 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_267) / (Km0567_267 * Km1559_267) / ((1 + s_0567 / Km0567_267) * (1 + s_1559 / Km1559_267) + (1 + s_0633 / Km0633_267) * (1 + s_1543 / Km1543_267) - 1));
    der(s_0568) = (cell * Vmax_137 * (s_0434 * s_0563 - s_0394 * s_0568 / Keq_137) / (Km0434_137 * Km0563_137) / ((1 + s_0434 / Km0434_137) * (1 + s_0563 / Km0563_137) + (1 + s_0394 / Km0394_137) * (1 + s_0568 / Km0568_137) - 1)) - (cell * Vmax_39 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_39) / (Km0568_39 * Km1543_39) / ((1 + s_0568 / Km0568_39) * (1 + s_1543 / Km1543_39) + (1 + s_0409 / Km0409_39) * (1 + s_1538 / Km1538_39) - 1)) - (cell * Vmax_117 * (s_0568 - s_0557 / Keq_117) / Km0568_117 / (1 + s_0568 / Km0568_117 + 1 + s_0557 / Km0557_117 - 1)) - (cell * Vmax_182 * (s_0568 - s_0126 / Keq_182) / Km0568_182 / (1 + s_0568 / Km0568_182 + 1 + s_0126 / Km0126_182 - 1)) - (cell * Vmax_202 * (s_0568 - s_0567 / Keq_202) / Km0568_202 / (1 + s_0568 / Km0568_202 + 1 + s_0567 / Km0567_202 - 1));
    der(s_0573) = (cell * Vmax_208 * (s_0574 - s_0573 / Keq_208) / Km0574_208 / (1 + s_0574 / Km0574_208 + 1 + s_0573 / Km0573_208 - 1)) - (cell * Vmax_171 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_171) / (Km0573_171 * Km0785_171) / ((1 + s_0573 / Km0573_171) * (1 + s_0785 / Km0785_171) + (1 + s_0633 / Km0633_171) * (1 + s_0743 / Km0743_171) - 1));
    der(s_0574) = (cell * Vmax_172 * (s_0557 - s_0574 / Keq_172) / Km0557_172 / (1 + s_0557 / Km0557_172 + 1 + s_0574 / Km0574_172 - 1)) - (cell * Vmax_208 * (s_0574 - s_0573 / Keq_208) / Km0574_208 / (1 + s_0574 / Km0574_208 + 1 + s_0573 / Km0573_208 - 1));
    der(s_0577) = (cell * Vmax_238 * (s_0581 - s_0577 / Keq_238) / Km0581_238 / (1 + s_0581 / Km0581_238 + 1 + s_0577 / Km0577_238 - 1)) - (cell * Vmax_15 * (s_0577 - s_0158 * s_0722 / Keq_15) / Km0577_15 / (1 + s_0577 / Km0577_15 + (1 + s_0158 / Km0158_15) * (1 + s_0722 / Km0722_15) - 1)) - (cell * Vmax_237 * (s_0577 - s_1408 / Keq_237) / Km0577_237 / (1 + s_0577 / Km0577_237 + 1 + s_1408 / Km1408_237 - 1));
    der(s_0581) = (cell * Vmax_257 * (s_0764 * s_1427 - s_0581 * s_1408 / Keq_257) / (Km0764_257 * Km1427_257) / ((1 + s_0764 / Km0764_257) * (1 + s_1427 / Km1427_257) + (1 + s_0581 / Km0581_257) * (1 + s_1408 / Km1408_257) - 1)) + (cell * Vmax_258 * (s_0557 * s_0764 - s_0551 * s_0581 / Keq_258) / (Km0557_258 * Km0764_258) / ((1 + s_0557 / Km0557_258) * (1 + s_0764 / Km0764_258) + (1 + s_0551 / Km0551_258) * (1 + s_0581 / Km0581_258) - 1)) - (cell * Vmax_238 * (s_0581 - s_0577 / Keq_238) / Km0581_238 / (1 + s_0581 / Km0581_238 + 1 + s_0577 / Km0577_238 - 1));
    der(s_0582) = (cell * Vmax_136 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_136) / (Km0586_136 * Km0782_136) / ((1 + s_0586 / Km0586_136) * (1 + s_0782 / Km0782_136) + (1 + s_0582 / Km0582_136) * (1 + s_0739 / Km0739_136) - 1)) + (cell * Vmax_234 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_234) / (Km0394_234 * Km1616_234) / ((1 + s_0394 / Km0394_234) * (1 + s_1616 / Km1616_234) + (1 + s_0582 / Km0582_234) * (1 + s_1620 / Km1620_234) - 1)) - (cell * Vmax_277 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_277) / (Km0394_277 * Km0582_277) / ((1 + s_0394 / Km0394_277) * (1 + s_0582 / Km0582_277) + (1 + s_0434 / Km0434_277) * (1 + s_0584 / Km0584_277) - 1));
    der(s_0584) = (cell * Vmax_277 * (s_0394 * s_0582 - s_0434 * s_0584 / Keq_277) / (Km0394_277 * Km0582_277) / ((1 + s_0394 / Km0394_277) * (1 + s_0582 / Km0582_277) + (1 + s_0434 / Km0434_277) * (1 + s_0584 / Km0584_277) - 1)) - (0.0036 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0586) = (cell * Vmax_232 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_232) / (Km0434_232 * Km1616_232) / ((1 + s_0434 / Km0434_232) * (1 + s_1616 / Km1616_232) + (1 + s_0586 / Km0586_232) * (1 + s_1620 / Km1620_232) - 1)) - (cell * Vmax_136 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_136) / (Km0586_136 * Km0782_136) / ((1 + s_0586 / Km0586_136) * (1 + s_0782 / Km0782_136) + (1 + s_0582 / Km0582_136) * (1 + s_0739 / Km0739_136) - 1));
    der(s_0587) = (cell * Vmax_235 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_235) / (Km0467_235 * Km1616_235) / ((1 + s_0467 / Km0467_235) * (1 + s_1616 / Km1616_235) + (1 + s_0587 / Km0587_235) * (1 + s_1620 / Km1620_235) - 1)) - (cell * Vmax_276 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_276) / (Km0394_276 * Km0587_276) / ((1 + s_0394 / Km0394_276) * (1 + s_0587 / Km0587_276) + (1 + s_0434 / Km0434_276) * (1 + s_0589 / Km0589_276) - 1));
    der(s_0589) = (cell * Vmax_276 * (s_0394 * s_0587 - s_0434 * s_0589 / Keq_276) / (Km0394_276 * Km0587_276) / ((1 + s_0394 / Km0394_276) * (1 + s_0587 / Km0587_276) + (1 + s_0434 / Km0434_276) * (1 + s_0589 / Km0589_276) - 1)) - (cell * Vmax_82 * (s_0589 - s_0419 * s_0654 / Keq_82) / Km0589_82 / (1 + s_0589 / Km0589_82 + (1 + s_0419 / Km0419_82) * (1 + s_0654 / Km0654_82) - 1)) - (0.0024 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0595) = (cell * Vmax_104 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_104) / (Km0423_104 * Km0602_104 * Km0633_104) / ((1 + s_0423 / Km0423_104) * (1 + s_0602 / Km0602_104) * (1 + s_0633 / Km0633_104) + (1 + s_0434 / Km0434_104) * (1 + s_0529 / Km0529_104) * (1 + s_0595 / Km0595_104) - 1)) - (cell * Vmax_97 * (s_0595 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_97) / (Km0595_97 * Km1101_97 * pow(Km1212_97, 2)) / ((1 + s_0595 / Km0595_97) * (1 + s_1101 / Km1101_97) * pow(1 + s_1212 / Km1212_97, 2) + (1 + s_0456 / Km0456_97) * (1 + s_0529 / Km0529_97) * (1 + s_1065 / Km1065_97) * pow(1 + s_1207 / Km1207_97, 2) - 1));
    der(s_0602) = (cell * Vmax_102 * (s_1101 * pow(s_1212, 2) * s_1255 - s_0456 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_102) / (Km1101_102 * pow(Km1212_102, 2) * Km1255_102) / ((1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) * (1 + s_1255 / Km1255_102) + (1 + s_0456 / Km0456_102) * (1 + s_0529 / Km0529_102) * (1 + s_0602 / Km0602_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) - (cell * Vmax_104 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_104) / (Km0423_104 * Km0602_104 * Km0633_104) / ((1 + s_0423 / Km0423_104) * (1 + s_0602 / Km0602_104) * (1 + s_0633 / Km0633_104) + (1 + s_0434 / Km0434_104) * (1 + s_0529 / Km0529_104) * (1 + s_0595 / Km0595_104) - 1)) - (cell * Vmax_107 * (s_0602 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_107) / (Km0602_107 * Km1101_107 * pow(Km1212_107, 2)) / ((1 + s_0602 / Km0602_107) * (1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) + (1 + s_0456 / Km0456_107) * (1 + s_0529 / Km0529_107) * (1 + s_1073 / Km1073_107) * pow(1 + s_1207 / Km1207_107, 2) - 1));
    der(s_0613) = (cell * Vmax_236 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_236) / (Km0739_236 * Km1616_236) / ((1 + s_0739 / Km0739_236) * (1 + s_1616 / Km1616_236) + (1 + s_0613 / Km0613_236) * (1 + s_1620 / Km1620_236) - 1)) - (cell * Vmax_83 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_83) / (Km0394_83 * Km0613_83) / ((1 + s_0394 / Km0394_83) * (1 + s_0613 / Km0613_83) + (1 + s_0434 / Km0434_83) * (1 + s_0615 / Km0615_83) - 1));
    der(s_0615) = (cell * Vmax_83 * (s_0394 * s_0613 - s_0434 * s_0615 / Keq_83) / (Km0394_83 * Km0613_83) / ((1 + s_0394 / Km0394_83) * (1 + s_0613 / Km0613_83) + (1 + s_0434 / Km0434_83) * (1 + s_0615 / Km0615_83) - 1)) - (0.0024 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0619) = (cell * Vmax_84 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_84) / (Km0529_84 * Km1524_84) / ((1 + s_0529 / Km0529_84) * (1 + s_1524 / Km1524_84) + (1 + s_0380 / Km0380_84) * (1 + s_0619 / Km0619_84) - 1)) + (cell * Vmax_85 * (s_1331 - s_0619 * s_1322 / Keq_85) / Km1331_85 / (1 + s_1331 / Km1331_85 + (1 + s_0619 / Km0619_85) * (1 + s_1322 / Km1322_85) - 1)) + (cell * Vmax_157 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_157) / (Km0089_157 * Km0499_157) / ((1 + s_0089 / Km0089_157) * (1 + s_0499 / Km0499_157) + (1 + s_0619 / Km0619_157) * (1 + s_0918 / Km0918_157) - 1)) - (cell * Vmax_260 * (s_0619 * s_0056 - s_1524 / Keq_260) / (Km0619_260 * Km0056_260) / ((1 + s_0619 / Km0619_260) * (1 + s_0056 / Km0056_260) + 1 + s_1524 / Km1524_260 - 1));
    der(s_0625) = (cell * Vmax_255 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_255) / (Km0306_255 * Km0654_255) / ((1 + s_0306 / Km0306_255) * (1 + s_0654 / Km0654_255) + (1 + s_0625 / Km0625_255) * (1 + s_0649 / Km0649_255) - 1)) - (cell * Vmax_88 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_88) / (Km0625_88 * Km1212_88) / ((1 + s_0625 / Km0625_88) * (1 + s_1212 / Km1212_88) + (1 + s_1207 / Km1207_88) * (1 + s_1487 / Km1487_88) - 1));
    der(s_0629) = (cell * Vmax_114 * (s_0555 - s_0629 * s_0764 / Keq_114) / Km0555_114 / (1 + s_0555 / Km0555_114 + (1 + s_0629 / Km0629_114) * (1 + s_0764 / Km0764_114) - 1)) - (cell * Vmax_126 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_126) / (Km0629_126 * Km1203_126) / ((1 + s_0629 / Km0629_126) * (1 + s_1203 / Km1203_126) + (1 + s_0767 / Km0767_126) * (1 + s_1198 / Km1198_126) - 1)) - (cell * Vmax_261 * (s_0629 - s_0764 / Keq_261) / Km0629_261 / (1 + s_0629 / Km0629_261 + 1 + s_0764 / Km0764_261 - 1));
    der(s_0633) = (cell * Vmax_38 * (s_0434 * s_0955 * s_1582 - s_0404 * s_0423 * s_0633 / Keq_38) / (Km0434_38 * Km0955_38 * Km1582_38) / ((1 + s_0434 / Km0434_38) * (1 + s_0955 / Km0955_38) * (1 + s_1582 / Km1582_38) + (1 + s_0404 / Km0404_38) * (1 + s_0423 / Km0423_38) * (1 + s_0633 / Km0633_38) - 1)) + (cell * Vmax_40 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_40) / (Km0427_40 * Km1386_40) / ((1 + s_0427 / Km0427_40) * (1 + s_1386 / Km1386_40) + (1 + s_0633 / Km0633_40) * (1 + s_1187 / Km1187_40) - 1)) + (cell * Vmax_43 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_43) / (Km0434_43 * Km0973_43 * Km0979_43) / ((1 + s_0434 / Km0434_43) * (1 + s_0973 / Km0973_43) * (1 + s_0979 / Km0979_43) + (1 + s_0015 / Km0015_43) * (1 + s_0423 / Km0423_43) * (1 + s_0633 / Km0633_43) - 1)) + (cell * Vmax_44 * (s_0434 * s_0965 * s_1583 - s_0423 * s_0428 * s_0633 / Keq_44) / (Km0434_44 * Km0965_44 * Km1583_44) / ((1 + s_0434 / Km0434_44) * (1 + s_0965 / Km0965_44) * (1 + s_1583 / Km1583_44) + (1 + s_0423 / Km0423_44) * (1 + s_0428 / Km0428_44) * (1 + s_0633 / Km0633_44) - 1)) + (cell * Vmax_45 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_45) / (Km0434_45 * Km0973_45 * Km0999_45) / ((1 + s_0434 / Km0434_45) * (1 + s_0973 / Km0973_45) * (1 + s_0999 / Km0999_45) + (1 + s_0423 / Km0423_45) * (1 + s_0633 / Km0633_45) * (1 + s_0969 / Km0969_45) * (1 + s_0991 / Km0991_45) - 1)) + (cell * Vmax_46 * (s_0434 * s_0969 * s_1585 - s_0423 * s_0430 * s_0633 / Keq_46) / (Km0434_46 * Km0969_46 * Km1585_46) / ((1 + s_0434 / Km0434_46) * (1 + s_0969 / Km0969_46) * (1 + s_1585 / Km1585_46) + (1 + s_0423 / Km0423_46) * (1 + s_0430 / Km0430_46) * (1 + s_0633 / Km0633_46) - 1)) + (cell * Vmax_51 * (s_0434 * s_0973 * s_1587 - s_0423 * s_0432 * s_0633 / Keq_51) / (Km0434_51 * Km0973_51 * Km1587_51) / ((1 + s_0434 / Km0434_51) * (1 + s_0973 / Km0973_51) * (1 + s_1587 / Km1587_51) + (1 + s_0423 / Km0423_51) * (1 + s_0432 / Km0432_51) * (1 + s_0633 / Km0633_51) - 1)) + (cell * Vmax_52 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_52) / (Km0434_52 * Km1386_52) / ((1 + s_0434 / Km0434_52) * (1 + s_1386 / Km1386_52) + (1 + s_0326 / Km0326_52) * (1 + s_0633 / Km0633_52) - 1)) + (cell * Vmax_67 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_67) / (Km0539_67 * Km1331_67) / ((1 + s_0539 / Km0539_67) * (1 + s_1331 / Km1331_67) + (1 + s_0471 / Km0471_67) * (1 + s_0633 / Km0633_67) - 1)) + (cell * Vmax_80 * (s_0434 * s_0981 * s_1589 - s_0423 * s_0542 * s_0633 / Keq_80) / (Km0434_80 * Km0981_80 * Km1589_80) / ((1 + s_0434 / Km0434_80) * (1 + s_0981 / Km0981_80) * (1 + s_1589 / Km1589_80) + (1 + s_0423 / Km0423_80) * (1 + s_0542 / Km0542_80) * (1 + s_0633 / Km0633_80) - 1)) + (cell * Vmax_92 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_92) / (Km0943_92 * Km1376_92) / ((1 + s_0943 / Km0943_92) * (1 + s_1376 / Km1376_92) + (1 + s_0633 / Km0633_92) * (1 + s_0745 / Km0745_92) - 1)) + (cell * Vmax_95 * (s_0656 - s_0633 * s_0654 / Keq_95) / Km0656_95 / (1 + s_0656 / Km0656_95 + (1 + s_0633 / Km0633_95) * (1 + s_0654 / Km0654_95) - 1)) + (cell * Vmax_116 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_116) / (Km0745_116 * Km0943_116) / ((1 + s_0745 / Km0745_116) * (1 + s_0943 / Km0943_116) + (1 + s_0190 / Km0190_116) * (1 + s_0633 / Km0633_116) - 1)) + (cell * Vmax_121 * (s_0434 * s_0999 * s_1590 - s_0423 * s_0633 * s_0747 / Keq_121) / (Km0434_121 * Km0999_121 * Km1590_121) / ((1 + s_0434 / Km0434_121) * (1 + s_0999 / Km0999_121) * (1 + s_1590 / Km1590_121) + (1 + s_0423 / Km0423_121) * (1 + s_0633 / Km0633_121) * (1 + s_0747 / Km0747_121) - 1)) + (cell * Vmax_122 * (s_0434 * s_0991 * s_1591 - s_0423 * s_0633 * s_0748 / Keq_122) / (Km0434_122 * Km0991_122 * Km1591_122) / ((1 + s_0434 / Km0434_122) * (1 + s_0991 / Km0991_122) * (1 + s_1591 / Km1591_122) + (1 + s_0423 / Km0423_122) * (1 + s_0633 / Km0633_122) * (1 + s_0748 / Km0748_122) - 1)) + (cell * Vmax_132 * (s_0434 * s_1003 * s_1593 - s_0423 * s_0633 * s_0757 / Keq_132) / (Km0434_132 * Km1003_132 * Km1593_132) / ((1 + s_0434 / Km0434_132) * (1 + s_1003 / Km1003_132) * (1 + s_1593 / Km1593_132) + (1 + s_0423 / Km0423_132) * (1 + s_0633 / Km0633_132) * (1 + s_0757 / Km0757_132) - 1)) + (cell * Vmax_133 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_133) / (Km0434_133 * Km0999_133 * Km1565_133) / ((1 + s_0434 / Km0434_133) * (1 + s_0999 / Km0999_133) * (1 + s_1565 / Km1565_133) + (1 + s_0423 / Km0423_133) * (1 + s_0633 / Km0633_133) * (1 + s_0782 / Km0782_133) * (1 + s_0991 / Km0991_133) - 1)) + (cell * Vmax_134 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_134) / Km0785_134 / (1 + s_0785 / Km0785_134 + (1 + s_0141 / Km0141_134) * (1 + s_0633 / Km0633_134) * (1 + s_0722 / Km0722_134) - 1)) + (cell * Vmax_141 * (s_0434 * s_1006 * s_1594 - s_0423 * s_0633 * s_0832 / Keq_141) / (Km0434_141 * Km1006_141 * Km1594_141) / ((1 + s_0434 / Km0434_141) * (1 + s_1006 / Km1006_141) * (1 + s_1594 / Km1594_141) + (1 + s_0423 / Km0423_141) * (1 + s_0633 / Km0633_141) * (1 + s_0832 / Km0832_141) - 1)) + (cell * Vmax_161 * (s_0434 * s_1016 * s_1596 - s_0423 * s_0633 * s_0847 / Keq_161) / (Km0434_161 * Km1016_161 * Km1596_161) / ((1 + s_0434 / Km0434_161) * (1 + s_1016 / Km1016_161) * (1 + s_1596 / Km1596_161) + (1 + s_0423 / Km0423_161) * (1 + s_0633 / Km0633_161) * (1 + s_0847 / Km0847_161) - 1)) + (cell * Vmax_168 * (s_0434 * s_1021 * s_1598 - s_0423 * s_0633 * s_1077 / Keq_168) / (Km0434_168 * Km1021_168 * Km1598_168) / ((1 + s_0434 / Km0434_168) * (1 + s_1021 / Km1021_168) * (1 + s_1598 / Km1598_168) + (1 + s_0423 / Km0423_168) * (1 + s_0633 / Km0633_168) * (1 + s_1077 / Km1077_168) - 1)) + (cell * Vmax_169 * (s_0434 * s_1025 * s_1600 - s_0423 * s_0633 * s_1099 / Keq_169) / (Km0434_169 * Km1025_169 * Km1600_169) / ((1 + s_0434 / Km0434_169) * (1 + s_1025 / Km1025_169) * (1 + s_1600 / Km1600_169) + (1 + s_0423 / Km0423_169) * (1 + s_0633 / Km0633_169) * (1 + s_1099 / Km1099_169) - 1)) + (cell * Vmax_171 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_171) / (Km0573_171 * Km0785_171) / ((1 + s_0573 / Km0573_171) * (1 + s_0785 / Km0785_171) + (1 + s_0633 / Km0633_171) * (1 + s_0743 / Km0743_171) - 1)) + (cell * Vmax_174 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_174) / (Km0434_174 * Km1029_174) / ((1 + s_0434 / Km0434_174) * (1 + s_1029 / Km1029_174) + (1 + s_0633 / Km0633_174) * (1 + s_1322 / Km1322_174) * (1 + s_1416 / Km1416_174) - 1)) + (cell * Vmax_176 * (s_0434 * s_1029 * s_1602 - s_0423 * s_0633 * s_1148 / Keq_176) / (Km0434_176 * Km1029_176 * Km1602_176) / ((1 + s_0434 / Km0434_176) * (1 + s_1029 / Km1029_176) * (1 + s_1602 / Km1602_176) + (1 + s_0423 / Km0423_176) * (1 + s_0633 / Km0633_176) * (1 + s_1148 / Km1148_176) - 1)) + (cell * Vmax_191 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_191) / (Km1269_191 * Km1386_191) / ((1 + s_1269 / Km1269_191) * (1 + s_1386 / Km1386_191) + (1 + s_0633 / Km0633_191) * (1 + s_1270 / Km1270_191) - 1)) + (cell * Vmax_194 * (s_0434 * s_1032 * s_1604 - s_0423 * s_0633 * s_1314 / Keq_194) / (Km0434_194 * Km1032_194 * Km1604_194) / ((1 + s_0434 / Km0434_194) * (1 + s_1032 / Km1032_194) * (1 + s_1604 / Km1604_194) + (1 + s_0423 / Km0423_194) * (1 + s_0633 / Km0633_194) * (1 + s_1314 / Km1314_194) - 1)) + (cell * Vmax_212 * (s_0326 - s_0078 * s_0633 / Keq_212) / Km0326_212 / (1 + s_0326 / Km0326_212 + (1 + s_0078 / Km0078_212) * (1 + s_0633 / Km0633_212) - 1)) + (cell * Vmax_217 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_217) / (Km0999_217 * Km1386_217) / ((1 + s_0999 / Km0999_217) * (1 + s_1386 / Km1386_217) + (1 + s_0327 / Km0327_217) * (1 + s_0633 / Km0633_217) * (1 + s_0991 / Km0991_217) - 1)) + (cell * Vmax_225 * (s_0434 * s_1035 * s_1606 - s_0423 * s_0633 * s_1379 / Keq_225) / (Km0434_225 * Km1035_225 * Km1606_225) / ((1 + s_0434 / Km0434_225) * (1 + s_1035 / Km1035_225) * (1 + s_1606 / Km1606_225) + (1 + s_0423 / Km0423_225) * (1 + s_0633 / Km0633_225) * (1 + s_1379 / Km1379_225) - 1)) + (cell * Vmax_243 * (s_0434 * s_1039 * s_1607 - s_0423 * s_0633 * s_1428 / Keq_243) / (Km0434_243 * Km1039_243 * Km1607_243) / ((1 + s_0434 / Km0434_243) * (1 + s_1039 / Km1039_243) * (1 + s_1607 / Km1607_243) + (1 + s_0423 / Km0423_243) * (1 + s_0633 / Km0633_243) * (1 + s_1428 / Km1428_243) - 1)) + (2.0 * cell * Vmax_248 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_248) / (pow(Km0190_248, 2) * Km1212_248) / (pow(1 + s_0190 / Km0190_248, 2) * (1 + s_1212 / Km1212_248) + pow(1 + s_0633 / Km0633_248, 2) * (1 + s_1207 / Km1207_248) * (1 + s_1447 / Km1447_248) - 1)) + (cell * Vmax_254 * (s_0434 * s_1045 * s_1608 - s_0423 * s_0633 * s_1491 / Keq_254) / (Km0434_254 * Km1045_254 * Km1608_254) / ((1 + s_0434 / Km0434_254) * (1 + s_1045 / Km1045_254) * (1 + s_1608 / Km1608_254) + (1 + s_0423 / Km0423_254) * (1 + s_0633 / Km0633_254) * (1 + s_1491 / Km1491_254) - 1)) + (cell * Vmax_263 * (s_0434 * s_1048 * s_1610 - s_0423 * s_0633 * s_1527 / Keq_263) / (Km0434_263 * Km1048_263 * Km1610_263) / ((1 + s_0434 / Km0434_263) * (1 + s_1048 / Km1048_263) * (1 + s_1610 / Km1610_263) + (1 + s_0423 / Km0423_263) * (1 + s_0633 / Km0633_263) * (1 + s_1527 / Km1527_263) - 1)) + (cell * Vmax_265 * (s_0434 * s_1051 * s_1612 - s_0423 * s_0633 * s_1533 / Keq_265) / (Km0434_265 * Km1051_265 * Km1612_265) / ((1 + s_0434 / Km0434_265) * (1 + s_1051 / Km1051_265) * (1 + s_1612 / Km1612_265) + (1 + s_0423 / Km0423_265) * (1 + s_0633 / Km0633_265) * (1 + s_1533 / Km1533_265) - 1)) + (cell * Vmax_267 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_267) / (Km0567_267 * Km1559_267) / ((1 + s_0567 / Km0567_267) * (1 + s_1559 / Km1559_267) + (1 + s_0633 / Km0633_267) * (1 + s_1543 / Km1543_267) - 1)) + (cell * Vmax_269 * (s_0434 * s_1056 * s_1614 - s_0423 * s_0633 * s_1561 / Keq_269) / (Km0434_269 * Km1056_269 * Km1614_269) / ((1 + s_0434 / Km0434_269) * (1 + s_1056 / Km1056_269) * (1 + s_1614 / Km1614_269) + (1 + s_0423 / Km0423_269) * (1 + s_0633 / Km0633_269) * (1 + s_1561 / Km1561_269) - 1)) - (cell * Vmax_104 * (s_0423 * s_0602 * s_0633 - s_0434 * s_0529 * s_0595 / Keq_104) / (Km0423_104 * Km0602_104 * Km0633_104) / ((1 + s_0423 / Km0423_104) * (1 + s_0602 / Km0602_104) * (1 + s_0633 / Km0633_104) + (1 + s_0434 / Km0434_104) * (1 + s_0529 / Km0529_104) * (1 + s_0595 / Km0595_104) - 1)) - (cell * Vmax_105 * (s_0423 * s_0633 * s_1073 - s_0434 * s_0529 * s_1065 / Keq_105) / (Km0423_105 * Km0633_105 * Km1073_105) / ((1 + s_0423 / Km0423_105) * (1 + s_0633 / Km0633_105) * (1 + s_1073 / Km1073_105) + (1 + s_0434 / Km0434_105) * (1 + s_0529 / Km0529_105) * (1 + s_1065 / Km1065_105) - 1)) - (cell * Vmax_106 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_106) / (Km0423_106 * Km0633_106 * Km1454_106) / ((1 + s_0423 / Km0423_106) * (1 + s_0633 / Km0633_106) * (1 + s_1454 / Km1454_106) + (1 + s_0434 / Km0434_106) * (1 + s_0529 / Km0529_106) * (1 + s_1449 / Km1449_106) - 1)) - (cell * Vmax_155 * (s_0633 - pow(s_1322, 2) / Keq_155) / Km0633_155 / (1 + s_0633 / Km0633_155 + pow(1 + s_1322 / Km1322_155, 2) - 1));
    der(s_0644) = (cell * Vmax_93 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_93) / (Km0645_93 * Km0743_93) / ((1 + s_0645 / Km0645_93) * (1 + s_0743 / Km0743_93) + (1 + s_0644 / Km0644_93) * (1 + s_0739 / Km0739_93) - 1)) - (cell * Vmax_94 * (s_0644 - s_0645 * s_1107 / Keq_94) / Km0644_94 / (1 + s_0644 / Km0644_94 + (1 + s_0645 / Km0645_94) * (1 + s_1107 / Km1107_94) - 1));
    der(s_0645) = (cell * Vmax_94 * (s_0644 - s_0645 * s_1107 / Keq_94) / Km0644_94 / (1 + s_0644 / Km0644_94 + (1 + s_0645 / Km0645_94) * (1 + s_1107 / Km1107_94) - 1)) - (cell * Vmax_93 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_93) / (Km0645_93 * Km0743_93) / ((1 + s_0645 / Km0645_93) * (1 + s_0743 / Km0743_93) + (1 + s_0644 / Km0644_93) * (1 + s_0739 / Km0739_93) - 1));
    der(s_0649) = (cell * Vmax_255 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_255) / (Km0306_255 * Km0654_255) / ((1 + s_0306 / Km0306_255) * (1 + s_0654 / Km0654_255) + (1 + s_0625 / Km0625_255) * (1 + s_0649 / Km0649_255) - 1)) - (0.0036 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0654) = (cell * Vmax_82 * (s_0589 - s_0419 * s_0654 / Keq_82) / Km0589_82 / (1 + s_0589 / Km0589_82 + (1 + s_0419 / Km0419_82) * (1 + s_0654 / Km0654_82) - 1)) + (cell * Vmax_95 * (s_0656 - s_0633 * s_0654 / Keq_95) / Km0656_95 / (1 + s_0656 / Km0656_95 + (1 + s_0633 / Km0633_95) * (1 + s_0654 / Km0654_95) - 1)) - (cell * Vmax_255 * (s_0306 * s_0654 - s_0625 * s_0649 / Keq_255) / (Km0306_255 * Km0654_255) / ((1 + s_0306 / Km0306_255) * (1 + s_0654 / Km0654_255) + (1 + s_0625 / Km0625_255) * (1 + s_0649 / Km0649_255) - 1));
    der(s_0656) = (cell * Vmax_233 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_233) / (Km1559_233 * Km1616_233) / ((1 + s_1559 / Km1559_233) * (1 + s_1616 / Km1616_233) + (1 + s_0656 / Km0656_233) * (1 + s_1620 / Km1620_233) - 1)) - (cell * Vmax_95 * (s_0656 - s_0633 * s_0654 / Keq_95) / Km0656_95 / (1 + s_0656 / Km0656_95 + (1 + s_0633 / Km0633_95) * (1 + s_0654 / Km0654_95) - 1));
    der(s_0657) = (cell * Vmax_64 * (s_0700 - s_0657 / Keq_64) / Km0700_64 / (1 + s_0700 / Km0700_64 + 1 + s_0657 / Km0657_64 - 1)) - (cell * Vmax_63 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_63) / (Km0657_63 * Km1212_63 * Km1275_63) / ((1 + s_0657 / Km0657_63) * (1 + s_1212 / Km1212_63) * (1 + s_1275 / Km1275_63) + (1 + s_0664 / Km0664_63) * (1 + s_1207 / Km1207_63) - 1)) - (9.6e-05 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0662) = (cell * Vmax_54 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_54) / (Km0664_54 * Km1212_54 * Km1275_54) / ((1 + s_0664 / Km0664_54) * (1 + s_1212 / Km1212_54) * (1 + s_1275 / Km1275_54) + (1 + s_0662 / Km0662_54) * (1 + s_1207 / Km1207_54) - 1)) - (cell * Vmax_65 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_65) / (Km0662_65 * Km1212_65) / ((1 + s_0662 / Km0662_65) * (1 + s_1212 / Km1212_65) + (1 + s_0666 / Km0666_65) * (1 + s_1207 / Km1207_65) - 1)) - (0.000125 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0664) = (cell * Vmax_63 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_63) / (Km0657_63 * Km1212_63 * Km1275_63) / ((1 + s_0657 / Km0657_63) * (1 + s_1212 / Km1212_63) * (1 + s_1275 / Km1275_63) + (1 + s_0664 / Km0664_63) * (1 + s_1207 / Km1207_63) - 1)) - (cell * Vmax_54 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_54) / (Km0664_54 * Km1212_54 * Km1275_54) / ((1 + s_0664 / Km0664_54) * (1 + s_1212 / Km1212_54) * (1 + s_1275 / Km1275_54) + (1 + s_0662 / Km0662_54) * (1 + s_1207 / Km1207_54) - 1));
    der(s_0666) = (cell * Vmax_65 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_65) / (Km0662_65 * Km1212_65) / ((1 + s_0662 / Km0662_65) * (1 + s_1212 / Km1212_65) + (1 + s_0666 / Km0666_65) * (1 + s_1207 / Km1207_65) - 1)) - (cell * Vmax_249 * (s_0666 * pow(s_0056, 3) - s_0672 / Keq_249) / (Km0666_249 * pow(Km0056_249, 3)) / ((1 + s_0666 / Km0666_249) * pow(1 + s_0056 / Km0056_249, 3) + 1 + s_0672 / Km0672_249 - 1)) - (0.0056 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0672) = (cell * Vmax_249 * (s_0666 * pow(s_0056, 3) - s_0672 / Keq_249) / (Km0666_249 * pow(Km0056_249, 3)) / ((1 + s_0666 / Km0666_249) * pow(1 + s_0056 / Km0056_249, 3) + 1 + s_0672 / Km0672_249 - 1)) - (0.000812 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0700) = (cell * Vmax_239 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_239) / (Km1416_239 * Km1569_239) / ((1 + s_1416 / Km1416_239) * (1 + s_1569 / Km1569_239) + (1 + s_0700 / Km0700_239) * (1 + s_1413 / Km1413_239) - 1)) - (cell * Vmax_64 * (s_0700 - s_0657 / Keq_64) / Km0700_64 / (1 + s_0700 / Km0700_64 + 1 + s_0657 / Km0657_64 - 1)) - (0.000114 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0709) = (4.0 * cell * Vmax_111 * (pow(s_0710, 4) * s_1275 - pow(s_0709, 4) / Keq_111) / (pow(Km0710_111, 4) * Km1275_111) / (pow(1 + s_0710 / Km0710_111, 4) * (1 + s_1275 / Km1275_111) + pow(1 + s_0709 / Km0709_111, 4) - 1)) - (2.0 * cell * Vmax_112 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_112) / (pow(Km0709_112, 2) * Km1535_112) / (pow(1 + s_0709 / Km0709_112, 2) * (1 + s_1535 / Km1535_112) + pow(1 + s_0710 / Km0710_112, 2) * (1 + s_1537 / Km1537_112) - 1));
    der(s_0710) = (2.0 * cell * Vmax_112 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_112) / (pow(Km0709_112, 2) * Km1535_112) / (pow(1 + s_0709 / Km0709_112, 2) * (1 + s_1535 / Km1535_112) + pow(1 + s_0710 / Km0710_112, 2) * (1 + s_1537 / Km1537_112) - 1)) - (4.0 * cell * Vmax_111 * (pow(s_0710, 4) * s_1275 - pow(s_0709, 4) / Keq_111) / (pow(Km0710_111, 4) * Km1275_111) / (pow(1 + s_0710 / Km0710_111, 4) * (1 + s_1275 / Km1275_111) + pow(1 + s_0709 / Km0709_111, 4) - 1));
    der(s_0722) = (cell * Vmax_15 * (s_0577 - s_0158 * s_0722 / Keq_15) / Km0577_15 / (1 + s_0577 / Km0577_15 + (1 + s_0158 / Km0158_15) * (1 + s_0722 / Km0722_15) - 1)) + (cell * Vmax_81 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_81) / (Km1059_81 * pow(Km1212_81, 3) * pow(Km1275_81, 3)) / ((1 + s_1059 / Km1059_81) * pow(1 + s_1212 / Km1212_81, 3) * pow(1 + s_1275 / Km1275_81, 3) + (1 + s_0262 / Km0262_81) * (1 + s_0722 / Km0722_81) * pow(1 + s_1207 / Km1207_81, 3) - 1)) + (cell * Vmax_113 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_113) / (Km0120_113 * Km0394_113 * Km1322_113) / ((1 + s_0120 / Km0120_113) * (1 + s_0394 / Km0394_113) * (1 + s_1322 / Km1322_113) + (1 + s_0434 / Km0434_113) * (1 + s_0722 / Km0722_113) * (1 + s_1487 / Km1487_113) - 1)) + (cell * Vmax_134 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_134) / Km0785_134 / (1 + s_0785 / Km0785_134 + (1 + s_0141 / Km0141_134) * (1 + s_0633 / Km0633_134) * (1 + s_0722 / Km0722_134) - 1)) - (cell * Vmax_278 * s_0722 / Km0722_278 / (1 + s_0722 / Km0722_278));
    der(s_0723) = 0.0;
    der(s_0725) = (cell * Vmax_34 * (s_0299 - s_0403 * s_0725 / Keq_34) / Km0299_34 / (1 + s_0299 / Km0299_34 + (1 + s_0403 / Km0403_34) * (1 + s_0725 / Km0725_34) - 1)) + (cell * Vmax_35 * (s_0393 - s_0423 * s_0725 / Keq_35) / Km0393_35 / (1 + s_0393 / Km0393_35 + (1 + s_0423 / Km0423_35) * (1 + s_0725 / Km0725_35) - 1)) + (cell * Vmax_42 * (s_0015 - s_0725 * s_0965 / Keq_42) / Km0015_42 / (1 + s_0015 / Km0015_42 + (1 + s_0725 / Km0725_42) * (1 + s_0965 / Km0965_42) - 1)) - (cell * Vmax_115 * (s_0725 - s_0066 / Keq_115) / Km0725_115 / (1 + s_0725 / Km0725_115 + 1 + s_0066 / Km0066_115 - 1));
    der(s_0739) = (cell * Vmax_36 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_36) / (Km0785_36 * Km0849_36 * Km0973_36) / ((1 + s_0785 / Km0785_36) * (1 + s_0849 / Km0849_36) * (1 + s_0973 / Km0973_36) + (1 + s_0393 / Km0393_36) * (1 + s_0739 / Km0739_36) * (1 + s_1322 / Km1322_36) - 1)) + (cell * Vmax_93 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_93) / (Km0645_93 * Km0743_93) / ((1 + s_0645 / Km0645_93) * (1 + s_0743 / Km0743_93) + (1 + s_0644 / Km0644_93) * (1 + s_0739 / Km0739_93) - 1)) + (cell * Vmax_135 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_135) / (Km0434_135 * Km0782_135) / ((1 + s_0434 / Km0434_135) * (1 + s_0782 / Km0782_135) + (1 + s_0394 / Km0394_135) * (1 + s_0739 / Km0739_135) - 1)) + (cell * Vmax_136 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_136) / (Km0586_136 * Km0782_136) / ((1 + s_0586 / Km0586_136) * (1 + s_0782 / Km0782_136) + (1 + s_0582 / Km0582_136) * (1 + s_0739 / Km0739_136) - 1)) - (cell * Vmax_186 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_186) / (Km0434_186 * Km0739_186) / ((1 + s_0434 / Km0434_186) * (1 + s_0739 / Km0739_186) + (1 + s_0394 / Km0394_186) * (1 + s_0785 / Km0785_186) - 1)) - (cell * Vmax_236 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_236) / (Km0739_236 * Km1616_236) / ((1 + s_0739 / Km0739_236) * (1 + s_1616 / Km1616_236) + (1 + s_0613 / Km0613_236) * (1 + s_1620 / Km1620_236) - 1));
    der(s_0743) = (cell * Vmax_171 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_171) / (Km0573_171 * Km0785_171) / ((1 + s_0573 / Km0573_171) * (1 + s_0785 / Km0785_171) + (1 + s_0633 / Km0633_171) * (1 + s_0743 / Km0743_171) - 1)) - (cell * Vmax_93 * (s_0645 * s_0743 - s_0644 * s_0739 / Keq_93) / (Km0645_93 * Km0743_93) / ((1 + s_0645 / Km0645_93) * (1 + s_0743 / Km0743_93) + (1 + s_0644 / Km0644_93) * (1 + s_0739 / Km0739_93) - 1));
    der(s_0745) = (cell * Vmax_92 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_92) / (Km0943_92 * Km1376_92) / ((1 + s_0943 / Km0943_92) * (1 + s_1376 / Km1376_92) + (1 + s_0633 / Km0633_92) * (1 + s_0745 / Km0745_92) - 1)) - (cell * Vmax_116 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_116) / (Km0745_116 * Km0943_116) / ((1 + s_0745 / Km0745_116) * (1 + s_0943 / Km0943_116) + (1 + s_0190 / Km0190_116) * (1 + s_0633 / Km0633_116) - 1));
    der(s_0747) = (cell * Vmax_121 * (s_0434 * s_0999 * s_1590 - s_0423 * s_0633 * s_0747 / Keq_121) / (Km0434_121 * Km0999_121 * Km1590_121) / ((1 + s_0434 / Km0434_121) * (1 + s_0999 / Km0999_121) * (1 + s_1590 / Km1590_121) + (1 + s_0423 / Km0423_121) * (1 + s_0633 / Km0633_121) * (1 + s_0747 / Km0747_121) - 1)) - (0.1054 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0748) = (cell * Vmax_122 * (s_0434 * s_0991 * s_1591 - s_0423 * s_0633 * s_0748 / Keq_122) / (Km0434_122 * Km0991_122 * Km1591_122) / ((1 + s_0434 / Km0434_122) * (1 + s_0991 / Km0991_122) * (1 + s_1591 / Km1591_122) + (1 + s_0423 / Km0423_122) * (1 + s_0633 / Km0633_122) * (1 + s_0748 / Km0748_122) - 1)) - (0.3018 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0750) = (2.0 * cell * Vmax_123 * (s_0754 * s_1212 - pow(s_0750, 2) * s_1207 / Keq_123) / (Km0754_123 * Km1212_123) / ((1 + s_0754 / Km0754_123) * (1 + s_1212 / Km1212_123) + pow(1 + s_0750 / Km0750_123, 2) * (1 + s_1207 / Km1207_123) - 1)) - (2.0 * cell * Vmax_124 * (pow(s_0750, 2) * s_0837 - s_0754 / Keq_124) / (pow(Km0750_124, 2) * Km0837_124) / (pow(1 + s_0750 / Km0750_124, 2) * (1 + s_0837 / Km0837_124) + 1 + s_0754 / Km0754_124 - 1));
    der(s_0754) = (cell * Vmax_124 * (pow(s_0750, 2) * s_0837 - s_0754 / Keq_124) / (pow(Km0750_124, 2) * Km0837_124) / (pow(1 + s_0750 / Km0750_124, 2) * (1 + s_0837 / Km0837_124) + 1 + s_0754 / Km0754_124 - 1)) - (cell * Vmax_123 * (s_0754 * s_1212 - pow(s_0750, 2) * s_1207 / Keq_123) / (Km0754_123 * Km1212_123) / ((1 + s_0754 / Km0754_123) * (1 + s_1212 / Km1212_123) + pow(1 + s_0750 / Km0750_123, 2) * (1 + s_1207 / Km1207_123) - 1));
    der(s_0757) = (cell * Vmax_132 * (s_0434 * s_1003 * s_1593 - s_0423 * s_0633 * s_0757 / Keq_132) / (Km0434_132 * Km1003_132 * Km1593_132) / ((1 + s_0434 / Km0434_132) * (1 + s_1003 / Km1003_132) * (1 + s_1593 / Km1593_132) + (1 + s_0423 / Km0423_132) * (1 + s_0633 / Km0633_132) * (1 + s_0757 / Km0757_132) - 1)) - (0.2904 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0764) = (cell * Vmax_114 * (s_0555 - s_0629 * s_0764 / Keq_114) / Km0555_114 / (1 + s_0555 / Km0555_114 + (1 + s_0629 / Km0629_114) * (1 + s_0764 / Km0764_114) - 1)) + (cell * Vmax_256 * (s_0551 * s_0557 - s_0764 * s_1427 / Keq_256) / (Km0551_256 * Km0557_256) / ((1 + s_0551 / Km0551_256) * (1 + s_0557 / Km0557_256) + (1 + s_0764 / Km0764_256) * (1 + s_1427 / Km1427_256) - 1)) + (cell * Vmax_261 * (s_0629 - s_0764 / Keq_261) / Km0629_261 / (1 + s_0629 / Km0629_261 + 1 + s_0764 / Km0764_261 - 1)) + (cell * Vmax_262 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_262) / (Km0086_262 * Km1039_262) / ((1 + s_0086 / Km0086_262) * (1 + s_1039 / Km1039_262) + (1 + s_0764 / Km0764_262) * (1 + s_1048 / Km1048_262) - 1)) - (cell * Vmax_125 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_125) / (Km0764_125 * Km1198_125 * Km1322_125) / ((1 + s_0764 / Km0764_125) * (1 + s_1198 / Km1198_125) * (1 + s_1322 / Km1322_125) + (1 + s_0075 / Km0075_125) * (1 + s_1203 / Km1203_125) - 1)) - (cell * Vmax_257 * (s_0764 * s_1427 - s_0581 * s_1408 / Keq_257) / (Km0764_257 * Km1427_257) / ((1 + s_0764 / Km0764_257) * (1 + s_1427 / Km1427_257) + (1 + s_0581 / Km0581_257) * (1 + s_1408 / Km1408_257) - 1)) - (cell * Vmax_258 * (s_0557 * s_0764 - s_0551 * s_0581 / Keq_258) / (Km0557_258 * Km0764_258) / ((1 + s_0557 / Km0557_258) * (1 + s_0764 / Km0764_258) + (1 + s_0551 / Km0551_258) * (1 + s_0581 / Km0581_258) - 1));
    der(s_0767) = (cell * Vmax_126 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_126) / (Km0629_126 * Km1203_126) / ((1 + s_0629 / Km0629_126) * (1 + s_1203 / Km1203_126) + (1 + s_0767 / Km0767_126) * (1 + s_1198 / Km1198_126) - 1)) - (cell * Vmax_127 * (s_0380 * s_0767 - s_0082 * s_0529 / Keq_127) / (Km0380_127 * Km0767_127) / ((1 + s_0380 / Km0380_127) * (1 + s_0767 / Km0767_127) + (1 + s_0082 / Km0082_127) * (1 + s_0529 / Km0529_127) - 1));
    der(s_0773) = (cell * Vmax_131 * (s_1543 - s_0773 * s_1538 / Keq_131) / Km1543_131 / (1 + s_1543 / Km1543_131 + (1 + s_0773 / Km0773_131) * (1 + s_1538 / Km1538_131) - 1)) - (0.5185 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0782) = (cell * Vmax_133 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_133) / (Km0434_133 * Km0999_133 * Km1565_133) / ((1 + s_0434 / Km0434_133) * (1 + s_0999 / Km0999_133) * (1 + s_1565 / Km1565_133) + (1 + s_0423 / Km0423_133) * (1 + s_0633 / Km0633_133) * (1 + s_0782 / Km0782_133) * (1 + s_0991 / Km0991_133) - 1)) - (cell * Vmax_135 * (s_0434 * s_0782 - s_0394 * s_0739 / Keq_135) / (Km0434_135 * Km0782_135) / ((1 + s_0434 / Km0434_135) * (1 + s_0782 / Km0782_135) + (1 + s_0394 / Km0394_135) * (1 + s_0739 / Km0739_135) - 1)) - (cell * Vmax_136 * (s_0586 * s_0782 - s_0582 * s_0739 / Keq_136) / (Km0586_136 * Km0782_136) / ((1 + s_0586 / Km0586_136) * (1 + s_0782 / Km0782_136) + (1 + s_0582 / Km0582_136) * (1 + s_0739 / Km0739_136) - 1)) - (0.046 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0785) = (cell * Vmax_186 * (s_0434 * s_0739 - s_0394 * s_0785 / Keq_186) / (Km0434_186 * Km0739_186) / ((1 + s_0434 / Km0434_186) * (1 + s_0739 / Km0739_186) + (1 + s_0394 / Km0394_186) * (1 + s_0785 / Km0785_186) - 1)) - (cell * Vmax_36 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_36) / (Km0785_36 * Km0849_36 * Km0973_36) / ((1 + s_0785 / Km0785_36) * (1 + s_0849 / Km0849_36) * (1 + s_0973 / Km0973_36) + (1 + s_0393 / Km0393_36) * (1 + s_0739 / Km0739_36) * (1 + s_1322 / Km1322_36) - 1)) - (cell * Vmax_134 * (s_0785 - s_0141 * s_0633 * s_0722 / Keq_134) / Km0785_134 / (1 + s_0785 / Km0785_134 + (1 + s_0141 / Km0141_134) * (1 + s_0633 / Km0633_134) * (1 + s_0722 / Km0722_134) - 1)) - (cell * Vmax_171 * (s_0573 * s_0785 - s_0633 * s_0743 / Keq_171) / (Km0573_171 * Km0785_171) / ((1 + s_0573 / Km0573_171) * (1 + s_0785 / Km0785_171) + (1 + s_0633 / Km0633_171) * (1 + s_0743 / Km0743_171) - 1));
    der(s_0832) = (cell * Vmax_141 * (s_0434 * s_1006 * s_1594 - s_0423 * s_0633 * s_0832 / Keq_141) / (Km0434_141 * Km1006_141 * Km1594_141) / ((1 + s_0434 / Km0434_141) * (1 + s_1006 / Km1006_141) * (1 + s_1594 / Km1594_141) + (1 + s_0423 / Km0423_141) * (1 + s_0633 / Km0633_141) * (1 + s_0832 / Km0832_141) - 1)) - (0.0663 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0835) = (cell * Vmax_143 * (s_0180 * s_0373 - s_0529 * s_0835 / Keq_143) / (Km0180_143 * Km0373_143) / ((1 + s_0180 / Km0180_143) * (1 + s_0373 / Km0373_143) + (1 + s_0529 / Km0529_143) * (1 + s_0835 / Km0835_143) - 1)) - (cell * Vmax_12 * (s_0835 - s_0454 / Keq_12) / Km0835_12 / (1 + s_0835 / Km0835_12 + 1 + s_0454 / Km0454_12 - 1));
    der(s_0836) = (cell * Vmax_142 * (s_0454 - s_0836 / Keq_142) / Km0454_142 / (1 + s_0454 / Km0454_142 + 1 + s_0836 / Km0836_142 - 1)) - (cell * Vmax_144 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_144) / (Km0836_144 * Km1198_144) / ((1 + s_0836 / Km0836_144) * (1 + s_1198 / Km1198_144) + (1 + s_0176 / Km0176_144) * (1 + s_1203 / Km1203_144) * (1 + s_0456 / Km0456_144) - 1));
    der(s_0837) = (cell * Vmax_86 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_86) / (Km0061_86 * Km1275_86) / ((1 + s_0061 / Km0061_86) * (1 + s_1275 / Km1275_86) + (1 + s_0837 / Km0837_86) * (1 + s_1269 / Km1269_86) - 1)) - (cell * Vmax_124 * (pow(s_0750, 2) * s_0837 - s_0754 / Keq_124) / (pow(Km0750_124, 2) * Km0837_124) / (pow(1 + s_0750 / Km0750_124, 2) * (1 + s_0837 / Km0837_124) + 1 + s_0754 / Km0754_124 - 1)) - (cell * Vmax_148 * (s_0837 * s_1616 - s_1620 / Keq_148) / (Km0837_148 * Km1616_148) / ((1 + s_0837 / Km0837_148) * (1 + s_1616 / Km1616_148) + 1 + s_1620 / Km1620_148 - 1));
    der(s_0841) = (cell * Vmax_251 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_251) / (pow(Km1212_251, 3) * Km1469_251) / (pow(1 + s_1212 / Km1212_251, 3) * (1 + s_1469 / Km1469_251) + (1 + s_0841 / Km0841_251) * pow(1 + s_1207 / Km1207_251, 3) - 1)) - (cell * Vmax_188 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_188) / (Km0841_188 * Km1233_188) / ((1 + s_0841 / Km0841_188) * (1 + s_1233 / Km1233_188) + (1 + s_0362 / Km0362_188) * (1 + s_1012 / Km1012_188) - 1));
    der(s_0847) = (cell * Vmax_161 * (s_0434 * s_1016 * s_1596 - s_0423 * s_0633 * s_0847 / Keq_161) / (Km0434_161 * Km1016_161 * Km1596_161) / ((1 + s_0434 / Km0434_161) * (1 + s_1016 / Km1016_161) * (1 + s_1596 / Km1596_161) + (1 + s_0423 / Km0423_161) * (1 + s_0633 / Km0633_161) * (1 + s_0847 / Km0847_161) - 1)) - (0.1927 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0849) = (cell * Vmax_156 * (s_1365 - s_0849 / Keq_156) / Km1365_156 / (1 + s_1365 / Km1365_156 + 1 + s_0849 / Km0849_156 - 1)) - (cell * Vmax_36 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_36) / (Km0785_36 * Km0849_36 * Km0973_36) / ((1 + s_0785 / Km0785_36) * (1 + s_0849 / Km0849_36) * (1 + s_0973 / Km0973_36) + (1 + s_0393 / Km0393_36) * (1 + s_0739 / Km0739_36) * (1 + s_1322 / Km1322_36) - 1)) - (cell * Vmax_153 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_153) / (Km0849_153 * Km1198_153) / ((1 + s_0849 / Km0849_153) * (1 + s_1198 / Km1198_153) + (1 + s_1203 / Km1203_153) * (1 + s_1565 / Km1565_153) - 1));
    der(s_0918) = (cell * Vmax_157 * (s_0089 * s_0499 - s_0619 * s_0918 / Keq_157) / (Km0089_157 * Km0499_157) / ((1 + s_0089 / Km0089_157) * (1 + s_0499 / Km0499_157) + (1 + s_0619 / Km0619_157) * (1 + s_0918 / Km0918_157) - 1)) - (0.000538625 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_0940) = (cell * Vmax_73 * (s_0516 - s_0940 / Keq_73) / Km0516_73 / (1 + s_0516 / Km0516_73 + 1 + s_0940 / Km0940_73 - 1)) - (cell * Vmax_158 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_158) / (Km0940_158 * Km1198_158) / ((1 + s_0940 / Km0940_158) * (1 + s_1198 / Km1198_158) + (1 + s_0180 / Km0180_158) * (1 + s_0456 / Km0456_158) * (1 + s_1203 / Km1203_158) - 1)) - (cell * Vmax_159 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_159) / (Km0940_159 * Km1207_159) / ((1 + s_0940 / Km0940_159) * (1 + s_1207 / Km1207_159) + (1 + s_0180 / Km0180_159) * (1 + s_0456 / Km0456_159) * (1 + s_1212 / Km1212_159) - 1));
    der(s_0943) = (cell * Vmax_180 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_180) / (Km0018_180 * Km0434_180) / ((1 + s_0018 / Km0018_180) * (1 + s_0434 / Km0434_180) + (1 + s_0394 / Km0394_180) * (1 + s_0456 / Km0456_180) * (1 + s_0943 / Km0943_180) * (1 + s_1322 / Km1322_180) - 1)) - (cell * Vmax_92 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_92) / (Km0943_92 * Km1376_92) / ((1 + s_0943 / Km0943_92) * (1 + s_1376 / Km1376_92) + (1 + s_0633 / Km0633_92) * (1 + s_0745 / Km0745_92) - 1)) - (cell * Vmax_116 * (s_0745 * s_0943 - s_0190 * s_0633 / Keq_116) / (Km0745_116 * Km0943_116) / ((1 + s_0745 / Km0745_116) * (1 + s_0943 / Km0943_116) + (1 + s_0190 / Km0190_116) * (1 + s_0633 / Km0633_116) - 1)) - (cell * Vmax_162 * (s_0943 - s_1376 / Keq_162) / Km0943_162 / (1 + s_0943 / Km0943_162 + 1 + s_1376 / Km1376_162 - 1));
    der(s_0951) = (cell * Vmax_223 * (s_1377 - s_0456 * s_0951 / Keq_223) / Km1377_223 / (1 + s_1377 / Km1377_223 + (1 + s_0456 / Km0456_223) * (1 + s_0951 / Km0951_223) - 1)) - (cell * Vmax_193 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_193) / (Km0951_193 * Km0991_193) / ((1 + s_0951 / Km0951_193) * (1 + s_0991 / Km0991_193) + (1 + s_0180 / Km0180_193) * (1 + s_1032 / Km1032_193) - 1));
    der(s_0953) = (cell * Vmax_8 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_8) / (Km0176_8 * Km0991_8) / ((1 + s_0176 / Km0176_8) * (1 + s_0991 / Km0991_8) + (1 + s_0180 / Km0180_8) * (1 + s_0953 / Km0953_8) - 1)) - (cell * Vmax_165 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_165) / (Km0953_165 * Km1212_165) / ((1 + s_0953 / Km0953_165) * (1 + s_1212 / Km1212_165) + (1 + s_0959 / Km0959_165) * (1 + s_1207 / Km1207_165) - 1));
    der(s_0955) = (cell * Vmax_164 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_164) / (Km0991_164 * Km1399_164) / ((1 + s_0991 / Km0991_164) * (1 + s_1399 / Km1399_164) + (1 + s_0180 / Km0180_164) * (1 + s_0955 / Km0955_164) - 1)) - (cell * Vmax_38 * (s_0434 * s_0955 * s_1582 - s_0404 * s_0423 * s_0633 / Keq_38) / (Km0434_38 * Km0955_38 * Km1582_38) / ((1 + s_0434 / Km0434_38) * (1 + s_0955 / Km0955_38) * (1 + s_1582 / Km1582_38) + (1 + s_0404 / Km0404_38) * (1 + s_0423 / Km0423_38) * (1 + s_0633 / Km0633_38) - 1));
    der(s_0959) = (cell * Vmax_165 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_165) / (Km0953_165 * Km1212_165) / ((1 + s_0953 / Km0953_165) * (1 + s_1212 / Km1212_165) + (1 + s_0959 / Km0959_165) * (1 + s_1207 / Km1207_165) - 1)) - (cell * Vmax_241 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_241) / (Km0959_241 * Km0991_241 * Km1212_241) / ((1 + s_0959 / Km0959_241) * (1 + s_0991 / Km0991_241) * (1 + s_1212 / Km1212_241) + (1 + s_1038 / Km1038_241) * (1 + s_1207 / Km1207_241) - 1));
    der(s_0965) = (cell * Vmax_42 * (s_0015 - s_0725 * s_0965 / Keq_42) / Km0015_42 / (1 + s_0015 / Km0015_42 + (1 + s_0725 / Km0725_42) * (1 + s_0965 / Km0965_42) - 1)) - (cell * Vmax_44 * (s_0434 * s_0965 * s_1583 - s_0423 * s_0428 * s_0633 / Keq_44) / (Km0434_44 * Km0965_44 * Km1583_44) / ((1 + s_0434 / Km0434_44) * (1 + s_0965 / Km0965_44) * (1 + s_1583 / Km1583_44) + (1 + s_0423 / Km0423_44) * (1 + s_0428 / Km0428_44) * (1 + s_0633 / Km0633_44) - 1));
    der(s_0969) = (cell * Vmax_45 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_45) / (Km0434_45 * Km0973_45 * Km0999_45) / ((1 + s_0434 / Km0434_45) * (1 + s_0973 / Km0973_45) * (1 + s_0999 / Km0999_45) + (1 + s_0423 / Km0423_45) * (1 + s_0633 / Km0633_45) * (1 + s_0969 / Km0969_45) * (1 + s_0991 / Km0991_45) - 1)) - (cell * Vmax_46 * (s_0434 * s_0969 * s_1585 - s_0423 * s_0430 * s_0633 / Keq_46) / (Km0434_46 * Km0969_46 * Km1585_46) / ((1 + s_0434 / Km0434_46) * (1 + s_0969 / Km0969_46) * (1 + s_1585 / Km1585_46) + (1 + s_0423 / Km0423_46) * (1 + s_0430 / Km0430_46) * (1 + s_0633 / Km0633_46) - 1));
    der(s_0973) = (cell * Vmax_49 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_49) / (Km0991_49 * Km1271_49) / ((1 + s_0991 / Km0991_49) * (1 + s_1271 / Km1271_49) + (1 + s_0180 / Km0180_49) * (1 + s_0973 / Km0973_49) - 1)) - (cell * Vmax_36 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_36) / (Km0785_36 * Km0849_36 * Km0973_36) / ((1 + s_0785 / Km0785_36) * (1 + s_0849 / Km0849_36) * (1 + s_0973 / Km0973_36) + (1 + s_0393 / Km0393_36) * (1 + s_0739 / Km0739_36) * (1 + s_1322 / Km1322_36) - 1)) - (cell * Vmax_43 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_43) / (Km0434_43 * Km0973_43 * Km0979_43) / ((1 + s_0434 / Km0434_43) * (1 + s_0973 / Km0973_43) * (1 + s_0979 / Km0979_43) + (1 + s_0015 / Km0015_43) * (1 + s_0423 / Km0423_43) * (1 + s_0633 / Km0633_43) - 1)) - (cell * Vmax_45 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_45) / (Km0434_45 * Km0973_45 * Km0999_45) / ((1 + s_0434 / Km0434_45) * (1 + s_0973 / Km0973_45) * (1 + s_0999 / Km0999_45) + (1 + s_0423 / Km0423_45) * (1 + s_0633 / Km0633_45) * (1 + s_0969 / Km0969_45) * (1 + s_0991 / Km0991_45) - 1)) - (cell * Vmax_47 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_47) / (Km0455_47 * Km0973_47) / ((1 + s_0455 / Km0455_47) * (1 + s_0973 / Km0973_47) + (1 + s_1194 / Km1194_47) * (1 + s_1322 / Km1322_47) - 1)) - (cell * Vmax_48 * (s_0434 * s_0973 - s_0295 * s_0394 / Keq_48) / (Km0434_48 * Km0973_48) / ((1 + s_0434 / Km0434_48) * (1 + s_0973 / Km0973_48) + (1 + s_0295 / Km0295_48) * (1 + s_0394 / Km0394_48) - 1)) - (cell * Vmax_51 * (s_0434 * s_0973 * s_1587 - s_0423 * s_0432 * s_0633 / Keq_51) / (Km0434_51 * Km0973_51 * Km1587_51) / ((1 + s_0434 / Km0434_51) * (1 + s_0973 / Km0973_51) * (1 + s_1587 / Km1587_51) + (1 + s_0423 / Km0423_51) * (1 + s_0432 / Km0432_51) * (1 + s_0633 / Km0633_51) - 1)) - (cell * Vmax_210 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_210) / (Km0434_210 * Km0973_210 * Km1364_210) / ((1 + s_0434 / Km0434_210) * (1 + s_0973 / Km0973_210) * (1 + s_1364 / Km1364_210) + (1 + s_0299 / Km0299_210) * (1 + s_0394 / Km0394_210) * (1 + s_1322 / Km1322_210) - 1));
    der(s_0978) = (cell * Vmax_50 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_50) / (Km0295_50 * Km1212_50) / ((1 + s_0295 / Km0295_50) * (1 + s_1212 / Km1212_50) + (1 + s_0978 / Km0978_50) * (1 + s_1207 / Km1207_50) * (1 + s_1322 / Km1322_50) - 1)) - (cell * Vmax_145 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_145) / (Km0978_145 * Km1212_145) / ((1 + s_0978 / Km0978_145) * (1 + s_1212 / Km1212_145) + (1 + s_1014 / Km1014_145) * (1 + s_1207 / Km1207_145) - 1));
    der(s_0979) = (cell * Vmax_189 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_189) / (Km0455_189 * Km1266_189) / ((1 + s_0455 / Km0455_189) * (1 + s_1266 / Km1266_189) + (1 + s_0979 / Km0979_189) * (1 + s_1322 / Km1322_189) - 1)) - (cell * Vmax_43 * (s_0434 * s_0973 * s_0979 - s_0015 * s_0423 * s_0633 / Keq_43) / (Km0434_43 * Km0973_43 * Km0979_43) / ((1 + s_0434 / Km0434_43) * (1 + s_0973 / Km0973_43) * (1 + s_0979 / Km0979_43) + (1 + s_0015 / Km0015_43) * (1 + s_0423 / Km0423_43) * (1 + s_0633 / Km0633_43) - 1));
    der(s_0980) = (cell * Vmax_77 * (s_1012 * s_1039 - s_0980 / Keq_77) / (Km1012_77 * Km1039_77) / ((1 + s_1012 / Km1012_77) * (1 + s_1039 / Km1039_77) + 1 + s_0980 / Km0980_77 - 1)) + (cell * Vmax_79 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_79) / (Km0981_79 * Km1233_79) / ((1 + s_0981 / Km0981_79) * (1 + s_1233 / Km1233_79) + (1 + s_0362 / Km0362_79) * (1 + s_0980 / Km0980_79) - 1)) - (cell * Vmax_78 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_78) / Km0980_78 / (1 + s_0980 / Km0980_78 + (1 + s_0178 / Km0178_78) * (1 + s_0419 / Km0419_78) * (1 + s_0981 / Km0981_78) - 1));
    der(s_0981) = (cell * Vmax_78 * (s_0980 - s_0178 * s_0419 * s_0981 / Keq_78) / Km0980_78 / (1 + s_0980 / Km0980_78 + (1 + s_0178 / Km0178_78) * (1 + s_0419 / Km0419_78) * (1 + s_0981 / Km0981_78) - 1)) - (cell * Vmax_79 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_79) / (Km0981_79 * Km1233_79) / ((1 + s_0981 / Km0981_79) * (1 + s_1233 / Km1233_79) + (1 + s_0362 / Km0362_79) * (1 + s_0980 / Km0980_79) - 1)) - (cell * Vmax_80 * (s_0434 * s_0981 * s_1589 - s_0423 * s_0542 * s_0633 / Keq_80) / (Km0434_80 * Km0981_80 * Km1589_80) / ((1 + s_0434 / Km0434_80) * (1 + s_0981 / Km0981_80) * (1 + s_1589 / Km1589_80) + (1 + s_0423 / Km0423_80) * (1 + s_0542 / Km0542_80) * (1 + s_0633 / Km0633_80) - 1));
    der(s_0991) = (cell * Vmax_22 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_22) / (Km0301_22 * Km0434_22 * Km0999_22) / ((1 + s_0301 / Km0301_22) * (1 + s_0434 / Km0434_22) * (1 + s_0999 / Km0999_22) + (1 + s_0302 / Km0302_22) * (1 + s_0394 / Km0394_22) * (1 + s_0991 / Km0991_22) * (1 + s_1322 / Km1322_22) - 1)) + (cell * Vmax_41 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_41) / (Km0515_41 * Km0999_41) / ((1 + s_0515 / Km0515_41) * (1 + s_0999 / Km0999_41) + (1 + s_0427 / Km0427_41) * (1 + s_0991 / Km0991_41) * (1 + s_1399 / Km1399_41) - 1)) + (cell * Vmax_45 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_45) / (Km0434_45 * Km0973_45 * Km0999_45) / ((1 + s_0434 / Km0434_45) * (1 + s_0973 / Km0973_45) * (1 + s_0999 / Km0999_45) + (1 + s_0423 / Km0423_45) * (1 + s_0633 / Km0633_45) * (1 + s_0969 / Km0969_45) * (1 + s_0991 / Km0991_45) - 1)) + (cell * Vmax_66 * (pow(s_0434, 2) * s_0445 * s_0999 - pow(s_0394, 2) * s_0455 * s_0991 * s_1322 / Keq_66) / (pow(Km0434_66, 2) * Km0445_66 * Km0999_66) / (pow(1 + s_0434 / Km0434_66, 2) * (1 + s_0445 / Km0445_66) * (1 + s_0999 / Km0999_66) + pow(1 + s_0394 / Km0394_66, 2) * (1 + s_0455 / Km0455_66) * (1 + s_0991 / Km0991_66) * (1 + s_1322 / Km1322_66) - 1)) + (cell * Vmax_118 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_118) / (Km0180_118 * Km0419_118 * Km1203_118) / ((1 + s_0180 / Km0180_118) * (1 + s_0419 / Km0419_118) * (1 + s_1203 / Km1203_118) + (1 + s_0991 / Km0991_118) * (1 + s_1198 / Km1198_118) - 1)) + (cell * Vmax_119 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_119) / (Km0180_119 * Km0419_119 * Km1212_119) / ((1 + s_0180 / Km0180_119) * (1 + s_0419 / Km0419_119) * (1 + s_1212 / Km1212_119) + (1 + s_0991 / Km0991_119) * (1 + s_1207 / Km1207_119) - 1)) + (cell * Vmax_133 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_133) / (Km0434_133 * Km0999_133 * Km1565_133) / ((1 + s_0434 / Km0434_133) * (1 + s_0999 / Km0999_133) * (1 + s_1565 / Km1565_133) + (1 + s_0423 / Km0423_133) * (1 + s_0633 / Km0633_133) * (1 + s_0782 / Km0782_133) * (1 + s_0991 / Km0991_133) - 1)) + (cell * Vmax_151 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_151) / (Km0312_151 * Km0999_151) / ((1 + s_0312 / Km0312_151) * (1 + s_0999 / Km0999_151) + (1 + s_0403 / Km0403_151) * (1 + s_0550 / Km0550_151) * (1 + s_0991 / Km0991_151) - 1)) + (cell * Vmax_217 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_217) / (Km0999_217 * Km1386_217) / ((1 + s_0999 / Km0999_217) * (1 + s_1386 / Km1386_217) + (1 + s_0327 / Km0327_217) * (1 + s_0633 / Km0633_217) * (1 + s_0991 / Km0991_217) - 1)) - (cell * Vmax_4 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_4) / (Km0991_4 * Km1203_4) / ((1 + s_0991 / Km0991_4) * (1 + s_1203 / Km1203_4) + (1 + s_0118 / Km0118_4) * (1 + s_1198 / Km1198_4) - 1)) - (cell * Vmax_8 * (s_0176 * s_0991 - s_0180 * s_0953 / Keq_8) / (Km0176_8 * Km0991_8) / ((1 + s_0176 / Km0176_8) * (1 + s_0991 / Km0991_8) + (1 + s_0180 / Km0180_8) * (1 + s_0953 / Km0953_8) - 1)) - (cell * Vmax_30 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_30) / (Km0145_30 * Km0991_30) / ((1 + s_0145 / Km0145_30) * (1 + s_0991 / Km0991_30) + (1 + s_0180 / Km0180_30) * (1 + s_1182 / Km1182_30) - 1)) - (cell * Vmax_49 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_49) / (Km0991_49 * Km1271_49) / ((1 + s_0991 / Km0991_49) * (1 + s_1271 / Km1271_49) + (1 + s_0180 / Km0180_49) * (1 + s_0973 / Km0973_49) - 1)) - (cell * Vmax_120 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_120) / (Km0419_120 * Km0434_120 * Km0991_120) / ((1 + s_0419 / Km0419_120) * (1 + s_0434 / Km0434_120) * (1 + s_0991 / Km0991_120) + (1 + s_0394 / Km0394_120) * (1 + s_0999 / Km0999_120) * (1 + s_1322 / Km1322_120) - 1)) - (cell * Vmax_122 * (s_0434 * s_0991 * s_1591 - s_0423 * s_0633 * s_0748 / Keq_122) / (Km0434_122 * Km0991_122 * Km1591_122) / ((1 + s_0434 / Km0434_122) * (1 + s_0991 / Km0991_122) * (1 + s_1591 / Km1591_122) + (1 + s_0423 / Km0423_122) * (1 + s_0633 / Km0633_122) * (1 + s_0748 / Km0748_122) - 1)) - (cell * Vmax_140 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_140) / (Km0207_140 * Km0991_140) / ((1 + s_0207 / Km0207_140) * (1 + s_0991 / Km0991_140) + (1 + s_0180 / Km0180_140) * (1 + s_1011 / Km1011_140) - 1)) - (cell * Vmax_160 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_160) / (Km0056_160 * Km0991_160) / ((1 + s_0056 / Km0056_160) * (1 + s_0991 / Km0991_160) + (1 + s_0180 / Km0180_160) * (1 + s_1016 / Km1016_160) - 1)) - (cell * Vmax_164 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_164) / (Km0991_164 * Km1399_164) / ((1 + s_0991 / Km0991_164) * (1 + s_1399 / Km1399_164) + (1 + s_0180 / Km0180_164) * (1 + s_0955 / Km0955_164) - 1)) - (cell * Vmax_167 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_167) / (Km0291_167 * Km0991_167) / ((1 + s_0291 / Km0291_167) * (1 + s_0991 / Km0991_167) + (1 + s_0180 / Km0180_167) * (1 + s_1021 / Km1021_167) - 1)) - (cell * Vmax_190 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_190) / (Km0991_190 * Km1182_190) / ((1 + s_0991 / Km0991_190) * (1 + s_1182 / Km1182_190) + (1 + s_1192 / Km1192_190) * (1 + s_1266 / Km1266_190) - 1)) - (cell * Vmax_193 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_193) / (Km0951_193 * Km0991_193) / ((1 + s_0951 / Km0951_193) * (1 + s_0991 / Km0991_193) + (1 + s_0180 / Km0180_193) * (1 + s_1032 / Km1032_193) - 1)) - (cell * Vmax_220 * (s_0258 * s_0991 - s_0180 * s_0259 / Keq_220) / (Km0258_220 * Km0991_220) / ((1 + s_0258 / Km0258_220) * (1 + s_0991 / Km0991_220) + (1 + s_0180 / Km0180_220) * (1 + s_0259 / Km0259_220) - 1)) - (cell * Vmax_241 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_241) / (Km0959_241 * Km0991_241 * Km1212_241) / ((1 + s_0959 / Km0959_241) * (1 + s_0991 / Km0991_241) * (1 + s_1212 / Km1212_241) + (1 + s_1038 / Km1038_241) * (1 + s_1207 / Km1207_241) - 1)) - (cell * Vmax_264 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_264) / (Km0204_264 * Km0991_264) / ((1 + s_0204 / Km0204_264) * (1 + s_0991 / Km0991_264) + (1 + s_0180 / Km0180_264) * (1 + s_1051 / Km1051_264) - 1)) - (cell * Vmax_268 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_268) / (Km0232_268 * Km0991_268) / ((1 + s_0232 / Km0232_268) * (1 + s_0991 / Km0991_268) + (1 + s_0180 / Km0180_268) * (1 + s_1056 / Km1056_268) - 1));
    der(s_0999) = (cell * Vmax_120 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_120) / (Km0419_120 * Km0434_120 * Km0991_120) / ((1 + s_0419 / Km0419_120) * (1 + s_0434 / Km0434_120) * (1 + s_0991 / Km0991_120) + (1 + s_0394 / Km0394_120) * (1 + s_0999 / Km0999_120) * (1 + s_1322 / Km1322_120) - 1)) - (cell * Vmax_22 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_22) / (Km0301_22 * Km0434_22 * Km0999_22) / ((1 + s_0301 / Km0301_22) * (1 + s_0434 / Km0434_22) * (1 + s_0999 / Km0999_22) + (1 + s_0302 / Km0302_22) * (1 + s_0394 / Km0394_22) * (1 + s_0991 / Km0991_22) * (1 + s_1322 / Km1322_22) - 1)) - (cell * Vmax_41 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_41) / (Km0515_41 * Km0999_41) / ((1 + s_0515 / Km0515_41) * (1 + s_0999 / Km0999_41) + (1 + s_0427 / Km0427_41) * (1 + s_0991 / Km0991_41) * (1 + s_1399 / Km1399_41) - 1)) - (cell * Vmax_45 * (s_0434 * s_0973 * s_0999 - s_0423 * s_0633 * s_0969 * s_0991 / Keq_45) / (Km0434_45 * Km0973_45 * Km0999_45) / ((1 + s_0434 / Km0434_45) * (1 + s_0973 / Km0973_45) * (1 + s_0999 / Km0999_45) + (1 + s_0423 / Km0423_45) * (1 + s_0633 / Km0633_45) * (1 + s_0969 / Km0969_45) * (1 + s_0991 / Km0991_45) - 1)) - (cell * Vmax_66 * (pow(s_0434, 2) * s_0445 * s_0999 - pow(s_0394, 2) * s_0455 * s_0991 * s_1322 / Keq_66) / (pow(Km0434_66, 2) * Km0445_66 * Km0999_66) / (pow(1 + s_0434 / Km0434_66, 2) * (1 + s_0445 / Km0445_66) * (1 + s_0999 / Km0999_66) + pow(1 + s_0394 / Km0394_66, 2) * (1 + s_0455 / Km0455_66) * (1 + s_0991 / Km0991_66) * (1 + s_1322 / Km1322_66) - 1)) - (cell * Vmax_121 * (s_0434 * s_0999 * s_1590 - s_0423 * s_0633 * s_0747 / Keq_121) / (Km0434_121 * Km0999_121 * Km1590_121) / ((1 + s_0434 / Km0434_121) * (1 + s_0999 / Km0999_121) * (1 + s_1590 / Km1590_121) + (1 + s_0423 / Km0423_121) * (1 + s_0633 / Km0633_121) * (1 + s_0747 / Km0747_121) - 1)) - (cell * Vmax_133 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_133) / (Km0434_133 * Km0999_133 * Km1565_133) / ((1 + s_0434 / Km0434_133) * (1 + s_0999 / Km0999_133) * (1 + s_1565 / Km1565_133) + (1 + s_0423 / Km0423_133) * (1 + s_0633 / Km0633_133) * (1 + s_0782 / Km0782_133) * (1 + s_0991 / Km0991_133) - 1)) - (cell * Vmax_151 * (s_0312 * s_0999 - s_0403 * s_0550 * s_0991 / Keq_151) / (Km0312_151 * Km0999_151) / ((1 + s_0312 / Km0312_151) * (1 + s_0999 / Km0999_151) + (1 + s_0403 / Km0403_151) * (1 + s_0550 / Km0550_151) * (1 + s_0991 / Km0991_151) - 1)) - (cell * Vmax_217 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_217) / (Km0999_217 * Km1386_217) / ((1 + s_0999 / Km0999_217) * (1 + s_1386 / Km1386_217) + (1 + s_0327 / Km0327_217) * (1 + s_0633 / Km0633_217) * (1 + s_0991 / Km0991_217) - 1));
    der(s_1003) = (cell * Vmax_130 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_130) / (Km1039_130 * Km1487_130) / ((1 + s_1039 / Km1039_130) * (1 + s_1487 / Km1487_130) + (1 + s_0306 / Km0306_130) * (1 + s_1003 / Km1003_130) - 1)) - (cell * Vmax_129 * (s_1003 * s_1198 * s_1487 - s_0306 * s_0419 * s_0456 * s_1203 / Keq_129) / (Km1003_129 * Km1198_129 * Km1487_129) / ((1 + s_1003 / Km1003_129) * (1 + s_1198 / Km1198_129) * (1 + s_1487 / Km1487_129) + (1 + s_0306 / Km0306_129) * (1 + s_0419 / Km0419_129) * (1 + s_0456 / Km0456_129) * (1 + s_1203 / Km1203_129) - 1)) - (cell * Vmax_132 * (s_0434 * s_1003 * s_1593 - s_0423 * s_0633 * s_0757 / Keq_132) / (Km0434_132 * Km1003_132 * Km1593_132) / ((1 + s_0434 / Km0434_132) * (1 + s_1003 / Km1003_132) * (1 + s_1593 / Km1593_132) + (1 + s_0423 / Km0423_132) * (1 + s_0633 / Km0633_132) * (1 + s_0757 / Km0757_132) - 1)) - (cell * Vmax_216 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_216) / (Km0327_216 * Km0434_216 * Km1003_216) / ((1 + s_0327 / Km0327_216) * (1 + s_0434 / Km0434_216) * (1 + s_1003 / Km1003_216) + (1 + s_0325 / Km0325_216) * (1 + s_0394 / Km0394_216) * (1 + s_1322 / Km1322_216) - 1));
    der(s_1006) = (cell * Vmax_138 * (s_1010 * pow(s_1198, 2) - s_1006 * pow(s_1203, 2) / Keq_138) / (Km1010_138 * pow(Km1198_138, 2)) / ((1 + s_1010 / Km1010_138) * pow(1 + s_1198 / Km1198_138, 2) + (1 + s_1006 / Km1006_138) * pow(1 + s_1203 / Km1203_138, 2) - 1)) - (cell * Vmax_141 * (s_0434 * s_1006 * s_1594 - s_0423 * s_0633 * s_0832 / Keq_141) / (Km0434_141 * Km1006_141 * Km1594_141) / ((1 + s_0434 / Km0434_141) * (1 + s_1006 / Km1006_141) * (1 + s_1594 / Km1594_141) + (1 + s_0423 / Km0423_141) * (1 + s_0633 / Km0633_141) * (1 + s_0832 / Km0832_141) - 1));
    der(s_1010) = (cell * Vmax_139 * (s_1011 - s_1010 * s_1322 / Keq_139) / Km1011_139 / (1 + s_1011 / Km1011_139 + (1 + s_1010 / Km1010_139) * (1 + s_1322 / Km1322_139) - 1)) - (cell * Vmax_138 * (s_1010 * pow(s_1198, 2) - s_1006 * pow(s_1203, 2) / Keq_138) / (Km1010_138 * pow(Km1198_138, 2)) / ((1 + s_1010 / Km1010_138) * pow(1 + s_1198 / Km1198_138, 2) + (1 + s_1006 / Km1006_138) * pow(1 + s_1203 / Km1203_138, 2) - 1));
    der(s_1011) = (cell * Vmax_140 * (s_0207 * s_0991 - s_0180 * s_1011 / Keq_140) / (Km0207_140 * Km0991_140) / ((1 + s_0207 / Km0207_140) * (1 + s_0991 / Km0991_140) + (1 + s_0180 / Km0180_140) * (1 + s_1011 / Km1011_140) - 1)) - (cell * Vmax_139 * (s_1011 - s_1010 * s_1322 / Keq_139) / Km1011_139 / (1 + s_1011 / Km1011_139 + (1 + s_1010 / Km1010_139) * (1 + s_1322 / Km1322_139) - 1));
    der(s_1012) = (cell * Vmax_32 * (s_1413 - s_0386 * s_1012 / Keq_32) / Km1413_32 / (1 + s_1413 / Km1413_32 + (1 + s_0386 / Km0386_32) * (1 + s_1012 / Km1012_32) - 1)) + (cell * Vmax_188 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_188) / (Km0841_188 * Km1233_188) / ((1 + s_0841 / Km0841_188) * (1 + s_1233 / Km1233_188) + (1 + s_0362 / Km0362_188) * (1 + s_1012 / Km1012_188) - 1)) - (cell * Vmax_77 * (s_1012 * s_1039 - s_0980 / Keq_77) / (Km1012_77 * Km1039_77) / ((1 + s_1012 / Km1012_77) * (1 + s_1039 / Km1039_77) + 1 + s_0980 / Km0980_77 - 1)) - (cell * Vmax_175 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_175) / (Km0322_175 * Km1012_175) / ((1 + s_0322 / Km0322_175) * (1 + s_1012 / Km1012_175) + (1 + s_1029 / Km1029_175) * (1 + s_1487 / Km1487_175) - 1));
    der(s_1014) = (cell * Vmax_145 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_145) / (Km0978_145 * Km1212_145) / ((1 + s_0978 / Km0978_145) * (1 + s_1212 / Km1212_145) + (1 + s_1014 / Km1014_145) * (1 + s_1207 / Km1207_145) - 1)) - (cell * Vmax_146 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_146) / (Km0434_146 * Km1014_146) / ((1 + s_0434 / Km0434_146) * (1 + s_1014 / Km1014_146) + (1 + s_0394 / Km0394_146) * (1 + s_1238 / Km1238_146) - 1)) - (cell * Vmax_147 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_147) / (Km0373_147 * Km1014_147) / ((1 + s_0373 / Km0373_147) * (1 + s_1014 / Km1014_147) + (1 + s_0529 / Km0529_147) * (1 + s_1233 / Km1233_147) - 1));
    der(s_1016) = (cell * Vmax_160 * (s_0056 * s_0991 - s_0180 * s_1016 / Keq_160) / (Km0056_160 * Km0991_160) / ((1 + s_0056 / Km0056_160) * (1 + s_0991 / Km0991_160) + (1 + s_0180 / Km0180_160) * (1 + s_1016 / Km1016_160) - 1)) - (cell * Vmax_161 * (s_0434 * s_1016 * s_1596 - s_0423 * s_0633 * s_0847 / Keq_161) / (Km0434_161 * Km1016_161 * Km1596_161) / ((1 + s_0434 / Km0434_161) * (1 + s_1016 / Km1016_161) * (1 + s_1596 / Km1596_161) + (1 + s_0423 / Km0423_161) * (1 + s_0633 / Km0633_161) * (1 + s_0847 / Km0847_161) - 1));
    der(s_1021) = (cell * Vmax_167 * (s_0291 * s_0991 - s_0180 * s_1021 / Keq_167) / (Km0291_167 * Km0991_167) / ((1 + s_0291 / Km0291_167) * (1 + s_0991 / Km0991_167) + (1 + s_0180 / Km0180_167) * (1 + s_1021 / Km1021_167) - 1)) - (cell * Vmax_168 * (s_0434 * s_1021 * s_1598 - s_0423 * s_0633 * s_1077 / Keq_168) / (Km0434_168 * Km1021_168 * Km1598_168) / ((1 + s_0434 / Km0434_168) * (1 + s_1021 / Km1021_168) * (1 + s_1598 / Km1598_168) + (1 + s_0423 / Km0423_168) * (1 + s_0633 / Km0633_168) * (1 + s_1077 / Km1077_168) - 1));
    der(s_1025) = (cell * Vmax_240 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_240) / (Km1038_240 * Km1198_240) / ((1 + s_1038 / Km1038_240) * (1 + s_1198 / Km1198_240) + (1 + s_0180 / Km0180_240) * (1 + s_1025 / Km1025_240) * (1 + s_1203 / Km1203_240) - 1)) - (cell * Vmax_169 * (s_0434 * s_1025 * s_1600 - s_0423 * s_0633 * s_1099 / Keq_169) / (Km0434_169 * Km1025_169 * Km1600_169) / ((1 + s_0434 / Km0434_169) * (1 + s_1025 / Km1025_169) * (1 + s_1600 / Km1600_169) + (1 + s_0423 / Km0423_169) * (1 + s_0633 / Km0633_169) * (1 + s_1099 / Km1099_169) - 1));
    der(s_1029) = (cell * Vmax_175 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_175) / (Km0322_175 * Km1012_175) / ((1 + s_0322 / Km0322_175) * (1 + s_1012 / Km1012_175) + (1 + s_1029 / Km1029_175) * (1 + s_1487 / Km1487_175) - 1)) - (cell * Vmax_174 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_174) / (Km0434_174 * Km1029_174) / ((1 + s_0434 / Km0434_174) * (1 + s_1029 / Km1029_174) + (1 + s_0633 / Km0633_174) * (1 + s_1322 / Km1322_174) * (1 + s_1416 / Km1416_174) - 1)) - (cell * Vmax_176 * (s_0434 * s_1029 * s_1602 - s_0423 * s_0633 * s_1148 / Keq_176) / (Km0434_176 * Km1029_176 * Km1602_176) / ((1 + s_0434 / Km0434_176) * (1 + s_1029 / Km1029_176) * (1 + s_1602 / Km1602_176) + (1 + s_0423 / Km0423_176) * (1 + s_0633 / Km0633_176) * (1 + s_1148 / Km1148_176) - 1));
    der(s_1032) = (cell * Vmax_193 * (s_0951 * s_0991 - s_0180 * s_1032 / Keq_193) / (Km0951_193 * Km0991_193) / ((1 + s_0951 / Km0951_193) * (1 + s_0991 / Km0991_193) + (1 + s_0180 / Km0180_193) * (1 + s_1032 / Km1032_193) - 1)) - (cell * Vmax_194 * (s_0434 * s_1032 * s_1604 - s_0423 * s_0633 * s_1314 / Keq_194) / (Km0434_194 * Km1032_194 * Km1604_194) / ((1 + s_0434 / Km0434_194) * (1 + s_1032 / Km1032_194) * (1 + s_1604 / Km1604_194) + (1 + s_0423 / Km0423_194) * (1 + s_0633 / Km0633_194) * (1 + s_1314 / Km1314_194) - 1));
    der(s_1035) = (cell * Vmax_226 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_226) / (Km0118_226 * Km1212_226) / ((1 + s_0118 / Km0118_226) * (1 + s_1212 / Km1212_226) + (1 + s_1035 / Km1035_226) * (1 + s_1207 / Km1207_226) - 1)) - (cell * Vmax_225 * (s_0434 * s_1035 * s_1606 - s_0423 * s_0633 * s_1379 / Keq_225) / (Km0434_225 * Km1035_225 * Km1606_225) / ((1 + s_0434 / Km0434_225) * (1 + s_1035 / Km1035_225) * (1 + s_1606 / Km1606_225) + (1 + s_0423 / Km0423_225) * (1 + s_0633 / Km0633_225) * (1 + s_1379 / Km1379_225) - 1));
    der(s_1038) = (cell * Vmax_241 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_241) / (Km0959_241 * Km0991_241 * Km1212_241) / ((1 + s_0959 / Km0959_241) * (1 + s_0991 / Km0991_241) * (1 + s_1212 / Km1212_241) + (1 + s_1038 / Km1038_241) * (1 + s_1207 / Km1207_241) - 1)) - (cell * Vmax_240 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_240) / (Km1038_240 * Km1198_240) / ((1 + s_1038 / Km1038_240) * (1 + s_1198 / Km1198_240) + (1 + s_0180 / Km0180_240) * (1 + s_1025 / Km1025_240) * (1 + s_1203 / Km1203_240) - 1));
    der(s_1039) = (cell * Vmax_219 * (s_0259 - s_1039 * s_1322 / Keq_219) / Km0259_219 / (1 + s_0259 / Km0259_219 + (1 + s_1039 / Km1039_219) * (1 + s_1322 / Km1322_219) - 1)) - (cell * Vmax_77 * (s_1012 * s_1039 - s_0980 / Keq_77) / (Km1012_77 * Km1039_77) / ((1 + s_1012 / Km1012_77) * (1 + s_1039 / Km1039_77) + 1 + s_0980 / Km0980_77 - 1)) - (cell * Vmax_130 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_130) / (Km1039_130 * Km1487_130) / ((1 + s_1039 / Km1039_130) * (1 + s_1487 / Km1487_130) + (1 + s_0306 / Km0306_130) * (1 + s_1003 / Km1003_130) - 1)) - (cell * Vmax_199 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_199) / (Km0471_199 * Km1039_199) / ((1 + s_0471 / Km0471_199) * (1 + s_1039 / Km1039_199) + (1 + s_0526 / Km0526_199) * (1 + s_1337 / Km1337_199) - 1)) - (cell * Vmax_242 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_242) / (Km1039_242 * Km1302_242) / ((1 + s_1039 / Km1039_242) * (1 + s_1302 / Km1302_242) + (1 + s_0231 / Km0231_242) * (1 + s_0456 / Km0456_242) * (1 + s_0529 / Km0529_242) - 1)) - (cell * Vmax_243 * (s_0434 * s_1039 * s_1607 - s_0423 * s_0633 * s_1428 / Keq_243) / (Km0434_243 * Km1039_243 * Km1607_243) / ((1 + s_0434 / Km0434_243) * (1 + s_1039 / Km1039_243) * (1 + s_1607 / Km1607_243) + (1 + s_0423 / Km0423_243) * (1 + s_0633 / Km0633_243) * (1 + s_1428 / Km1428_243) - 1)) - (cell * Vmax_262 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_262) / (Km0086_262 * Km1039_262) / ((1 + s_0086 / Km0086_262) * (1 + s_1039 / Km1039_262) + (1 + s_0764 / Km0764_262) * (1 + s_1048 / Km1048_262) - 1));
    der(s_1045) = (cell * Vmax_253 * (s_1238 - s_1045 * s_1322 / Keq_253) / Km1238_253 / (1 + s_1238 / Km1238_253 + (1 + s_1045 / Km1045_253) * (1 + s_1322 / Km1322_253) - 1)) - (cell * Vmax_254 * (s_0434 * s_1045 * s_1608 - s_0423 * s_0633 * s_1491 / Keq_254) / (Km0434_254 * Km1045_254 * Km1608_254) / ((1 + s_0434 / Km0434_254) * (1 + s_1045 / Km1045_254) * (1 + s_1608 / Km1608_254) + (1 + s_0423 / Km0423_254) * (1 + s_0633 / Km0633_254) * (1 + s_1491 / Km1491_254) - 1));
    der(s_1048) = (cell * Vmax_262 * (s_0086 * s_1039 - s_0764 * s_1048 / Keq_262) / (Km0086_262 * Km1039_262) / ((1 + s_0086 / Km0086_262) * (1 + s_1039 / Km1039_262) + (1 + s_0764 / Km0764_262) * (1 + s_1048 / Km1048_262) - 1)) - (cell * Vmax_263 * (s_0434 * s_1048 * s_1610 - s_0423 * s_0633 * s_1527 / Keq_263) / (Km0434_263 * Km1048_263 * Km1610_263) / ((1 + s_0434 / Km0434_263) * (1 + s_1048 / Km1048_263) * (1 + s_1610 / Km1610_263) + (1 + s_0423 / Km0423_263) * (1 + s_0633 / Km0633_263) * (1 + s_1527 / Km1527_263) - 1));
    der(s_1051) = (cell * Vmax_264 * (s_0204 * s_0991 - s_0180 * s_1051 / Keq_264) / (Km0204_264 * Km0991_264) / ((1 + s_0204 / Km0204_264) * (1 + s_0991 / Km0991_264) + (1 + s_0180 / Km0180_264) * (1 + s_1051 / Km1051_264) - 1)) - (cell * Vmax_265 * (s_0434 * s_1051 * s_1612 - s_0423 * s_0633 * s_1533 / Keq_265) / (Km0434_265 * Km1051_265 * Km1612_265) / ((1 + s_0434 / Km0434_265) * (1 + s_1051 / Km1051_265) * (1 + s_1612 / Km1612_265) + (1 + s_0423 / Km0423_265) * (1 + s_0633 / Km0633_265) * (1 + s_1533 / Km1533_265) - 1));
    der(s_1056) = (cell * Vmax_268 * (s_0232 * s_0991 - s_0180 * s_1056 / Keq_268) / (Km0232_268 * Km0991_268) / ((1 + s_0232 / Km0232_268) * (1 + s_0991 / Km0991_268) + (1 + s_0180 / Km0180_268) * (1 + s_1056 / Km1056_268) - 1)) - (cell * Vmax_269 * (s_0434 * s_1056 * s_1614 - s_0423 * s_0633 * s_1561 / Keq_269) / (Km0434_269 * Km1056_269 * Km1614_269) / ((1 + s_0434 / Km0434_269) * (1 + s_1056 / Km1056_269) * (1 + s_1614 / Km1614_269) + (1 + s_0423 / Km0423_269) * (1 + s_0633 / Km0633_269) * (1 + s_1561 / Km1561_269) - 1));
    der(s_1059) = (cell * Vmax_166 * (s_0037 - s_1059 / Keq_166) / Km0037_166 / (1 + s_0037 / Km0037_166 + 1 + s_1059 / Km1059_166 - 1)) - (cell * Vmax_81 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_81) / (Km1059_81 * pow(Km1212_81, 3) * pow(Km1275_81, 3)) / ((1 + s_1059 / Km1059_81) * pow(1 + s_1212 / Km1212_81, 3) * pow(1 + s_1275 / Km1275_81, 3) + (1 + s_0262 / Km0262_81) * (1 + s_0722 / Km0722_81) * pow(1 + s_1207 / Km1207_81, 3) - 1)) - (3.2e-05 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1065) = (cell * Vmax_97 * (s_0595 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_97) / (Km0595_97 * Km1101_97 * pow(Km1212_97, 2)) / ((1 + s_0595 / Km0595_97) * (1 + s_1101 / Km1101_97) * pow(1 + s_1212 / Km1212_97, 2) + (1 + s_0456 / Km0456_97) * (1 + s_0529 / Km0529_97) * (1 + s_1065 / Km1065_97) * pow(1 + s_1207 / Km1207_97, 2) - 1)) + (cell * Vmax_105 * (s_0423 * s_0633 * s_1073 - s_0434 * s_0529 * s_1065 / Keq_105) / (Km0423_105 * Km0633_105 * Km1073_105) / ((1 + s_0423 / Km0423_105) * (1 + s_0633 / Km0633_105) * (1 + s_1073 / Km1073_105) + (1 + s_0434 / Km0434_105) * (1 + s_0529 / Km0529_105) * (1 + s_1065 / Km1065_105) - 1)) - (cell * Vmax_98 * (s_1065 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_98) / (Km1065_98 * Km1101_98 * pow(Km1212_98, 2)) / ((1 + s_1065 / Km1065_98) * (1 + s_1101 / Km1101_98) * pow(1 + s_1212 / Km1212_98, 2) + (1 + s_0456 / Km0456_98) * (1 + s_0529 / Km0529_98) * (1 + s_1161 / Km1161_98) * pow(1 + s_1207 / Km1207_98, 2) - 1));
    der(s_1073) = (cell * Vmax_107 * (s_0602 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_107) / (Km0602_107 * Km1101_107 * pow(Km1212_107, 2)) / ((1 + s_0602 / Km0602_107) * (1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) + (1 + s_0456 / Km0456_107) * (1 + s_0529 / Km0529_107) * (1 + s_1073 / Km1073_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) - (cell * Vmax_105 * (s_0423 * s_0633 * s_1073 - s_0434 * s_0529 * s_1065 / Keq_105) / (Km0423_105 * Km0633_105 * Km1073_105) / ((1 + s_0423 / Km0423_105) * (1 + s_0633 / Km0633_105) * (1 + s_1073 / Km1073_105) + (1 + s_0434 / Km0434_105) * (1 + s_0529 / Km0529_105) * (1 + s_1065 / Km1065_105) - 1)) - (cell * Vmax_108 * (s_1073 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_108) / (Km1073_108 * Km1101_108 * pow(Km1212_108, 2)) / ((1 + s_1073 / Km1073_108) * (1 + s_1101 / Km1101_108) * pow(1 + s_1212 / Km1212_108, 2) + (1 + s_0456 / Km0456_108) * (1 + s_0529 / Km0529_108) * (1 + s_1176 / Km1176_108) * pow(1 + s_1207 / Km1207_108, 2) - 1));
    der(s_1077) = (cell * Vmax_168 * (s_0434 * s_1021 * s_1598 - s_0423 * s_0633 * s_1077 / Keq_168) / (Km0434_168 * Km1021_168 * Km1598_168) / ((1 + s_0434 / Km0434_168) * (1 + s_1021 / Km1021_168) * (1 + s_1598 / Km1598_168) + (1 + s_0423 / Km0423_168) * (1 + s_0633 / Km0633_168) * (1 + s_1077 / Km1077_168) - 1)) - (0.2964 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1084) = (cell * Vmax_101 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(s_0456, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_101) / (pow(Km1101_101, 3) * pow(Km1212_101, 6) * Km1449_101) / (pow(1 + s_1101 / Km1101_101, 3) * pow(1 + s_1212 / Km1212_101, 6) * (1 + s_1449 / Km1449_101) + pow(1 + s_0456 / Km0456_101, 3) * pow(1 + s_0529 / Km0529_101, 3) * (1 + s_1084 / Km1084_101) * pow(1 + s_1207 / Km1207_101, 6) - 1)) - (cell * Vmax_87 * (s_1084 * s_1445 - s_0475 / Keq_87) / (Km1084_87 * Km1445_87) / ((1 + s_1084 / Km1084_87) * (1 + s_1445 / Km1445_87) + 1 + s_0475 / Km0475_87 - 1)) - (cell * Vmax_221 * (s_1084 * s_1366 - s_0481 / Keq_221) / (Km1084_221 * Km1366_221) / ((1 + s_1084 / Km1084_221) * (1 + s_1366 / Km1366_221) + 1 + s_0481 / Km0481_221 - 1));
    der(s_1099) = (cell * Vmax_169 * (s_0434 * s_1025 * s_1600 - s_0423 * s_0633 * s_1099 / Keq_169) / (Km0434_169 * Km1025_169 * Km1600_169) / ((1 + s_0434 / Km0434_169) * (1 + s_1025 / Km1025_169) * (1 + s_1600 / Km1600_169) + (1 + s_0423 / Km0423_169) * (1 + s_0633 / Km0633_169) * (1 + s_1099 / Km1099_169) - 1)) - (0.2862 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1101) = (cell * Vmax_27 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_27) / (Km0373_27 * Km0434_27 * Km0445_27) / ((1 + s_0373 / Km0373_27) * (1 + s_0434 / Km0434_27) * (1 + s_0445 / Km0445_27) + (1 + s_0394 / Km0394_27) * (1 + s_1101 / Km1101_27) * (1 + s_1322 / Km1322_27) - 1)) - (cell * Vmax_97 * (s_0595 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_97) / (Km0595_97 * Km1101_97 * pow(Km1212_97, 2)) / ((1 + s_0595 / Km0595_97) * (1 + s_1101 / Km1101_97) * pow(1 + s_1212 / Km1212_97, 2) + (1 + s_0456 / Km0456_97) * (1 + s_0529 / Km0529_97) * (1 + s_1065 / Km1065_97) * pow(1 + s_1207 / Km1207_97, 2) - 1)) - (cell * Vmax_98 * (s_1065 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_98) / (Km1065_98 * Km1101_98 * pow(Km1212_98, 2)) / ((1 + s_1065 / Km1065_98) * (1 + s_1101 / Km1101_98) * pow(1 + s_1212 / Km1212_98, 2) + (1 + s_0456 / Km0456_98) * (1 + s_0529 / Km0529_98) * (1 + s_1161 / Km1161_98) * pow(1 + s_1207 / Km1207_98, 2) - 1)) - (cell * Vmax_99 * (s_1101 * s_1161 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_99) / (Km1101_99 * Km1161_99 * pow(Km1212_99, 2)) / ((1 + s_1101 / Km1101_99) * (1 + s_1161 / Km1161_99) * pow(1 + s_1212 / Km1212_99, 2) + (1 + s_0456 / Km0456_99) * (1 + s_0529 / Km0529_99) * pow(1 + s_1207 / Km1207_99, 2) * (1 + s_1286 / Km1286_99) - 1)) - (cell * Vmax_100 * (s_1101 * pow(s_1212, 2) * s_1286 - s_0456 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_100) / (Km1101_100 * pow(Km1212_100, 2) * Km1286_100) / ((1 + s_1101 / Km1101_100) * pow(1 + s_1212 / Km1212_100, 2) * (1 + s_1286 / Km1286_100) + (1 + s_0456 / Km0456_100) * (1 + s_0529 / Km0529_100) * pow(1 + s_1207 / Km1207_100, 2) * (1 + s_1449 / Km1449_100) - 1)) - (3.0 * cell * Vmax_101 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(s_0456, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_101) / (pow(Km1101_101, 3) * pow(Km1212_101, 6) * Km1449_101) / (pow(1 + s_1101 / Km1101_101, 3) * pow(1 + s_1212 / Km1212_101, 6) * (1 + s_1449 / Km1449_101) + pow(1 + s_0456 / Km0456_101, 3) * pow(1 + s_0529 / Km0529_101, 3) * (1 + s_1084 / Km1084_101) * pow(1 + s_1207 / Km1207_101, 6) - 1)) - (cell * Vmax_102 * (s_1101 * pow(s_1212, 2) * s_1255 - s_0456 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_102) / (Km1101_102 * pow(Km1212_102, 2) * Km1255_102) / ((1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) * (1 + s_1255 / Km1255_102) + (1 + s_0456 / Km0456_102) * (1 + s_0529 / Km0529_102) * (1 + s_0602 / Km0602_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) - (3.0 * cell * Vmax_103 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(s_0456, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_103) / (Km0373_103 * pow(Km1101_103, 3) * pow(Km1212_103, 6)) / ((1 + s_0373 / Km0373_103) * pow(1 + s_1101 / Km1101_103, 3) * pow(1 + s_1212 / Km1212_103, 6) + pow(1 + s_0456 / Km0456_103, 3) * pow(1 + s_0529 / Km0529_103, 3) * pow(1 + s_1207 / Km1207_103, 6) * (1 + s_1255 / Km1255_103) - 1)) - (cell * Vmax_107 * (s_0602 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_107) / (Km0602_107 * Km1101_107 * pow(Km1212_107, 2)) / ((1 + s_0602 / Km0602_107) * (1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) + (1 + s_0456 / Km0456_107) * (1 + s_0529 / Km0529_107) * (1 + s_1073 / Km1073_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) - (cell * Vmax_108 * (s_1073 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_108) / (Km1073_108 * Km1101_108 * pow(Km1212_108, 2)) / ((1 + s_1073 / Km1073_108) * (1 + s_1101 / Km1101_108) * pow(1 + s_1212 / Km1212_108, 2) + (1 + s_0456 / Km0456_108) * (1 + s_0529 / Km0529_108) * (1 + s_1176 / Km1176_108) * pow(1 + s_1207 / Km1207_108, 2) - 1)) - (cell * Vmax_109 * (s_1101 * s_1176 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_109) / (Km1101_109 * Km1176_109 * pow(Km1212_109, 2)) / ((1 + s_1101 / Km1101_109) * (1 + s_1176 / Km1176_109) * pow(1 + s_1212 / Km1212_109, 2) + (1 + s_0456 / Km0456_109) * (1 + s_0529 / Km0529_109) * pow(1 + s_1207 / Km1207_109, 2) * (1 + s_1302 / Km1302_109) - 1)) - (cell * Vmax_110 * (s_1101 * pow(s_1212, 2) * s_1302 - s_0456 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_110) / (Km1101_110 * pow(Km1212_110, 2) * Km1302_110) / ((1 + s_1101 / Km1101_110) * pow(1 + s_1212 / Km1212_110, 2) * (1 + s_1302 / Km1302_110) + (1 + s_0456 / Km0456_110) * (1 + s_0529 / Km0529_110) * pow(1 + s_1207 / Km1207_110, 2) * (1 + s_1454 / Km1454_110) - 1));
    der(s_1107) = (cell * Vmax_94 * (s_0644 - s_0645 * s_1107 / Keq_94) / Km0644_94 / (1 + s_0644 / Km0644_94 + (1 + s_0645 / Km0645_94) * (1 + s_1107 / Km1107_94) - 1)) - (0.8079 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1148) = (cell * Vmax_176 * (s_0434 * s_1029 * s_1602 - s_0423 * s_0633 * s_1148 / Keq_176) / (Km0434_176 * Km1029_176 * Km1602_176) / ((1 + s_0434 / Km0434_176) * (1 + s_1029 / Km1029_176) * (1 + s_1602 / Km1602_176) + (1 + s_0423 / Km0423_176) * (1 + s_0633 / Km0633_176) * (1 + s_1148 / Km1148_176) - 1)) - (0.0507 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1153) = (cell * Vmax_181 * (s_0126 - s_1153 * s_1322 / Keq_181) / Km0126_181 / (1 + s_0126 / Km0126_181 + (1 + s_1153 / Km1153_181) * (1 + s_1322 / Km1322_181) - 1)) - (cell * Vmax_197 * (s_0471 * s_1153 - s_0089 * s_0526 / Keq_197) / (Km0471_197 * Km1153_197) / ((1 + s_0471 / Km0471_197) * (1 + s_1153 / Km1153_197) + (1 + s_0089 / Km0089_197) * (1 + s_0526 / Km0526_197) - 1));
    der(s_1161) = (cell * Vmax_98 * (s_1065 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_98) / (Km1065_98 * Km1101_98 * pow(Km1212_98, 2)) / ((1 + s_1065 / Km1065_98) * (1 + s_1101 / Km1101_98) * pow(1 + s_1212 / Km1212_98, 2) + (1 + s_0456 / Km0456_98) * (1 + s_0529 / Km0529_98) * (1 + s_1161 / Km1161_98) * pow(1 + s_1207 / Km1207_98, 2) - 1)) - (cell * Vmax_99 * (s_1101 * s_1161 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_99) / (Km1101_99 * Km1161_99 * pow(Km1212_99, 2)) / ((1 + s_1101 / Km1101_99) * (1 + s_1161 / Km1161_99) * pow(1 + s_1212 / Km1212_99, 2) + (1 + s_0456 / Km0456_99) * (1 + s_0529 / Km0529_99) * pow(1 + s_1207 / Km1207_99, 2) * (1 + s_1286 / Km1286_99) - 1));
    der(s_1176) = (cell * Vmax_108 * (s_1073 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_108) / (Km1073_108 * Km1101_108 * pow(Km1212_108, 2)) / ((1 + s_1073 / Km1073_108) * (1 + s_1101 / Km1101_108) * pow(1 + s_1212 / Km1212_108, 2) + (1 + s_0456 / Km0456_108) * (1 + s_0529 / Km0529_108) * (1 + s_1176 / Km1176_108) * pow(1 + s_1207 / Km1207_108, 2) - 1)) - (cell * Vmax_109 * (s_1101 * s_1176 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_109) / (Km1101_109 * Km1176_109 * pow(Km1212_109, 2)) / ((1 + s_1101 / Km1101_109) * (1 + s_1176 / Km1176_109) * pow(1 + s_1212 / Km1212_109, 2) + (1 + s_0456 / Km0456_109) * (1 + s_0529 / Km0529_109) * pow(1 + s_1207 / Km1207_109, 2) * (1 + s_1302 / Km1302_109) - 1));
    der(s_1182) = (cell * Vmax_30 * (s_0145 * s_0991 - s_0180 * s_1182 / Keq_30) / (Km0145_30 * Km0991_30) / ((1 + s_0145 / Km0145_30) * (1 + s_0991 / Km0991_30) + (1 + s_0180 / Km0180_30) * (1 + s_1182 / Km1182_30) - 1)) - (cell * Vmax_190 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_190) / (Km0991_190 * Km1182_190) / ((1 + s_0991 / Km0991_190) * (1 + s_1182 / Km1182_190) + (1 + s_1192 / Km1192_190) * (1 + s_1266 / Km1266_190) - 1));
    der(s_1187) = (cell * Vmax_40 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_40) / (Km0427_40 * Km1386_40) / ((1 + s_0427 / Km0427_40) * (1 + s_1386 / Km1386_40) + (1 + s_0633 / Km0633_40) * (1 + s_1187 / Km1187_40) - 1)) - (cell * Vmax_215 * (s_1187 - s_0076 / Keq_215) / Km1187_215 / (1 + s_1187 / Km1187_215 + 1 + s_0076 / Km0076_215 - 1));
    der(s_1191) = (cell * Vmax_29 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_29) / (Km0434_29 * Km1192_29) / ((1 + s_0434 / Km0434_29) * (1 + s_1192 / Km1192_29) + (1 + s_0394 / Km0394_29) * (1 + s_1191 / Km1191_29) - 1)) - (cell * Vmax_183 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_183) / (Km1191_183 * Km1212_183) / ((1 + s_1191 / Km1191_183) * (1 + s_1212 / Km1212_183) + (1 + s_0145 / Km0145_183) * (1 + s_1207 / Km1207_183) * (1 + s_1322 / Km1322_183) - 1));
    der(s_1192) = (cell * Vmax_190 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_190) / (Km0991_190 * Km1182_190) / ((1 + s_0991 / Km0991_190) * (1 + s_1182 / Km1182_190) + (1 + s_1192 / Km1192_190) * (1 + s_1266 / Km1266_190) - 1)) - (cell * Vmax_29 * (s_0434 * s_1192 - s_0394 * s_1191 / Keq_29) / (Km0434_29 * Km1192_29) / ((1 + s_0434 / Km0434_29) * (1 + s_1192 / Km1192_29) + (1 + s_0394 / Km0394_29) * (1 + s_1191 / Km1191_29) - 1));
    der(s_1194) = (cell * Vmax_47 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_47) / (Km0455_47 * Km0973_47) / ((1 + s_0455 / Km0455_47) * (1 + s_0973 / Km0973_47) + (1 + s_1194 / Km1194_47) * (1 + s_1322 / Km1322_47) - 1)) - (cell * Vmax_89 * (s_1194 - s_0061 / Keq_89) / Km1194_89 / (1 + s_1194 / Km1194_89 + 1 + s_0061 / Km0061_89 - 1));
    der(s_1198) = (cell * Vmax_4 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_4) / (Km0991_4 * Km1203_4) / ((1 + s_0991 / Km0991_4) * (1 + s_1203 / Km1203_4) + (1 + s_0118 / Km0118_4) * (1 + s_1198 / Km1198_4) - 1)) + (cell * Vmax_118 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_118) / (Km0180_118 * Km0419_118 * Km1203_118) / ((1 + s_0180 / Km0180_118) * (1 + s_0419 / Km0419_118) * (1 + s_1203 / Km1203_118) + (1 + s_0991 / Km0991_118) * (1 + s_1198 / Km1198_118) - 1)) + (cell * Vmax_126 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_126) / (Km0629_126 * Km1203_126) / ((1 + s_0629 / Km0629_126) * (1 + s_1203 / Km1203_126) + (1 + s_0767 / Km0767_126) * (1 + s_1198 / Km1198_126) - 1)) + (cell * Vmax_184 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_184) / (Km1203_184 * Km1537_184) / ((1 + s_1203 / Km1203_184) * (1 + s_1537 / Km1537_184) + (1 + s_1198 / Km1198_184) * (1 + s_1535 / Km1535_184) - 1)) + (cell * Vmax_246 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_246) / (Km1203_246 * Km1275_246 * Km1447_246) / ((1 + s_1203 / Km1203_246) * (1 + s_1275 / Km1275_246) * (1 + s_1447 / Km1447_246) + (1 + s_0037 / Km0037_246) * (1 + s_1198 / Km1198_246) - 1)) - (cell * Vmax_20 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_20) / (Km0009_20 * Km1198_20) / ((1 + s_0009 / Km0009_20) * (1 + s_1198 / Km1198_20) + (1 + s_0010 / Km0010_20) * (1 + s_1203 / Km1203_20) - 1)) - (cell * Vmax_56 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_56) / (Km0297_56 * Km1198_56) / ((1 + s_0297 / Km0297_56) * (1 + s_1198 / Km1198_56) + (1 + s_0209 / Km0209_56) * (1 + s_0456 / Km0456_56) * (1 + s_1203 / Km1203_56) - 1)) - (cell * Vmax_125 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_125) / (Km0764_125 * Km1198_125 * Km1322_125) / ((1 + s_0764 / Km0764_125) * (1 + s_1198 / Km1198_125) * (1 + s_1322 / Km1322_125) + (1 + s_0075 / Km0075_125) * (1 + s_1203 / Km1203_125) - 1)) - (cell * Vmax_129 * (s_1003 * s_1198 * s_1487 - s_0306 * s_0419 * s_0456 * s_1203 / Keq_129) / (Km1003_129 * Km1198_129 * Km1487_129) / ((1 + s_1003 / Km1003_129) * (1 + s_1198 / Km1198_129) * (1 + s_1487 / Km1487_129) + (1 + s_0306 / Km0306_129) * (1 + s_0419 / Km0419_129) * (1 + s_0456 / Km0456_129) * (1 + s_1203 / Km1203_129) - 1)) - (2.0 * cell * Vmax_138 * (s_1010 * pow(s_1198, 2) - s_1006 * pow(s_1203, 2) / Keq_138) / (Km1010_138 * pow(Km1198_138, 2)) / ((1 + s_1010 / Km1010_138) * pow(1 + s_1198 / Km1198_138, 2) + (1 + s_1006 / Km1006_138) * pow(1 + s_1203 / Km1203_138, 2) - 1)) - (cell * Vmax_144 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_144) / (Km0836_144 * Km1198_144) / ((1 + s_0836 / Km0836_144) * (1 + s_1198 / Km1198_144) + (1 + s_0176 / Km0176_144) * (1 + s_1203 / Km1203_144) * (1 + s_0456 / Km0456_144) - 1)) - (cell * Vmax_153 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_153) / (Km0849_153 * Km1198_153) / ((1 + s_0849 / Km0849_153) * (1 + s_1198 / Km1198_153) + (1 + s_1203 / Km1203_153) * (1 + s_1565 / Km1565_153) - 1)) - (cell * Vmax_158 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_158) / (Km0940_158 * Km1198_158) / ((1 + s_0940 / Km0940_158) * (1 + s_1198 / Km1198_158) + (1 + s_0180 / Km0180_158) * (1 + s_0456 / Km0456_158) * (1 + s_1203 / Km1203_158) - 1)) - (cell * Vmax_170 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_170) / (Km0066_170 * Km1198_170) / ((1 + s_0066 / Km0066_170) * (1 + s_1198 / Km1198_170) + (1 + s_1203 / Km1203_170) * (1 + s_1271 / Km1271_170) - 1)) - (cell * Vmax_177 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_177) / (Km0306_177 * Km1198_177) / ((1 + s_0306 / Km0306_177) * (1 + s_1198 / Km1198_177) + (1 + s_0304 / Km0304_177) * (1 + s_1203 / Km1203_177) - 1)) - (cell * Vmax_203 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_203) / (Km0260_203 * Km1198_203) / ((1 + s_0260 / Km0260_203) * (1 + s_1198 / Km1198_203) + (1 + s_0258 / Km0258_203) * (1 + s_1203 / Km1203_203) - 1)) - (cell * Vmax_228 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_228) / (Km0529_228 * Km1198_228 * Km1399_228) / ((1 + s_0529 / Km0529_228) * (1 + s_1198 / Km1198_228) * (1 + s_1399 / Km1399_228) + (1 + s_0373 / Km0373_228) * (1 + s_0456 / Km0456_228) * (1 + s_1203 / Km1203_228) - 1)) - (cell * Vmax_240 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_240) / (Km1038_240 * Km1198_240) / ((1 + s_1038 / Km1038_240) * (1 + s_1198 / Km1198_240) + (1 + s_0180 / Km0180_240) * (1 + s_1025 / Km1025_240) * (1 + s_1203 / Km1203_240) - 1));
    der(s_1203) = (cell * Vmax_20 * (s_0009 * s_1198 - s_0010 * s_1203 / Keq_20) / (Km0009_20 * Km1198_20) / ((1 + s_0009 / Km0009_20) * (1 + s_1198 / Km1198_20) + (1 + s_0010 / Km0010_20) * (1 + s_1203 / Km1203_20) - 1)) + (cell * Vmax_56 * (s_0297 * s_1198 - s_0209 * s_0456 * s_1203 / Keq_56) / (Km0297_56 * Km1198_56) / ((1 + s_0297 / Km0297_56) * (1 + s_1198 / Km1198_56) + (1 + s_0209 / Km0209_56) * (1 + s_0456 / Km0456_56) * (1 + s_1203 / Km1203_56) - 1)) + (cell * Vmax_125 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_125) / (Km0764_125 * Km1198_125 * Km1322_125) / ((1 + s_0764 / Km0764_125) * (1 + s_1198 / Km1198_125) * (1 + s_1322 / Km1322_125) + (1 + s_0075 / Km0075_125) * (1 + s_1203 / Km1203_125) - 1)) + (cell * Vmax_129 * (s_1003 * s_1198 * s_1487 - s_0306 * s_0419 * s_0456 * s_1203 / Keq_129) / (Km1003_129 * Km1198_129 * Km1487_129) / ((1 + s_1003 / Km1003_129) * (1 + s_1198 / Km1198_129) * (1 + s_1487 / Km1487_129) + (1 + s_0306 / Km0306_129) * (1 + s_0419 / Km0419_129) * (1 + s_0456 / Km0456_129) * (1 + s_1203 / Km1203_129) - 1)) + (2.0 * cell * Vmax_138 * (s_1010 * pow(s_1198, 2) - s_1006 * pow(s_1203, 2) / Keq_138) / (Km1010_138 * pow(Km1198_138, 2)) / ((1 + s_1010 / Km1010_138) * pow(1 + s_1198 / Km1198_138, 2) + (1 + s_1006 / Km1006_138) * pow(1 + s_1203 / Km1203_138, 2) - 1)) + (cell * Vmax_144 * (s_0836 * s_1198 - s_0176 * s_1203 * s_0456 / Keq_144) / (Km0836_144 * Km1198_144) / ((1 + s_0836 / Km0836_144) * (1 + s_1198 / Km1198_144) + (1 + s_0176 / Km0176_144) * (1 + s_1203 / Km1203_144) * (1 + s_0456 / Km0456_144) - 1)) + (cell * Vmax_153 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_153) / (Km0849_153 * Km1198_153) / ((1 + s_0849 / Km0849_153) * (1 + s_1198 / Km1198_153) + (1 + s_1203 / Km1203_153) * (1 + s_1565 / Km1565_153) - 1)) + (cell * Vmax_158 * (s_0940 * s_1198 - s_0180 * s_0456 * s_1203 / Keq_158) / (Km0940_158 * Km1198_158) / ((1 + s_0940 / Km0940_158) * (1 + s_1198 / Km1198_158) + (1 + s_0180 / Km0180_158) * (1 + s_0456 / Km0456_158) * (1 + s_1203 / Km1203_158) - 1)) + (cell * Vmax_170 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_170) / (Km0066_170 * Km1198_170) / ((1 + s_0066 / Km0066_170) * (1 + s_1198 / Km1198_170) + (1 + s_1203 / Km1203_170) * (1 + s_1271 / Km1271_170) - 1)) + (cell * Vmax_177 * (s_0306 * s_1198 - s_0304 * s_1203 / Keq_177) / (Km0306_177 * Km1198_177) / ((1 + s_0306 / Km0306_177) * (1 + s_1198 / Km1198_177) + (1 + s_0304 / Km0304_177) * (1 + s_1203 / Km1203_177) - 1)) + (cell * Vmax_203 * (s_0260 * s_1198 - s_0258 * s_1203 / Keq_203) / (Km0260_203 * Km1198_203) / ((1 + s_0260 / Km0260_203) * (1 + s_1198 / Km1198_203) + (1 + s_0258 / Km0258_203) * (1 + s_1203 / Km1203_203) - 1)) + (cell * Vmax_228 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_228) / (Km0529_228 * Km1198_228 * Km1399_228) / ((1 + s_0529 / Km0529_228) * (1 + s_1198 / Km1198_228) * (1 + s_1399 / Km1399_228) + (1 + s_0373 / Km0373_228) * (1 + s_0456 / Km0456_228) * (1 + s_1203 / Km1203_228) - 1)) + (cell * Vmax_240 * (s_1038 * s_1198 - s_0180 * s_1025 * s_1203 / Keq_240) / (Km1038_240 * Km1198_240) / ((1 + s_1038 / Km1038_240) * (1 + s_1198 / Km1198_240) + (1 + s_0180 / Km0180_240) * (1 + s_1025 / Km1025_240) * (1 + s_1203 / Km1203_240) - 1)) - (cell * Vmax_4 * (s_0991 * s_1203 - s_0118 * s_1198 / Keq_4) / (Km0991_4 * Km1203_4) / ((1 + s_0991 / Km0991_4) * (1 + s_1203 / Km1203_4) + (1 + s_0118 / Km0118_4) * (1 + s_1198 / Km1198_4) - 1)) - (cell * Vmax_118 * (s_0180 * s_0419 * s_1203 - s_0991 * s_1198 / Keq_118) / (Km0180_118 * Km0419_118 * Km1203_118) / ((1 + s_0180 / Km0180_118) * (1 + s_0419 / Km0419_118) * (1 + s_1203 / Km1203_118) + (1 + s_0991 / Km0991_118) * (1 + s_1198 / Km1198_118) - 1)) - (cell * Vmax_126 * (s_0629 * s_1203 - s_0767 * s_1198 / Keq_126) / (Km0629_126 * Km1203_126) / ((1 + s_0629 / Km0629_126) * (1 + s_1203 / Km1203_126) + (1 + s_0767 / Km0767_126) * (1 + s_1198 / Km1198_126) - 1)) - (cell * Vmax_184 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_184) / (Km1203_184 * Km1537_184) / ((1 + s_1203 / Km1203_184) * (1 + s_1537 / Km1537_184) + (1 + s_1198 / Km1198_184) * (1 + s_1535 / Km1535_184) - 1)) - (cell * Vmax_246 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_246) / (Km1203_246 * Km1275_246 * Km1447_246) / ((1 + s_1203 / Km1203_246) * (1 + s_1275 / Km1275_246) * (1 + s_1447 / Km1447_246) + (1 + s_0037 / Km0037_246) * (1 + s_1198 / Km1198_246) - 1));
    der(s_1207) = (cell * Vmax_6 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_6) / (Km0141_6 * Km1212_6) / ((1 + s_0141 / Km0141_6) * (1 + s_1212 / Km1212_6) + (1 + s_0142 / Km0142_6) * (1 + s_1207 / Km1207_6) - 1)) + (cell * Vmax_18 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_18) / (Km0231_18 * Km1212_18) / ((1 + s_0231 / Km0231_18) * (1 + s_1212 / Km1212_18) + (1 + s_1207 / Km1207_18) * (1 + s_1445 / Km1445_18) - 1)) + (cell * Vmax_23 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_23) / (Km0306_23 * Km1212_23) / ((1 + s_0306 / Km0306_23) * (1 + s_1212 / Km1212_23) + (1 + s_0322 / Km0322_23) * (1 + s_1207 / Km1207_23) - 1)) + (cell * Vmax_24 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_24) / (Km0146_24 * Km1212_24) / ((1 + s_0146 / Km0146_24) * (1 + s_1212 / Km1212_24) + (1 + s_0016 / Km0016_24) * (1 + s_1207 / Km1207_24) - 1)) + (cell * Vmax_50 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_50) / (Km0295_50 * Km1212_50) / ((1 + s_0295 / Km0295_50) * (1 + s_1212 / Km1212_50) + (1 + s_0978 / Km0978_50) * (1 + s_1207 / Km1207_50) * (1 + s_1322 / Km1322_50) - 1)) + (cell * Vmax_53 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_53) / (Km0262_53 * Km1212_53) / ((1 + s_0262 / Km0262_53) * (1 + s_1212 / Km1212_53) + (1 + s_0122 / Km0122_53) * (1 + s_1207 / Km1207_53) - 1)) + (cell * Vmax_54 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_54) / (Km0664_54 * Km1212_54 * Km1275_54) / ((1 + s_0664 / Km0664_54) * (1 + s_1212 / Km1212_54) * (1 + s_1275 / Km1275_54) + (1 + s_0662 / Km0662_54) * (1 + s_1207 / Km1207_54) - 1)) + (cell * Vmax_57 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_57) / (Km0209_57 * Km1212_57) / ((1 + s_0209 / Km0209_57) * (1 + s_1212 / Km1212_57) + (1 + s_0296 / Km0296_57) * (1 + s_1207 / Km1207_57) - 1)) + (cell * Vmax_58 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_58) / (Km1212_58 * Km1579_58) / ((1 + s_1212 / Km1212_58) * (1 + s_1579 / Km1579_58) + (1 + s_1207 / Km1207_58) * (1 + s_1569 / Km1569_58) - 1)) + (cell * Vmax_59 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_59) / (Km0296_59 * Km1212_59 * Km1275_59) / ((1 + s_0296 / Km0296_59) * (1 + s_1212 / Km1212_59) * (1 + s_1275 / Km1275_59) + (1 + s_1207 / Km1207_59) * (1 + s_1576 / Km1576_59) - 1)) + (cell * Vmax_60 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_60) / (Km1212_60 * Km1275_60 * Km1576_60) / ((1 + s_1212 / Km1212_60) * (1 + s_1275 / Km1275_60) * (1 + s_1576 / Km1576_60) + (1 + s_1207 / Km1207_60) * (1 + s_1577 / Km1577_60) - 1)) + (cell * Vmax_61 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_61) / (Km1212_61 * Km1275_61 * Km1577_61) / ((1 + s_1212 / Km1212_61) * (1 + s_1275 / Km1275_61) * (1 + s_1577 / Km1577_61) + (1 + s_1207 / Km1207_61) * (1 + s_1578 / Km1578_61) - 1)) + (3.0 * cell * Vmax_62 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_62) / (Km0122_62 * pow(Km1212_62, 3) * pow(Km1275_62, 3)) / ((1 + s_0122 / Km0122_62) * pow(1 + s_1212 / Km1212_62, 3) * pow(1 + s_1275 / Km1275_62, 3) + (1 + s_0297 / Km0297_62) * pow(1 + s_1207 / Km1207_62, 3) - 1)) + (cell * Vmax_63 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_63) / (Km0657_63 * Km1212_63 * Km1275_63) / ((1 + s_0657 / Km0657_63) * (1 + s_1212 / Km1212_63) * (1 + s_1275 / Km1275_63) + (1 + s_0664 / Km0664_63) * (1 + s_1207 / Km1207_63) - 1)) + (cell * Vmax_65 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_65) / (Km0662_65 * Km1212_65) / ((1 + s_0662 / Km0662_65) * (1 + s_1212 / Km1212_65) + (1 + s_0666 / Km0666_65) * (1 + s_1207 / Km1207_65) - 1)) + (cell * Vmax_68 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_68) / (Km0475_68 * Km1212_68 * Km1275_68) / ((1 + s_0475 / Km0475_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_0481 / Km0481_68) * (1 + s_1207 / Km1207_68) - 1)) + (cell * Vmax_69 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_69) / (Km0481_69 * Km1212_69 * Km1275_69) / ((1 + s_0481 / Km0481_69) * (1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) + (1 + s_0493 / Km0493_69) * (1 + s_1207 / Km1207_69) - 1)) + (cell * Vmax_70 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_70) / (Km0493_70 * Km1212_70 * Km1275_70) / ((1 + s_0493 / Km0493_70) * (1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) + (1 + s_0499 / Km0499_70) * (1 + s_1207 / Km1207_70) - 1)) + (3.0 * cell * Vmax_81 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_81) / (Km1059_81 * pow(Km1212_81, 3) * pow(Km1275_81, 3)) / ((1 + s_1059 / Km1059_81) * pow(1 + s_1212 / Km1212_81, 3) * pow(1 + s_1275 / Km1275_81, 3) + (1 + s_0262 / Km0262_81) * (1 + s_0722 / Km0722_81) * pow(1 + s_1207 / Km1207_81, 3) - 1)) + (cell * Vmax_88 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_88) / (Km0625_88 * Km1212_88) / ((1 + s_0625 / Km0625_88) * (1 + s_1212 / Km1212_88) + (1 + s_1207 / Km1207_88) * (1 + s_1487 / Km1487_88) - 1)) + (2.0 * cell * Vmax_97 * (s_0595 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_97) / (Km0595_97 * Km1101_97 * pow(Km1212_97, 2)) / ((1 + s_0595 / Km0595_97) * (1 + s_1101 / Km1101_97) * pow(1 + s_1212 / Km1212_97, 2) + (1 + s_0456 / Km0456_97) * (1 + s_0529 / Km0529_97) * (1 + s_1065 / Km1065_97) * pow(1 + s_1207 / Km1207_97, 2) - 1)) + (2.0 * cell * Vmax_98 * (s_1065 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_98) / (Km1065_98 * Km1101_98 * pow(Km1212_98, 2)) / ((1 + s_1065 / Km1065_98) * (1 + s_1101 / Km1101_98) * pow(1 + s_1212 / Km1212_98, 2) + (1 + s_0456 / Km0456_98) * (1 + s_0529 / Km0529_98) * (1 + s_1161 / Km1161_98) * pow(1 + s_1207 / Km1207_98, 2) - 1)) + (2.0 * cell * Vmax_99 * (s_1101 * s_1161 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_99) / (Km1101_99 * Km1161_99 * pow(Km1212_99, 2)) / ((1 + s_1101 / Km1101_99) * (1 + s_1161 / Km1161_99) * pow(1 + s_1212 / Km1212_99, 2) + (1 + s_0456 / Km0456_99) * (1 + s_0529 / Km0529_99) * pow(1 + s_1207 / Km1207_99, 2) * (1 + s_1286 / Km1286_99) - 1)) + (2.0 * cell * Vmax_100 * (s_1101 * pow(s_1212, 2) * s_1286 - s_0456 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_100) / (Km1101_100 * pow(Km1212_100, 2) * Km1286_100) / ((1 + s_1101 / Km1101_100) * pow(1 + s_1212 / Km1212_100, 2) * (1 + s_1286 / Km1286_100) + (1 + s_0456 / Km0456_100) * (1 + s_0529 / Km0529_100) * pow(1 + s_1207 / Km1207_100, 2) * (1 + s_1449 / Km1449_100) - 1)) + (6.0 * cell * Vmax_101 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(s_0456, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_101) / (pow(Km1101_101, 3) * pow(Km1212_101, 6) * Km1449_101) / (pow(1 + s_1101 / Km1101_101, 3) * pow(1 + s_1212 / Km1212_101, 6) * (1 + s_1449 / Km1449_101) + pow(1 + s_0456 / Km0456_101, 3) * pow(1 + s_0529 / Km0529_101, 3) * (1 + s_1084 / Km1084_101) * pow(1 + s_1207 / Km1207_101, 6) - 1)) + (2.0 * cell * Vmax_102 * (s_1101 * pow(s_1212, 2) * s_1255 - s_0456 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_102) / (Km1101_102 * pow(Km1212_102, 2) * Km1255_102) / ((1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) * (1 + s_1255 / Km1255_102) + (1 + s_0456 / Km0456_102) * (1 + s_0529 / Km0529_102) * (1 + s_0602 / Km0602_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) + (6.0 * cell * Vmax_103 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(s_0456, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_103) / (Km0373_103 * pow(Km1101_103, 3) * pow(Km1212_103, 6)) / ((1 + s_0373 / Km0373_103) * pow(1 + s_1101 / Km1101_103, 3) * pow(1 + s_1212 / Km1212_103, 6) + pow(1 + s_0456 / Km0456_103, 3) * pow(1 + s_0529 / Km0529_103, 3) * pow(1 + s_1207 / Km1207_103, 6) * (1 + s_1255 / Km1255_103) - 1)) + (2.0 * cell * Vmax_107 * (s_0602 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_107) / (Km0602_107 * Km1101_107 * pow(Km1212_107, 2)) / ((1 + s_0602 / Km0602_107) * (1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) + (1 + s_0456 / Km0456_107) * (1 + s_0529 / Km0529_107) * (1 + s_1073 / Km1073_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) + (2.0 * cell * Vmax_108 * (s_1073 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_108) / (Km1073_108 * Km1101_108 * pow(Km1212_108, 2)) / ((1 + s_1073 / Km1073_108) * (1 + s_1101 / Km1101_108) * pow(1 + s_1212 / Km1212_108, 2) + (1 + s_0456 / Km0456_108) * (1 + s_0529 / Km0529_108) * (1 + s_1176 / Km1176_108) * pow(1 + s_1207 / Km1207_108, 2) - 1)) + (2.0 * cell * Vmax_109 * (s_1101 * s_1176 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_109) / (Km1101_109 * Km1176_109 * pow(Km1212_109, 2)) / ((1 + s_1101 / Km1101_109) * (1 + s_1176 / Km1176_109) * pow(1 + s_1212 / Km1212_109, 2) + (1 + s_0456 / Km0456_109) * (1 + s_0529 / Km0529_109) * pow(1 + s_1207 / Km1207_109, 2) * (1 + s_1302 / Km1302_109) - 1)) + (2.0 * cell * Vmax_110 * (s_1101 * pow(s_1212, 2) * s_1302 - s_0456 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_110) / (Km1101_110 * pow(Km1212_110, 2) * Km1302_110) / ((1 + s_1101 / Km1101_110) * pow(1 + s_1212 / Km1212_110, 2) * (1 + s_1302 / Km1302_110) + (1 + s_0456 / Km0456_110) * (1 + s_0529 / Km0529_110) * pow(1 + s_1207 / Km1207_110, 2) * (1 + s_1454 / Km1454_110) - 1)) + (cell * Vmax_119 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_119) / (Km0180_119 * Km0419_119 * Km1212_119) / ((1 + s_0180 / Km0180_119) * (1 + s_0419 / Km0419_119) * (1 + s_1212 / Km1212_119) + (1 + s_0991 / Km0991_119) * (1 + s_1207 / Km1207_119) - 1)) + (cell * Vmax_123 * (s_0754 * s_1212 - pow(s_0750, 2) * s_1207 / Keq_123) / (Km0754_123 * Km1212_123) / ((1 + s_0754 / Km0754_123) * (1 + s_1212 / Km1212_123) + pow(1 + s_0750 / Km0750_123, 2) * (1 + s_1207 / Km1207_123) - 1)) + (cell * Vmax_145 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_145) / (Km0978_145 * Km1212_145) / ((1 + s_0978 / Km0978_145) * (1 + s_1212 / Km1212_145) + (1 + s_1014 / Km1014_145) * (1 + s_1207 / Km1207_145) - 1)) + (2.0 * cell * Vmax_149 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_149) / (Km0218_149 * pow(Km1212_149, 2)) / ((1 + s_0218 / Km0218_149) * pow(1 + s_1212 / Km1212_149, 2) + (1 + s_0028 / Km0028_149) * (1 + s_0529 / Km0529_149) * pow(1 + s_1207 / Km1207_149, 2) - 1)) + (cell * Vmax_163 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_163) / (Km0039_163 * Km1212_163) / ((1 + s_0039 / Km0039_163) * (1 + s_1212 / Km1212_163) + (1 + s_0008 / Km0008_163) * (1 + s_1207 / Km1207_163) - 1)) + (cell * Vmax_165 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_165) / (Km0953_165 * Km1212_165) / ((1 + s_0953 / Km0953_165) * (1 + s_1212 / Km1212_165) + (1 + s_0959 / Km0959_165) * (1 + s_1207 / Km1207_165) - 1)) + (cell * Vmax_183 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_183) / (Km1191_183 * Km1212_183) / ((1 + s_1191 / Km1191_183) * (1 + s_1212 / Km1212_183) + (1 + s_0145 / Km0145_183) * (1 + s_1207 / Km1207_183) * (1 + s_1322 / Km1322_183) - 1)) + (cell * Vmax_222 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_222) / (Km1212_222 * Km1275_222 * Km1445_222) / ((1 + s_1212 / Km1212_222) * (1 + s_1275 / Km1275_222) * (1 + s_1445 / Km1445_222) + (1 + s_1207 / Km1207_222) * (1 + s_1366 / Km1366_222) - 1)) + (cell * Vmax_226 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_226) / (Km0118_226 * Km1212_226) / ((1 + s_0118 / Km0118_226) * (1 + s_1212 / Km1212_226) + (1 + s_1035 / Km1035_226) * (1 + s_1207 / Km1207_226) - 1)) + (cell * Vmax_241 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_241) / (Km0959_241 * Km0991_241 * Km1212_241) / ((1 + s_0959 / Km0959_241) * (1 + s_0991 / Km0991_241) * (1 + s_1212 / Km1212_241) + (1 + s_1038 / Km1038_241) * (1 + s_1207 / Km1207_241) - 1)) + (cell * Vmax_244 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_244) / (Km0211_244 * Km1212_244) / ((1 + s_0211 / Km0211_244) * (1 + s_1212 / Km1212_244) + (1 + s_1207 / Km1207_244) * (1 + s_1429 / Km1429_244) - 1)) + (cell * Vmax_247 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_247) / (Km1212_247 * Km1275_247 * Km1447_247) / ((1 + s_1212 / Km1212_247) * (1 + s_1275 / Km1275_247) * (1 + s_1447 / Km1447_247) + (1 + s_0037 / Km0037_247) * (1 + s_1207 / Km1207_247) - 1)) + (cell * Vmax_248 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_248) / (pow(Km0190_248, 2) * Km1212_248) / (pow(1 + s_0190 / Km0190_248, 2) * (1 + s_1212 / Km1212_248) + pow(1 + s_0633 / Km0633_248, 2) * (1 + s_1207 / Km1207_248) * (1 + s_1447 / Km1447_248) - 1)) + (3.0 * cell * Vmax_251 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_251) / (pow(Km1212_251, 3) * Km1469_251) / (pow(1 + s_1212 / Km1212_251, 3) * (1 + s_1469 / Km1469_251) + (1 + s_0841 / Km0841_251) * pow(1 + s_1207 / Km1207_251, 3) - 1)) + (cell * Vmax_252 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_252) / (Km1212_252 * Km1620_252) / ((1 + s_1212 / Km1212_252) * (1 + s_1620 / Km1620_252) + (1 + s_1207 / Km1207_252) * (1 + s_1616 / Km1616_252) - 1)) - (cell * Vmax_55 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_55) / (Km1207_55 * Km1578_55) / ((1 + s_1207 / Km1207_55) * (1 + s_1578 / Km1578_55) + (1 + s_0456 / Km0456_55) * (1 + s_1212 / Km1212_55) * (1 + s_1579 / Km1579_55) - 1)) - (cell * Vmax_159 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_159) / (Km0940_159 * Km1207_159) / ((1 + s_0940 / Km0940_159) * (1 + s_1207 / Km1207_159) + (1 + s_0180 / Km0180_159) * (1 + s_0456 / Km0456_159) * (1 + s_1212 / Km1212_159) - 1)) - (cell * Vmax_178 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_178) / (Km0306_178 * Km1207_178) / ((1 + s_0306 / Km0306_178) * (1 + s_1207 / Km1207_178) + (1 + s_0304 / Km0304_178) * (1 + s_1212 / Km1212_178) - 1)) - (cell * Vmax_224 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_224) / (Km1207_224 * Km1377_224) / ((1 + s_1207 / Km1207_224) * (1 + s_1377 / Km1377_224) + (1 + s_0204 / Km0204_224) * (1 + s_0456 / Km0456_224) * (1 + s_1212 / Km1212_224) - 1));
    der(s_1212) = (cell * Vmax_55 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_55) / (Km1207_55 * Km1578_55) / ((1 + s_1207 / Km1207_55) * (1 + s_1578 / Km1578_55) + (1 + s_0456 / Km0456_55) * (1 + s_1212 / Km1212_55) * (1 + s_1579 / Km1579_55) - 1)) + (cell * Vmax_159 * (s_0940 * s_1207 - s_0180 * s_0456 * s_1212 / Keq_159) / (Km0940_159 * Km1207_159) / ((1 + s_0940 / Km0940_159) * (1 + s_1207 / Km1207_159) + (1 + s_0180 / Km0180_159) * (1 + s_0456 / Km0456_159) * (1 + s_1212 / Km1212_159) - 1)) + (cell * Vmax_178 * (s_0306 * s_1207 - s_0304 * s_1212 / Keq_178) / (Km0306_178 * Km1207_178) / ((1 + s_0306 / Km0306_178) * (1 + s_1207 / Km1207_178) + (1 + s_0304 / Km0304_178) * (1 + s_1212 / Km1212_178) - 1)) + (cell * Vmax_224 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_224) / (Km1207_224 * Km1377_224) / ((1 + s_1207 / Km1207_224) * (1 + s_1377 / Km1377_224) + (1 + s_0204 / Km0204_224) * (1 + s_0456 / Km0456_224) * (1 + s_1212 / Km1212_224) - 1)) - (cell * Vmax_6 * (s_0141 * s_1212 - s_0142 * s_1207 / Keq_6) / (Km0141_6 * Km1212_6) / ((1 + s_0141 / Km0141_6) * (1 + s_1212 / Km1212_6) + (1 + s_0142 / Km0142_6) * (1 + s_1207 / Km1207_6) - 1)) - (cell * Vmax_18 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_18) / (Km0231_18 * Km1212_18) / ((1 + s_0231 / Km0231_18) * (1 + s_1212 / Km1212_18) + (1 + s_1207 / Km1207_18) * (1 + s_1445 / Km1445_18) - 1)) - (cell * Vmax_23 * (s_0306 * s_1212 - s_0322 * s_1207 / Keq_23) / (Km0306_23 * Km1212_23) / ((1 + s_0306 / Km0306_23) * (1 + s_1212 / Km1212_23) + (1 + s_0322 / Km0322_23) * (1 + s_1207 / Km1207_23) - 1)) - (cell * Vmax_24 * (s_0146 * s_1212 - s_0016 * s_1207 / Keq_24) / (Km0146_24 * Km1212_24) / ((1 + s_0146 / Km0146_24) * (1 + s_1212 / Km1212_24) + (1 + s_0016 / Km0016_24) * (1 + s_1207 / Km1207_24) - 1)) - (cell * Vmax_50 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_50) / (Km0295_50 * Km1212_50) / ((1 + s_0295 / Km0295_50) * (1 + s_1212 / Km1212_50) + (1 + s_0978 / Km0978_50) * (1 + s_1207 / Km1207_50) * (1 + s_1322 / Km1322_50) - 1)) - (cell * Vmax_53 * (s_0262 * s_1212 - s_0122 * s_1207 / Keq_53) / (Km0262_53 * Km1212_53) / ((1 + s_0262 / Km0262_53) * (1 + s_1212 / Km1212_53) + (1 + s_0122 / Km0122_53) * (1 + s_1207 / Km1207_53) - 1)) - (cell * Vmax_54 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_54) / (Km0664_54 * Km1212_54 * Km1275_54) / ((1 + s_0664 / Km0664_54) * (1 + s_1212 / Km1212_54) * (1 + s_1275 / Km1275_54) + (1 + s_0662 / Km0662_54) * (1 + s_1207 / Km1207_54) - 1)) - (cell * Vmax_57 * (s_0209 * s_1212 - s_0296 * s_1207 / Keq_57) / (Km0209_57 * Km1212_57) / ((1 + s_0209 / Km0209_57) * (1 + s_1212 / Km1212_57) + (1 + s_0296 / Km0296_57) * (1 + s_1207 / Km1207_57) - 1)) - (cell * Vmax_58 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_58) / (Km1212_58 * Km1579_58) / ((1 + s_1212 / Km1212_58) * (1 + s_1579 / Km1579_58) + (1 + s_1207 / Km1207_58) * (1 + s_1569 / Km1569_58) - 1)) - (cell * Vmax_59 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_59) / (Km0296_59 * Km1212_59 * Km1275_59) / ((1 + s_0296 / Km0296_59) * (1 + s_1212 / Km1212_59) * (1 + s_1275 / Km1275_59) + (1 + s_1207 / Km1207_59) * (1 + s_1576 / Km1576_59) - 1)) - (cell * Vmax_60 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_60) / (Km1212_60 * Km1275_60 * Km1576_60) / ((1 + s_1212 / Km1212_60) * (1 + s_1275 / Km1275_60) * (1 + s_1576 / Km1576_60) + (1 + s_1207 / Km1207_60) * (1 + s_1577 / Km1577_60) - 1)) - (cell * Vmax_61 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_61) / (Km1212_61 * Km1275_61 * Km1577_61) / ((1 + s_1212 / Km1212_61) * (1 + s_1275 / Km1275_61) * (1 + s_1577 / Km1577_61) + (1 + s_1207 / Km1207_61) * (1 + s_1578 / Km1578_61) - 1)) - (3.0 * cell * Vmax_62 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_62) / (Km0122_62 * pow(Km1212_62, 3) * pow(Km1275_62, 3)) / ((1 + s_0122 / Km0122_62) * pow(1 + s_1212 / Km1212_62, 3) * pow(1 + s_1275 / Km1275_62, 3) + (1 + s_0297 / Km0297_62) * pow(1 + s_1207 / Km1207_62, 3) - 1)) - (cell * Vmax_63 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_63) / (Km0657_63 * Km1212_63 * Km1275_63) / ((1 + s_0657 / Km0657_63) * (1 + s_1212 / Km1212_63) * (1 + s_1275 / Km1275_63) + (1 + s_0664 / Km0664_63) * (1 + s_1207 / Km1207_63) - 1)) - (cell * Vmax_65 * (s_0662 * s_1212 - s_0666 * s_1207 / Keq_65) / (Km0662_65 * Km1212_65) / ((1 + s_0662 / Km0662_65) * (1 + s_1212 / Km1212_65) + (1 + s_0666 / Km0666_65) * (1 + s_1207 / Km1207_65) - 1)) - (cell * Vmax_68 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_68) / (Km0475_68 * Km1212_68 * Km1275_68) / ((1 + s_0475 / Km0475_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_0481 / Km0481_68) * (1 + s_1207 / Km1207_68) - 1)) - (cell * Vmax_69 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_69) / (Km0481_69 * Km1212_69 * Km1275_69) / ((1 + s_0481 / Km0481_69) * (1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) + (1 + s_0493 / Km0493_69) * (1 + s_1207 / Km1207_69) - 1)) - (cell * Vmax_70 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_70) / (Km0493_70 * Km1212_70 * Km1275_70) / ((1 + s_0493 / Km0493_70) * (1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) + (1 + s_0499 / Km0499_70) * (1 + s_1207 / Km1207_70) - 1)) - (3.0 * cell * Vmax_81 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_81) / (Km1059_81 * pow(Km1212_81, 3) * pow(Km1275_81, 3)) / ((1 + s_1059 / Km1059_81) * pow(1 + s_1212 / Km1212_81, 3) * pow(1 + s_1275 / Km1275_81, 3) + (1 + s_0262 / Km0262_81) * (1 + s_0722 / Km0722_81) * pow(1 + s_1207 / Km1207_81, 3) - 1)) - (cell * Vmax_88 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_88) / (Km0625_88 * Km1212_88) / ((1 + s_0625 / Km0625_88) * (1 + s_1212 / Km1212_88) + (1 + s_1207 / Km1207_88) * (1 + s_1487 / Km1487_88) - 1)) - (2.0 * cell * Vmax_97 * (s_0595 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1065 * pow(s_1207, 2) / Keq_97) / (Km0595_97 * Km1101_97 * pow(Km1212_97, 2)) / ((1 + s_0595 / Km0595_97) * (1 + s_1101 / Km1101_97) * pow(1 + s_1212 / Km1212_97, 2) + (1 + s_0456 / Km0456_97) * (1 + s_0529 / Km0529_97) * (1 + s_1065 / Km1065_97) * pow(1 + s_1207 / Km1207_97, 2) - 1)) - (2.0 * cell * Vmax_98 * (s_1065 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1161 * pow(s_1207, 2) / Keq_98) / (Km1065_98 * Km1101_98 * pow(Km1212_98, 2)) / ((1 + s_1065 / Km1065_98) * (1 + s_1101 / Km1101_98) * pow(1 + s_1212 / Km1212_98, 2) + (1 + s_0456 / Km0456_98) * (1 + s_0529 / Km0529_98) * (1 + s_1161 / Km1161_98) * pow(1 + s_1207 / Km1207_98, 2) - 1)) - (2.0 * cell * Vmax_99 * (s_1101 * s_1161 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_99) / (Km1101_99 * Km1161_99 * pow(Km1212_99, 2)) / ((1 + s_1101 / Km1101_99) * (1 + s_1161 / Km1161_99) * pow(1 + s_1212 / Km1212_99, 2) + (1 + s_0456 / Km0456_99) * (1 + s_0529 / Km0529_99) * pow(1 + s_1207 / Km1207_99, 2) * (1 + s_1286 / Km1286_99) - 1)) - (2.0 * cell * Vmax_100 * (s_1101 * pow(s_1212, 2) * s_1286 - s_0456 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_100) / (Km1101_100 * pow(Km1212_100, 2) * Km1286_100) / ((1 + s_1101 / Km1101_100) * pow(1 + s_1212 / Km1212_100, 2) * (1 + s_1286 / Km1286_100) + (1 + s_0456 / Km0456_100) * (1 + s_0529 / Km0529_100) * pow(1 + s_1207 / Km1207_100, 2) * (1 + s_1449 / Km1449_100) - 1)) - (6.0 * cell * Vmax_101 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(s_0456, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_101) / (pow(Km1101_101, 3) * pow(Km1212_101, 6) * Km1449_101) / (pow(1 + s_1101 / Km1101_101, 3) * pow(1 + s_1212 / Km1212_101, 6) * (1 + s_1449 / Km1449_101) + pow(1 + s_0456 / Km0456_101, 3) * pow(1 + s_0529 / Km0529_101, 3) * (1 + s_1084 / Km1084_101) * pow(1 + s_1207 / Km1207_101, 6) - 1)) - (2.0 * cell * Vmax_102 * (s_1101 * pow(s_1212, 2) * s_1255 - s_0456 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_102) / (Km1101_102 * pow(Km1212_102, 2) * Km1255_102) / ((1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) * (1 + s_1255 / Km1255_102) + (1 + s_0456 / Km0456_102) * (1 + s_0529 / Km0529_102) * (1 + s_0602 / Km0602_102) * pow(1 + s_1207 / Km1207_102, 2) - 1)) - (6.0 * cell * Vmax_103 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(s_0456, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_103) / (Km0373_103 * pow(Km1101_103, 3) * pow(Km1212_103, 6)) / ((1 + s_0373 / Km0373_103) * pow(1 + s_1101 / Km1101_103, 3) * pow(1 + s_1212 / Km1212_103, 6) + pow(1 + s_0456 / Km0456_103, 3) * pow(1 + s_0529 / Km0529_103, 3) * pow(1 + s_1207 / Km1207_103, 6) * (1 + s_1255 / Km1255_103) - 1)) - (2.0 * cell * Vmax_107 * (s_0602 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1073 * pow(s_1207, 2) / Keq_107) / (Km0602_107 * Km1101_107 * pow(Km1212_107, 2)) / ((1 + s_0602 / Km0602_107) * (1 + s_1101 / Km1101_107) * pow(1 + s_1212 / Km1212_107, 2) + (1 + s_0456 / Km0456_107) * (1 + s_0529 / Km0529_107) * (1 + s_1073 / Km1073_107) * pow(1 + s_1207 / Km1207_107, 2) - 1)) - (2.0 * cell * Vmax_108 * (s_1073 * s_1101 * pow(s_1212, 2) - s_0456 * s_0529 * s_1176 * pow(s_1207, 2) / Keq_108) / (Km1073_108 * Km1101_108 * pow(Km1212_108, 2)) / ((1 + s_1073 / Km1073_108) * (1 + s_1101 / Km1101_108) * pow(1 + s_1212 / Km1212_108, 2) + (1 + s_0456 / Km0456_108) * (1 + s_0529 / Km0529_108) * (1 + s_1176 / Km1176_108) * pow(1 + s_1207 / Km1207_108, 2) - 1)) - (2.0 * cell * Vmax_109 * (s_1101 * s_1176 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_109) / (Km1101_109 * Km1176_109 * pow(Km1212_109, 2)) / ((1 + s_1101 / Km1101_109) * (1 + s_1176 / Km1176_109) * pow(1 + s_1212 / Km1212_109, 2) + (1 + s_0456 / Km0456_109) * (1 + s_0529 / Km0529_109) * pow(1 + s_1207 / Km1207_109, 2) * (1 + s_1302 / Km1302_109) - 1)) - (2.0 * cell * Vmax_110 * (s_1101 * pow(s_1212, 2) * s_1302 - s_0456 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_110) / (Km1101_110 * pow(Km1212_110, 2) * Km1302_110) / ((1 + s_1101 / Km1101_110) * pow(1 + s_1212 / Km1212_110, 2) * (1 + s_1302 / Km1302_110) + (1 + s_0456 / Km0456_110) * (1 + s_0529 / Km0529_110) * pow(1 + s_1207 / Km1207_110, 2) * (1 + s_1454 / Km1454_110) - 1)) - (cell * Vmax_119 * (s_0180 * s_0419 * s_1212 - s_0991 * s_1207 / Keq_119) / (Km0180_119 * Km0419_119 * Km1212_119) / ((1 + s_0180 / Km0180_119) * (1 + s_0419 / Km0419_119) * (1 + s_1212 / Km1212_119) + (1 + s_0991 / Km0991_119) * (1 + s_1207 / Km1207_119) - 1)) - (cell * Vmax_123 * (s_0754 * s_1212 - pow(s_0750, 2) * s_1207 / Keq_123) / (Km0754_123 * Km1212_123) / ((1 + s_0754 / Km0754_123) * (1 + s_1212 / Km1212_123) + pow(1 + s_0750 / Km0750_123, 2) * (1 + s_1207 / Km1207_123) - 1)) - (cell * Vmax_145 * (s_0978 * s_1212 - s_1014 * s_1207 / Keq_145) / (Km0978_145 * Km1212_145) / ((1 + s_0978 / Km0978_145) * (1 + s_1212 / Km1212_145) + (1 + s_1014 / Km1014_145) * (1 + s_1207 / Km1207_145) - 1)) - (2.0 * cell * Vmax_149 * (s_0218 * pow(s_1212, 2) - s_0028 * s_0529 * pow(s_1207, 2) / Keq_149) / (Km0218_149 * pow(Km1212_149, 2)) / ((1 + s_0218 / Km0218_149) * pow(1 + s_1212 / Km1212_149, 2) + (1 + s_0028 / Km0028_149) * (1 + s_0529 / Km0529_149) * pow(1 + s_1207 / Km1207_149, 2) - 1)) - (cell * Vmax_163 * (s_0039 * s_1212 - s_0008 * s_1207 / Keq_163) / (Km0039_163 * Km1212_163) / ((1 + s_0039 / Km0039_163) * (1 + s_1212 / Km1212_163) + (1 + s_0008 / Km0008_163) * (1 + s_1207 / Km1207_163) - 1)) - (cell * Vmax_165 * (s_0953 * s_1212 - s_0959 * s_1207 / Keq_165) / (Km0953_165 * Km1212_165) / ((1 + s_0953 / Km0953_165) * (1 + s_1212 / Km1212_165) + (1 + s_0959 / Km0959_165) * (1 + s_1207 / Km1207_165) - 1)) - (cell * Vmax_183 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_183) / (Km1191_183 * Km1212_183) / ((1 + s_1191 / Km1191_183) * (1 + s_1212 / Km1212_183) + (1 + s_0145 / Km0145_183) * (1 + s_1207 / Km1207_183) * (1 + s_1322 / Km1322_183) - 1)) - (cell * Vmax_222 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_222) / (Km1212_222 * Km1275_222 * Km1445_222) / ((1 + s_1212 / Km1212_222) * (1 + s_1275 / Km1275_222) * (1 + s_1445 / Km1445_222) + (1 + s_1207 / Km1207_222) * (1 + s_1366 / Km1366_222) - 1)) - (cell * Vmax_226 * (s_0118 * s_1212 - s_1035 * s_1207 / Keq_226) / (Km0118_226 * Km1212_226) / ((1 + s_0118 / Km0118_226) * (1 + s_1212 / Km1212_226) + (1 + s_1035 / Km1035_226) * (1 + s_1207 / Km1207_226) - 1)) - (cell * Vmax_241 * (s_0959 * s_0991 * s_1212 - s_1038 * s_1207 / Keq_241) / (Km0959_241 * Km0991_241 * Km1212_241) / ((1 + s_0959 / Km0959_241) * (1 + s_0991 / Km0991_241) * (1 + s_1212 / Km1212_241) + (1 + s_1038 / Km1038_241) * (1 + s_1207 / Km1207_241) - 1)) - (cell * Vmax_244 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_244) / (Km0211_244 * Km1212_244) / ((1 + s_0211 / Km0211_244) * (1 + s_1212 / Km1212_244) + (1 + s_1207 / Km1207_244) * (1 + s_1429 / Km1429_244) - 1)) - (cell * Vmax_247 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_247) / (Km1212_247 * Km1275_247 * Km1447_247) / ((1 + s_1212 / Km1212_247) * (1 + s_1275 / Km1275_247) * (1 + s_1447 / Km1447_247) + (1 + s_0037 / Km0037_247) * (1 + s_1207 / Km1207_247) - 1)) - (cell * Vmax_248 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_248) / (pow(Km0190_248, 2) * Km1212_248) / (pow(1 + s_0190 / Km0190_248, 2) * (1 + s_1212 / Km1212_248) + pow(1 + s_0633 / Km0633_248, 2) * (1 + s_1207 / Km1207_248) * (1 + s_1447 / Km1447_248) - 1)) - (3.0 * cell * Vmax_251 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_251) / (pow(Km1212_251, 3) * Km1469_251) / (pow(1 + s_1212 / Km1212_251, 3) * (1 + s_1469 / Km1469_251) + (1 + s_0841 / Km0841_251) * pow(1 + s_1207 / Km1207_251, 3) - 1)) - (cell * Vmax_252 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_252) / (Km1212_252 * Km1620_252) / ((1 + s_1212 / Km1212_252) * (1 + s_1620 / Km1620_252) + (1 + s_1207 / Km1207_252) * (1 + s_1616 / Km1616_252) - 1));
    der(s_1233) = (cell * Vmax_147 * (s_0373 * s_1014 - s_0529 * s_1233 / Keq_147) / (Km0373_147 * Km1014_147) / ((1 + s_0373 / Km0373_147) * (1 + s_1014 / Km1014_147) + (1 + s_0529 / Km0529_147) * (1 + s_1233 / Km1233_147) - 1)) - (cell * Vmax_79 * (s_0981 * s_1233 - s_0362 * s_0980 / Keq_79) / (Km0981_79 * Km1233_79) / ((1 + s_0981 / Km0981_79) * (1 + s_1233 / Km1233_79) + (1 + s_0362 / Km0362_79) * (1 + s_0980 / Km0980_79) - 1)) - (cell * Vmax_188 * (s_0841 * s_1233 - s_0362 * s_1012 / Keq_188) / (Km0841_188 * Km1233_188) / ((1 + s_0841 / Km0841_188) * (1 + s_1233 / Km1233_188) + (1 + s_0362 / Km0362_188) * (1 + s_1012 / Km1012_188) - 1));
    der(s_1238) = (cell * Vmax_146 * (s_0434 * s_1014 - s_0394 * s_1238 / Keq_146) / (Km0434_146 * Km1014_146) / ((1 + s_0434 / Km0434_146) * (1 + s_1014 / Km1014_146) + (1 + s_0394 / Km0394_146) * (1 + s_1238 / Km1238_146) - 1)) - (cell * Vmax_253 * (s_1238 - s_1045 * s_1322 / Keq_253) / Km1238_253 / (1 + s_1238 / Km1238_253 + (1 + s_1045 / Km1045_253) * (1 + s_1322 / Km1322_253) - 1));
    der(s_1255) = (cell * Vmax_103 * (s_0373 * pow(s_1101, 3) * pow(s_1212, 6) - pow(s_0456, 3) * pow(s_0529, 3) * pow(s_1207, 6) * s_1255 / Keq_103) / (Km0373_103 * pow(Km1101_103, 3) * pow(Km1212_103, 6)) / ((1 + s_0373 / Km0373_103) * pow(1 + s_1101 / Km1101_103, 3) * pow(1 + s_1212 / Km1212_103, 6) + pow(1 + s_0456 / Km0456_103, 3) * pow(1 + s_0529 / Km0529_103, 3) * pow(1 + s_1207 / Km1207_103, 6) * (1 + s_1255 / Km1255_103) - 1)) - (cell * Vmax_102 * (s_1101 * pow(s_1212, 2) * s_1255 - s_0456 * s_0529 * s_0602 * pow(s_1207, 2) / Keq_102) / (Km1101_102 * pow(Km1212_102, 2) * Km1255_102) / ((1 + s_1101 / Km1101_102) * pow(1 + s_1212 / Km1212_102, 2) * (1 + s_1255 / Km1255_102) + (1 + s_0456 / Km0456_102) * (1 + s_0529 / Km0529_102) * (1 + s_0602 / Km0602_102) * pow(1 + s_1207 / Km1207_102, 2) - 1));
    der(s_1266) = (cell * Vmax_190 * (s_0991 * s_1182 - s_1192 * s_1266 / Keq_190) / (Km0991_190 * Km1182_190) / ((1 + s_0991 / Km0991_190) * (1 + s_1182 / Km1182_190) + (1 + s_1192 / Km1192_190) * (1 + s_1266 / Km1266_190) - 1)) - (cell * Vmax_189 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_189) / (Km0455_189 * Km1266_189) / ((1 + s_0455 / Km0455_189) * (1 + s_1266 / Km1266_189) + (1 + s_0979 / Km0979_189) * (1 + s_1322 / Km1322_189) - 1));
    der(s_1269) = (cell * Vmax_86 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_86) / (Km0061_86 * Km1275_86) / ((1 + s_0061 / Km0061_86) * (1 + s_1275 / Km1275_86) + (1 + s_0837 / Km0837_86) * (1 + s_1269 / Km1269_86) - 1)) - (cell * Vmax_191 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_191) / (Km1269_191 * Km1386_191) / ((1 + s_1269 / Km1269_191) * (1 + s_1386 / Km1386_191) + (1 + s_0633 / Km0633_191) * (1 + s_1270 / Km1270_191) - 1));
    der(s_1270) = (cell * Vmax_191 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_191) / (Km1269_191 * Km1386_191) / ((1 + s_1269 / Km1269_191) * (1 + s_1386 / Km1386_191) + (1 + s_0633 / Km0633_191) * (1 + s_1270 / Km1270_191) - 1)) - (cell * Vmax_192 * (s_1270 - s_0456 * s_1545 / Keq_192) / Km1270_192 / (1 + s_1270 / Km1270_192 + (1 + s_0456 / Km0456_192) * (1 + s_1545 / Km1545_192) - 1));
    der(s_1271) = (cell * Vmax_170 * (s_0066 * s_1198 - s_1203 * s_1271 / Keq_170) / (Km0066_170 * Km1198_170) / ((1 + s_0066 / Km0066_170) * (1 + s_1198 / Km1198_170) + (1 + s_1203 / Km1203_170) * (1 + s_1271 / Km1271_170) - 1)) + (cell * Vmax_227 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_227) / (Km0434_227 * Km0445_227 * Km1399_227) / ((1 + s_0434 / Km0434_227) * (1 + s_0445 / Km0445_227) * (1 + s_1399 / Km1399_227) + (1 + s_0394 / Km0394_227) * (1 + s_1271 / Km1271_227) * (1 + s_1322 / Km1322_227) - 1)) - (cell * Vmax_49 * (s_0991 * s_1271 - s_0180 * s_0973 / Keq_49) / (Km0991_49 * Km1271_49) / ((1 + s_0991 / Km0991_49) * (1 + s_1271 / Km1271_49) + (1 + s_0180 / Km0180_49) * (1 + s_0973 / Km0973_49) - 1)) - (cell * Vmax_74 * (s_0373 * s_1271 - s_0522 * s_0529 / Keq_74) / (Km0373_74 * Km1271_74) / ((1 + s_0373 / Km0373_74) * (1 + s_1271 / Km1271_74) + (1 + s_0522 / Km0522_74) * (1 + s_0529 / Km0529_74) - 1));
    der(s_1275) = (cell * Vmax_279 * (s_1277 - s_1275) / Km1277_279 / (1 + s_1277 / Km1277_279 + 1 + s_1275 / Km1275_279 - 1)) - (cell * Vmax_54 * (s_0664 * s_1212 * s_1275 - s_0662 * s_1207 / Keq_54) / (Km0664_54 * Km1212_54 * Km1275_54) / ((1 + s_0664 / Km0664_54) * (1 + s_1212 / Km1212_54) * (1 + s_1275 / Km1275_54) + (1 + s_0662 / Km0662_54) * (1 + s_1207 / Km1207_54) - 1)) - (cell * Vmax_59 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_59) / (Km0296_59 * Km1212_59 * Km1275_59) / ((1 + s_0296 / Km0296_59) * (1 + s_1212 / Km1212_59) * (1 + s_1275 / Km1275_59) + (1 + s_1207 / Km1207_59) * (1 + s_1576 / Km1576_59) - 1)) - (cell * Vmax_60 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_60) / (Km1212_60 * Km1275_60 * Km1576_60) / ((1 + s_1212 / Km1212_60) * (1 + s_1275 / Km1275_60) * (1 + s_1576 / Km1576_60) + (1 + s_1207 / Km1207_60) * (1 + s_1577 / Km1577_60) - 1)) - (cell * Vmax_61 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_61) / (Km1212_61 * Km1275_61 * Km1577_61) / ((1 + s_1212 / Km1212_61) * (1 + s_1275 / Km1275_61) * (1 + s_1577 / Km1577_61) + (1 + s_1207 / Km1207_61) * (1 + s_1578 / Km1578_61) - 1)) - (3.0 * cell * Vmax_62 * (s_0122 * pow(s_1212, 3) * pow(s_1275, 3) - s_0297 * pow(s_1207, 3) / Keq_62) / (Km0122_62 * pow(Km1212_62, 3) * pow(Km1275_62, 3)) / ((1 + s_0122 / Km0122_62) * pow(1 + s_1212 / Km1212_62, 3) * pow(1 + s_1275 / Km1275_62, 3) + (1 + s_0297 / Km0297_62) * pow(1 + s_1207 / Km1207_62, 3) - 1)) - (cell * Vmax_63 * (s_0657 * s_1212 * s_1275 - s_0664 * s_1207 / Keq_63) / (Km0657_63 * Km1212_63 * Km1275_63) / ((1 + s_0657 / Km0657_63) * (1 + s_1212 / Km1212_63) * (1 + s_1275 / Km1275_63) + (1 + s_0664 / Km0664_63) * (1 + s_1207 / Km1207_63) - 1)) - (cell * Vmax_68 * (s_0475 * s_1212 * s_1275 - s_0481 * s_1207 / Keq_68) / (Km0475_68 * Km1212_68 * Km1275_68) / ((1 + s_0475 / Km0475_68) * (1 + s_1212 / Km1212_68) * (1 + s_1275 / Km1275_68) + (1 + s_0481 / Km0481_68) * (1 + s_1207 / Km1207_68) - 1)) - (cell * Vmax_69 * (s_0481 * s_1212 * s_1275 - s_0493 * s_1207 / Keq_69) / (Km0481_69 * Km1212_69 * Km1275_69) / ((1 + s_0481 / Km0481_69) * (1 + s_1212 / Km1212_69) * (1 + s_1275 / Km1275_69) + (1 + s_0493 / Km0493_69) * (1 + s_1207 / Km1207_69) - 1)) - (cell * Vmax_70 * (s_0493 * s_1212 * s_1275 - s_0499 * s_1207 / Keq_70) / (Km0493_70 * Km1212_70 * Km1275_70) / ((1 + s_0493 / Km0493_70) * (1 + s_1212 / Km1212_70) * (1 + s_1275 / Km1275_70) + (1 + s_0499 / Km0499_70) * (1 + s_1207 / Km1207_70) - 1)) - (3.0 * cell * Vmax_81 * (s_1059 * pow(s_1212, 3) * pow(s_1275, 3) - s_0262 * s_0722 * pow(s_1207, 3) / Keq_81) / (Km1059_81 * pow(Km1212_81, 3) * pow(Km1275_81, 3)) / ((1 + s_1059 / Km1059_81) * pow(1 + s_1212 / Km1212_81, 3) * pow(1 + s_1275 / Km1275_81, 3) + (1 + s_0262 / Km0262_81) * (1 + s_0722 / Km0722_81) * pow(1 + s_1207 / Km1207_81, 3) - 1)) - (cell * Vmax_86 * (s_0061 * s_1275 - s_0837 * s_1269 / Keq_86) / (Km0061_86 * Km1275_86) / ((1 + s_0061 / Km0061_86) * (1 + s_1275 / Km1275_86) + (1 + s_0837 / Km0837_86) * (1 + s_1269 / Km1269_86) - 1)) - (cell * Vmax_111 * (pow(s_0710, 4) * s_1275 - pow(s_0709, 4) / Keq_111) / (pow(Km0710_111, 4) * Km1275_111) / (pow(1 + s_0710 / Km0710_111, 4) * (1 + s_1275 / Km1275_111) + pow(1 + s_0709 / Km0709_111, 4) - 1)) - (cell * Vmax_222 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_222) / (Km1212_222 * Km1275_222 * Km1445_222) / ((1 + s_1212 / Km1212_222) * (1 + s_1275 / Km1275_222) * (1 + s_1445 / Km1445_222) + (1 + s_1207 / Km1207_222) * (1 + s_1366 / Km1366_222) - 1)) - (cell * Vmax_246 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_246) / (Km1203_246 * Km1275_246 * Km1447_246) / ((1 + s_1203 / Km1203_246) * (1 + s_1275 / Km1275_246) * (1 + s_1447 / Km1447_246) + (1 + s_0037 / Km0037_246) * (1 + s_1198 / Km1198_246) - 1)) - (cell * Vmax_247 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_247) / (Km1212_247 * Km1275_247 * Km1447_247) / ((1 + s_1212 / Km1212_247) * (1 + s_1275 / Km1275_247) * (1 + s_1447 / Km1447_247) + (1 + s_0037 / Km0037_247) * (1 + s_1207 / Km1207_247) - 1));
    der(s_1277) = 0.0;
    der(s_1286) = (cell * Vmax_99 * (s_1101 * s_1161 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1286 / Keq_99) / (Km1101_99 * Km1161_99 * pow(Km1212_99, 2)) / ((1 + s_1101 / Km1101_99) * (1 + s_1161 / Km1161_99) * pow(1 + s_1212 / Km1212_99, 2) + (1 + s_0456 / Km0456_99) * (1 + s_0529 / Km0529_99) * pow(1 + s_1207 / Km1207_99, 2) * (1 + s_1286 / Km1286_99) - 1)) - (cell * Vmax_100 * (s_1101 * pow(s_1212, 2) * s_1286 - s_0456 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_100) / (Km1101_100 * pow(Km1212_100, 2) * Km1286_100) / ((1 + s_1101 / Km1101_100) * pow(1 + s_1212 / Km1212_100, 2) * (1 + s_1286 / Km1286_100) + (1 + s_0456 / Km0456_100) * (1 + s_0529 / Km0529_100) * pow(1 + s_1207 / Km1207_100, 2) * (1 + s_1449 / Km1449_100) - 1));
    der(s_1302) = (cell * Vmax_109 * (s_1101 * s_1176 * pow(s_1212, 2) - s_0456 * s_0529 * pow(s_1207, 2) * s_1302 / Keq_109) / (Km1101_109 * Km1176_109 * pow(Km1212_109, 2)) / ((1 + s_1101 / Km1101_109) * (1 + s_1176 / Km1176_109) * pow(1 + s_1212 / Km1212_109, 2) + (1 + s_0456 / Km0456_109) * (1 + s_0529 / Km0529_109) * pow(1 + s_1207 / Km1207_109, 2) * (1 + s_1302 / Km1302_109) - 1)) - (cell * Vmax_110 * (s_1101 * pow(s_1212, 2) * s_1302 - s_0456 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_110) / (Km1101_110 * pow(Km1212_110, 2) * Km1302_110) / ((1 + s_1101 / Km1101_110) * pow(1 + s_1212 / Km1212_110, 2) * (1 + s_1302 / Km1302_110) + (1 + s_0456 / Km0456_110) * (1 + s_0529 / Km0529_110) * pow(1 + s_1207 / Km1207_110, 2) * (1 + s_1454 / Km1454_110) - 1)) - (cell * Vmax_242 * (s_1039 * s_1302 - s_0231 * s_0456 * s_0529 / Keq_242) / (Km1039_242 * Km1302_242) / ((1 + s_1039 / Km1039_242) * (1 + s_1302 / Km1302_242) + (1 + s_0231 / Km0231_242) * (1 + s_0456 / Km0456_242) * (1 + s_0529 / Km0529_242) - 1));
    der(s_1314) = (cell * Vmax_194 * (s_0434 * s_1032 * s_1604 - s_0423 * s_0633 * s_1314 / Keq_194) / (Km0434_194 * Km1032_194 * Km1604_194) / ((1 + s_0434 / Km0434_194) * (1 + s_1032 / Km1032_194) * (1 + s_1604 / Km1604_194) + (1 + s_0423 / Km0423_194) * (1 + s_0633 / Km0633_194) * (1 + s_1314 / Km1314_194) - 1)) - (0.1339 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1322) = (cell * Vmax_9 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_9) / (Km0551_9 * Km1360_9) / ((1 + s_0551 / Km0551_9) * (1 + s_1360 / Km1360_9) + (1 + s_0349 / Km0349_9) * (1 + s_1322 / Km1322_9) - 1)) + (cell * Vmax_14 * (s_0390 - s_0423 * s_1322 / Keq_14) / Km0390_14 / (1 + s_0390 / Km0390_14 + (1 + s_0423 / Km0423_14) * (1 + s_1322 / Km1322_14) - 1)) + (cell * Vmax_17 * (s_0349 - s_0210 * s_1322 / Keq_17) / Km0349_17 / (1 + s_0349 / Km0349_17 + (1 + s_0210 / Km0210_17) * (1 + s_1322 / Km1322_17) - 1)) + (cell * Vmax_21 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_21) / (Km0261_21 * Km1360_21) / ((1 + s_0261 / Km0261_21) * (1 + s_1360 / Km1360_21) + (1 + s_0324 / Km0324_21) * (1 + s_1322 / Km1322_21) - 1)) + (cell * Vmax_22 * (s_0301 * s_0434 * s_0999 - s_0302 * s_0394 * s_0991 * s_1322 / Keq_22) / (Km0301_22 * Km0434_22 * Km0999_22) / ((1 + s_0301 / Km0301_22) * (1 + s_0434 / Km0434_22) * (1 + s_0999 / Km0999_22) + (1 + s_0302 / Km0302_22) * (1 + s_0394 / Km0394_22) * (1 + s_0991 / Km0991_22) * (1 + s_1322 / Km1322_22) - 1)) + (cell * Vmax_27 * (s_0373 * s_0434 * s_0445 - s_0394 * s_1101 * s_1322 / Keq_27) / (Km0373_27 * Km0434_27 * Km0445_27) / ((1 + s_0373 / Km0373_27) * (1 + s_0434 / Km0434_27) * (1 + s_0445 / Km0445_27) + (1 + s_0394 / Km0394_27) * (1 + s_1101 / Km1101_27) * (1 + s_1322 / Km1322_27) - 1)) + (cell * Vmax_36 * (s_0785 * s_0849 * s_0973 - s_0393 * s_0739 * s_1322 / Keq_36) / (Km0785_36 * Km0849_36 * Km0973_36) / ((1 + s_0785 / Km0785_36) * (1 + s_0849 / Km0849_36) * (1 + s_0973 / Km0973_36) + (1 + s_0393 / Km0393_36) * (1 + s_0739 / Km0739_36) * (1 + s_1322 / Km1322_36) - 1)) + (cell * Vmax_47 * (s_0455 * s_0973 - s_1194 * s_1322 / Keq_47) / (Km0455_47 * Km0973_47) / ((1 + s_0455 / Km0455_47) * (1 + s_0973 / Km0973_47) + (1 + s_1194 / Km1194_47) * (1 + s_1322 / Km1322_47) - 1)) + (cell * Vmax_50 * (s_0295 * s_1212 - s_0978 * s_1207 * s_1322 / Keq_50) / (Km0295_50 * Km1212_50) / ((1 + s_0295 / Km0295_50) * (1 + s_1212 / Km1212_50) + (1 + s_0978 / Km0978_50) * (1 + s_1207 / Km1207_50) * (1 + s_1322 / Km1322_50) - 1)) + (cell * Vmax_66 * (pow(s_0434, 2) * s_0445 * s_0999 - pow(s_0394, 2) * s_0455 * s_0991 * s_1322 / Keq_66) / (pow(Km0434_66, 2) * Km0445_66 * Km0999_66) / (pow(1 + s_0434 / Km0434_66, 2) * (1 + s_0445 / Km0445_66) * (1 + s_0999 / Km0999_66) + pow(1 + s_0394 / Km0394_66, 2) * (1 + s_0455 / Km0455_66) * (1 + s_0991 / Km0991_66) * (1 + s_1322 / Km1322_66) - 1)) + (cell * Vmax_72 * (s_0324 - s_0515 * s_1322 / Keq_72) / Km0324_72 / (1 + s_0324 / Km0324_72 + (1 + s_0515 / Km0515_72) * (1 + s_1322 / Km1322_72) - 1)) + (cell * Vmax_76 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_76) / (Km0419_76 * Km0434_76 * Km1559_76) / ((1 + s_0419 / Km0419_76) * (1 + s_0434 / Km0434_76) * (1 + s_1559 / Km1559_76) + (1 + s_0394 / Km0394_76) * (1 + s_0539 / Km0539_76) * (1 + s_1322 / Km1322_76) - 1)) + (cell * Vmax_85 * (s_1331 - s_0619 * s_1322 / Keq_85) / Km1331_85 / (1 + s_1331 / Km1331_85 + (1 + s_0619 / Km0619_85) * (1 + s_1322 / Km1322_85) - 1)) + (cell * Vmax_120 * (s_0419 * s_0434 * s_0991 - s_0394 * s_0999 * s_1322 / Keq_120) / (Km0419_120 * Km0434_120 * Km0991_120) / ((1 + s_0419 / Km0419_120) * (1 + s_0434 / Km0434_120) * (1 + s_0991 / Km0991_120) + (1 + s_0394 / Km0394_120) * (1 + s_0999 / Km0999_120) * (1 + s_1322 / Km1322_120) - 1)) + (cell * Vmax_139 * (s_1011 - s_1010 * s_1322 / Keq_139) / Km1011_139 / (1 + s_1011 / Km1011_139 + (1 + s_1010 / Km1010_139) * (1 + s_1322 / Km1322_139) - 1)) + (2.0 * cell * Vmax_155 * (s_0633 - pow(s_1322, 2) / Keq_155) / Km0633_155 / (1 + s_0633 / Km0633_155 + pow(1 + s_1322 / Km1322_155, 2) - 1)) + (cell * Vmax_174 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_174) / (Km0434_174 * Km1029_174) / ((1 + s_0434 / Km0434_174) * (1 + s_1029 / Km1029_174) + (1 + s_0633 / Km0633_174) * (1 + s_1322 / Km1322_174) * (1 + s_1416 / Km1416_174) - 1)) + (cell * Vmax_180 * (s_0018 * s_0434 - s_0394 * s_0456 * s_0943 * s_1322 / Keq_180) / (Km0018_180 * Km0434_180) / ((1 + s_0018 / Km0018_180) * (1 + s_0434 / Km0434_180) + (1 + s_0394 / Km0394_180) * (1 + s_0456 / Km0456_180) * (1 + s_0943 / Km0943_180) * (1 + s_1322 / Km1322_180) - 1)) + (cell * Vmax_181 * (s_0126 - s_1153 * s_1322 / Keq_181) / Km0126_181 / (1 + s_0126 / Km0126_181 + (1 + s_1153 / Km1153_181) * (1 + s_1322 / Km1322_181) - 1)) + (cell * Vmax_183 * (s_1191 * s_1212 - s_0145 * s_1207 * s_1322 / Keq_183) / (Km1191_183 * Km1212_183) / ((1 + s_1191 / Km1191_183) * (1 + s_1212 / Km1212_183) + (1 + s_0145 / Km0145_183) * (1 + s_1207 / Km1207_183) * (1 + s_1322 / Km1322_183) - 1)) + (cell * Vmax_185 * (s_0467 - s_0526 * s_1322 / Keq_185) / Km0467_185 / (1 + s_0467 / Km0467_185 + (1 + s_0526 / Km0526_185) * (1 + s_1322 / Km1322_185) - 1)) + (cell * Vmax_189 * (s_0455 * s_1266 - s_0979 * s_1322 / Keq_189) / (Km0455_189 * Km1266_189) / ((1 + s_0455 / Km0455_189) * (1 + s_1266 / Km1266_189) + (1 + s_0979 / Km0979_189) * (1 + s_1322 / Km1322_189) - 1)) + (cell * Vmax_195 * (s_0302 * s_0434 - s_0300 * s_0394 * s_1322 / Keq_195) / (Km0302_195 * Km0434_195) / ((1 + s_0302 / Km0302_195) * (1 + s_0434 / Km0434_195) + (1 + s_0300 / Km0300_195) * (1 + s_0394 / Km0394_195) * (1 + s_1322 / Km1322_195) - 1)) + (cell * Vmax_210 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_210) / (Km0434_210 * Km0973_210 * Km1364_210) / ((1 + s_0434 / Km0434_210) * (1 + s_0973 / Km0973_210) * (1 + s_1364 / Km1364_210) + (1 + s_0299 / Km0299_210) * (1 + s_0394 / Km0394_210) * (1 + s_1322 / Km1322_210) - 1)) + (cell * Vmax_213 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_213) / (Km0300_213 * Km0456_213 * Km0434_213) / ((1 + s_0300 / Km0300_213) * (1 + s_0456 / Km0456_213) * (1 + s_0434 / Km0434_213) + (1 + s_1364 / Km1364_213) * (1 + s_0394 / Km0394_213) * (1 + s_1322 / Km1322_213) - 1)) + (cell * Vmax_216 * (s_0327 * s_0434 * s_1003 - s_0325 * s_0394 * s_1322 / Keq_216) / (Km0327_216 * Km0434_216 * Km1003_216) / ((1 + s_0327 / Km0327_216) * (1 + s_0434 / Km0434_216) * (1 + s_1003 / Km1003_216) + (1 + s_0325 / Km0325_216) * (1 + s_0394 / Km0394_216) * (1 + s_1322 / Km1322_216) - 1)) + (cell * Vmax_219 * (s_0259 - s_1039 * s_1322 / Keq_219) / Km0259_219 / (1 + s_0259 / Km0259_219 + (1 + s_1039 / Km1039_219) * (1 + s_1322 / Km1322_219) - 1)) + (cell * Vmax_227 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_227) / (Km0434_227 * Km0445_227 * Km1399_227) / ((1 + s_0434 / Km0434_227) * (1 + s_0445 / Km0445_227) * (1 + s_1399 / Km1399_227) + (1 + s_0394 / Km0394_227) * (1 + s_1271 / Km1271_227) * (1 + s_1322 / Km1322_227) - 1)) + (cell * Vmax_230 * (s_0158 * s_0314 - s_0328 * s_1322 / Keq_230) / (Km0158_230 * Km0314_230) / ((1 + s_0158 / Km0158_230) * (1 + s_0314 / Km0314_230) + (1 + s_0328 / Km0328_230) * (1 + s_1322 / Km1322_230) - 1)) + (cell * Vmax_250 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_250) / (Km0394_250 * Km1467_250) / ((1 + s_0394 / Km0394_250) * (1 + s_1467 / Km1467_250) + (1 + s_0298 / Km0298_250) * (1 + s_1322 / Km1322_250) - 1)) + (cell * Vmax_253 * (s_1238 - s_1045 * s_1322 / Keq_253) / Km1238_253 / (1 + s_1238 / Km1238_253 + (1 + s_1045 / Km1045_253) * (1 + s_1322 / Km1322_253) - 1)) + (cell * Vmax_259 * (s_0409 - s_1322 * s_1520 / Keq_259) / Km0409_259 / (1 + s_0409 / Km0409_259 + (1 + s_1322 / Km1322_259) * (1 + s_1520 / Km1520_259) - 1)) + (cell * Vmax_272 * (s_1324 - s_1322) / Km1324_272 / (1 + s_1324 / Km1324_272 + 1 + s_1322 / Km1322_272 - 1)) + (cell * Vmax_280 * (s_0313 - s_0314 * s_1322 / Keq_280) / Km0313_280 / (1 + s_0313 / Km0313_280 + (1 + s_0314 / Km0314_280) * (1 + s_1322 / Km1322_280) - 1)) + (58.70001 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_113 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_113) / (Km0120_113 * Km0394_113 * Km1322_113) / ((1 + s_0120 / Km0120_113) * (1 + s_0394 / Km0394_113) * (1 + s_1322 / Km1322_113) + (1 + s_0434 / Km0434_113) * (1 + s_0722 / Km0722_113) * (1 + s_1487 / Km1487_113) - 1)) - (cell * Vmax_125 * (s_0764 * s_1198 * s_1322 - s_0075 * s_1203 / Keq_125) / (Km0764_125 * Km1198_125 * Km1322_125) / ((1 + s_0764 / Km0764_125) * (1 + s_1198 / Km1198_125) * (1 + s_1322 / Km1322_125) + (1 + s_0075 / Km0075_125) * (1 + s_1203 / Km1203_125) - 1));
    der(s_1324) = 0.0;
    der(s_1331) = (cell * Vmax_3 * (s_0082 * s_0380 - s_0529 * s_1331 / Keq_3) / (Km0082_3 * Km0380_3) / ((1 + s_0082 / Km0082_3) * (1 + s_0380 / Km0380_3) + (1 + s_0529 / Km0529_3) * (1 + s_1331 / Km1331_3) - 1)) - (cell * Vmax_67 * (s_0539 * s_1331 - s_0471 * s_0633 / Keq_67) / (Km0539_67 * Km1331_67) / ((1 + s_0539 / Km0539_67) * (1 + s_1331 / Km1331_67) + (1 + s_0471 / Km0471_67) * (1 + s_0633 / Km0633_67) - 1)) - (cell * Vmax_85 * (s_1331 - s_0619 * s_1322 / Keq_85) / Km1331_85 / (1 + s_1331 / Km1331_85 + (1 + s_0619 / Km0619_85) * (1 + s_1322 / Km1322_85) - 1));
    der(s_1337) = (cell * Vmax_199 * (s_0471 * s_1039 - s_0526 * s_1337 / Keq_199) / (Km0471_199 * Km1039_199) / ((1 + s_0471 / Km0471_199) * (1 + s_1039 / Km1039_199) + (1 + s_0526 / Km0526_199) * (1 + s_1337 / Km1337_199) - 1)) - (cell * Vmax_198 * (s_1337 - s_0456 * s_1351 / Keq_198) / Km1337_198 / (1 + s_1337 / Km1337_198 + (1 + s_0456 / Km0456_198) * (1 + s_1351 / Km1351_198) - 1)) - (0.00039 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1342) = (cell * Vmax_207 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_207) / (Km1343_207 * Km1416_207) / ((1 + s_1343 / Km1343_207) * (1 + s_1416 / Km1416_207) + (1 + s_1342 / Km1342_207) * (1 + s_1413 / Km1413_207) - 1)) - (cell * Vmax_206 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_206) / (Km1342_206 * Km1416_206) / ((1 + s_1342 / Km1342_206) * (1 + s_1416 / Km1416_206) + (1 + s_1346 / Km1346_206) * (1 + s_1413 / Km1413_206) - 1));
    der(s_1343) = (cell * Vmax_196 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_196) / (Km1351_196 * Km1416_196) / ((1 + s_1351 / Km1351_196) * (1 + s_1416 / Km1416_196) + (1 + s_1343 / Km1343_196) * (1 + s_1413 / Km1413_196) - 1)) - (cell * Vmax_207 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_207) / (Km1343_207 * Km1416_207) / ((1 + s_1343 / Km1343_207) * (1 + s_1416 / Km1416_207) + (1 + s_1342 / Km1342_207) * (1 + s_1413 / Km1413_207) - 1));
    der(s_1346) = (cell * Vmax_206 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_206) / (Km1342_206 * Km1416_206) / ((1 + s_1342 / Km1342_206) * (1 + s_1416 / Km1416_206) + (1 + s_1346 / Km1346_206) * (1 + s_1413 / Km1413_206) - 1)) - (0.00288 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1351) = (cell * Vmax_198 * (s_1337 - s_0456 * s_1351 / Keq_198) / Km1337_198 / (1 + s_1337 / Km1337_198 + (1 + s_0456 / Km0456_198) * (1 + s_1351 / Km1351_198) - 1)) - (cell * Vmax_196 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_196) / (Km1351_196 * Km1416_196) / ((1 + s_1351 / Km1351_196) * (1 + s_1416 / Km1416_196) + (1 + s_1343 / Km1343_196) * (1 + s_1413 / Km1413_196) - 1)) - (0.000697 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1360) = (cell * Vmax_96 * (s_0188 - s_1360 / Keq_96) / Km0188_96 / (1 + s_0188 / Km0188_96 + 1 + s_1360 / Km1360_96 - 1)) - (cell * Vmax_9 * (s_0551 * s_1360 - s_0349 * s_1322 / Keq_9) / (Km0551_9 * Km1360_9) / ((1 + s_0551 / Km0551_9) * (1 + s_1360 / Km1360_9) + (1 + s_0349 / Km0349_9) * (1 + s_1322 / Km1322_9) - 1)) - (cell * Vmax_21 * (s_0261 * s_1360 - s_0324 * s_1322 / Keq_21) / (Km0261_21 * Km1360_21) / ((1 + s_0261 / Km0261_21) * (1 + s_1360 / Km1360_21) + (1 + s_0324 / Km0324_21) * (1 + s_1322 / Km1322_21) - 1)) - (cell * Vmax_229 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_229) / (Km0394_229 * Km1360_229) / ((1 + s_0394 / Km0394_229) * (1 + s_1360 / Km1360_229) + (1 + s_0434 / Km0434_229) * (1 + s_1399 / Km1399_229) - 1));
    der(s_1364) = (cell * Vmax_213 * (s_0300 * s_0456 * s_0434 - s_1364 * s_0394 * s_1322 / Keq_213) / (Km0300_213 * Km0456_213 * Km0434_213) / ((1 + s_0300 / Km0300_213) * (1 + s_0456 / Km0456_213) * (1 + s_0434 / Km0434_213) + (1 + s_1364 / Km1364_213) * (1 + s_0394 / Km0394_213) * (1 + s_1322 / Km1322_213) - 1)) - (cell * Vmax_210 * (s_0434 * s_0973 * s_1364 - s_0299 * s_0394 * s_1322 / Keq_210) / (Km0434_210 * Km0973_210 * Km1364_210) / ((1 + s_0434 / Km0434_210) * (1 + s_0973 / Km0973_210) * (1 + s_1364 / Km1364_210) + (1 + s_0299 / Km0299_210) * (1 + s_0394 / Km0394_210) * (1 + s_1322 / Km1322_210) - 1));
    der(s_1365) = (cell * Vmax_214 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_214) / (Km0120_214 * Km0403_214) / ((1 + s_0120 / Km0120_214) * (1 + s_0403 / Km0403_214) + (1 + s_1365 / Km1365_214) * (1 + s_1487 / Km1487_214) - 1)) - (cell * Vmax_156 * (s_1365 - s_0849 / Keq_156) / Km1365_156 / (1 + s_1365 / Km1365_156 + 1 + s_0849 / Km0849_156 - 1));
    der(s_1366) = (cell * Vmax_222 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_222) / (Km1212_222 * Km1275_222 * Km1445_222) / ((1 + s_1212 / Km1212_222) * (1 + s_1275 / Km1275_222) * (1 + s_1445 / Km1445_222) + (1 + s_1207 / Km1207_222) * (1 + s_1366 / Km1366_222) - 1)) - (cell * Vmax_221 * (s_1084 * s_1366 - s_0481 / Keq_221) / (Km1084_221 * Km1366_221) / ((1 + s_1084 / Km1084_221) * (1 + s_1366 / Km1366_221) + 1 + s_0481 / Km0481_221 - 1));
    der(s_1376) = (cell * Vmax_162 * (s_0943 - s_1376 / Keq_162) / Km0943_162 / (1 + s_0943 / Km0943_162 + 1 + s_1376 / Km1376_162 - 1)) - (cell * Vmax_92 * (s_0943 * s_1376 - s_0633 * s_0745 / Keq_92) / (Km0943_92 * Km1376_92) / ((1 + s_0943 / Km0943_92) * (1 + s_1376 / Km1376_92) + (1 + s_0633 / Km0633_92) * (1 + s_0745 / Km0745_92) - 1));
    der(s_1377) = (cell * Vmax_71 * (s_0515 - s_1377 / Keq_71) / Km0515_71 / (1 + s_0515 / Km0515_71 + 1 + s_1377 / Km1377_71 - 1)) - (cell * Vmax_223 * (s_1377 - s_0456 * s_0951 / Keq_223) / Km1377_223 / (1 + s_1377 / Km1377_223 + (1 + s_0456 / Km0456_223) * (1 + s_0951 / Km0951_223) - 1)) - (cell * Vmax_224 * (s_1207 * s_1377 - s_0204 * s_0456 * s_1212 / Keq_224) / (Km1207_224 * Km1377_224) / ((1 + s_1207 / Km1207_224) * (1 + s_1377 / Km1377_224) + (1 + s_0204 / Km0204_224) * (1 + s_0456 / Km0456_224) * (1 + s_1212 / Km1212_224) - 1));
    der(s_1379) = (cell * Vmax_225 * (s_0434 * s_1035 * s_1606 - s_0423 * s_0633 * s_1379 / Keq_225) / (Km0434_225 * Km1035_225 * Km1606_225) / ((1 + s_0434 / Km0434_225) * (1 + s_1035 / Km1035_225) * (1 + s_1606 / Km1606_225) + (1 + s_0423 / Km0423_225) * (1 + s_0633 / Km0633_225) * (1 + s_1379 / Km1379_225) - 1)) - (0.1647 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1386) = (cell * Vmax_218 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_218) / (Km0434_218 * Km1408_218) / ((1 + s_0434 / Km0434_218) * (1 + s_1408 / Km1408_218) + (1 + s_0423 / Km0423_218) * (1 + s_1386 / Km1386_218) - 1)) - (cell * Vmax_40 * (s_0427 * s_1386 - s_0633 * s_1187 / Keq_40) / (Km0427_40 * Km1386_40) / ((1 + s_0427 / Km0427_40) * (1 + s_1386 / Km1386_40) + (1 + s_0633 / Km0633_40) * (1 + s_1187 / Km1187_40) - 1)) - (cell * Vmax_52 * (s_0434 * s_1386 - s_0326 * s_0633 / Keq_52) / (Km0434_52 * Km1386_52) / ((1 + s_0434 / Km0434_52) * (1 + s_1386 / Km1386_52) + (1 + s_0326 / Km0326_52) * (1 + s_0633 / Km0633_52) - 1)) - (cell * Vmax_191 * (s_1269 * s_1386 - s_0633 * s_1270 / Keq_191) / (Km1269_191 * Km1386_191) / ((1 + s_1269 / Km1269_191) * (1 + s_1386 / Km1386_191) + (1 + s_0633 / Km0633_191) * (1 + s_1270 / Km1270_191) - 1)) - (cell * Vmax_217 * (s_0999 * s_1386 - s_0327 * s_0633 * s_0991 / Keq_217) / (Km0999_217 * Km1386_217) / ((1 + s_0999 / Km0999_217) * (1 + s_1386 / Km1386_217) + (1 + s_0327 / Km0327_217) * (1 + s_0633 / Km0633_217) * (1 + s_0991 / Km0991_217) - 1));
    der(s_1399) = (cell * Vmax_41 * (s_0515 * s_0999 - s_0427 * s_0991 * s_1399 / Keq_41) / (Km0515_41 * Km0999_41) / ((1 + s_0515 / Km0515_41) * (1 + s_0999 / Km0999_41) + (1 + s_0427 / Km0427_41) * (1 + s_0991 / Km0991_41) * (1 + s_1399 / Km1399_41) - 1)) + (cell * Vmax_229 * (s_0394 * s_1360 - s_0434 * s_1399 / Keq_229) / (Km0394_229 * Km1360_229) / ((1 + s_0394 / Km0394_229) * (1 + s_1360 / Km1360_229) + (1 + s_0434 / Km0434_229) * (1 + s_1399 / Km1399_229) - 1)) - (cell * Vmax_7 * (s_0178 * s_1399 - s_0039 * s_0456 / Keq_7) / (Km0178_7 * Km1399_7) / ((1 + s_0178 / Km0178_7) * (1 + s_1399 / Km1399_7) + (1 + s_0039 / Km0039_7) * (1 + s_0456 / Km0456_7) - 1)) - (2.0 * cell * Vmax_25 * (pow(s_1399, 2) - s_0146 * s_0456 / Keq_25) / pow(Km1399_25, 2) / (pow(1 + s_1399 / Km1399_25, 2) + (1 + s_0146 / Km0146_25) * (1 + s_0456 / Km0456_25) - 1)) - (cell * Vmax_164 * (s_0991 * s_1399 - s_0180 * s_0955 / Keq_164) / (Km0991_164 * Km1399_164) / ((1 + s_0991 / Km0991_164) * (1 + s_1399 / Km1399_164) + (1 + s_0180 / Km0180_164) * (1 + s_0955 / Km0955_164) - 1)) - (cell * Vmax_227 * (s_0434 * s_0445 * s_1399 - s_0394 * s_1271 * s_1322 / Keq_227) / (Km0434_227 * Km0445_227 * Km1399_227) / ((1 + s_0434 / Km0434_227) * (1 + s_0445 / Km0445_227) * (1 + s_1399 / Km1399_227) + (1 + s_0394 / Km0394_227) * (1 + s_1271 / Km1271_227) * (1 + s_1322 / Km1322_227) - 1)) - (cell * Vmax_228 * (s_0529 * s_1198 * s_1399 - s_0373 * s_0456 * s_1203 / Keq_228) / (Km0529_228 * Km1198_228 * Km1399_228) / ((1 + s_0529 / Km0529_228) * (1 + s_1198 / Km1198_228) * (1 + s_1399 / Km1399_228) + (1 + s_0373 / Km0373_228) * (1 + s_0456 / Km0456_228) * (1 + s_1203 / Km1203_228) - 1));
    der(s_1405) = (cell * Vmax_231 * (pow(s_0328, 2) - s_0314 * s_1405 / Keq_231) / pow(Km0328_231, 2) / (pow(1 + s_0328 / Km0328_231, 2) + (1 + s_0314 / Km0314_231) * (1 + s_1405 / Km1405_231) - 1)) - (0.00099 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1408) = (cell * Vmax_237 * (s_0577 - s_1408 / Keq_237) / Km0577_237 / (1 + s_0577 / Km0577_237 + 1 + s_1408 / Km1408_237 - 1)) + (cell * Vmax_257 * (s_0764 * s_1427 - s_0581 * s_1408 / Keq_257) / (Km0764_257 * Km1427_257) / ((1 + s_0764 / Km0764_257) * (1 + s_1427 / Km1427_257) + (1 + s_0581 / Km0581_257) * (1 + s_1408 / Km1408_257) - 1)) - (cell * Vmax_218 * (s_0434 * s_1408 - s_0423 * s_1386 / Keq_218) / (Km0434_218 * Km1408_218) / ((1 + s_0434 / Km0434_218) * (1 + s_1408 / Km1408_218) + (1 + s_0423 / Km0423_218) * (1 + s_1386 / Km1386_218) - 1));
    der(s_1413) = (cell * Vmax_196 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_196) / (Km1351_196 * Km1416_196) / ((1 + s_1351 / Km1351_196) * (1 + s_1416 / Km1416_196) + (1 + s_1343 / Km1343_196) * (1 + s_1413 / Km1413_196) - 1)) + (cell * Vmax_206 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_206) / (Km1342_206 * Km1416_206) / ((1 + s_1342 / Km1342_206) * (1 + s_1416 / Km1416_206) + (1 + s_1346 / Km1346_206) * (1 + s_1413 / Km1413_206) - 1)) + (cell * Vmax_207 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_207) / (Km1343_207 * Km1416_207) / ((1 + s_1343 / Km1343_207) * (1 + s_1416 / Km1416_207) + (1 + s_1342 / Km1342_207) * (1 + s_1413 / Km1413_207) - 1)) + (cell * Vmax_239 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_239) / (Km1416_239 * Km1569_239) / ((1 + s_1416 / Km1416_239) * (1 + s_1569 / Km1569_239) + (1 + s_0700 / Km0700_239) * (1 + s_1413 / Km1413_239) - 1)) - (cell * Vmax_32 * (s_1413 - s_0386 * s_1012 / Keq_32) / Km1413_32 / (1 + s_1413 / Km1413_32 + (1 + s_0386 / Km0386_32) * (1 + s_1012 / Km1012_32) - 1));
    der(s_1416) = (cell * Vmax_174 * (s_0434 * s_1029 - s_0633 * s_1322 * s_1416 / Keq_174) / (Km0434_174 * Km1029_174) / ((1 + s_0434 / Km0434_174) * (1 + s_1029 / Km1029_174) + (1 + s_0633 / Km0633_174) * (1 + s_1322 / Km1322_174) * (1 + s_1416 / Km1416_174) - 1)) - (cell * Vmax_196 * (s_1351 * s_1416 - s_1343 * s_1413 / Keq_196) / (Km1351_196 * Km1416_196) / ((1 + s_1351 / Km1351_196) * (1 + s_1416 / Km1416_196) + (1 + s_1343 / Km1343_196) * (1 + s_1413 / Km1413_196) - 1)) - (cell * Vmax_206 * (s_1342 * s_1416 - s_1346 * s_1413 / Keq_206) / (Km1342_206 * Km1416_206) / ((1 + s_1342 / Km1342_206) * (1 + s_1416 / Km1416_206) + (1 + s_1346 / Km1346_206) * (1 + s_1413 / Km1413_206) - 1)) - (cell * Vmax_207 * (s_1343 * s_1416 - s_1342 * s_1413 / Keq_207) / (Km1343_207 * Km1416_207) / ((1 + s_1343 / Km1343_207) * (1 + s_1416 / Km1416_207) + (1 + s_1342 / Km1342_207) * (1 + s_1413 / Km1413_207) - 1)) - (cell * Vmax_239 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_239) / (Km1416_239 * Km1569_239) / ((1 + s_1416 / Km1416_239) * (1 + s_1569 / Km1569_239) + (1 + s_0700 / Km0700_239) * (1 + s_1413 / Km1413_239) - 1));
    der(s_1427) = (cell * Vmax_256 * (s_0551 * s_0557 - s_0764 * s_1427 / Keq_256) / (Km0551_256 * Km0557_256) / ((1 + s_0551 / Km0551_256) * (1 + s_0557 / Km0557_256) + (1 + s_0764 / Km0764_256) * (1 + s_1427 / Km1427_256) - 1)) - (cell * Vmax_257 * (s_0764 * s_1427 - s_0581 * s_1408 / Keq_257) / (Km0764_257 * Km1427_257) / ((1 + s_0764 / Km0764_257) * (1 + s_1427 / Km1427_257) + (1 + s_0581 / Km0581_257) * (1 + s_1408 / Km1408_257) - 1));
    der(s_1428) = (cell * Vmax_243 * (s_0434 * s_1039 * s_1607 - s_0423 * s_0633 * s_1428 / Keq_243) / (Km0434_243 * Km1039_243 * Km1607_243) / ((1 + s_0434 / Km0434_243) * (1 + s_1039 / Km1039_243) * (1 + s_1607 / Km1607_243) + (1 + s_0423 / Km0423_243) * (1 + s_0633 / Km0633_243) * (1 + s_1428 / Km1428_243) - 1)) - (0.1854 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1429) = (cell * Vmax_244 * (s_0211 * s_1212 - s_1207 * s_1429 / Keq_244) / (Km0211_244 * Km1212_244) / ((1 + s_0211 / Km0211_244) * (1 + s_1212 / Km1212_244) + (1 + s_1207 / Km1207_244) * (1 + s_1429 / Km1429_244) - 1)) - (cell * Vmax_245 * (s_0434 * s_1429 - s_0261 * s_0394 / Keq_245) / (Km0434_245 * Km1429_245) / ((1 + s_0434 / Km0434_245) * (1 + s_1429 / Km1429_245) + (1 + s_0261 / Km0261_245) * (1 + s_0394 / Km0394_245) - 1));
    der(s_1445) = (cell * Vmax_18 * (s_0231 * s_1212 - s_1207 * s_1445 / Keq_18) / (Km0231_18 * Km1212_18) / ((1 + s_0231 / Km0231_18) * (1 + s_1212 / Km1212_18) + (1 + s_1207 / Km1207_18) * (1 + s_1445 / Km1445_18) - 1)) - (cell * Vmax_87 * (s_1084 * s_1445 - s_0475 / Keq_87) / (Km1084_87 * Km1445_87) / ((1 + s_1084 / Km1084_87) * (1 + s_1445 / Km1445_87) + 1 + s_0475 / Km0475_87 - 1)) - (cell * Vmax_222 * (s_1212 * s_1275 * s_1445 - s_1207 * s_1366 / Keq_222) / (Km1212_222 * Km1275_222 * Km1445_222) / ((1 + s_1212 / Km1212_222) * (1 + s_1275 / Km1275_222) * (1 + s_1445 / Km1445_222) + (1 + s_1207 / Km1207_222) * (1 + s_1366 / Km1366_222) - 1));
    der(s_1447) = (cell * Vmax_248 * (pow(s_0190, 2) * s_1212 - pow(s_0633, 2) * s_1207 * s_1447 / Keq_248) / (pow(Km0190_248, 2) * Km1212_248) / (pow(1 + s_0190 / Km0190_248, 2) * (1 + s_1212 / Km1212_248) + pow(1 + s_0633 / Km0633_248, 2) * (1 + s_1207 / Km1207_248) * (1 + s_1447 / Km1447_248) - 1)) - (cell * Vmax_246 * (s_1203 * s_1275 * s_1447 - s_0037 * s_1198 / Keq_246) / (Km1203_246 * Km1275_246 * Km1447_246) / ((1 + s_1203 / Km1203_246) * (1 + s_1275 / Km1275_246) * (1 + s_1447 / Km1447_246) + (1 + s_0037 / Km0037_246) * (1 + s_1198 / Km1198_246) - 1)) - (cell * Vmax_247 * (s_1212 * s_1275 * s_1447 - s_0037 * s_1207 / Keq_247) / (Km1212_247 * Km1275_247 * Km1447_247) / ((1 + s_1212 / Km1212_247) * (1 + s_1275 / Km1275_247) * (1 + s_1447 / Km1447_247) + (1 + s_0037 / Km0037_247) * (1 + s_1207 / Km1207_247) - 1));
    der(s_1449) = (cell * Vmax_100 * (s_1101 * pow(s_1212, 2) * s_1286 - s_0456 * s_0529 * pow(s_1207, 2) * s_1449 / Keq_100) / (Km1101_100 * pow(Km1212_100, 2) * Km1286_100) / ((1 + s_1101 / Km1101_100) * pow(1 + s_1212 / Km1212_100, 2) * (1 + s_1286 / Km1286_100) + (1 + s_0456 / Km0456_100) * (1 + s_0529 / Km0529_100) * pow(1 + s_1207 / Km1207_100, 2) * (1 + s_1449 / Km1449_100) - 1)) + (cell * Vmax_106 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_106) / (Km0423_106 * Km0633_106 * Km1454_106) / ((1 + s_0423 / Km0423_106) * (1 + s_0633 / Km0633_106) * (1 + s_1454 / Km1454_106) + (1 + s_0434 / Km0434_106) * (1 + s_0529 / Km0529_106) * (1 + s_1449 / Km1449_106) - 1)) - (cell * Vmax_101 * (pow(s_1101, 3) * pow(s_1212, 6) * s_1449 - pow(s_0456, 3) * pow(s_0529, 3) * s_1084 * pow(s_1207, 6) / Keq_101) / (pow(Km1101_101, 3) * pow(Km1212_101, 6) * Km1449_101) / (pow(1 + s_1101 / Km1101_101, 3) * pow(1 + s_1212 / Km1212_101, 6) * (1 + s_1449 / Km1449_101) + pow(1 + s_0456 / Km0456_101, 3) * pow(1 + s_0529 / Km0529_101, 3) * (1 + s_1084 / Km1084_101) * pow(1 + s_1207 / Km1207_101, 6) - 1));
    der(s_1454) = (cell * Vmax_110 * (s_1101 * pow(s_1212, 2) * s_1302 - s_0456 * s_0529 * pow(s_1207, 2) * s_1454 / Keq_110) / (Km1101_110 * pow(Km1212_110, 2) * Km1302_110) / ((1 + s_1101 / Km1101_110) * pow(1 + s_1212 / Km1212_110, 2) * (1 + s_1302 / Km1302_110) + (1 + s_0456 / Km0456_110) * (1 + s_0529 / Km0529_110) * pow(1 + s_1207 / Km1207_110, 2) * (1 + s_1454 / Km1454_110) - 1)) - (cell * Vmax_106 * (s_0423 * s_0633 * s_1454 - s_0434 * s_0529 * s_1449 / Keq_106) / (Km0423_106 * Km0633_106 * Km1454_106) / ((1 + s_0423 / Km0423_106) * (1 + s_0633 / Km0633_106) * (1 + s_1454 / Km1454_106) + (1 + s_0434 / Km0434_106) * (1 + s_0529 / Km0529_106) * (1 + s_1449 / Km1449_106) - 1));
    der(s_1467) = (cell * Vmax_273 * (s_1468 - s_1467) / Km1468_273 / (1 + s_1468 / Km1468_273 + 1 + s_1467 / Km1467_273 - 1)) - (cell * Vmax_250 * (s_0394 * s_1467 - s_0298 * s_1322 / Keq_250) / (Km0394_250 * Km1467_250) / ((1 + s_0394 / Km0394_250) * (1 + s_1467 / Km1467_250) + (1 + s_0298 / Km0298_250) * (1 + s_1322 / Km1322_250) - 1)) - (0.02 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1468) = 0.0;
    der(s_1469) = (cell * Vmax_200 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_200) / (Km0201_200 * Km1616_200) / ((1 + s_0201 / Km0201_200) * (1 + s_1616 / Km1616_200) + (1 + s_0390 / Km0390_200) * (1 + s_1469 / Km1469_200) * (1 + s_1620 / Km1620_200) - 1)) - (cell * Vmax_251 * (pow(s_1212, 3) * s_1469 - s_0841 * pow(s_1207, 3) / Keq_251) / (pow(Km1212_251, 3) * Km1469_251) / (pow(1 + s_1212 / Km1212_251, 3) * (1 + s_1469 / Km1469_251) + (1 + s_0841 / Km0841_251) * pow(1 + s_1207 / Km1207_251, 3) - 1));
    der(s_1487) = (cell * Vmax_88 * (s_0625 * s_1212 - s_1207 * s_1487 / Keq_88) / (Km0625_88 * Km1212_88) / ((1 + s_0625 / Km0625_88) * (1 + s_1212 / Km1212_88) + (1 + s_1207 / Km1207_88) * (1 + s_1487 / Km1487_88) - 1)) + (cell * Vmax_113 * (s_0120 * s_0394 * s_1322 - s_0434 * s_0722 * s_1487 / Keq_113) / (Km0120_113 * Km0394_113 * Km1322_113) / ((1 + s_0120 / Km0120_113) * (1 + s_0394 / Km0394_113) * (1 + s_1322 / Km1322_113) + (1 + s_0434 / Km0434_113) * (1 + s_0722 / Km0722_113) * (1 + s_1487 / Km1487_113) - 1)) + (cell * Vmax_128 * (s_0120 * s_0325 - s_0301 * s_1487 / Keq_128) / (Km0120_128 * Km0325_128) / ((1 + s_0120 / Km0120_128) * (1 + s_0325 / Km0325_128) + (1 + s_0301 / Km0301_128) * (1 + s_1487 / Km1487_128) - 1)) + (cell * Vmax_175 * (s_0322 * s_1012 - s_1029 * s_1487 / Keq_175) / (Km0322_175 * Km1012_175) / ((1 + s_0322 / Km0322_175) * (1 + s_1012 / Km1012_175) + (1 + s_1029 / Km1029_175) * (1 + s_1487 / Km1487_175) - 1)) + (cell * Vmax_214 * (s_0120 * s_0403 - s_1365 * s_1487 / Keq_214) / (Km0120_214 * Km0403_214) / ((1 + s_0120 / Km0120_214) * (1 + s_0403 / Km0403_214) + (1 + s_1365 / Km1365_214) * (1 + s_1487 / Km1487_214) - 1)) - (cell * Vmax_129 * (s_1003 * s_1198 * s_1487 - s_0306 * s_0419 * s_0456 * s_1203 / Keq_129) / (Km1003_129 * Km1198_129 * Km1487_129) / ((1 + s_1003 / Km1003_129) * (1 + s_1198 / Km1198_129) * (1 + s_1487 / Km1487_129) + (1 + s_0306 / Km0306_129) * (1 + s_0419 / Km0419_129) * (1 + s_0456 / Km0456_129) * (1 + s_1203 / Km1203_129) - 1)) - (cell * Vmax_130 * (s_1039 * s_1487 - s_0306 * s_1003 / Keq_130) / (Km1039_130 * Km1487_130) / ((1 + s_1039 / Km1039_130) * (1 + s_1487 / Km1487_130) + (1 + s_0306 / Km0306_130) * (1 + s_1003 / Km1003_130) - 1));
    der(s_1491) = (cell * Vmax_254 * (s_0434 * s_1045 * s_1608 - s_0423 * s_0633 * s_1491 / Keq_254) / (Km0434_254 * Km1045_254 * Km1608_254) / ((1 + s_0434 / Km0434_254) * (1 + s_1045 / Km1045_254) * (1 + s_1608 / Km1608_254) + (1 + s_0423 / Km0423_254) * (1 + s_0633 / Km0633_254) * (1 + s_1491 / Km1491_254) - 1)) - (0.1914 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1520) = (cell * Vmax_259 * (s_0409 - s_1322 * s_1520 / Keq_259) / Km0409_259 / (1 + s_0409 / Km0409_259 + (1 + s_1322 / Km1322_259) * (1 + s_1520 / Km1520_259) - 1)) - (0.0234 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1524) = (cell * Vmax_260 * (s_0619 * s_0056 - s_1524 / Keq_260) / (Km0619_260 * Km0056_260) / ((1 + s_0619 / Km0619_260) * (1 + s_0056 / Km0056_260) + 1 + s_1524 / Km1524_260 - 1)) - (cell * Vmax_84 * (s_0529 * s_1524 - s_0380 * s_0619 / Keq_84) / (Km0529_84 * Km1524_84) / ((1 + s_0529 / Km0529_84) * (1 + s_1524 / Km1524_84) + (1 + s_0380 / Km0380_84) * (1 + s_0619 / Km0619_84) - 1)) - (0.000781 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1527) = (cell * Vmax_263 * (s_0434 * s_1048 * s_1610 - s_0423 * s_0633 * s_1527 / Keq_263) / (Km0434_263 * Km1048_263 * Km1610_263) / ((1 + s_0434 / Km0434_263) * (1 + s_1048 / Km1048_263) * (1 + s_1610 / Km1610_263) + (1 + s_0423 / Km0423_263) * (1 + s_0633 / Km0633_263) * (1 + s_1527 / Km1527_263) - 1)) - (0.0284 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1533) = (cell * Vmax_265 * (s_0434 * s_1051 * s_1612 - s_0423 * s_0633 * s_1533 / Keq_265) / (Km0434_265 * Km1051_265 * Km1612_265) / ((1 + s_0434 / Km0434_265) * (1 + s_1051 / Km1051_265) * (1 + s_1612 / Km1612_265) + (1 + s_0423 / Km0423_265) * (1 + s_0633 / Km0633_265) * (1 + s_1533 / Km1533_265) - 1)) - (0.102 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1535) = (cell * Vmax_184 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_184) / (Km1203_184 * Km1537_184) / ((1 + s_1203 / Km1203_184) * (1 + s_1537 / Km1537_184) + (1 + s_1198 / Km1198_184) * (1 + s_1535 / Km1535_184) - 1)) - (cell * Vmax_112 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_112) / (pow(Km0709_112, 2) * Km1535_112) / (pow(1 + s_0709 / Km0709_112, 2) * (1 + s_1535 / Km1535_112) + pow(1 + s_0710 / Km0710_112, 2) * (1 + s_1537 / Km1537_112) - 1));
    der(s_1537) = (cell * Vmax_112 * (pow(s_0709, 2) * s_1535 - pow(s_0710, 2) * s_1537 / Keq_112) / (pow(Km0709_112, 2) * Km1535_112) / (pow(1 + s_0709 / Km0709_112, 2) * (1 + s_1535 / Km1535_112) + pow(1 + s_0710 / Km0710_112, 2) * (1 + s_1537 / Km1537_112) - 1)) - (cell * Vmax_184 * (s_1203 * s_1537 - s_1198 * s_1535 / Keq_184) / (Km1203_184 * Km1537_184) / ((1 + s_1203 / Km1203_184) * (1 + s_1537 / Km1537_184) + (1 + s_1198 / Km1198_184) * (1 + s_1535 / Km1535_184) - 1));
    der(s_1538) = (cell * Vmax_0 * (s_1543 - s_0002 * s_1538 / Keq_0) / Km1543_0 / (1 + s_1543 / Km1543_0 + (1 + s_0002 / Km0002_0) * (1 + s_1538 / Km1538_0) - 1)) + (cell * Vmax_1 * (s_1543 - s_0004 * s_1538 / Keq_1) / Km1543_1 / (1 + s_1543 / Km1543_1 + (1 + s_0004 / Km0004_1) * (1 + s_1538 / Km1538_1) - 1)) + (cell * Vmax_39 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_39) / (Km0568_39 * Km1543_39) / ((1 + s_0568 / Km0568_39) * (1 + s_1543 / Km1543_39) + (1 + s_0409 / Km0409_39) * (1 + s_1538 / Km1538_39) - 1)) + (cell * Vmax_131 * (s_1543 - s_0773 * s_1538 / Keq_131) / Km1543_131 / (1 + s_1543 / Km1543_131 + (1 + s_0773 / Km0773_131) * (1 + s_1538 / Km1538_131) - 1)) + (cell * Vmax_266 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_266) / (Km0434_266 * Km1545_266) / ((1 + s_0434 / Km0434_266) * (1 + s_1545 / Km1545_266) + (1 + s_0394 / Km0394_266) * (1 + s_1538 / Km1538_266) - 1)) - (cell * Vmax_187 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_187) / (Km0434_187 * Km1538_187) / ((1 + s_0434 / Km0434_187) * (1 + s_1538 / Km1538_187) + (1 + s_0394 / Km0394_187) * (1 + s_1559 / Km1559_187) - 1));
    der(s_1543) = (cell * Vmax_267 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_267) / (Km0567_267 * Km1559_267) / ((1 + s_0567 / Km0567_267) * (1 + s_1559 / Km1559_267) + (1 + s_0633 / Km0633_267) * (1 + s_1543 / Km1543_267) - 1)) - (cell * Vmax_0 * (s_1543 - s_0002 * s_1538 / Keq_0) / Km1543_0 / (1 + s_1543 / Km1543_0 + (1 + s_0002 / Km0002_0) * (1 + s_1538 / Km1538_0) - 1)) - (cell * Vmax_1 * (s_1543 - s_0004 * s_1538 / Keq_1) / Km1543_1 / (1 + s_1543 / Km1543_1 + (1 + s_0004 / Km0004_1) * (1 + s_1538 / Km1538_1) - 1)) - (cell * Vmax_39 * (s_0568 * s_1543 - s_0409 * s_1538 / Keq_39) / (Km0568_39 * Km1543_39) / ((1 + s_0568 / Km0568_39) * (1 + s_1543 / Km1543_39) + (1 + s_0409 / Km0409_39) * (1 + s_1538 / Km1538_39) - 1)) - (cell * Vmax_131 * (s_1543 - s_0773 * s_1538 / Keq_131) / Km1543_131 / (1 + s_1543 / Km1543_131 + (1 + s_0773 / Km0773_131) * (1 + s_1538 / Km1538_131) - 1));
    der(s_1545) = (cell * Vmax_192 * (s_1270 - s_0456 * s_1545 / Keq_192) / Km1270_192 / (1 + s_1270 / Km1270_192 + (1 + s_0456 / Km0456_192) * (1 + s_1545 / Km1545_192) - 1)) - (cell * Vmax_266 * (s_0434 * s_1545 - s_0394 * s_1538 / Keq_266) / (Km0434_266 * Km1545_266) / ((1 + s_0434 / Km0434_266) * (1 + s_1545 / Km1545_266) + (1 + s_0394 / Km0394_266) * (1 + s_1538 / Km1538_266) - 1)) - (0.0599 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1559) = (cell * Vmax_187 * (s_0434 * s_1538 - s_0394 * s_1559 / Keq_187) / (Km0434_187 * Km1538_187) / ((1 + s_0434 / Km0434_187) * (1 + s_1538 / Km1538_187) + (1 + s_0394 / Km0394_187) * (1 + s_1559 / Km1559_187) - 1)) - (cell * Vmax_76 * (s_0419 * s_0434 * s_1559 - s_0394 * s_0539 * s_1322 / Keq_76) / (Km0419_76 * Km0434_76 * Km1559_76) / ((1 + s_0419 / Km0419_76) * (1 + s_0434 / Km0434_76) * (1 + s_1559 / Km1559_76) + (1 + s_0394 / Km0394_76) * (1 + s_0539 / Km0539_76) * (1 + s_1322 / Km1322_76) - 1)) - (cell * Vmax_233 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_233) / (Km1559_233 * Km1616_233) / ((1 + s_1559 / Km1559_233) * (1 + s_1616 / Km1616_233) + (1 + s_0656 / Km0656_233) * (1 + s_1620 / Km1620_233) - 1)) - (cell * Vmax_267 * (s_0567 * s_1559 - s_0633 * s_1543 / Keq_267) / (Km0567_267 * Km1559_267) / ((1 + s_0567 / Km0567_267) * (1 + s_1559 / Km1559_267) + (1 + s_0633 / Km0633_267) * (1 + s_1543 / Km1543_267) - 1));
    der(s_1561) = (cell * Vmax_269 * (s_0434 * s_1056 * s_1614 - s_0423 * s_0633 * s_1561 / Keq_269) / (Km0434_269 * Km1056_269 * Km1614_269) / ((1 + s_0434 / Km0434_269) * (1 + s_1056 / Km1056_269) * (1 + s_1614 / Km1614_269) + (1 + s_0423 / Km0423_269) * (1 + s_0633 / Km0633_269) * (1 + s_1561 / Km1561_269) - 1)) - (0.2646 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1565) = (cell * Vmax_153 * (s_0849 * s_1198 - s_1203 * s_1565 / Keq_153) / (Km0849_153 * Km1198_153) / ((1 + s_0849 / Km0849_153) * (1 + s_1198 / Km1198_153) + (1 + s_1203 / Km1203_153) * (1 + s_1565 / Km1565_153) - 1)) - (cell * Vmax_133 * (s_0434 * s_0999 * s_1565 - s_0423 * s_0633 * s_0782 * s_0991 / Keq_133) / (Km0434_133 * Km0999_133 * Km1565_133) / ((1 + s_0434 / Km0434_133) * (1 + s_0999 / Km0999_133) * (1 + s_1565 / Km1565_133) + (1 + s_0423 / Km0423_133) * (1 + s_0633 / Km0633_133) * (1 + s_0782 / Km0782_133) * (1 + s_0991 / Km0991_133) - 1));
    der(s_1569) = (cell * Vmax_58 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_58) / (Km1212_58 * Km1579_58) / ((1 + s_1212 / Km1212_58) * (1 + s_1579 / Km1579_58) + (1 + s_1207 / Km1207_58) * (1 + s_1569 / Km1569_58) - 1)) - (cell * Vmax_239 * (s_1416 * s_1569 - s_0700 * s_1413 / Keq_239) / (Km1416_239 * Km1569_239) / ((1 + s_1416 / Km1416_239) * (1 + s_1569 / Km1569_239) + (1 + s_0700 / Km0700_239) * (1 + s_1413 / Km1413_239) - 1)) - (1.5e-05 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281));
    der(s_1576) = (cell * Vmax_59 * (s_0296 * s_1212 * s_1275 - s_1207 * s_1576 / Keq_59) / (Km0296_59 * Km1212_59 * Km1275_59) / ((1 + s_0296 / Km0296_59) * (1 + s_1212 / Km1212_59) * (1 + s_1275 / Km1275_59) + (1 + s_1207 / Km1207_59) * (1 + s_1576 / Km1576_59) - 1)) - (cell * Vmax_60 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_60) / (Km1212_60 * Km1275_60 * Km1576_60) / ((1 + s_1212 / Km1212_60) * (1 + s_1275 / Km1275_60) * (1 + s_1576 / Km1576_60) + (1 + s_1207 / Km1207_60) * (1 + s_1577 / Km1577_60) - 1));
    der(s_1577) = (cell * Vmax_60 * (s_1212 * s_1275 * s_1576 - s_1207 * s_1577 / Keq_60) / (Km1212_60 * Km1275_60 * Km1576_60) / ((1 + s_1212 / Km1212_60) * (1 + s_1275 / Km1275_60) * (1 + s_1576 / Km1576_60) + (1 + s_1207 / Km1207_60) * (1 + s_1577 / Km1577_60) - 1)) - (cell * Vmax_61 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_61) / (Km1212_61 * Km1275_61 * Km1577_61) / ((1 + s_1212 / Km1212_61) * (1 + s_1275 / Km1275_61) * (1 + s_1577 / Km1577_61) + (1 + s_1207 / Km1207_61) * (1 + s_1578 / Km1578_61) - 1));
    der(s_1578) = (cell * Vmax_61 * (s_1212 * s_1275 * s_1577 - s_1207 * s_1578 / Keq_61) / (Km1212_61 * Km1275_61 * Km1577_61) / ((1 + s_1212 / Km1212_61) * (1 + s_1275 / Km1275_61) * (1 + s_1577 / Km1577_61) + (1 + s_1207 / Km1207_61) * (1 + s_1578 / Km1578_61) - 1)) - (cell * Vmax_55 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_55) / (Km1207_55 * Km1578_55) / ((1 + s_1207 / Km1207_55) * (1 + s_1578 / Km1578_55) + (1 + s_0456 / Km0456_55) * (1 + s_1212 / Km1212_55) * (1 + s_1579 / Km1579_55) - 1));
    der(s_1579) = (cell * Vmax_55 * (s_1207 * s_1578 - s_0456 * s_1212 * s_1579 / Keq_55) / (Km1207_55 * Km1578_55) / ((1 + s_1207 / Km1207_55) * (1 + s_1578 / Km1578_55) + (1 + s_0456 / Km0456_55) * (1 + s_1212 / Km1212_55) * (1 + s_1579 / Km1579_55) - 1)) - (cell * Vmax_58 * (s_1212 * s_1579 - s_1207 * s_1569 / Keq_58) / (Km1212_58 * Km1579_58) / ((1 + s_1212 / Km1212_58) * (1 + s_1579 / Km1579_58) + (1 + s_1207 / Km1207_58) * (1 + s_1569 / Km1569_58) - 1));
    der(s_1582) = (0.4588 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_38 * (s_0434 * s_0955 * s_1582 - s_0404 * s_0423 * s_0633 / Keq_38) / (Km0434_38 * Km0955_38 * Km1582_38) / ((1 + s_0434 / Km0434_38) * (1 + s_0955 / Km0955_38) * (1 + s_1582 / Km1582_38) + (1 + s_0404 / Km0404_38) * (1 + s_0423 / Km0423_38) * (1 + s_0633 / Km0633_38) - 1));
    der(s_1583) = (0.1607 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_44 * (s_0434 * s_0965 * s_1583 - s_0423 * s_0428 * s_0633 / Keq_44) / (Km0434_44 * Km0965_44 * Km1583_44) / ((1 + s_0434 / Km0434_44) * (1 + s_0965 / Km0965_44) * (1 + s_1583 / Km1583_44) + (1 + s_0423 / Km0423_44) * (1 + s_0428 / Km0428_44) * (1 + s_0633 / Km0633_44) - 1));
    der(s_1585) = (0.1017 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_46 * (s_0434 * s_0969 * s_1585 - s_0423 * s_0430 * s_0633 / Keq_46) / (Km0434_46 * Km0969_46 * Km1585_46) / ((1 + s_0434 / Km0434_46) * (1 + s_0969 / Km0969_46) * (1 + s_1585 / Km1585_46) + (1 + s_0423 / Km0423_46) * (1 + s_0430 / Km0430_46) * (1 + s_0633 / Km0633_46) - 1));
    der(s_1587) = (0.2975 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_51 * (s_0434 * s_0973 * s_1587 - s_0423 * s_0432 * s_0633 / Keq_51) / (Km0434_51 * Km0973_51 * Km1587_51) / ((1 + s_0434 / Km0434_51) * (1 + s_0973 / Km0973_51) * (1 + s_1587 / Km1587_51) + (1 + s_0423 / Km0423_51) * (1 + s_0432 / Km0432_51) * (1 + s_0633 / Km0633_51) - 1));
    der(s_1589) = (0.0066 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_80 * (s_0434 * s_0981 * s_1589 - s_0423 * s_0542 * s_0633 / Keq_80) / (Km0434_80 * Km0981_80 * Km1589_80) / ((1 + s_0434 / Km0434_80) * (1 + s_0981 / Km0981_80) * (1 + s_1589 / Km1589_80) + (1 + s_0423 / Km0423_80) * (1 + s_0542 / Km0542_80) * (1 + s_0633 / Km0633_80) - 1));
    der(s_1590) = (0.1054 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_121 * (s_0434 * s_0999 * s_1590 - s_0423 * s_0633 * s_0747 / Keq_121) / (Km0434_121 * Km0999_121 * Km1590_121) / ((1 + s_0434 / Km0434_121) * (1 + s_0999 / Km0999_121) * (1 + s_1590 / Km1590_121) + (1 + s_0423 / Km0423_121) * (1 + s_0633 / Km0633_121) * (1 + s_0747 / Km0747_121) - 1));
    der(s_1591) = (0.3018 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_122 * (s_0434 * s_0991 * s_1591 - s_0423 * s_0633 * s_0748 / Keq_122) / (Km0434_122 * Km0991_122 * Km1591_122) / ((1 + s_0434 / Km0434_122) * (1 + s_0991 / Km0991_122) * (1 + s_1591 / Km1591_122) + (1 + s_0423 / Km0423_122) * (1 + s_0633 / Km0633_122) * (1 + s_0748 / Km0748_122) - 1));
    der(s_1593) = (0.2904 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_132 * (s_0434 * s_1003 * s_1593 - s_0423 * s_0633 * s_0757 / Keq_132) / (Km0434_132 * Km1003_132 * Km1593_132) / ((1 + s_0434 / Km0434_132) * (1 + s_1003 / Km1003_132) * (1 + s_1593 / Km1593_132) + (1 + s_0423 / Km0423_132) * (1 + s_0633 / Km0633_132) * (1 + s_0757 / Km0757_132) - 1));
    der(s_1594) = (0.0663 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_141 * (s_0434 * s_1006 * s_1594 - s_0423 * s_0633 * s_0832 / Keq_141) / (Km0434_141 * Km1006_141 * Km1594_141) / ((1 + s_0434 / Km0434_141) * (1 + s_1006 / Km1006_141) * (1 + s_1594 / Km1594_141) + (1 + s_0423 / Km0423_141) * (1 + s_0633 / Km0633_141) * (1 + s_0832 / Km0832_141) - 1));
    der(s_1596) = (0.1927 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_161 * (s_0434 * s_1016 * s_1596 - s_0423 * s_0633 * s_0847 / Keq_161) / (Km0434_161 * Km1016_161 * Km1596_161) / ((1 + s_0434 / Km0434_161) * (1 + s_1016 / Km1016_161) * (1 + s_1596 / Km1596_161) + (1 + s_0423 / Km0423_161) * (1 + s_0633 / Km0633_161) * (1 + s_0847 / Km0847_161) - 1));
    der(s_1598) = (0.2964 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_168 * (s_0434 * s_1021 * s_1598 - s_0423 * s_0633 * s_1077 / Keq_168) / (Km0434_168 * Km1021_168 * Km1598_168) / ((1 + s_0434 / Km0434_168) * (1 + s_1021 / Km1021_168) * (1 + s_1598 / Km1598_168) + (1 + s_0423 / Km0423_168) * (1 + s_0633 / Km0633_168) * (1 + s_1077 / Km1077_168) - 1));
    der(s_1600) = (0.2862 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_169 * (s_0434 * s_1025 * s_1600 - s_0423 * s_0633 * s_1099 / Keq_169) / (Km0434_169 * Km1025_169 * Km1600_169) / ((1 + s_0434 / Km0434_169) * (1 + s_1025 / Km1025_169) * (1 + s_1600 / Km1600_169) + (1 + s_0423 / Km0423_169) * (1 + s_0633 / Km0633_169) * (1 + s_1099 / Km1099_169) - 1));
    der(s_1602) = (0.0507 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_176 * (s_0434 * s_1029 * s_1602 - s_0423 * s_0633 * s_1148 / Keq_176) / (Km0434_176 * Km1029_176 * Km1602_176) / ((1 + s_0434 / Km0434_176) * (1 + s_1029 / Km1029_176) * (1 + s_1602 / Km1602_176) + (1 + s_0423 / Km0423_176) * (1 + s_0633 / Km0633_176) * (1 + s_1148 / Km1148_176) - 1));
    der(s_1604) = (0.1339 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_194 * (s_0434 * s_1032 * s_1604 - s_0423 * s_0633 * s_1314 / Keq_194) / (Km0434_194 * Km1032_194 * Km1604_194) / ((1 + s_0434 / Km0434_194) * (1 + s_1032 / Km1032_194) * (1 + s_1604 / Km1604_194) + (1 + s_0423 / Km0423_194) * (1 + s_0633 / Km0633_194) * (1 + s_1314 / Km1314_194) - 1));
    der(s_1606) = (0.1647 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_225 * (s_0434 * s_1035 * s_1606 - s_0423 * s_0633 * s_1379 / Keq_225) / (Km0434_225 * Km1035_225 * Km1606_225) / ((1 + s_0434 / Km0434_225) * (1 + s_1035 / Km1035_225) * (1 + s_1606 / Km1606_225) + (1 + s_0423 / Km0423_225) * (1 + s_0633 / Km0633_225) * (1 + s_1379 / Km1379_225) - 1));
    der(s_1607) = (0.1854 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_243 * (s_0434 * s_1039 * s_1607 - s_0423 * s_0633 * s_1428 / Keq_243) / (Km0434_243 * Km1039_243 * Km1607_243) / ((1 + s_0434 / Km0434_243) * (1 + s_1039 / Km1039_243) * (1 + s_1607 / Km1607_243) + (1 + s_0423 / Km0423_243) * (1 + s_0633 / Km0633_243) * (1 + s_1428 / Km1428_243) - 1));
    der(s_1608) = (0.1914 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_254 * (s_0434 * s_1045 * s_1608 - s_0423 * s_0633 * s_1491 / Keq_254) / (Km0434_254 * Km1045_254 * Km1608_254) / ((1 + s_0434 / Km0434_254) * (1 + s_1045 / Km1045_254) * (1 + s_1608 / Km1608_254) + (1 + s_0423 / Km0423_254) * (1 + s_0633 / Km0633_254) * (1 + s_1491 / Km1491_254) - 1));
    der(s_1610) = (0.0284 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_263 * (s_0434 * s_1048 * s_1610 - s_0423 * s_0633 * s_1527 / Keq_263) / (Km0434_263 * Km1048_263 * Km1610_263) / ((1 + s_0434 / Km0434_263) * (1 + s_1048 / Km1048_263) * (1 + s_1610 / Km1610_263) + (1 + s_0423 / Km0423_263) * (1 + s_0633 / Km0633_263) * (1 + s_1527 / Km1527_263) - 1));
    der(s_1612) = (0.102 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_265 * (s_0434 * s_1051 * s_1612 - s_0423 * s_0633 * s_1533 / Keq_265) / (Km0434_265 * Km1051_265 * Km1612_265) / ((1 + s_0434 / Km0434_265) * (1 + s_1051 / Km1051_265) * (1 + s_1612 / Km1612_265) + (1 + s_0423 / Km0423_265) * (1 + s_0633 / Km0633_265) * (1 + s_1533 / Km1533_265) - 1));
    der(s_1614) = (0.2646 * cell * max(V0_281 * (1 + ep0002_281 * log(s_0002 / ic0002_281) + ep0423_281 * log(s_0423 / ic0423_281) + ep0434_281 * log(s_0434 / ic0434_281) + ep0526_281 * log(s_0526 / ic0526_281) + ep0584_281 * log(s_0584 / ic0584_281) + ep0589_281 * log(s_0589 / ic0589_281) + ep0615_281 * log(s_0615 / ic0615_281) + ep0649_281 * log(s_0649 / ic0649_281) + ep0773_281 * log(s_0773 / ic0773_281) + ep0782_281 * log(s_0782 / ic0782_281) + ep1107_281 * log(s_1107 / ic1107_281) + ep1405_281 * log(s_1405 / ic1405_281) + ep1467_281 * log(s_1467 / ic1467_281) + ep1520_281 * log(s_1520 / ic1520_281) + ep1545_281 * log(s_1545 / ic1545_281) + ep0004_281 * log(s_0004 / ic0004_281) + ep0404_281 * log(s_0404 / ic0404_281) + ep0428_281 * log(s_0428 / ic0428_281) + ep0430_281 * log(s_0430 / ic0430_281) + ep0432_281 * log(s_0432 / ic0432_281) + ep0542_281 * log(s_0542 / ic0542_281) + ep0747_281 * log(s_0747 / ic0747_281) + ep0748_281 * log(s_0748 / ic0748_281) + ep0757_281 * log(s_0757 / ic0757_281) + ep0832_281 * log(s_0832 / ic0832_281) + ep0847_281 * log(s_0847 / ic0847_281) + ep1077_281 * log(s_1077 / ic1077_281) + ep1099_281 * log(s_1099 / ic1099_281) + ep1148_281 * log(s_1148 / ic1148_281) + ep1314_281 * log(s_1314 / ic1314_281) + ep1379_281 * log(s_1379 / ic1379_281) + ep1337_281 * log(s_1337 / ic1337_281) + ep0089_281 * log(s_0089 / ic0089_281) + ep1428_281 * log(s_1428 / ic1428_281) + ep1491_281 * log(s_1491 / ic1491_281) + ep1527_281 * log(s_1527 / ic1527_281) + ep1533_281 * log(s_1533 / ic1533_281) + ep1561_281 * log(s_1561 / ic1561_281) + ep0122_281 * log(s_0122 / ic0122_281) + ep0918_281 * log(s_0918 / ic0918_281) + ep0657_281 * log(s_0657 / ic0657_281) + ep0662_281 * log(s_0662 / ic0662_281) + ep0666_281 * log(s_0666 / ic0666_281) + ep0672_281 * log(s_0672 / ic0672_281) + ep0056_281 * log(s_0056 / ic0056_281) + ep0700_281 * log(s_0700 / ic0700_281) + ep1059_281 * log(s_1059 / ic1059_281) + ep1346_281 * log(s_1346 / ic1346_281) + ep1351_281 * log(s_1351 / ic1351_281) + ep1524_281 * log(s_1524 / ic1524_281) + ep1569_281 * log(s_1569 / ic1569_281)), zero_flux_281)) - (cell * Vmax_269 * (s_0434 * s_1056 * s_1614 - s_0423 * s_0633 * s_1561 / Keq_269) / (Km0434_269 * Km1056_269 * Km1614_269) / ((1 + s_0434 / Km0434_269) * (1 + s_1056 / Km1056_269) * (1 + s_1614 / Km1614_269) + (1 + s_0423 / Km0423_269) * (1 + s_0633 / Km0633_269) * (1 + s_1561 / Km1561_269) - 1));
    der(s_1616) = (cell * Vmax_252 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_252) / (Km1212_252 * Km1620_252) / ((1 + s_1212 / Km1212_252) * (1 + s_1620 / Km1620_252) + (1 + s_1207 / Km1207_252) * (1 + s_1616 / Km1616_252) - 1)) - (cell * Vmax_148 * (s_0837 * s_1616 - s_1620 / Keq_148) / (Km0837_148 * Km1616_148) / ((1 + s_0837 / Km0837_148) * (1 + s_1616 / Km1616_148) + 1 + s_1620 / Km1620_148 - 1)) - (cell * Vmax_200 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_200) / (Km0201_200 * Km1616_200) / ((1 + s_0201 / Km0201_200) * (1 + s_1616 / Km1616_200) + (1 + s_0390 / Km0390_200) * (1 + s_1469 / Km1469_200) * (1 + s_1620 / Km1620_200) - 1)) - (cell * Vmax_232 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_232) / (Km0434_232 * Km1616_232) / ((1 + s_0434 / Km0434_232) * (1 + s_1616 / Km1616_232) + (1 + s_0586 / Km0586_232) * (1 + s_1620 / Km1620_232) - 1)) - (cell * Vmax_233 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_233) / (Km1559_233 * Km1616_233) / ((1 + s_1559 / Km1559_233) * (1 + s_1616 / Km1616_233) + (1 + s_0656 / Km0656_233) * (1 + s_1620 / Km1620_233) - 1)) - (cell * Vmax_234 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_234) / (Km0394_234 * Km1616_234) / ((1 + s_0394 / Km0394_234) * (1 + s_1616 / Km1616_234) + (1 + s_0582 / Km0582_234) * (1 + s_1620 / Km1620_234) - 1)) - (cell * Vmax_235 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_235) / (Km0467_235 * Km1616_235) / ((1 + s_0467 / Km0467_235) * (1 + s_1616 / Km1616_235) + (1 + s_0587 / Km0587_235) * (1 + s_1620 / Km1620_235) - 1)) - (cell * Vmax_236 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_236) / (Km0739_236 * Km1616_236) / ((1 + s_0739 / Km0739_236) * (1 + s_1616 / Km1616_236) + (1 + s_0613 / Km0613_236) * (1 + s_1620 / Km1620_236) - 1));
    der(s_1620) = (cell * Vmax_148 * (s_0837 * s_1616 - s_1620 / Keq_148) / (Km0837_148 * Km1616_148) / ((1 + s_0837 / Km0837_148) * (1 + s_1616 / Km1616_148) + 1 + s_1620 / Km1620_148 - 1)) + (cell * Vmax_200 * (s_0201 * s_1616 - s_0390 * s_1469 * s_1620 / Keq_200) / (Km0201_200 * Km1616_200) / ((1 + s_0201 / Km0201_200) * (1 + s_1616 / Km1616_200) + (1 + s_0390 / Km0390_200) * (1 + s_1469 / Km1469_200) * (1 + s_1620 / Km1620_200) - 1)) + (cell * Vmax_232 * (s_0434 * s_1616 - s_0586 * s_1620 / Keq_232) / (Km0434_232 * Km1616_232) / ((1 + s_0434 / Km0434_232) * (1 + s_1616 / Km1616_232) + (1 + s_0586 / Km0586_232) * (1 + s_1620 / Km1620_232) - 1)) + (cell * Vmax_233 * (s_1559 * s_1616 - s_0656 * s_1620 / Keq_233) / (Km1559_233 * Km1616_233) / ((1 + s_1559 / Km1559_233) * (1 + s_1616 / Km1616_233) + (1 + s_0656 / Km0656_233) * (1 + s_1620 / Km1620_233) - 1)) + (cell * Vmax_234 * (s_0394 * s_1616 - s_0582 * s_1620 / Keq_234) / (Km0394_234 * Km1616_234) / ((1 + s_0394 / Km0394_234) * (1 + s_1616 / Km1616_234) + (1 + s_0582 / Km0582_234) * (1 + s_1620 / Km1620_234) - 1)) + (cell * Vmax_235 * (s_0467 * s_1616 - s_0587 * s_1620 / Keq_235) / (Km0467_235 * Km1616_235) / ((1 + s_0467 / Km0467_235) * (1 + s_1616 / Km1616_235) + (1 + s_0587 / Km0587_235) * (1 + s_1620 / Km1620_235) - 1)) + (cell * Vmax_236 * (s_0739 * s_1616 - s_0613 * s_1620 / Keq_236) / (Km0739_236 * Km1616_236) / ((1 + s_0739 / Km0739_236) * (1 + s_1616 / Km1616_236) + (1 + s_0613 / Km0613_236) * (1 + s_1620 / Km1620_236) - 1)) - (cell * Vmax_252 * (s_1212 * s_1620 - s_1207 * s_1616 / Keq_252) / (Km1212_252 * Km1620_252) / ((1 + s_1212 / Km1212_252) * (1 + s_1620 / Km1620_252) + (1 + s_1207 / Km1207_252) * (1 + s_1616 / Km1616_252) - 1));
    der(e_0001) = 0.0;
    der(e_0004) = 0.0;
    der(e_0006) = 0.0;
    der(e_0007) = 0.0;
    der(e_0008) = 0.0;
    der(e_0010) = 0.0;
    der(e_0011) = 0.0;
    der(e_0012) = 0.0;
    der(e_0016) = 0.0;
    der(e_0017) = 0.0;
    der(e_0020) = 0.0;
    der(e_0022) = 0.0;
    der(e_0025) = 0.0;
    der(e_0026) = 0.0;
    der(e_0028) = 0.0;
    der(e_0029) = 0.0;
    der(e_0030) = 0.0;
    der(e_0031) = 0.0;
    der(e_0038) = 0.0;
    der(e_0045) = 0.0;
    der(e_0054) = 0.0;
    der(e_0057) = 0.0;
    der(e_0062) = 0.0;
    der(e_0063) = 0.0;
    der(e_0064) = 0.0;
    der(e_0065) = 0.0;
    der(e_0071) = 0.0;
    der(e_0074) = 0.0;
    der(e_0077) = 0.0;
    der(e_0079) = 0.0;
    der(e_0084) = 0.0;
    der(e_0085) = 0.0;
    der(e_0086) = 0.0;
    der(e_0087) = 0.0;
    der(e_0088) = 0.0;
    der(e_0089) = 0.0;
    der(e_0090) = 0.0;
    der(e_0091) = 0.0;
    der(e_0092) = 0.0;
    der(e_0100) = 0.0;
    der(e_0101) = 0.0;
    der(e_0103) = 0.0;
    der(e_0104) = 0.0;
    der(e_0106) = 0.0;
    der(e_0107) = 0.0;
    der(e_0111) = 0.0;
    der(e_0113) = 0.0;
    der(e_0117) = 0.0;
    der(e_0122) = 0.0;
    der(e_0124) = 0.0;
    der(e_0128) = 0.0;
    der(e_0129) = 0.0;
    der(e_0133) = 0.0;
    der(e_0134) = 0.0;
    der(e_0135) = 0.0;
    der(e_0136) = 0.0;
    der(e_0137) = 0.0;
    der(e_0139) = 0.0;
    der(e_0141) = 0.0;
    der(e_0142) = 0.0;
    der(e_0146) = 0.0;
    der(e_0154) = 0.0;
    der(e_0160) = 0.0;
    der(e_0165) = 0.0;
    der(e_0167) = 0.0;
    der(e_0168) = 0.0;
    der(e_0169) = 0.0;
    der(e_0171) = 0.0;
    der(e_0175) = 0.0;
    der(e_0176) = 0.0;
    der(e_0177) = 0.0;
    der(e_0179) = 0.0;
    der(e_0181) = 0.0;
    der(e_0182) = 0.0;
    der(e_0186) = 0.0;
    der(e_0194) = 0.0;
    der(e_0196) = 0.0;
    der(e_0203) = 0.0;
    der(e_0204) = 0.0;
    der(e_0206) = 0.0;
    der(e_0214) = 0.0;
    der(e_0218) = 0.0;
    der(e_0219) = 0.0;
    der(e_0220) = 0.0;
    der(e_0231) = 0.0;
    der(e_0233) = 0.0;
    der(e_0234) = 0.0;
    der(e_0237) = 0.0;
    der(e_0239) = 0.0;
    der(e_0242) = 0.0;
    der(e_0243) = 0.0;
    der(e_0249) = 0.0;
    der(e_0250) = 0.0;
    der(e_0255) = 0.0;
    der(e_0269) = 0.0;
    der(e_0271) = 0.0;
    der(e_0273) = 0.0;
    der(e_0276) = 0.0;
    der(e_0278) = 0.0;
    der(e_0280) = 0.0;
    der(e_0281) = 0.0;
    der(e_0283) = 0.0;
    der(e_0290) = 0.0;
    der(e_0291) = 0.0;
    der(e_0294) = 0.0;
    der(e_0296) = 0.0;
    der(e_0297) = 0.0;
    der(e_0298) = 0.0;
    der(e_0299) = 0.0;
    der(e_0303) = 0.0;
    der(e_0304) = 0.0;
    der(e_0306) = 0.0;
    der(e_0311) = 0.0;
    der(e_0312) = 0.0;
    der(e_0314) = 0.0;
    der(e_0317) = 0.0;
    der(e_0320) = 0.0;
    der(e_0321) = 0.0;
    der(e_0322) = 0.0;
    der(e_0325) = 0.0;
    der(e_0326) = 0.0;
    der(e_0328) = 0.0;
    der(e_0329) = 0.0;
    der(e_0330) = 0.0;
    der(e_0334) = 0.0;
    der(e_0340) = 0.0;
    der(e_0342) = 0.0;
    der(e_0343) = 0.0;
    der(e_0346) = 0.0;
    der(e_0347) = 0.0;
    der(e_0348) = 0.0;
    der(e_0352) = 0.0;
    der(e_0353) = 0.0;
    der(e_0355) = 0.0;
    der(e_0364) = 0.0;
    der(e_0365) = 0.0;
    der(e_0367) = 0.0;
    der(e_0368) = 0.0;
    der(e_0372) = 0.0;
    der(e_0376) = 0.0;
    der(e_0379) = 0.0;
    der(e_0380) = 0.0;
    der(e_0381) = 0.0;
    der(e_0382) = 0.0;
    der(e_0385) = 0.0;
    der(e_0387) = 0.0;
    der(e_0389) = 0.0;
    der(e_0390) = 0.0;
    der(e_0392) = 0.0;
    der(e_0393) = 0.0;
    der(e_0396) = 0.0;
    der(e_0397) = 0.0;
    der(e_0398) = 0.0;
    der(e_0401) = 0.0;
    der(e_0405) = 0.0;
    der(e_0409) = 0.0;
    der(e_0418) = 0.0;
    der(e_0422) = 0.0;
    der(e_0424) = 0.0;
    der(e_0425) = 0.0;
    der(e_0426) = 0.0;
    der(e_0427) = 0.0;
    der(e_0428) = 0.0;
    der(e_0431) = 0.0;
    der(e_0434) = 0.0;
    der(e_0435) = 0.0;
    der(e_0436) = 0.0;
    der(e_0440) = 0.0;
    der(e_0448) = 0.0;
    der(e_0452) = 0.0;
    der(e_0454) = 0.0;
    der(e_0456) = 0.0;
    der(e_0457) = 0.0;
    der(e_0458) = 0.0;
    der(e_0462) = 0.0;
    der(e_0463) = 0.0;
    der(e_0465) = 0.0;
    der(e_0467) = 0.0;
    der(e_0469) = 0.0;
    der(e_0470) = 0.0;
    der(e_0472) = 0.0;
    der(e_0475) = 0.0;
    der(e_0476) = 0.0;
    der(e_0489) = 0.0;
    der(e_0490) = 0.0;
    der(e_0492) = 0.0;
    der(e_0495) = 0.0;
    der(e_0496) = 0.0;
    der(e_0499) = 0.0;
    der(e_0506) = 0.0;
    der(e_0508) = 0.0;
    der(e_0510) = 0.0;
    der(e_0512) = 0.0;
    der(e_0514) = 0.0;
    der(e_0515) = 0.0;
    der(e_0525) = 0.0;
    der(e_0528) = 0.0;
    der(e_0531) = 0.0;
    der(e_0536) = 0.0;
    der(e_0540) = 0.0;
    der(e_0541) = 0.0;
    der(e_0542) = 0.0;
    der(e_0545) = 0.0;
    der(e_0547) = 0.0;
    der(e_0548) = 0.0;
    der(e_0549) = 0.0;
    der(e_0550) = 0.0;
    der(e_0556) = 0.0;
    der(e_0557) = 0.0;
    der(e_0561) = 0.0;
    der(e_0563) = 0.0;
    der(e_0565) = 0.0;
    der(e_0567) = 0.0;
    der(e_0568) = 0.0;
    der(e_0571) = 0.0;
    der(e_0574) = 0.0;
    der(e_0576) = 0.0;
    der(e_0578) = 0.0;
    der(e_0582) = 0.0;
    der(e_0585) = 0.0;
    der(e_0586) = 0.0;
    der(e_0591) = 0.0;
    der(e_0594) = 0.0;
    der(e_0603) = 0.0;
    der(e_0607) = 0.0;
    der(e_0610) = 0.0;
    der(e_0611) = 0.0;
    der(e_0613) = 0.0;
    der(e_0615) = 0.0;
    der(e_0629) = 0.0;
    der(e_0631) = 0.0;
    der(e_0632) = 0.0;
    der(e_0633) = 0.0;
    der(e_0637) = 0.0;
    der(e_0638) = 0.0;
    der(e_0639) = 0.0;
    der(e_0642) = 0.0;
    der(e_0644) = 0.0;
    der(e_0645) = 0.0;
    der(e_0658) = 0.0;
    der(e_0667) = 0.0;
    der(e_0674) = 0.0;
    der(e_0675) = 0.0;
    der(e_0682) = 0.0;
    der(e_0684) = 0.0;
    der(e_0685) = 0.0;
    der(e_0686) = 0.0;
    der(e_0687) = 0.0;
    der(e_0690) = 0.0;
    der(e_0692) = 0.0;
    der(e_0693) = 0.0;
    der(e_0697) = 0.0;
    der(e_0699) = 0.0;
    der(e_0705) = 0.0;
    der(e_0708) = 0.0;
    der(e_0711) = 0.0;
    der(e_0712) = 0.0;
    der(e_0714) = 0.0;
    der(e_0716) = 0.0;
    der(e_0724) = 0.0;
    der(e_0729) = 0.0;
    der(e_0733) = 0.0;
    der(e_0734) = 0.0;
    der(e_0736) = 0.0;
    der(e_0737) = 0.0;
    der(e_0741) = 0.0;
    der(e_0742) = 0.0;
    der(e_0743) = 0.0;
    der(e_0744) = 0.0;
    der(e_0745) = 0.0;
    der(e_0746) = 0.0;
    der(e_0747) = 0.0;
    der(e_0750) = 0.0;
    der(e_0752) = 0.0;
    der(e_0753) = 0.0;
    der(e_0754) = 0.0;
    der(e_0755) = 0.0;
    der(e_0756) = 0.0;
    der(e_0757) = 0.0;
    der(e_0761) = 0.0;
    der(e_0763) = 0.0;
    der(e_0765) = 0.0;
    der(e_0769) = 0.0;
    der(e_0771) = 0.0;
    der(e_0774) = 0.0;
    der(e_0775) = 0.0;
    der(e_0778) = 0.0;
    der(e_0788) = 0.0;
    der(e_0791) = 0.0;
    der(e_0793) = 0.0;
    der(e_0799) = 0.0;
    der(e_0800) = 0.0;
    der(e_0802) = 0.0;
    der(e_0805) = 0.0;
    der(e_0808) = 0.0;
    der(e_0812) = 0.0;
    der(e_0813) = 0.0;
    der(e_0826) = 0.0;
    der(e_0827) = 0.0;
    der(e_0829) = 0.0;
    der(e_0830) = 0.0;
    der(e_0832) = 0.0;
    der(e_0836) = 0.0;
    der(e_0838) = 0.0;
    der(e_0840) = 0.0;
    der(e_0841) = 0.0;
    der(e_0848) = 0.0;
    der(e_0850) = 0.0;
    der(e_0851) = 0.0;
    der(e_0852) = 0.0;
    der(e_0855) = 0.0;
    der(e_0860) = 0.0;
    der(e_0862) = 0.0;
    der(e_0867) = 0.0;
    der(e_0869) = 0.0;
    der(e_0872) = 0.0;
    der(e_0875) = 0.0;
    der(e_0880) = 0.0;
    der(e_0883) = 0.0;
    der(e_0888) = 0.0;
    der(e_0889) = 0.0;
    der(e_0890) = 0.0;
    der(e_0894) = 0.0;
    der(e_0895) = 0.0;
    der(e_0899) = 0.0;
    der(e_0903) = 0.0;
    der(e_0904) = 0.0;
    der(e_0910) = 0.0;
    der(e_0914) = 0.0;
    der(e_0915) = 0.0;
    der(e_0922) = 0.0;
    der(e_0926) = 0.0;
    der(e_0934) = 0.0;
    der(e_0940) = 0.0;
    der(e_0947) = 0.0;
    der(e_0953) = 0.0;
    der(e_0955) = 0.0;
    der(e_0959) = 0.0;
    der(e_0962) = 0.0;
    der(e_0963) = 0.0;
    der(e_0964) = 0.0;
    der(e_0970) = 0.0;
    der(e_0973) = 0.0;
    der(e_0975) = 0.0;
    der(e_0976) = 0.0;
    der(e_0978) = 0.0;
    der(e_0980) = 0.0;




end BIOMD472;
