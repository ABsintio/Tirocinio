
#ifndef BIOMD554_PERTHREAD_SYSTEMDEFINITION_H
#define BIOMD554_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[61]=piecewise(1.0,geq((-500.0 + T),0.0),0.0);
    ACC[62]=piecewise(1.0,geq((-723.0 + T),0.0),0.0);
    ACC[57]=(1.0 + (62.0 * ((1.0 - ACC[62]) / (1.0 + pow(2.718281828459045,(-4.0 * (-283.0 + T)))))));
    ACC[25]=(4.922e-05 * (X[18] * (ACC[57] / (1.0 + X[18]))));
    ACC[60]=piecewise(1.0,(geq(T,200.0) && leq(T,500.0)),0.0);
    ACC[63]=((0.041 + (2.55 * ((-100.0 + (0.5 * T)) * pow(2.718281828459045,(-0.5 * ((-200.0 + T) * ACC[60])))))) * ACC[60]);
    ACC[51]=ACC[63];
    ACC[52]=(0.075 * (ACC[51] * (X[17] / (0.05 + X[17]))));
    ACC[4]=(0.0236 * ((2.68 * (1.0 + (-15.625 * X[44]))) + (-0.89 * (1.0 + (-42.37288135593221 * X[43])))));
    ACC[7]=(0.012 + ((0.00504 / (1.0 + pow(2.718281828459045,(-4.59186 * (-199.0 + T))))) + (-0.00504 / (1.0 + pow(2.718281828459045,(-4.59186 * (-505.0 + T)))))));
    ACC[15]=(363.6363636363637 * (ACC[7] * (X[31] - X[32])));
    ACC[13]=(363.6363636363637 * (ACC[7] * (X[10] - X[11])));
    ACC[14]=(363.6363636363637 * (ACC[7] * (X[19] - X[20])));
    ACC[12]=(363.6363636363637 * (ACC[7] * (X[3] - X[2])));
    ACC[8]=(0.012 * ((pow((42.37288135593221 * X[43]),2.0) + (1483.050847457627 * (pow((42.37288135593221 * X[43]),-0.5) * ACC[7]))) / (1.0 + (17.79661016949153 * pow((42.37288135593221 * X[43]),-0.5)))));
    ACC[26]=(0.0001528 * (X[6] * ((1.0 + (-1.0 / (1.0 + pow(2.718281828459045,(-20.0 * (-4.2 + X[18])))))) / (0.5 + X[6]))));
    ACC[22]=(0.0208 * (X[15] / (0.05 + X[15])));
    ACC[27]=(0.3 * (X[16] * (X[0] / ((0.01532 + X[0]) * (0.05 + X[16])))));
    ACC[20]=(0.0325 * ((X[21] / (0.764818 + X[21])) - (X[20] / (0.764818 + X[20]))));
    ACC[16]=(0.0489 * ((X[11] / (8.456799999999999 + X[11])) - (X[12] / (8.456799999999999 + X[12]))));
    ACC[18]=(0.9828 * ((0.08973299999999999 * pow((-1.0 + (8.6 / X[32])),-0.3703703703703703)) - X[33]));
    ACC[23]=(0.035657 * (X[0] / (0.001 + X[0])));
    ACC[38]=(0.00021856 * ((X[22] / (0.12862 + X[22])) - (X[20] / (0.12862 + X[20]))));
    ACC[32]=(0.403 * (X[0] * (X[4] * (pow((1.0 + pow((1.316655694535879 * X[0]),4.0)),-1.0) / (0.18 + X[4])))));
    ACC[33]=((0.5 * (X[6] / (0.5 + X[6]))) + (-0.45 * (X[4] / (0.06 + X[4]))));
    ACC[28]=(0.050461 * (X[0] * (X[13] * ((1.0 + (-1.0 / (1.0 + pow(2.718281828459045,(-20.0 * (-0.6 + X[6])))))) / (0.105 + X[13])))));
    ACC[17]=(0.0098394 * ((X[11] / (9.92 + X[11])) - (X[13] / (9.92 + X[13]))));
    ACC[21]=(0.038089 * ((X[12] / (3.53 + X[12])) - (X[13] / (3.53 + X[13]))));
    ACC[36]=(0.013314 * (X[0] * (X[29] * pow((1.0 + (2.356823002592505 * X[0])),-1.0))));
    ACC[30]=(0.001414507772020726 * (70.0 + (26.70818652849741 * log((X[28] / X[29])))));
    ACC[19]=(0.4893333333333333 * ((0.08973299999999999 * pow((-1.0 + (8.6 / X[32])),-0.3703703703703703)) - X[34]));
    ACC[39]=(0.08612400000000001 * ((X[22] / (0.22163 + X[22])) - (X[21] / (0.22163 + X[21]))));
    ACC[40]=(0.04889 * (X[1] / (0.001 + X[1])));
    ACC[54]=(0.1978 * ((X[23] / (0.09314 + X[23])) - (X[21] / (0.09314 + X[21]))));
    ACC[46]=(0.55783 * (X[1] * (X[5] * (pow((1.0 + pow((1.316655694535879 * X[1]),4.0)),-1.0) / (0.18 + X[5])))));
    ACC[50]=(0.02853 * (X[1] * (X[30] * pow((1.0 + (2.356823002592505 * X[1])),-1.0))));
    ACC[44]=(0.003637305699481865 * (70.0 + (26.70818652849741 * log((X[28] / X[30])))));
    ACC[58]=(0.8464 + (3.68 * (-1.0 + (2.379 / X[0]))));
    ACC[55]=(-0.54 + ((2.18868 / (pow(ACC[58],0.5) * X[0])) + (-0.5 * pow(ACC[58],0.5))));
    ACC[59]=(0.8464 + (3.68 * (-1.0 + (2.379 / X[1]))));
    ACC[56]=(-0.54 + ((2.18868 / (pow(ACC[59],0.5) * X[1])) + (-0.5 * pow(ACC[59],0.5))));
    ACC[10]=(X[25] - X[27]);
    ACC[43]=((5.3 * (X[42] * X[27])) + (-0.1046 * (X[23] * ACC[10])));
    ACC[6]=(X[38] - X[37]);
    ACC[1]=(0.5 * (X[1] * (-0.92 + pow(ACC[59],0.5))));
    ACC[3]=(2.379 - (X[1] + ACC[1]));
    ACC[48]=(0.4287 * (X[9] * (ACC[1] * (ACC[10] / X[27]))));
    ACC[49]=(28.6 * (X[40] * ACC[1]));
    ACC[45]=(0.05557 * (X[34] * (ACC[1] * (X[42] * ((1.0 + (-1.0 / (1.0 + pow(2.718281828459045,(-5.0 * (-20.0 + (X[1] / ACC[1]))))))) / (((0.00107 + ACC[1]) * (0.0029658 + X[34])) * (0.06320000000000001 + X[42])))))));
    ACC[53]=(3.0 * ACC[45]);
    ACC[41]=((0.0524681 * (X[37] * ACC[1])) + (-0.015 * (ACC[6] * X[1])));
    ACC[5]=(X[36] - X[35]);
    ACC[0]=(0.5 * (X[0] * (-0.92 + pow(ACC[58],0.5))));
    ACC[2]=(2.379 - (X[0] + ACC[0]));
    ACC[24]=((0.0243 * (X[35] * ACC[0])) + (-0.02073 * (ACC[5] * X[0])));
    ACC[35]=(2.73 * (X[39] * ACC[0]));
    ACC[31]=(0.008454 * (X[33] * (ACC[0] * (X[41] * ((1.0 + (-1.0 / (1.0 + pow(2.718281828459045,(-5.0 * (-20.0 + (X[0] / ACC[0]))))))) / (((0.00107 + ACC[0]) * (0.0029658 + X[33])) * (0.06320000000000001 + X[41])))))));
    ACC[37]=(3.0 * ACC[31]);
    ACC[9]=(X[24] - X[26]);
    ACC[34]=(0.2514 * (X[8] * (ACC[0] * (ACC[9] / X[26]))));
    ACC[29]=((6.2613 * (X[41] * X[26])) + (-0.54682 * (X[22] * ACC[9])));
    ACC[47]=((0.5 * (X[7] / (0.5 + X[7]))) + (-0.45 * (X[5] / (0.06 + X[5]))));
    ACC[42]=(0.0513 * (X[1] * (X[14] * ((1.0 + (-1.0 / (1.0 + pow(2.718281828459045,(-20.0 * (-0.6 + X[7])))))) / (0.105 + X[14])))));
    ACC[11]=(0.50417 * ((X[12] / (5.32 + X[12])) - (X[14] / (5.32 + X[14]))));
    F[38]=0.0;
    F[25]=0.0;
    F[19]=0.0;
    F[10]=0.0;
    F[2]=0.0;
    F[31]=0.0;
    F[28]=0.0;
    F[36]=0.0;
    F[24]=0.0;
    F[43]=(ACC[7] - ACC[8]);
    F[44]=((ACC[7] * (X[31] - X[32])) - (ACC[8] * (X[44] / X[43])));
    F[18]=(ACC[26] - ACC[25]);
    F[15]=((2.250000000000002 * ACC[52]) + (-1.25 * ACC[22]));
    F[16]=(ACC[22] - ACC[27]);
    F[17]=((0.5555555555555556 * ACC[27]) - ACC[52]);
    F[20]=(ACC[14] + ((36.36363636363637 * ACC[20]) + (45.45454545454546 * ACC[38])));
    F[4]=(ACC[33] - ACC[32]);
    F[6]=(ACC[28] + (ACC[25] + ((-(ACC[33])) - ACC[26])));
    F[11]=(ACC[13] + ((-36.36363636363637 * ACC[16]) + (-45.45454545454546 * ACC[17])));
    F[13]=(ACC[17] + (ACC[21] - ACC[28]));
    F[29]=(ACC[30] + ((3.0 * ACC[22]) + (-3.0 * ACC[36])));
    F[32]=(ACC[15] + ((-81.83306055646482 * ACC[19]) + (-45.45454545454546 * ACC[18])));
    F[21]=((2.250000000000002 * ACC[54]) + ((1.25 * ACC[39]) - ACC[20]));
    F[30]=(ACC[44] + (ACC[51] + (-3.0 * ACC[50])));
    F[23]=(ACC[43] - ACC[54]);
    F[9]=((2.0 * ACC[46]) - ACC[48]);
    F[40]=(ACC[48] - ACC[49]);
    F[42]=(ACC[49] + ((-(ACC[43])) - ACC[45]));
    F[27]=(ACC[48] + ((-(ACC[43])) - ACC[45]));
    F[34]=(ACC[19] + (-3.0 * ACC[45]));
    F[37]=(-(ACC[41]));
    F[35]=(-(ACC[24]));
    F[3]=((81.83306055646482 * ACC[53]) + ((45.45454545454546 * ACC[37]) - ACC[12]));
    F[33]=(ACC[18] + (-3.0 * ACC[31]));
    F[8]=((2.0 * ACC[32]) - ACC[34]);
    F[39]=(ACC[34] - ACC[35]);
    F[0]=((ACC[34] + (ACC[35] + ((15.0 * ACC[31]) + (ACC[24] + (((((-(ACC[28])) - ACC[32]) - ACC[23]) - ACC[36]) - ACC[27]))))) * pow((1.0 - ACC[55]),-1.0));
    F[41]=(ACC[35] + ((-(ACC[29])) - ACC[31]));
    F[22]=(ACC[29] + ((-(ACC[39])) - ACC[38]));
    F[26]=(ACC[34] + ((-(ACC[29])) - ACC[31]));
    F[5]=(ACC[47] - ACC[46]);
    F[7]=(ACC[42] - ACC[47]);
    F[1]=((ACC[48] + (ACC[49] + ((15.0 * ACC[45]) + (ACC[41] + ((((-(ACC[42])) - ACC[46]) - ACC[40]) - ACC[50]))))) * pow((1.0 - ACC[56]),-1.0));
    F[12]=(ACC[16] + ((-1.25 * ACC[21]) + (-2.250000000000002 * ACC[11])));
    F[14]=(ACC[11] - ACC[42]);

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[0]=0.0; //ADPg
    ACC[1]=0.0; //ADPn
    ACC[2]=0.0; //AMPg
    ACC[3]=0.0; //AMPn
    ACC[4]=0.04179315; //BOLD
    ACC[5]=0.0; //CRg
    ACC[6]=0.0; //CRn
    ACC[7]=0.012; //Fin_t
    ACC[8]=0.0120054326049026; //Fout_t
    ACC[9]=0.0; //NADg
    ACC[10]=0.0; //NADn
    ACC[11]=0.00599865999248041; //V_en_GLC
    ACC[12]=4.01454545454546; //Vc_CO2
    ACC[13]=0.69774545454546; //Vc_GLC
    ACC[14]=-0.0528; //Vc_LAC
    ACC[15]=4.01410909090909; //Vc_O2
    ACC[16]=0.0154673938740423; //Vce_GLC
    ACC[17]=0.00297412147754264; //Vcg_GLC
    ACC[18]=0.0180867710645166; //Vcg_O2
    ACC[19]=0.0390504186958046; //Vcn_O2
    ACC[20]=0.0014407850610198; //Vec_LAC
    ACC[21]=0.00158470181577655; //Veg_GLC
    ACC[22]=0.0; //Veg_GLU
    ACC[23]=0.035641088799643; //Vg_ATPase
    ACC[24]=8.98869880248884e-05; //Vg_ck
    ACC[25]=3.51571428571429e-05; //Vg_glyp
    ACC[26]=9.08171994158688e-05; //Vg_glys
    ACC[27]=0.0; //Vg_gs
    ACC[28]=0.00455613617326311; //Vg_hk
    ACC[29]=0.003039015294; //Vg_ldh
    ACC[30]=0.190378997692294; //Vg_leak_Na
    ACC[31]=0.0060112916441682; //Vg_mito
    ACC[32]=0.00450657384340637; //Vg_pfk
    ACC[33]=0.00451935700191414; //Vg_pgi
    ACC[34]=0.009045760532112101; //Vg_pgk
    ACC[35]=0.00906366080685179; //Vg_pk
    ACC[36]=0.06345311339461771; //Vg_pump
    ACC[37]=0.0180338749325046; //Vgc_CO2
    ACC[38]=1.46095762940601e-05; //Vgc_LAC
    ACC[39]=0.00298013264659761; //Vge_LAC
    ACC[40]=0.0488683691708698; //Vn_ATPase
    ACC[41]=2.93701651940294e-05; //Vn_ck
    ACC[42]=0.00600093047858717; //Vn_hk
    ACC[43]=-0.001026864256; //Vn_ldh
    ACC[44]=0.474905958264092; //Vn_leak_Na
    ACC[45]=0.0129174754920542; //Vn_mito
    ACC[46]=0.00599809710207478; //Vn_pfk
    ACC[47]=0.00600284722882977; //Vn_pgi
    ACC[48]=0.012002606302138; //Vn_pgk
    ACC[49]=0.0120203036981555; //Vn_pk
    ACC[50]=0.158300842198194; //Vn_pump
    ACC[51]=0.0; //Vn_stim
    ACC[52]=0.0; //Vn_stim_GLU
    ACC[53]=0.0387524264761627; //Vnc_CO2
    ACC[54]=-0.00101735054205471; //Vne_LAC
    ACC[55]=-0.115857415908852; //dAMP_dATPg
    ACC[56]=-0.101010798503538; //dAMP_dATPn
    ACC[57]=1.0; //deltaVt_GLY
    ACC[58]=1.07475714285714; //u_g
    ACC[59]=1.04154164305949; //u_n
    ACC[60]=0.0; //unitpulseSB
    ACC[61]=0.0; //unitstepSB
    ACC[62]=0.0; //unitstepSB2
    ACC[63]=0.0; //v_stim
    X[0]=2.240000000000002; //ATPg
    X[1]=2.2592; //ATPn
    X[2]=1.2; //CO2a
    X[3]=2.12; //CO2c
    X[4]=0.1116; //F6Pg
    X[5]=0.1091; //F6Pn
    X[6]=0.7326; //G6Pg
    X[7]=0.7275; //G6Pn
    X[8]=0.0698; //GAPg
    X[9]=0.0418; //GAPn
    X[10]=4.8; //GLCa
    X[11]=4.6401; //GLCc
    X[12]=0.3339; //GLCe
    X[13]=0.1656; //GLCg
    X[14]=0.2633; //GLCn
    X[15]=0.0; //GLUe
    X[16]=0.0; //GLUg
    X[17]=3.0; //GLUn
    X[18]=2.500000000000011; //GLYg
    X[19]=0.313; //LACa
    X[20]=0.3251; //LACc
    X[21]=0.3986; //LACe
    X[22]=0.4651; //LACg
    X[23]=0.3856; //LACn
    X[24]=0.22; //NADH_g_tot
    X[25]=0.22; //NADH_n_tot
    X[26]=0.0445; //NADHg
    X[27]=0.0319; //NADHn
    X[28]=150.0; //NAe
    X[29]=13.36; //NAg
    X[30]=15.533; //NAn
    X[31]=8.34; //O2a
    X[32]=7.4201; //O2c
    X[33]=0.1589; //O2g
    X[34]=0.0975; //O2n
    X[35]=4.6817; //PCrg
    X[36]=5.0; //PCrg_tot
    X[37]=4.2529; //PCrn
    X[38]=5.0; //PCrn_tot
    X[39]=0.0254; //PEPg
    X[40]=0.0037; //PEPn
    X[41]=0.1711; //PYRg
    X[42]=0.0388; //PYRn
    X[43]=0.0237; //Vv
    X[44]=0.0218; //dHb

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
