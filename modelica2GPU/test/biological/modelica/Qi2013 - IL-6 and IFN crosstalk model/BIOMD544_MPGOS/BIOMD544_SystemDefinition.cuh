
#ifndef BIOMD544_PERTHREAD_SYSTEMDEFINITION_H
#define BIOMD544_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    ACC[0]=(X[93] + ((2.0 * X[12]) + (X[5] + (X[97] + ((2.0 * X[13]) + (X[4] + (X[100] + ((2.0 * X[94]) + (X[2] + (X[92] + (X[98] + ((2.0 * X[99]) + (X[3] + (X[101] + (X[14] + X[7])))))))))))))));
    ACC[1]=(X[1] + (X[22] + (X[5] + ((2.0 * X[31]) + (X[30] + (X[4] + ((2.0 * X[34]) + (X[36] + (X[2] + (X[3] + ((2.0 * X[23]) + (X[21] + (X[26] + ((2.0 * X[32]) + (X[35] + X[38])))))))))))))));
    F[40]=(function_1(0.01,400.0,X[32]) + (function_4_reaction_n7_1(0.001,400.0,X[99]) + (-0.001 * X[40])));
    F[38]=((0.005 * X[34]) + ((-0.2 * X[38]) + (2e-07 * (X[35] * X[37]))));
    F[37]=((0.005 * X[36]) + ((0.2 * X[38]) + ((-2e-07 * (X[35] * X[37])) + ((0.0025 * X[4]) + (-0.05 * X[37])))));
    F[36]=((0.001 * (X[33] * X[35])) + (-0.205 * X[36]));
    F[35]=((2.0 * ((0.1 * X[32]) + (-0.02 * pow(X[35],2.0)))) + ((0.2 * X[38]) + ((-2e-07 * (X[35] * X[37])) + ((0.0025 * X[4]) + ((-0.001 * (X[33] * X[35])) + ((0.2 * X[36]) + ((-0.02 * (X[35] * X[101])) + (0.1 * X[3]))))))));
    F[34]=((0.001 * (X[33] * X[32])) + (-0.205 * X[34]));
    F[33]=((0.005 * (X[36] + X[34])) + (function_5(1.0,0.005,X[100]) + (function_9(1.0,0.005,X[13]) + ((0.205 * X[4]) + ((-0.001 * (X[33] * X[35])) + ((0.2 * X[36]) + ((-0.001 * (X[33] * X[32])) + ((0.2 * X[34]) + ((-0.001 * (X[3] * X[33])) + ((-(function_8(1.0,0.001,0.2,X[13],X[33],X[99]))) - function_4(1.0,0.001,0.2,X[33],X[100],X[101])))))))))));
    F[32]=((0.005 * X[23]) + ((-0.1 * X[32]) + ((0.02 * pow(X[35],2.0)) + ((-0.001 * (X[33] * X[32])) + (0.2 * X[34])))));
    F[14]=(function_9(1.0,0.005,X[13]) + ((2e-07 * (X[102] * X[101])) + (-0.2 * X[14])));
    F[13]=(function_8(1.0,0.001,0.2,X[13],X[33],X[99]) - function_9(1.0,0.005,X[13]));
    F[103]=(function_6(0.01,400.0,X[99]) + (-0.001 * X[103]));
    F[102]=(function_5(1.0,0.005,X[100]) + ((0.0025 * X[4]) + ((-0.05 * X[102]) + ((-2e-07 * (X[102] * X[101])) + (0.2 * X[14])))));
    F[101]=((0.0025 * X[4]) + ((-2.0 * ((0.005 * pow(X[101],2.0)) + (-0.5 * X[99]))) + ((-2e-07 * (X[102] * X[101])) + ((0.2 * X[14]) + ((-0.02 * (X[35] * X[101])) + ((0.1 * X[3]) - function_4(1.0,0.001,0.2,X[33],X[100],X[101])))))));
    F[100]=(function_4(1.0,0.001,0.2,X[33],X[100],X[101]) - function_5(1.0,0.005,X[100]));
    F[99]=((0.005 * X[94]) + ((0.005 * pow(X[101],2.0)) + ((-0.5 * X[99]) - function_8(1.0,0.001,0.2,X[13],X[33],X[99]))));
    F[8]=((-0.1 * (X[8] * X[50])) + (0.05 * X[72]));
    F[7]=((0.000501092 * (X[92] * X[96])) + (-4.992048157 * X[7]));
    F[6]=((0.002 * (X[96] * X[91])) + (-11.994559594 * X[6]));
    F[19]=((0.203 * X[25]) + (function_3(X[59],340.0,1.7) + ((0.003 * (X[95] + X[16])) + ((-0.001 * (X[96] * X[19])) + ((-0.001 * (X[19] * X[15])) + ((0.2 * X[16]) + ((-0.001 * (X[89] * X[19])) + (0.2 * X[95]))))))));
    F[18]=((-0.1 * (X[61] * X[18])) + (0.05 * X[84]));
    F[17]=(0.0005 * X[16]);
    F[16]=((0.001 * (X[19] * X[15])) + (-0.2035 * X[16]));
    F[15]=((0.008 * (X[91] * X[11])) + ((-0.8 * X[15]) + ((-0.001 * (X[19] * X[15])) + (0.2 * X[16]))));
    F[12]=((0.001 * (X[94] * X[29])) + (-0.203 * X[12]));
    F[11]=((0.02 * (X[105] * X[89])) + ((-0.1 * X[11]) + ((-0.008 * (X[91] * X[11])) + (0.8 * X[15]))));
    F[105]=(function_7(0.01,X[104]) + ((0.0035 * X[16]) + ((-0.02 * (X[105] * X[89])) + ((0.1 * X[11]) + (-0.0005 * X[105])))));
    F[104]=((0.001 * X[103]) + (-0.0005 * X[104]));
    F[98]=((2e-07 * (X[91] * X[92])) + ((-0.2 * X[98]) + (0.003 * X[12])));
    F[97]=((0.001 * (X[92] * X[29])) + (-0.203 * X[97]));
    F[95]=((0.001 * (X[89] * X[19])) + (-0.203 * X[95]));
    F[94]=((0.02 * pow(X[92],2.0)) + ((-0.105 * X[94]) + ((-0.001 * (X[94] * X[29])) + (0.2 * X[12]))));
    F[93]=((0.005 * (X[89] * X[92])) + (-0.5 * X[93]));
    F[92]=((0.4 * X[90]) + ((3.999987265 * X[6]) + ((0.0015 * X[5]) + ((-0.001 * (X[92] * X[29])) + ((0.2 * X[97]) + ((-2e-07 * (X[91] * X[92])) + ((0.2 * X[98]) + ((-0.005 * (X[89] * X[92])) + ((0.5 * X[93]) + ((-2.0 * ((0.02 * pow(X[92],2.0)) + (-0.1 * X[94]))) + ((-0.000501092 * (X[92] * X[96])) + ((4.992048157 * X[7]) + ((-0.02 * (X[21] * X[92])) + (0.1 * X[2]))))))))))))));
    F[91]=((0.003 * X[97]) + ((0.05 * X[102]) + ((0.003 * X[16]) + ((0.0015 * X[5]) + ((-2e-07 * (X[91] * X[92])) + ((0.2 * X[98]) + ((-0.008 * (X[91] * X[11])) + ((0.8 * X[15]) + ((-0.008 * (X[89] * X[91])) + ((0.8 * X[90]) + ((-0.002 * (X[96] * X[91])) + (7.994572329 * X[6]))))))))))));
    F[90]=((0.008 * (X[89] * X[91])) + (-1.2 * X[90]));
    F[89]=((0.005 * X[88]) + ((1.2 * X[90]) + ((11.999416443 * X[0]) + ((-0.02 * (X[105] * X[89])) + ((0.1 * X[11]) + ((-0.008 * (X[89] * X[91])) + ((-0.005 * (X[89] * X[92])) + ((0.5 * X[93]) + ((-0.001 * (X[89] * X[19])) + ((0.2 * X[95]) + ((-0.001 * (X[89] * X[20])) + ((-0.000509534 * (X[21] * X[89])) + (4.982769238 * X[1])))))))))))));
    F[88]=((0.003 * X[95]) + ((0.04 * pow(X[87],2.0)) + ((-0.205 * X[88]) + (0.003 * X[16]))));
    F[87]=((0.02 * ((X[85] * X[84]) - X[87])) + (-2.0 * ((0.04 * pow(X[87],2.0)) + (-0.2 * X[88]))));
    F[84]=((0.1 * (X[61] * X[18])) + ((-0.05 * X[84]) + (-0.02 * ((X[85] * X[84]) - X[87]))));
    F[83]=((0.9854000000000001 * pow(X[82],2.0)) + (-0.0009 * X[83]));
    F[82]=(function_activation(0.2335,X[76],X[81],20000.0) + ((-0.0388 * X[82]) + (-2.0 * ((0.9854000000000001 * pow(X[82],2.0)) + (-0.0009 * X[83])))));
    F[81]=((0.0388 * X[82]) - function_activation(0.2335,X[76],X[81],20000.0));
    F[5]=((0.001 * (X[29] * X[2])) + (-0.203 * X[5]));
    F[4]=((0.001 * (X[3] * X[33])) + (-0.205 * X[4]));
    F[79]=((0.005 * (X[74] * X[77])) + (-0.8 * X[79]));
    F[78]=((0.014 * (X[76] * X[77])) + (-0.87 * X[78]));
    F[77]=((0.87 * X[78]) + ((0.8 * X[79]) + ((-0.014 * (X[76] * X[77])) + (-0.005 * (X[74] * X[77])))));
    F[76]=((6.7 * X[75]) + ((-0.014 * (X[76] * X[77])) + (0.6 * X[78])));
    F[75]=((0.00011 * (X[67] * X[74])) + (-6.733000000000001 * X[75]));
    F[74]=((16.0 * X[73]) + ((0.27 * X[78]) + ((-0.00011 * (X[67] * X[74])) + ((0.033 * X[75]) + ((-0.005 * (X[74] * X[77])) + (0.5 * X[79]))))));
    F[73]=((0.00011 * (X[67] * X[71])) + (-16.033 * X[73]));
    F[71]=((0.3 * X[79]) + ((-0.00011 * (X[67] * X[71])) + (0.033 * X[73])));
    F[70]=((0.00025 * (X[65] * X[69])) + (-0.5580000000000001 * X[70]));
    F[69]=((0.058 * (X[68] + X[70])) + ((-0.0143 * (X[67] * X[69])) + ((0.8 * X[68]) + ((-0.00025 * (X[65] * X[69])) + (0.5 * X[70])))));
    F[68]=((0.0143 * (X[67] * X[69])) + (-0.8580000000000001 * X[68]));
    F[67]=((2.9 * X[66]) + ((16.033 * X[73]) + ((6.733000000000001 * X[75]) + ((-0.0143 * (X[67] * X[69])) + ((0.8 * X[68]) + (-0.00011 * (X[67] * (X[71] + X[74]))))))));
    F[66]=((0.011 * (X[55] * X[65])) + (-2.901833 * X[66]));
    F[65]=((3.5 * X[64]) + ((0.058 * X[68]) + ((-0.011 * (X[55] * X[65])) + ((0.001833 * X[66]) + ((-0.00025 * (X[65] * X[69])) + (0.5 * X[70]))))));
    F[64]=((0.011 * (X[55] * X[63])) + (-3.501833 * X[64]));
    F[63]=((0.058 * X[70]) + ((-0.011 * (X[55] * X[63])) + (0.001833 * X[64])));
    F[62]=((0.0717 * (X[60] * X[55])) + (-1.2 * X[62]));
    F[60]=((1.2 * X[62]) + (-0.0717 * (X[60] * X[55])));
    F[59]=((0.3 * X[57]) + ((-0.021 * (X[58] * X[59])) + ((0.3 * X[43]) + ((-0.0009 * (X[96] * X[59])) + ((-0.01 * (X[42] * X[59])) + ((0.55 * X[46]) - function_3(X[59],340.0,1.7)))))));
    F[58]=((0.3 * X[57]) + ((-0.021 * (X[58] * X[59])) + ((-0.0015 * X[58]) + ((0.0045 * (X[42] * X[45])) + ((-0.03 * (X[43] * X[58])) + (0.0429 * X[47]))))));
    F[57]=((0.47 * X[47]) + ((-0.000245 * (X[57] * X[96])) + ((0.03 * (X[45] * X[46])) + ((-0.364 * X[57]) + (0.021 * (X[58] * X[59]))))));
    F[56]=((0.007900000000000001 * (X[47] * X[54])) + ((-0.423 * X[56]) + (0.00022 * (X[47] * X[48]))));
    F[55]=(X[53] + ((-0.0007 * (X[54] * X[55])) + ((3.501833 * X[64]) + ((2.901833 * X[66]) + ((-0.0717 * (X[60] * X[55])) + ((0.2 * X[62]) + (-0.011 * (X[55] * (X[63] + X[65])))))))));
    F[54]=(X[53] + ((-0.0007 * (X[54] * X[55])) + ((-0.007900000000000001 * (X[47] * X[54])) + (0.4 * X[56]))));
    F[53]=((0.001 * (X[51] * X[52])) + ((-1.0053 * X[53]) + (0.0007 * (X[54] * X[55]))));
    F[52]=(X[62] + ((-0.001 * (X[51] * X[52])) + (0.0053 * X[53])));
    F[51]=((0.5 * X[49]) + ((-0.0001 * (X[51] * X[47])) + ((-0.001 * (X[51] * X[52])) + (0.0053 * X[53]))));
    F[49]=((0.015 * (X[48] * X[47])) + ((-1.8 * X[49]) + (0.0001 * (X[51] * X[47]))));
    F[48]=((0.023 * X[56]) + ((-0.00022 * (X[47] * X[48])) + ((-0.015 * (X[48] * X[47])) + (1.3 * X[49]))));
    F[47]=((0.01 * (X[45] * X[44])) + ((-0.5343 * X[47]) + ((1.8 * X[49]) + ((-0.0001 * (X[51] * X[47])) + ((0.423 * X[56]) + ((-0.00022 * (X[47] * X[48])) + ((0.03 * (X[43] * X[58])) + ((-0.015 * (X[48] * X[47])) + ((-0.007900000000000001 * (X[47] * X[54])) + (0.000245 * (X[57] * X[96])))))))))));
    F[46]=((0.01 * (X[42] * X[59])) + ((-0.55 * X[46]) + ((0.3 * X[44]) + ((-0.0009 * (X[96] * X[46])) + ((-0.03 * (X[45] * X[46])) + (0.064 * X[57]))))));
    F[45]=((0.0015 * X[58]) + ((-0.0045 * (X[42] * X[45])) + ((-0.01 * (X[45] * X[44])) + ((0.0214 * X[47]) + ((-0.03 * (X[45] * X[46])) + (0.064 * X[57]))))));
    F[44]=((0.01 * (X[43] * X[42])) + ((-0.8500000000000001 * X[44]) + ((-0.01 * (X[45] * X[44])) + ((0.0214 * X[47]) + (0.0009 * (X[96] * X[46]))))));
    F[43]=((6.0 * X[25]) + ((-0.36 * X[43]) + ((-0.01 * (X[43] * X[42])) + ((0.55 * X[44]) + ((0.0009 * (X[96] * X[59])) + ((-0.03 * (X[43] * X[58])) + (0.0429 * X[47])))))));
    F[42]=((0.0015 * X[58]) + ((-0.0045 * (X[42] * X[45])) + ((-0.01 * (X[43] * X[42])) + ((0.55 * X[44]) + ((-0.01 * (X[42] * X[59])) + (0.55 * X[46]))))));
    F[41]=((0.001 * X[40]) + (-0.0005 * X[41]));
    F[31]=((0.001 * (X[23] * X[29])) + (-0.203 * X[31]));
    F[30]=((0.001 * (X[21] * X[29])) + (-0.203 * X[30]));
    F[29]=((0.003 * (X[30] + (X[31] + (X[97] + (X[12] + X[5]))))) + ((-0.001 * (X[21] * X[29])) + ((0.2 * X[30]) + ((-0.001 * (X[23] * X[29])) + ((0.2 * X[31]) + ((-0.001 * (X[92] * X[29])) + ((0.2 * X[97]) + ((-0.001 * (X[94] * X[29])) + ((0.2 * X[12]) + ((-0.001 * (X[29] * X[2])) + (0.2 * X[5])))))))))));
    F[27]=(function_2(0.01,X[41]) + ((0.103 * X[24]) + ((-5.0 * (X[96] * X[27])) + (-0.0005999999999999999 * X[27]))));
    F[26]=((0.003 * X[31]) + ((2e-07 * (X[20] * X[21])) + (-0.2 * X[26])));
    F[25]=((0.001 * (X[96] * X[19])) + ((-6.203 * X[25]) + (0.06 * X[43])));
    F[24]=((5.0 * (X[96] * X[27])) + (-0.103 * X[24]));
    F[23]=((0.02 * pow(X[21],2.0)) + ((-0.105 * X[23]) + ((-0.001 * (X[23] * X[29])) + (0.2 * X[31]))));
    F[22]=((0.005 * (X[96] * X[21])) + (-0.5 * X[22]));
    F[21]=((0.4 * X[10]) + ((3.999994653 * X[0]) + ((0.0015 * X[5]) + ((-0.005 * (X[96] * X[21])) + ((0.5 * X[22]) + ((-2.0 * ((0.02 * pow(X[21],2.0)) + (-0.1 * X[23]))) + ((-0.001 * (X[21] * X[29])) + ((0.2 * X[30]) + ((-2e-07 * (X[20] * X[21])) + ((0.2 * X[26]) + ((-0.000509534 * (X[21] * X[89])) + ((4.982769238 * X[1]) + ((-0.02 * (X[21] * X[92])) + (0.1 * X[2]))))))))))))));
    F[20]=((0.003 * X[30]) + ((0.05 * X[37]) + ((0.0015 * X[5]) + ((-2e-07 * (X[20] * X[21])) + ((0.2 * X[26]) + ((-0.008 * (X[96] * X[20])) + ((0.8 * X[10]) + ((-0.001 * (X[89] * X[20])) + (7.99942179 * X[0])))))))));
    F[10]=((0.008 * (X[96] * X[20])) + (-1.2 * X[10]));
    F[96]=((0.47 * X[47]) + ((-0.000245 * (X[57] * X[96])) + ((0.3 * X[43]) + ((-0.0009 * (X[96] * X[59])) + ((0.3 * X[44]) + ((-0.0009 * (X[96] * X[46])) + ((0.005 * X[86]) + ((1.2 * X[10]) + ((11.994559594 * X[6]) + ((-0.005 * (X[96] * X[21])) + ((0.5 * X[22]) + ((-0.001 * (X[96] * X[19])) + ((0.2 * X[25]) + ((-5.0 * (X[96] * X[27])) + ((0.1 * X[24]) + ((X[96] * ((-0.008 * X[20]) + (-0.002 * X[91]))) + ((-0.000501092 * (X[92] * X[96])) + (4.992048157 * X[7]))))))))))))))))));
    F[86]=((0.003 * (X[25] + X[24])) + ((0.04 * pow(X[80],2.0)) + (-0.205 * X[86])));
    F[80]=((0.02 * ((X[39] * X[72]) - X[80])) + (-2.0 * ((0.04 * pow(X[80],2.0)) + (-0.2 * X[86]))));
    F[72]=((0.1 * (X[8] * X[50])) + ((-0.05 * X[72]) + (-0.02 * ((X[39] * X[72]) - X[80]))));
    F[61]=((-0.1 * (X[61] * X[18])) + (0.05 * X[84]));
    F[50]=0.0;
    F[39]=((0.1 * (X[28] * X[9])) + ((-0.05 * X[39]) + (-0.02 * ((X[39] * X[72]) - X[80]))));
    F[28]=0.0;
    F[3]=((0.005 * X[2]) + ((0.02 * (X[35] * X[101])) + ((-0.1 * X[3]) + ((-0.001 * (X[3] * X[33])) + (0.2 * X[4])))));
    F[2]=((0.02 * (X[21] * X[92])) + ((-0.105 * X[2]) + ((-0.001 * (X[29] * X[2])) + (0.2 * X[5]))));
    F[1]=((0.000509534 * (X[21] * X[89])) + (-4.982769238 * X[1]));
    F[0]=((0.001 * (X[89] * X[20])) + (-11.999416443 * X[0]));
    F[85]=0.0;
    F[9]=0.0;

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    ACC[0]=0.0; //s136
    ACC[1]=0.0; //s137
    X[0]=0.0; //s118
    X[1]=0.0; //s119
    X[2]=0.0; //s120
    X[3]=0.0; //s122
    X[4]=0.0; //s126
    X[5]=0.0; //s135
    X[6]=0.0; //s138
    X[7]=0.0; //s139
    X[8]=12.0; //s140
    X[9]=0.0; //species_1
    X[10]=0.0; //species_10
    X[11]=0.0; //species_100
    X[12]=0.0; //species_101
    X[13]=0.0; //species_102
    X[14]=0.0; //species_103
    X[15]=0.0; //species_104
    X[16]=0.0; //species_105
    X[17]=0.0; //species_106
    X[18]=12.0; //species_107
    X[19]=100.0; //species_108
    X[20]=1000.0; //species_11
    X[21]=0.0; //species_12
    X[22]=0.0; //species_13
    X[23]=0.0; //species_14
    X[24]=0.0; //species_15
    X[25]=0.0; //species_16
    X[26]=0.0; //species_18
    X[27]=0.0; //species_19
    X[28]=8.0; //species_2
    X[29]=50.0; //species_20
    X[30]=0.0; //species_21
    X[31]=0.0; //species_22
    X[32]=0.0; //species_23
    X[33]=60.0; //species_24
    X[34]=0.0; //species_25
    X[35]=0.0; //species_26
    X[36]=0.0; //species_27
    X[37]=0.0; //species_28
    X[38]=0.0; //species_29
    X[39]=0.0; //species_3
    X[40]=0.0; //species_30
    X[41]=0.0; //species_31
    X[42]=85.0; //species_32
    X[43]=0.0; //species_33
    X[44]=0.0; //species_34
    X[45]=34.0; //species_35
    X[46]=0.0; //species_36
    X[47]=0.0; //species_37
    X[48]=19000.0; //species_38
    X[49]=0.0; //species_39
    X[50]=0.8; //species_4
    X[51]=0.0; //species_40
    X[52]=67.0; //species_41
    X[53]=0.0; //species_42
    X[54]=0.0; //species_43
    X[55]=0.0; //species_44
    X[56]=0.0; //species_45
    X[57]=0.0; //species_46
    X[58]=0.0; //species_47
    X[59]=0.0; //species_48
    X[60]=67.0; //species_49
    X[61]=12.0; //species_5
    X[62]=0.0; //species_50
    X[63]=41667.0; //species_51
    X[64]=0.0; //species_52
    X[65]=0.0; //species_53
    X[66]=0.0; //species_54
    X[67]=0.0; //species_55
    X[68]=0.0; //species_56
    X[69]=67.0; //species_57
    X[70]=0.0; //species_58
    X[71]=35000.0; //species_59
    X[72]=0.0; //species_6
    X[73]=0.0; //species_60
    X[74]=0.0; //species_61
    X[75]=0.0; //species_62
    X[76]=0.0; //species_63
    X[77]=16667.0; //species_64
    X[78]=0.0; //species_65
    X[79]=0.0; //species_66
    X[80]=0.0; //species_7
    X[81]=40493.0; //species_74
    X[82]=0.0; //species_75
    X[83]=0.0; //species_76
    X[84]=0.0; //species_78
    X[85]=0.1; //species_79
    X[86]=0.0; //species_8
    X[87]=0.0; //species_80
    X[88]=0.0; //species_81
    X[89]=0.0; //species_82
    X[90]=0.0; //species_83
    X[91]=1000.0; //species_84
    X[92]=0.0; //species_85
    X[93]=0.0; //species_86
    X[94]=0.0; //species_87
    X[95]=0.0; //species_88
    X[96]=0.0; //species_9
    X[97]=0.0; //species_90
    X[98]=0.0; //species_91
    X[99]=0.0; //species_92
    X[100]=0.0; //species_94
    X[101]=0.0; //species_95
    X[102]=0.0; //species_96
    X[103]=0.0; //species_97
    X[104]=0.0; //species_98
    X[105]=0.0; //species_99

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
