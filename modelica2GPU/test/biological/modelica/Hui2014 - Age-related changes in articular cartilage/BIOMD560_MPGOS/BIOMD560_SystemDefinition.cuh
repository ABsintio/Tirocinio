
#ifndef BIOMD560_PERTHREAD_SYSTEMDEFINITION_H
#define BIOMD560_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    F[42]=0.0;
    F[29]=(4e-07 * X[51]);
    F[51]=0.0;
    F[60]=((0.05 * X[55]) + ((1e-05 * X[59]) + ((5e-06 * X[57]) + (X[60] * ((-0.001 * X[28]) + (-1e-07 * X[33]))))));
    F[28]=((4e-07 * X[51]) + (-0.0005 * X[28]));
    F[23]=((1e-09 * (X[5] * X[0])) + ((1e-07 * X[21]) + ((-1e-08 * (X[23] * X[32])) + (-0.0001 * (X[4] * X[23])))));
    F[22]=(1e-08 * (X[23] * X[32]));
    F[5]=((0.0001 * (X[4] * X[23])) + (-1e-09 * (X[5] * X[0])));
    F[4]=((1e-06 * X[2]) + (-0.0001 * (X[4] * X[23])));
    F[3]=(1e-09 * (X[5] * X[0]));
    F[59]=((2e-05 * (X[58] * X[50])) + (-1.1e-05 * X[59]));
    F[58]=((3e-05 * (X[55] * X[9])) + ((1e-06 * X[59]) + (X[58] * (-1e-06 + (-2e-05 * X[50])))));
    F[57]=((0.5 * (X[56] * X[50])) + (-0.001005 * X[57]));
    F[56]=((2e-05 * ((X[55] * X[7]) + (X[56] * X[43]))) + ((0.001 * X[57]) + ((X[56] * (-1e-06 + (-2e-05 * X[43]))) + (-0.5 * (X[56] * X[50])))));
    F[55]=((X[60] * ((0.001 * X[28]) + (1e-07 * X[33]))) + ((1e-06 * (X[58] + X[56])) + ((X[55] * (-0.05 + (-3e-05 * X[9]))) + (-2e-05 * (X[55] * X[7])))));
    F[54]=((1e-05 * X[51]) + ((5e-06 * X[53]) + (-9.999999999999999e-05 * X[54])));
    F[53]=((5e-06 * ((X[48] * X[52]) + X[53])) + (-0.001505 * X[53]));
    F[52]=((0.0015 * X[53]) + ((0.00048 * X[54]) + ((-5e-06 * (X[48] * X[52])) + (-4.8e-05 * X[52]))));
    F[41]=((0.002 * X[35]) + ((X[41] * (-0.001 + (0.0001 * X[38]))) + (-0.0001 * (X[41] * X[38]))));
    F[50]=((1e-06 * X[59]) + ((1e-05 * X[48]) + ((0.001 * X[57]) + ((-2e-05 * (X[58] * X[50])) + ((-0.5 * (X[56] * X[50])) + (-0.005 * X[50]))))));
    F[49]=((0.0167 * (X[48] + X[45])) + ((-0.0001 * (X[47] * X[49])) + (-5e-05 * (X[44] * X[49]))));
    F[48]=((0.0001 * (X[47] * X[49])) + (-0.0167 * X[48]));
    F[47]=((4e-05 * (X[58] * X[46])) + ((0.0167 * X[48]) + (X[47] * (-0.006 + (-0.0001 * X[49])))));
    F[46]=((0.006 * X[47]) + (-4e-05 * (X[58] * X[46])));
    F[45]=((5e-05 * (X[44] * X[49])) + (-0.0167 * X[45]));
    F[44]=((2e-05 * (X[56] * X[43])) + ((0.0167 * X[45]) + ((X[44] * (-0.0005 + (-0.0005999999999999999 * X[50]))) + (-5e-05 * (X[44] * X[49])))));
    F[43]=((X[44] * (0.0005 + (0.0005999999999999999 * X[50]))) + (-2e-05 * (X[56] * X[43])));
    F[40]=((0.0005 * (X[39] * X[48])) + (-0.001 * (X[40] * X[45])));
    F[39]=((0.001 * (X[40] * X[45])) + (-0.0005 * (X[39] * X[48])));
    F[38]=((0.0005 * X[51]) + ((0.0004 * X[37]) + ((0.0001 * (X[24] + ((X[61] * X[38]) + X[62]))) + (X[38] * (-0.000383 + (-0.0001 * (X[41] + X[61])))))));
    F[37]=((0.001 * X[1]) + ((0.0001 * X[35]) + (-0.001 * X[37])));
    F[64]=((5e-06 * X[25]) + (-1e-07 * X[64]));
    F[63]=((3.2e-05 * X[25]) + ((1.5e-06 * X[39]) + (-0.0001 * X[63])));
    F[62]=((X[61] * ((1e-07 * X[25]) + (0.0001 * X[38]))) + (-0.01 * X[62]));
    F[61]=((0.01 * X[62]) + (X[61] * ((-1e-07 * X[25]) + (-0.0001 * X[38]))));
    F[35]=((0.001 * (X[34] * X[62])) + (-0.01 * X[35]));
    F[34]=((1e-06 * (X[27] * (X[38] + X[25]))) + ((0.01 * X[35]) + (X[34] * ((-0.1 * X[26]) + (-0.001 * X[62])))));
    F[36]=0.0;
    F[33]=((1e-07 * (X[64] + (X[60] * X[33]))) + ((-6.4e-06 * X[33]) + (-1e-07 * (X[60] * X[33]))));
    F[32]=((0.0001 * X[63]) + (-6.4e-06 * X[32]));
    F[31]=((X[30] * (7e-06 + (5e-06 * (X[38] / (10.0 + X[38]))))) + (-1e-08 * (X[31] * X[17])));
    F[30]=((1e-08 * (X[31] * X[17])) + (X[30] * (-7e-06 + (-5e-06 * (X[38] / (10.0 + X[38]))))));
    F[25]=((0.005 * X[35]) + (-0.004999999999999999 * X[25]));
    F[27]=((0.1 * (X[34] * X[26])) + (-1e-06 * (X[27] * (X[38] + X[25]))));
    F[26]=((0.001 * X[35]) + (-0.1 * (X[34] * X[26])));
    F[24]=((8e-06 * (X[36] * (X[38] / (10.0 + X[38])))) + (-4e-05 * (X[24] * X[30])));
    F[21]=((1e-06 * (X[53] + X[48])) + (-1.07e-05 * X[21]));
    F[20]=((0.0003 * (X[19] * (1.0 + (X[15] + X[14])))) + ((X[20] * ((-1e-07 * X[10]) + (-8.3e-07 * X[18]))) + (-8e-07 * (X[20] * X[62]))));
    F[19]=((X[20] * ((1e-07 * X[10]) + (8.3e-07 * X[18]))) + ((8e-07 * (X[20] * X[62])) + (-0.0003 * (X[19] * (1.0 + (X[15] + X[14]))))));
    F[18]=((0.0005 * X[16]) + ((X[17] * (5e-10 + (1e-08 * X[19]))) + ((0.0167 * X[13]) + ((-7.499999999999999e-05 * (X[14] * X[18])) + (-1.67e-05 * (X[18] * X[11]))))));
    F[17]=((0.0005 * X[15]) + ((0.0167 * X[12]) + ((-7.499999999999999e-05 * (X[14] * X[17])) + ((X[17] * (-5e-10 + (-1e-08 * X[19]))) + (-1.67e-05 * (X[17] * X[11]))))));
    F[16]=((7.499999999999999e-05 * (X[14] * X[18])) + ((0.00167 * X[13]) + ((-0.0005 * X[16]) + (-0.000167 * (X[10] * X[16])))));
    F[15]=((7.499999999999999e-05 * (X[14] * X[17])) + ((0.00167 * X[12]) + ((-0.0005 * X[15]) + (-0.000167 * (X[10] * X[15])))));
    F[14]=((0.002 * X[51]) + ((0.00167 * X[11]) + ((0.0005 * (X[15] + X[16])) + ((X[14] * (-0.000167 + (-0.00167 * X[38]))) + ((-0.00167 * (X[14] * X[19])) + ((-1.67 * (X[10] * X[14])) + (-7.499999999999999e-05 * (X[14] * (X[17] + X[18])))))))));
    F[13]=((1.67e-05 * (X[18] * X[11])) + ((0.000167 * (X[10] * X[16])) + (-0.01837 * X[13])));
    F[12]=((1.67e-05 * (X[17] * X[11])) + ((0.000167 * (X[10] * X[15])) + (-0.01837 * X[12])));
    F[11]=((1.67 * (X[10] * X[14])) + ((0.0167 * (X[12] + X[13])) + (X[11] * (-0.00167 + (-1.67e-05 * (X[17] + X[18]))))));
    F[10]=((0.00167 * (X[11] + (X[12] + X[13]))) + ((X[10] * ((-1.67 * X[14]) + (-0.000167 * X[15]))) + (-0.000167 * (X[10] * X[16]))));
    F[9]=((0.0001 * (X[8] * (-1.0 + X[8]))) + ((1e-06 * X[58]) + ((-0.001 * X[9]) + (-3e-05 * (X[55] * X[9])))));
    F[8]=((5e-06 * X[51]) + ((0.002 * X[9]) + ((0.01 * X[7]) + ((-0.0002 * (X[8] * (-1.0 + X[8]))) + ((-5e-05 * (X[6] * X[8])) + (-4e-07 * X[8]))))));
    F[7]=((5e-05 * (X[6] * X[8])) + ((1e-06 * X[56]) + ((-0.01 * X[7]) + (-2e-05 * (X[55] * X[7])))));
    F[6]=((0.01 * X[7]) + ((5e-06 * X[51]) + (X[6] * (-1.2e-08 + (-5e-05 * X[8])))));
    F[1]=(1e-06 * X[51]);
    F[0]=((0.0005 * X[25]) + (-5e-05 * X[0]));
    F[2]=((4.6e-06 * X[53]) + (-9e-06 * X[2]));

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    X[0]=0.0; //ADAMTS5
    X[1]=0.0; //AGEprod
    X[2]=0.0; //AcanmRNA
    X[3]=0.0; //AggFrag
    X[4]=0.0; //Aggrecan
    X[5]=1000.0; //Aggrecan_Collagen2
    X[6]=500.0; //Alk1
    X[7]=0.0; //Alk1_Alk5
    X[8]=500.0; //Alk5
    X[9]=0.0; //Alk5_dimer
    X[10]=0.0; //Bax
    X[11]=90.0; //Bax_Bcl2
    X[12]=10.0; //Bax_Bcl2_Beclin
    X[13]=0.0; //Bax_Bcl2_Beclin_I
    X[14]=30.0; //Bcl2
    X[15]=25.0; //Bcl2_Beclin
    X[16]=0.0; //Bcl2_Beclin_I
    X[17]=75.0; //Beclin
    X[18]=0.0; //Beclin_I
    X[19]=0.0; //Caspase_A
    X[20]=100.0; //Caspase_I
    X[21]=0.0; //Col2mRNA
    X[22]=0.0; //ColFrag
    X[23]=0.0; //Collagen2
    X[24]=0.0; //DamP
    X[25]=0.0; //IL1
    X[26]=0.0; //IkB
    X[27]=100.0; //IkB_NFkB
    X[28]=0.0; //Integrin
    X[29]=0.0; //IntegrinCount
    X[30]=40.0; //Lys_A
    X[31]=360.0; //Lys_I
    X[32]=0.0; //MMP13
    X[33]=0.0; //MMP2
    X[34]=0.0; //NFkB
    X[35]=0.0; //NFkB_P
    X[36]=1500.0; //NatP
    X[37]=0.0; //RAGE
    X[38]=2.0; //ROS
    X[39]=0.0; //Runx2_A
    X[40]=100.0; //Runx2_I
    X[41]=2.0; //SOD
    X[42]=0.0; //Sink
    X[43]=600.0; //Smad1
    X[44]=0.0; //Smad1_P
    X[45]=0.0; //Smad1_P_Smad4
    X[46]=600.0; //Smad2
    X[47]=0.0; //Smad2_P
    X[48]=0.0; //Smad2_P_Smad4
    X[49]=600.0; //Smad4
    X[50]=0.0; //Smad7
    X[51]=1.0; //Source
    X[52]=100.0; //Sox9
    X[53]=0.0; //Sox9_A
    X[54]=10.0; //Sox9mRNA
    X[55]=0.0; //Tgfb_A
    X[56]=0.0; //Tgfb_Alk1_Alk5
    X[57]=0.0; //Tgfb_Alk1_Alk5_Smad7
    X[58]=0.0; //Tgfb_Alk5_dimer
    X[59]=0.0; //Tgfb_Alk5_dimer_Smad7
    X[60]=200.0; //Tgfb_I
    X[61]=100.0; //p38
    X[62]=0.0; //p38_P
    X[63]=0.0; //proMMP13
    X[64]=0.0; //proMMP2

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
