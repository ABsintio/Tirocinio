
#ifndef BIOMD488_PERTHREAD_SYSTEMDEFINITION_H
#define BIOMD488_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    F[64]=0.0;
    F[54]=0.0;
    F[63]=(1e-06 * (X[59] * X[8]));
    F[62]=(0.0002 * X[8]);
    F[61]=(0.005 * X[9]);
    F[7]=((1e-06 * (X[6] * X[59])) + (-0.00015 * X[7]));
    F[10]=((1e-06 * (X[5] * X[59])) + (-0.00015 * X[10]));
    F[59]=((0.00015 * (X[10] + X[7])) + (X[59] * (-2.75e-06 + (-1e-06 * (X[5] + X[6])))));
    F[22]=((6e-07 * (X[25] * X[59])) + ((0.00505 * X[9]) + ((-5e-06 * X[22]) + (-1e-05 * (X[8] * X[22])))));
    F[25]=((6e-07 * (X[24] * X[8])) + ((5e-06 * X[22]) + (X[25] * (-5e-06 + (-6e-07 * X[59])))));
    F[24]=((6e-07 * (X[23] * X[8])) + ((5e-06 * X[25]) + (X[24] * (-5e-06 + (-6e-07 * X[8])))));
    F[23]=((5e-06 * X[24]) + (-6e-07 * (X[23] * X[8])));
    F[9]=((1e-05 * ((X[8] * X[22]) + X[9])) + (-0.005059999999999999 * X[9]));
    F[6]=((1.5e-06 * pow(X[5],2.0)) + ((0.0002 * X[8]) + ((1e-06 * (X[59] * X[8])) + ((-1e-07 * (X[6] * X[50])) + ((-0.2 * pow(X[6],2.0)) + ((X[6] * (-1e-06 + (-0.15 * (pow(X[8],2.0) / (100.0 + pow(X[8],2.0)))))) + (-1e-06 * (X[6] * X[59]))))))));
    F[4]=0.0;
    F[48]=(0.001 * (pow(X[12],2.0) + (X[12] * X[48])));
    F[49]=0.0;
    F[51]=((1.925e-07 * (X[55] * X[50])) + (-0.01 * X[51]));
    F[13]=(1e-07 * (X[12] * X[50]));
    F[12]=((1e-08 * pow(X[56],2.0)) + ((1e-08 * (X[56] * X[12])) + ((1e-07 * pow(X[57],2.0)) + ((1e-07 * (X[57] * X[12])) + ((1e-08 * (pow(X[55],2.0) + (X[55] * X[12]))) + ((-0.001 * (pow(X[12],2.0) + (X[12] * X[48]))) + (-1e-07 * (X[12] * X[50]))))))));
    F[27]=((0.1 * X[55]) + (-0.0001 * X[27]));
    F[57]=((0.1 * (X[56] * (X[20] + X[21]))) + ((0.0002 * (X[19] * X[56])) + ((-0.01 * (X[57] * X[49])) + (-1e-07 * (pow(X[57],2.0) + (X[57] * X[12]))))));
    F[56]=((0.1 * (X[55] * (X[20] + X[21]))) + ((0.0002 * (X[19] * X[55])) + ((0.01 * (X[57] * X[49])) + ((-0.1 * (X[56] * (X[20] + X[21]))) + ((-0.0002 * (X[19] * X[56])) + ((-0.01 * (X[56] * X[49])) + (-1e-08 * (pow(X[56],2.0) + (X[56] * X[12])))))))));
    F[55]=((0.0001 * X[27]) + ((0.01 * (X[56] * X[49])) + ((8.000000000000001e-05 * X[54]) + ((-0.1 * (X[55] * (1.0 + (X[20] + X[21])))) + ((-0.0002 * (X[19] * X[55])) + ((-1e-08 * (pow(X[55],2.0) + (X[55] * X[12]))) + (-1.925e-07 * (X[55] * X[50]))))))));
    F[8]=((0.1 * pow(X[6],2.0)) + ((0.15 * (X[6] * (pow(X[8],2.0) / (100.0 + pow(X[8],2.0))))) + ((5e-05 * X[9]) + ((-0.0002 * X[8]) + ((-1e-06 * (X[59] * X[8])) + (-1e-05 * (X[8] * X[22])))))));
    F[11]=(1e-07 * (X[6] * X[50]));
    F[5]=((1.86e-05 * (X[54] + (X[20] + X[21]))) + ((-1.5e-05 * X[5]) + ((2e-06 * X[6]) + ((-3e-06 * pow(X[5],2.0)) + (-1e-06 * (X[5] * X[59]))))));
    F[21]=((-0.002 * X[21]) + ((2e-06 * (X[19] * X[67])) + ((X[21] * ((0.1 * (X[55] + X[56])) + (-0.1 * X[55]))) + (-0.1 * (X[21] * X[56])))));
    F[20]=((-0.002 * X[20]) + ((2e-06 * (X[19] * X[65])) + ((X[20] * ((0.1 * (X[55] + X[56])) + (-0.1 * X[55]))) + (-0.1 * (X[20] * X[56])))));
    F[19]=((0.002 * (X[20] + X[21])) + ((X[19] * ((0.0002 * (X[55] + X[56])) + ((-2e-06 * X[65]) + ((-2e-06 * X[67]) + (-0.0002 * X[55]))))) + (-0.0002 * (X[19] * X[56]))));
    F[36]=((2e-06 * (X[35] * X[50])) + (-0.01 * (X[36] * X[64])));
    F[41]=((2e-06 * (X[40] * X[50])) + (-0.01 * (X[41] * X[64])));
    F[68]=((2e-06 * (X[31] * X[50])) + (-0.005 * (X[64] * (X[68] * (X[4] / (5000.0 + X[4]))))));
    F[35]=((0.00456 * (X[34] * X[18])) + (X[35] * ((-1e-07 * X[29]) + (-2e-06 * X[50]))));
    F[34]=((0.00456 * (X[33] * X[18])) + ((1e-07 * (X[35] * X[29])) + (X[34] * ((-0.00456 * X[18]) + (-1e-07 * X[29])))));
    F[33]=((0.00456 * (X[32] * X[18])) + ((1e-07 * (X[34] * X[29])) + (X[33] * ((-0.00456 * X[18]) + (-1e-07 * X[29])))));
    F[32]=((6.84e-06 * (X[30] * X[18])) + ((1e-07 * (X[33] * X[29])) + (X[32] * ((-0.00456 * X[18]) + (-1e-07 * X[29])))));
    F[40]=((0.00456 * (X[39] * X[18])) + (X[40] * ((-1e-07 * X[29]) + (-2e-06 * X[50]))));
    F[39]=((0.00456 * (X[38] * X[18])) + ((1e-07 * (X[40] * X[29])) + (X[39] * ((-0.00456 * X[18]) + (-1e-07 * X[29])))));
    F[38]=((0.00456 * (X[37] * X[18])) + ((1e-07 * (X[39] * X[29])) + (X[38] * ((-0.00456 * X[18]) + (-1e-07 * X[29])))));
    F[37]=((4.56e-06 * (X[28] * X[18])) + ((1e-07 * (X[38] * X[29])) + (X[37] * ((-0.00456 * X[18]) + (-1e-07 * X[29])))));
    F[31]=((X[47] * ((0.005 * X[19]) + (0.5 * X[20]))) + ((0.5 * (X[47] * X[21])) + (-2e-06 * (X[31] * X[50]))));
    F[47]=((0.01 * (X[46] * X[18])) + ((X[47] * ((-1e-07 * X[66]) + (-0.005 * X[19]))) + (-0.5 * (X[47] * (X[20] + X[21])))));
    F[46]=((0.01 * (X[45] * X[18])) + ((1e-07 * (X[47] * X[66])) + (X[46] * ((-0.01 * X[18]) + (-1e-07 * X[66])))));
    F[45]=((0.01 * (X[44] * X[18])) + ((1e-07 * (X[46] * X[66])) + (X[45] * ((-0.01 * X[18]) + (-1e-07 * X[66])))));
    F[44]=((5e-05 * (X[18] * X[43])) + ((1e-07 * (X[45] * X[66])) + (X[44] * ((-0.01 * X[18]) + (-1e-07 * X[66])))));
    F[29]=0.0;
    F[66]=0.0;
    F[58]=((1e-07 * (X[29] * (X[40] + (X[39] + (X[38] + X[37]))))) + ((0.04 * (X[41] * X[64])) + ((1e-07 * (X[66] * (X[47] + (X[46] + (X[45] + X[44]))))) + ((0.02 * (X[64] * (X[68] * (X[4] / (5000.0 + X[4]))))) + ((1e-07 * (X[29] * (X[35] + (X[34] + (X[33] + X[32]))))) + ((0.04 * (X[36] * X[64])) + (-0.0002 * (X[15] * (X[58] * (X[4] / (5000.0 + X[4])))))))))));
    F[50]=((0.01 * (X[41] * X[64])) + ((0.005 * (X[64] * (X[68] * (X[4] / (5000.0 + X[4]))))) + ((0.01 * ((X[36] * X[64]) + X[51])) + ((X[50] * ((-2e-06 * (X[40] + X[31])) + (-1e-07 * (X[12] + X[6])))) + ((-2e-06 * (X[35] * X[50])) + (-1.925e-07 * (X[55] * X[50])))))));
    F[18]=((0.001 * (X[17] * X[16])) + ((-4.56e-06 * (X[28] * X[18])) + ((X[18] * ((-0.00456 * (X[37] + (X[38] + X[39]))) + (-5e-05 * X[43]))) + ((-0.01 * (X[18] * (X[44] + (X[45] + X[46])))) + ((-6.84e-06 * (X[30] * X[18])) + (-0.00456 * (X[18] * (X[32] + (X[33] + X[34])))))))));
    F[16]=((0.0002 * (X[15] * (X[58] * (X[4] / (5000.0 + X[4]))))) + (-0.001 * (X[17] * X[16])));
    F[17]=((4.56e-06 * (X[28] * X[18])) + ((X[18] * ((0.00456 * (X[37] + (X[38] + X[39]))) + (5e-05 * X[43]))) + ((0.01 * (X[18] * (X[44] + (X[45] + X[46])))) + ((6.84e-06 * (X[30] * X[18])) + ((0.00456 * (X[18] * (X[32] + (X[33] + X[34])))) + (-0.001 * (X[17] * X[16])))))));
    F[15]=((0.001 * (X[17] * X[16])) + (-0.0002 * (X[15] * (X[58] * (X[4] / (5000.0 + X[4]))))));
    F[60]=((0.08 * X[26]) + ((1e-05 * X[52]) + (-2e-05 * X[60])));
    F[52]=((2e-05 * X[5]) + ((1e-05 * X[8]) + ((2e-05 * X[11]) + ((1e-05 * (X[52] + X[9])) + (-7.999999999999999e-05 * X[52])))));
    F[26]=0.0;
    F[30]=((2.0 * (X[28] * X[2])) + ((1e-07 * (X[32] * X[29])) + (X[30] * (-0.5 + (-6.84e-06 * X[18])))));
    F[67]=((0.002 * X[21]) + ((0.0002 * (X[65] * X[2])) + ((-2e-06 * (X[19] * X[67])) + (-0.5 * X[67]))));
    F[3]=((0.0005 * X[2]) + (-0.0001 * (X[60] * X[3])));
    F[2]=((0.0001 * (X[60] * X[3])) + (-0.0005 * X[2]));
    F[69]=((0.001 * X[54]) + ((-0.0001000000000000003 * X[69]) + (1e-05 * X[5])));
    F[42]=((0.0005 * (X[65] + X[67])) + ((0.0007 * (X[20] + X[21])) + (-0.0005 * X[42])));
    F[43]=((0.001155 * (X[65] * X[28])) + ((1e-07 * (X[44] * X[66])) + ((-1.155e-05 * X[43]) + (-5e-05 * (X[18] * X[43])))));
    F[65]=((1.155e-05 * X[43]) + ((0.002 * X[20]) + ((0.007 * X[69]) + ((0.5 * X[67]) + ((-0.001155 * (X[65] * X[28])) + ((-2e-06 * (X[19] * X[65])) + (-0.0002 * (X[65] * X[2]))))))));
    F[28]=((0.000495 * X[42]) + ((1.155e-05 * X[43]) + ((1e-07 * (X[37] * X[29])) + ((2e-06 * (X[31] * X[50])) + ((0.5 * X[30]) + ((-0.001155 * (X[65] * X[28])) + (X[28] * ((-4.56e-06 * X[18]) + (-2.0 * X[2])))))))));
    F[53]=0.0;
    F[1]=0.0;
    F[0]=0.0;
    F[14]=0.0;

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    X[0]=1000.0; //ADP
    X[1]=1000.0; //AMP
    X[2]=0.0; //ATMA
    X[3]=200.0; //ATMI
    X[4]=10000.0; //ATP
    X[5]=0.0; //Abeta
    X[6]=0.0; //AbetaDimer
    X[7]=0.0; //AbetaDimer_antiAb
    X[8]=0.0; //AbetaPlaque
    X[9]=0.0; //AbetaPlaque_GliaA
    X[10]=0.0; //Abeta_antiAb
    X[11]=0.0; //AggAbeta_Proteasome
    X[12]=0.0; //AggTau
    X[13]=0.0; //AggTau_Proteasome
    X[14]=200.0; //DUB
    X[15]=100.0; //E1
    X[16]=0.0; //E1_Ub
    X[17]=100.0; //E2
    X[18]=0.0; //E2_Ub
    X[19]=500.0; //GSK3b
    X[20]=0.0; //GSK3b_p53
    X[21]=0.0; //GSK3b_p53_P
    X[22]=0.0; //GliaA
    X[23]=100.0; //GliaI
    X[24]=0.0; //GliaM1
    X[25]=0.0; //GliaM2
    X[26]=0.0; //IR
    X[27]=100.0; //MT_Tau
    X[28]=5.0; //Mdm2
    X[29]=200.0; //Mdm2DUB
    X[30]=0.0; //Mdm2_P
    X[31]=0.0; //Mdm2_P1_p53_Ub4
    X[32]=0.0; //Mdm2_P_Ub
    X[33]=0.0; //Mdm2_P_Ub2
    X[34]=0.0; //Mdm2_P_Ub3
    X[35]=0.0; //Mdm2_P_Ub4
    X[36]=0.0; //Mdm2_P_Ub4_Proteasome
    X[37]=0.0; //Mdm2_Ub
    X[38]=0.0; //Mdm2_Ub2
    X[39]=0.0; //Mdm2_Ub3
    X[40]=0.0; //Mdm2_Ub4
    X[41]=0.0; //Mdm2_Ub4_Proteasome
    X[42]=10.0; //Mdm2_mRNA
    X[43]=95.0; //Mdm2_p53
    X[44]=0.0; //Mdm2_p53_Ub
    X[45]=0.0; //Mdm2_p53_Ub2
    X[46]=0.0; //Mdm2_p53_Ub3
    X[47]=0.0; //Mdm2_p53_Ub4
    X[48]=0.0; //NFT
    X[49]=50.0; //PP1
    X[50]=500.0; //Proteasome
    X[51]=0.0; //Proteasome_Tau
    X[52]=0.0; //ROS
    X[53]=1.0; //Sink
    X[54]=1.0; //Source
    X[55]=0.0; //Tau
    X[56]=0.0; //Tau_P1
    X[57]=0.0; //Tau_P2
    X[58]=4000.0; //Ub
    X[59]=0.0; //antiAb
    X[60]=0.0; //damDNA
    X[61]=0.0; //degAbetaGlia
    X[62]=0.0; //disaggPlaque1
    X[63]=0.0; //disaggPlaque2
    X[64]=1.0; //kproteff
    X[65]=5.0; //p53
    X[66]=200.0; //p53DUB
    X[67]=0.0; //p53_P
    X[68]=0.0; //p53_Ub4_Proteasome
    X[69]=10.0; //p53_mRNA

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
