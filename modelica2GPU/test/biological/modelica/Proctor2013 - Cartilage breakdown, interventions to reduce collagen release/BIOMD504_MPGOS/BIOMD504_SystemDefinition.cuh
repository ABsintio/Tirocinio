
#ifndef BIOMD504_PERTHREAD_SYSTEMDEFINITION_H
#define BIOMD504_PERTHREAD_SYSTEMDEFINITION_H

#include <fstream>
#include <iostream>
#include <string>
#include "Functions.cuh"


template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
    F[5]=0.0;
    F[54]=0.0;
    F[56]=((5e-06 * X[48]) + (-1e-05 * (X[47] * X[56])));
    F[50]=((0.001 * X[49]) + ((X[50] * (3.989999999999636e-05 + ((4e-05 * X[56]) + (-0.0005 * X[44])))) + (-4e-05 * (X[50] * (1.0 + X[56])))));
    F[52]=((X[50] * (1e-07 + (0.0005 * X[44]))) + (-0.001 * X[52]));
    F[48]=((1e-05 * (X[47] * X[56])) + (-5e-06 * X[48]));
    F[47]=((2e-05 * X[64]) + ((5e-06 * X[48]) + (X[47] * (-2e-05 + (-1e-05 * X[56])))));
    F[68]=((2.5e-05 * (X[67] * (-1.0 + X[67]))) + (-0.01 * X[68]));
    F[67]=((0.0001 * (X[66] * X[22])) + ((0.02 * X[68]) + ((4e-05 * X[64]) + ((X[67] * (-0.01 + (-5e-05 * (-1.0 + X[67])))) + (-5e-05 * (X[63] * X[67]))))));
    F[63]=((5e-07 * (X[71] * X[62])) + ((4e-05 * X[64]) + (X[63] * ((-0.0001 * (1.0 + X[9])) + (-5e-05 * X[67])))));
    F[64]=((-4.00000000000086e-05 * X[64]) + (5e-05 * (X[63] * X[67])));
    F[40]=((1e-05 * X[42]) + (-0.0001 * (X[37] * X[40])));
    F[38]=((1e-05 * (X[41] + (X[39] - (X[37] * X[38])))) + (-0.005 * (X[45] * X[38])));
    F[39]=((0.005 * (X[45] * X[38])) + (-1e-05 * X[39]));
    F[42]=((0.0001 * (X[37] * X[40])) + (-1e-05 * X[42]));
    F[41]=(1e-05 * ((X[37] * X[38]) + ((X[19] * X[41]) + ((-(X[41])) - (X[19] * X[41])))));
    F[12]=(0.0001 * (X[15] - (X[10] * X[12])));
    F[11]=((0.001 * X[13]) + (-0.0001 * (X[10] * X[11])));
    F[14]=((5e-05 * (X[13] * X[16])) + (X[14] * (-0.001 + (-1e-05 * X[60]))));
    F[15]=(0.0001 * ((X[10] * X[12]) - X[15]));
    F[13]=((0.0001 * (X[10] * X[11])) + ((X[14] * (0.001 + (1e-05 * X[60]))) + (X[13] * (-0.001 + (-5e-05 * X[16])))));
    F[58]=((0.0004 * X[59]) + ((0.001 * (X[2] + (X[30] + (X[34] + X[27])))) + ((X[58] * (-2e-05 + (-0.0005 * X[0]))) + (-1e-08 * (X[58] * (X[24] + (X[32] + X[25])))))));
    F[55]=((0.0002 * X[57]) + ((0.001 * (X[29] + (X[33] + (X[26] + X[1])))) + ((X[55] * (-2e-05 + (-3e-07 * (X[24] + X[32])))) + ((-3e-07 * (X[25] * X[55])) + (-3e-06 * (X[0] * X[55]))))));
    F[37]=((1e-05 * (X[41] + (X[42] - (X[37] * X[38])))) + (X[37] * (-4.8e-05 + (-0.0001 * X[40]))));
    F[27]=((1e-08 * (X[25] * X[58])) + (-0.001 * X[27]));
    F[26]=((3e-07 * (X[25] * X[55])) + (-0.001 * X[26]));
    F[25]=((5e-08 * (X[73] * X[32])) + ((0.001 * X[26]) + ((0.001 * X[27]) + ((X[25] * (-1e-06 + (-3e-07 * X[55]))) + (-1e-08 * (X[25] * X[58]))))));
    F[34]=((1e-08 * (X[32] * X[58])) + (-0.001 * X[34]));
    F[33]=((3e-07 * (X[32] * X[55])) + (-0.001 * X[33]));
    F[32]=((4e-06 * (X[74] * X[36])) + ((0.001 * (X[33] + X[34])) + ((X[32] * (-1e-06 + (-3e-07 * X[55]))) + (-1e-08 * (X[32] * X[58])))));
    F[30]=((1e-08 * (X[24] * X[58])) + (-0.001 * X[30]));
    F[29]=((3e-07 * (X[24] * X[55])) + (-0.001 * X[29]));
    F[24]=((X[72] * ((1e-09 * X[36]) + (1e-08 * X[32]))) + ((0.001 * X[29]) + ((0.001 * X[30]) + ((X[24] * (-1e-06 + (-3e-07 * X[55]))) + (-1e-08 * (X[24] * X[58]))))));
    F[10]=((0.001 * X[13]) + ((0.0001 * X[15]) + (X[10] * (-0.0002 + (-0.0001 * (X[11] + X[12]))))));
    F[8]=((3e-08 * (X[6] * X[0])) + (X[8] * ((-5e-12 * X[24]) + (-5e-11 * X[25]))));
    F[7]=(X[8] * ((5e-12 * X[24]) + (5e-11 * X[25])));
    F[4]=(3e-08 * (X[6] * X[0]));
    F[6]=(-3e-08 * (X[6] * X[0]));
    F[2]=((0.0005 * (X[58] * X[0])) + (-0.001 * X[2]));
    F[1]=((3e-06 * (X[0] * X[55])) + (-0.001 * X[1]));
    F[0]=((0.0005 * X[3]) + ((0.001 * X[1]) + ((0.001 * X[2]) + ((X[0] * (-5e-05 + (-3e-06 * X[55]))) + (-0.0005 * (X[58] * X[0]))))));
    F[61]=((0.5 * (X[60] * X[43])) + (-1e-06 * X[61]));
    F[60]=((0.0001 * X[17]) + ((1e-06 * X[61]) + ((-1e-05 * (X[14] * X[60])) + (-0.5 * (X[60] * X[43])))));
    F[59]=((0.00028 * X[54]) + ((5e-07 * X[64]) + ((4e-05 * X[50]) + (-1.4e-05 * X[59]))));
    F[57]=((4e-05 * (X[50] * X[56])) + ((0.00014 * X[56]) + ((5e-07 * (X[64] * X[56])) + (-1.4e-05 * X[57]))));
    F[49]=((0.005 * (X[51] * X[20])) + (X[49] * (-0.00101 + (-0.0008 * X[44]))));
    F[51]=((X[49] * (1e-05 + (0.0008 * X[44]))) + ((0.001 * X[52]) + (-0.005 * (X[51] * X[20]))));
    F[46]=((0.006 * X[50]) + (-0.0004 * X[46]));
    F[45]=((0.001 * X[46]) + ((1e-05 * X[39]) + (X[45] * (-0.0008 + (-0.005 * X[38])))));
    F[44]=((X[50] * (0.0001 + (0.0005 * X[44]))) + ((-0.0005 * (X[50] * X[44])) + (-5e-05 * X[44])));
    F[73]=((1.5e-05 * X[28]) + (-5e-08 * (X[73] * X[32])));
    F[74]=((3e-05 * X[35]) + (-4e-06 * (X[74] * X[36])));
    F[72]=((0.00015 * X[31]) + (X[72] * ((-1e-09 * X[36]) + (-1e-08 * X[32]))));
    F[43]=((0.005 * X[64]) + ((0.0002 * X[68]) + ((1e-06 * (X[61] + X[18])) + (X[43] * (-0.0001 + (-0.5 * (X[60] + X[17])))))));
    F[71]=((0.0001 * (X[70] * X[17])) + (X[71] * (-0.001 + (-1e-05 * X[23]))));
    F[70]=((X[71] * (0.001 + (1e-05 * X[23]))) + (-0.0001 * (X[70] * X[17])));
    F[28]=((0.0005 * X[64]) + ((2e-05 * X[68]) + (-6.4e-06 * X[28])));
    F[35]=((0.005 * X[64]) + ((0.0002 * X[68]) + (-6.4e-06 * X[35])));
    F[31]=((0.005 * X[64]) + ((0.0002 * X[68]) + (-6.4e-06 * X[31])));
    F[23]=((2.5e-05 * X[64]) + ((1e-06 * X[68]) + (-0.0001 * X[23])));
    F[36]=((9e-10 * X[64]) + (-8e-06 * X[36]));
    F[22]=((0.0001 * ((X[21] * X[17]) + (X[66] * X[22]))) + ((-0.001 * (X[22] * (1.0 + X[9]))) + (-0.0001 * (X[66] * X[22]))));
    F[21]=((0.001 * (X[22] * (1.0 + X[9]))) + (-0.0001 * (X[21] * X[17])));
    F[20]=((1e-05 * (X[19] * X[41])) + (X[20] * (-0.0004 + (-0.004 * X[44]))));
    F[19]=((X[20] * (0.0004 + (0.004 * X[44]))) + (-1e-05 * (X[19] * X[41])));
    F[18]=((0.5 * (X[17] * X[43])) + (-1e-06 * X[18]));
    F[17]=((1e-05 * (X[14] * X[60])) + ((0.0001 * (X[17] * (X[21] + X[70]))) + ((1e-06 * X[18]) + (X[17] * ((-0.0001 * (1.0 + (X[21] + X[70]))) + (-0.5 * X[43]))))));
    F[16]=((0.001 * X[14]) + ((0.0001 * X[17]) + (-5e-05 * (X[13] * X[16]))));
    F[9]=((0.005 * X[64]) + ((0.0002 * X[68]) + (-0.00013 * X[9])));
    F[69]=((0.0125 * X[64]) + ((0.005 * X[68]) + ((0.015 * X[54]) + (-0.003 * X[69]))));
    F[66]=((0.01 * X[67]) + ((0.0026 * X[69]) + (X[66] * (-0.00013 + (-0.0001 * X[22])))));
    F[65]=((5e-06 * X[64]) + ((-0.003 * X[65]) + (0.05 * X[50])));
    F[62]=((0.001 * X[65]) + ((0.0001 * (X[63] * (1.0 + X[9]))) + ((-0.0002 * X[62]) + (-5e-07 * (X[71] * X[62])))));
    F[3]=((0.0005 * X[64]) + ((4e-06 * X[68]) + (-1.4e-05 * X[3])));
    F[53]=0.0;

}

template<class Precision> __forceinline__ __device__ void PerThread_EventFunction(
	int tid, int NT, Precision*	  EF, \
	Precision     T, Precision    dT, Precision*    TD, Precision*	X, \
	Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi  		
) {
    

}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterEventDetection(
    int tid, int NT, int IDX, int& UDT, \
    Precision    &T, Precision   &dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
    
}

template<class Precision> __forceinline__ __device__ void PerThread_Initialization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
    T     = TD[0];
    DOIDX = 0;
    X[0]=0.0; //ADAMTS4
    X[1]=0.0; //ADAMTS4_TIMP1
    X[2]=0.0; //ADAMTS4_TIMP3
    X[3]=0.0; //ADAMTS4_mRNA
    X[4]=0.0; //AggFrag
    X[5]=0.0; //Aggrecan
    X[6]=100000.0; //Aggrecan_Collagen2
    X[7]=0.0; //ColFrag
    X[8]=0.0; //Collagen2
    X[9]=0.0; //DUSP16
    X[10]=100.0; //IL1
    X[11]=100.0; //IL1R
    X[12]=0.0; //IL1Ra
    X[13]=0.0; //IL1_IL1R
    X[14]=0.0; //IL1_IL1R_IRAK2
    X[15]=0.0; //IL1_IL1Ra
    X[16]=100.0; //IRAK2
    X[17]=0.0; //IRAK2_TRAF6
    X[18]=0.0; //IRAK2_TRAF6_PP4
    X[19]=100.0; //JAK1
    X[20]=0.0; //JAK1_P
    X[21]=100.0; //JNK
    X[22]=0.0; //JNK_P
    X[23]=0.0; //MKP1
    X[24]=0.0; //MMP1
    X[25]=0.0; //MMP13
    X[26]=0.0; //MMP13_TIMP1
    X[27]=0.0; //MMP13_TIMP3
    X[28]=0.0; //MMP13_mRNA
    X[29]=0.0; //MMP1_TIMP1
    X[30]=0.0; //MMP1_TIMP3
    X[31]=0.0; //MMP1_mRNA
    X[32]=0.0; //MMP3
    X[33]=0.0; //MMP3_TIMP1
    X[34]=0.0; //MMP3_TIMP3
    X[35]=0.0; //MMP3_mRNA
    X[36]=100.0; //Matriptase
    X[37]=1000.0; //OSM
    X[38]=100.0; //OSMR
    X[39]=0.0; //OSMR_SOCS3
    X[40]=0.0; //OSMRa
    X[41]=0.0; //OSM_OSMR
    X[42]=0.0; //OSM_OSMRa
    X[43]=0.0; //PP4
    X[44]=0.0; //PTPRT
    X[45]=0.0; //SOCS3
    X[46]=0.0; //SOCS3_mRNA
    X[47]=0.0; //SP1
    X[48]=0.0; //SP1_TIMP1_DNA
    X[49]=0.0; //STAT3_P_cyt
    X[50]=0.0; //STAT3_P_nuc
    X[51]=100.0; //STAT3_cyt
    X[52]=0.0; //STAT3_nuc
    X[53]=1.0; //Sink
    X[54]=1.0; //Source
    X[55]=200.0; //TIMP1
    X[56]=2.0; //TIMP1_DNA
    X[57]=20.0; //TIMP1_mRNA
    X[58]=200.0; //TIMP3
    X[59]=20.0; //TIMP3_mRNA
    X[60]=100.0; //TRAF6
    X[61]=0.0; //TRAF6_PP4
    X[62]=0.0; //cFos
    X[63]=0.0; //cFos_P
    X[64]=0.0; //cFos_cJun
    X[65]=0.0; //cFos_mRNA
    X[66]=100.0; //cJun
    X[67]=0.0; //cJun_P
    X[68]=0.0; //cJun_dimer
    X[69]=5.0; //cJun_mRNA
    X[70]=100.0; //p38
    X[71]=0.0; //p38_P
    X[72]=0.0; //proMMP1
    X[73]=0.0; //proMMP13
    X[74]=0.0; //proMMP3

}

template <class Precision> __forceinline__ __device__ void PerThread_Finalization(
    int tid, int NT, int& DOIDX, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR,       int* sPARi, Precision* ACC, int* ACCi
) {
	
}


#endif
