within BIOMD007;
model BIOMD0000000007 "Novak1997 - Cell Cycle" annotation(Documentation(info="<annotation>
	<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\" xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\">
	
	</rdf:RDF>
	</annotation>"));

    Parameters Params;
    Reactions Reacs;
    Class_elmt_Cell elmt_Cell;
    Class_elmt_Division elmt_Division;
    Class_elmt_Start elmt_Start;

    function prioritize_between_2
        input Real[2] prios;
        input Real[2] values;
        input Boolean[2] trigs;
        output Real value;
        protected Real min_prio;
        algorithm
            value := 0;
            min_prio := Constants.INFINITY;
            for i in 1:2 loop
                if trigs[i] and prios[i] < min_prio then
                    value := values[i];
                    min_prio := prios[i];
                end if;
            end for;
    end prioritize_between_2;
    equation
        Params.elmt_UbE = elmt_Cell.elmt_UbE;
        Params.elmt_Wee1 = elmt_Cell.elmt_Wee1;
        Params.elmt_UbE2 = elmt_Cell.elmt_UbE2;
        Params.elmt_Cdc25 = elmt_Cell.elmt_Cdc25;
        Params.elmt_Division = elmt_Division.trigger;
        Params.elmt_Start = elmt_Start.execution;
        Reacs.elmt_UbE = elmt_Cell.elmt_UbE;
        Reacs.elmt_Kmw = Params.elmt_Kmw;
        Reacs.elmt_Kmu = Params.elmt_Kmu;
        Reacs.elmt_kur = Params.elmt_kur;
        Reacs.elmt_G1R = elmt_Cell.elmt_G1R;
        Reacs.elmt_k7r = Params.elmt_k7r;
        Reacs.elmt_UbE2B = elmt_Cell.elmt_UbE2B;
        Reacs.elmt_Wee1B = elmt_Cell.elmt_Wee1B;
        Reacs.elmt_G1K = elmt_Cell.elmt_G1K;
        Reacs.elmt_kur2 = Params.elmt_kur2;
        Reacs.elmt_R = elmt_Cell.elmt_R;
        Reacs.elmt_k1 = Params.elmt_k1;
        Reacs.elmt_kir = Params.elmt_kir;
        Reacs.elmt_Kmu2 = Params.elmt_Kmu2;
        Reacs.elmt_k8 = Params.elmt_k8;
        Reacs.elmt_G2K = elmt_Cell.elmt_G2K;
        Reacs.elmt_k6 = Params.elmt_k6;
        Reacs.elmt_k7 = Params.elmt_k7;
        Reacs.elmt_k6prime = Params.elmt_k6prime;
        Reacs.elmt_k4 = Params.elmt_k4;
        Reacs.elmt_k5 = Params.elmt_k5;
        Reacs.elmt_k2 = Params.elmt_k2;
        Reacs.elmt_k3 = Params.elmt_k3;
        Reacs.elmt_G2R = elmt_Cell.elmt_G2R;
        Reacs.elmt_Wee1 = elmt_Cell.elmt_Wee1;
        Reacs.elmt_k8r = Params.elmt_k8r;
        Reacs.elmt_Kmwr = Params.elmt_Kmwr;
        Reacs.elmt_k25 = Params.elmt_k25;
        Reacs.elmt_Cdc25B = elmt_Cell.elmt_Cdc25B;
        Reacs.elmt_IE = elmt_Cell.elmt_IE;
        Reacs.elmt_UbEB = elmt_Cell.elmt_UbEB;
        Reacs.elmt_ku2 = Params.elmt_ku2;
        Reacs.elmt_UbE2 = elmt_Cell.elmt_UbE2;
        Reacs.elmt_k2prime = Params.elmt_k2prime;
        Reacs.elmt_kwr = Params.elmt_kwr;
        Reacs.elmt_Cdc25 = elmt_Cell.elmt_Cdc25;
        Reacs.elmt_MPF = elmt_Cell.elmt_MPF;
        Reacs.elmt_Kmcr = Params.elmt_Kmcr;
        Reacs.elmt_SPF = elmt_Cell.elmt_SPF;
        Reacs.elmt_kp = Params.elmt_kp;
        Reacs.elmt_Kmur = Params.elmt_Kmur;
        Reacs.elmt_Kmir = Params.elmt_Kmir;
        Reacs.elmt_kw = Params.elmt_kw;
        Reacs.elmt_PG2 = elmt_Cell.elmt_PG2;
        Reacs.elmt_ku = Params.elmt_ku;
        Reacs.elmt_kcr = Params.elmt_kcr;
        Reacs.elmt_PG2R = elmt_Cell.elmt_PG2R;
        Reacs.elmt_Kmi = Params.elmt_Kmi;
        Reacs.elmt_Mass = Params.elmt_Mass;
        Reacs.elmt_IEB = elmt_Cell.elmt_IEB;
        Reacs.elmt_Kmc = Params.elmt_Kmc;
        Reacs.elmt_kwee = Params.elmt_kwee;
        Reacs.elmt_ki = Params.elmt_ki;
        Reacs.elmt_Kmp = Params.elmt_Kmp;
        Reacs.elmt_Kmur2 = Params.elmt_Kmur2;
        Reacs.elmt_kc = Params.elmt_kc;
        elmt_Cell.elmt_PG2R_Creation = Reacs.elmt_PG2R_Creation;
        elmt_Cell.elmt_product30 = Reacs.elmt_product30;
        elmt_Cell.elmt_PG2R_Dissociation_UbE = Reacs.elmt_PG2R_Dissociation_UbE;
        elmt_Cell.elmt_product33 = Reacs.elmt_product33;
        elmt_Cell.elmt_product32 = Reacs.elmt_product32;
        elmt_Cell.elmt_Cig1 = Params.elmt_Cig1;
        elmt_Cell.elmt_Cdc2Phos = Reacs.elmt_Cdc2Phos;
        elmt_Cell.elmt_RumDegInG1R = Reacs.elmt_RumDegInG1R;
        elmt_Cell.elmt_product25 = Reacs.elmt_product25;
        elmt_Cell.elmt_product28 = Reacs.elmt_product28;
        elmt_Cell.elmt_product40 = Reacs.elmt_product40;
        elmt_Cell.elmt_product44 = Reacs.elmt_product44;
        elmt_Cell.elmt_product42 = Reacs.elmt_product42;
        elmt_Cell.elmt_Cdc25_Reaction = Reacs.elmt_Cdc25_Reaction;
        elmt_Cell.elmt_G1K_Creation = Reacs.elmt_G1K_Creation;
        elmt_Cell.elmt_Rum1Deg = Reacs.elmt_Rum1Deg;
        elmt_Cell.elmt_reactant15 = Reacs.elmt_reactant15;
        elmt_Cell.elmt_G1R_Binding = Reacs.elmt_G1R_Binding;
        elmt_Cell.elmt_reactant17 = Reacs.elmt_reactant17;
        elmt_Cell.elmt_reactant10 = Reacs.elmt_reactant10;
        elmt_Cell.elmt_reactant12 = Reacs.elmt_reactant12;
        elmt_Cell.elmt_reactant13 = Reacs.elmt_reactant13;
        elmt_Cell.elmt_product38 = Reacs.elmt_product38;
        elmt_Cell.elmt_G2R_Creation = Reacs.elmt_G2R_Creation;
        elmt_Cell.elmt_Rum1DegInPG2R = Reacs.elmt_Rum1DegInPG2R;
        elmt_Cell.elmt_product36 = Reacs.elmt_product36;
        elmt_Cell.elmt_IE_Reaction = Reacs.elmt_IE_Reaction;
        elmt_Cell.elmt_G2K_Creation = Reacs.elmt_G2K_Creation;
        elmt_Cell.elmt_reactant20 = Reacs.elmt_reactant20;
        elmt_Cell.elmt_Rum1_Deg_SPF = Reacs.elmt_Rum1_Deg_SPF;
        elmt_Cell.elmt_product11 = Reacs.elmt_product11;
        elmt_Cell.elmt_G2K_dissoc = Reacs.elmt_G2K_dissoc;
        elmt_Cell.elmt_G2R_Dissociation = Reacs.elmt_G2R_Dissociation;
        elmt_Cell.elmt_reactant26 = Reacs.elmt_reactant26;
        elmt_Cell.elmt_PG2R_Dissociation = Reacs.elmt_PG2R_Dissociation;
        elmt_Cell.elmt_reactant27 = Reacs.elmt_reactant27;
        elmt_Cell.elmt_reactant22 = Reacs.elmt_reactant22;
        elmt_Cell.elmt_reactant24 = Reacs.elmt_reactant24;
        elmt_Cell.elmt_reactant18 = Reacs.elmt_reactant18;
        elmt_Cell.elmt_reactant19 = Reacs.elmt_reactant19;
        elmt_Cell.elmt_alpha = Params.elmt_alpha;
        elmt_Cell.elmt_G2R_Dissociation_UbE = Reacs.elmt_G2R_Dissociation_UbE;
        elmt_Cell.elmt_reactant2 = Reacs.elmt_reactant2;
        elmt_Cell.elmt_product9 = Reacs.elmt_product9;
        elmt_Cell.elmt_beta = Params.elmt_beta;
        elmt_Cell.elmt_reactant4 = Reacs.elmt_reactant4;
        elmt_Cell.elmt_Wee1_Reaction = Reacs.elmt_Wee1_Reaction;
        elmt_Cell.elmt_product6 = Reacs.elmt_product6;
        elmt_Cell.elmt_reactant31 = Reacs.elmt_reactant31;
        elmt_Cell.elmt_product23 = Reacs.elmt_product23;
        elmt_Cell.elmt_reactant5 = Reacs.elmt_reactant5;
        elmt_Cell.elmt_G1R_Dissociation = Reacs.elmt_G1R_Dissociation;
        elmt_Cell.elmt_reactant8 = Reacs.elmt_reactant8;
        elmt_Cell.elmt_product21 = Reacs.elmt_product21;
        elmt_Cell.elmt_reactant7 = Reacs.elmt_reactant7;
        elmt_Cell.elmt_product1 = Reacs.elmt_product1;
        elmt_Cell.elmt_product0 = Reacs.elmt_product0;
        elmt_Cell.elmt_PG2_dissoc = Reacs.elmt_PG2_dissoc;
        elmt_Cell.elmt_UbE2_Reaction = Reacs.elmt_UbE2_Reaction;
        elmt_Cell.elmt_product3 = Reacs.elmt_product3;
        elmt_Cell.elmt_G1K_Dissociation = Reacs.elmt_G1K_Dissociation;
        elmt_Cell.elmt_reactant34 = Reacs.elmt_reactant34;
        elmt_Cell.elmt_Rum1_Production = Reacs.elmt_Rum1_Production;
        elmt_Cell.elmt_Rum1DegInG2R = Reacs.elmt_Rum1DegInG2R;
        elmt_Cell.elmt_reactant29 = Reacs.elmt_reactant29;
        elmt_Cell.elmt_UbE_Reaction = Reacs.elmt_UbE_Reaction;
        elmt_Cell.elmt_product16 = Reacs.elmt_product16;
        elmt_Cell.elmt_product14 = Reacs.elmt_product14;
        elmt_Start.elmt_kp = Params.elmt_kp;
        elmt_Start.elmt_SPF = elmt_Cell.elmt_SPF;
        elmt_Division.elmt_kp = Params.elmt_kp;
        elmt_Division.elmt_UbE = elmt_Cell.elmt_UbE;
        elmt_Division.elmt_Mass = Params.elmt_Mass;

        Params.assign_elmt_kp = prioritize_between_2({Constants.NEGATIVE_INFINITY, Constants.NEGATIVE_INFINITY}, {elmt_Division.value_elmt_kp, elmt_Start.value_elmt_kp}, {edge(elmt_Division.trigger), edge(elmt_Start.execution)});
        Params.assign_elmt_Mass = elmt_Division.value_elmt_Mass;
end BIOMD0000000007;
