----- PARSING FILE: Class_elmt_CYTOPLASM.mo -----

der(elmt_M_amount) =  ((elmt_rM * elmt_product1) + (- (elmt_rmRNAd * elmt_reactant16)))
der(elmt_P1_amount) =  ((elmt_rP01 * elmt_product5) + (- (elmt_rP12 * elmt_reactant8)) + (- (elmt_rP10 * elmt_reactant6)) + (elmt_rP21 * elmt_product11))
der(elmt_P2_amount) =  ((elmt_rPn2 * elmt_product15) + (elmt_rP12 * elmt_product9) + (- (elmt_rVd * elmt_reactant18)) + (- (elmt_rP21 * elmt_reactant10)) + (- (elmt_rP2n * elmt_reactant12)))
der(elmt_P0_amount) =  ((- (elmt_rP01 * elmt_reactant4)) + (elmt_rP10 * elmt_product7) + (elmt_rTL * elmt_product3))

----- BUILDING ODE SYSTEM FOR: Class_elmt_CYTOPLASM.mo -----


Initial Equation (
	elmt_CYTOPLASM =  1.0E-15
	elmt_M_conc =  0.1
	elmt_P1_conc =  0.25
	elmt_P2_conc =  0.25
	elmt_P0_conc =  0.25
)
Init ODE(
	assert(elmt_CYTOPLASM > =  0, "Compartment size became negative. Make sure this is a valid bahaviour.")
	der(elmt_CYTOPLASM) =  0
	elmt_M =  elmt_M_conc
	elmt_Pt =  elmt_Pt_conc
	elmt_P1 =  elmt_P1_conc
	elmt_P2 =  elmt_P2_conc
	elmt_P0 =  elmt_P0_conc
	elmt_Pt_amount =  (elmt_P0 + elmt_P1 + elmt_P2 + elmt_Pn) * elmt_CYTOPLASM
	der(elmt_M_amount) =  ((elmt_rM * elmt_product1) + (- (elmt_rmRNAd * elmt_reactant16)))
	der(elmt_P1_amount) =  ((elmt_rP01 * elmt_product5) + (- (elmt_rP12 * elmt_reactant8)) + (- (elmt_rP10 * elmt_reactant6)) + (elmt_rP21 * elmt_product11))
	der(elmt_P2_amount) =  ((elmt_rPn2 * elmt_product15) + (elmt_rP12 * elmt_product9) + (- (elmt_rVd * elmt_reactant18)) + (- (elmt_rP21 * elmt_reactant10)) + (- (elmt_rP2n * elmt_reactant12)))
	der(elmt_P0_amount) =  ((- (elmt_rP01 * elmt_reactant4)) + (elmt_rP10 * elmt_product7) + (elmt_rTL * elmt_product3))
)


                                                     
template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(    
    int tid, int NT, \                                                              
    Precision*    F, Precision*    X, Precision     T, \                            
    Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi   
) {                                                                                 
	F[0] =  0, "Compartment size became negative. Make sure this is a valid bahaviour.")
	F[1] =  0
	F[2] =  elmt_M_conc
	F[3] =  elmt_Pt_conc
	F[4] =  elmt_P1_conc
	F[5] =  elmt_P2_conc
	F[6] =  elmt_P0_conc
	F[7] =  (elmt_P0 + elmt_P1 + elmt_P2 + elmt_Pn) * elmt_CYTOPLASM
	F[8] =  ((elmt_rM * elmt_product1) + (- (elmt_rmRNAd * elmt_reactant16)))
	F[9] =  ((elmt_rP01 * elmt_product5) + (- (elmt_rP12 * elmt_reactant8)) + (- (elmt_rP10 * elmt_reactant6)) + (elmt_rP21 * elmt_product11))
	F[10] =  ((elmt_rPn2 * elmt_product15) + (elmt_rP12 * elmt_product9) + (- (elmt_rVd * elmt_reactant18)) + (- (elmt_rP21 * elmt_reactant10)) + (- (elmt_rP2n * elmt_reactant12)))
	F[11] =  ((- (elmt_rP01 * elmt_reactant4)) + (elmt_rP10 * elmt_product7) + (elmt_rTL * elmt_product3))
                                                                                  
}                                                                                   


----- PARSING FILE: Reactions.mo -----


----- BUILDING ODE SYSTEM FOR: Reactions.mo -----


Initial Equation (
	elmt_product9 =  1.0
	elmt_reactant2 =  1.0
	elmt_reactant4 =  1.0
	elmt_product7 =  1.0
	elmt_reactant6 =  1.0
	elmt_product11 =  1.0
	elmt_reactant8 =  1.0
	elmt_reactant14 =  1.0
	elmt_product1 =  1.0
	elmt_reactant16 =  1.0
	elmt_product5 =  1.0
	elmt_reactant10 =  1.0
	elmt_reactant0 =  1.0
	elmt_reactant12 =  1.0
	elmt_product3 =  1.0
	elmt_reactant18 =  1.0
	elmt_product15 =  1.0
	elmt_product13 =  1.0
	elmt_product19 =  1.0
	elmt_product17 =  1.0
)
Init ODE(
	elmt_rPn2 =  (elmt_rPn2_elmt_k2 * elmt_Pn * elmt_compartment_0000004)
	elmt_rP01 =  ((elmt_CYTOPLASM * elmt_rP01_elmt_V1 * elmt_P0) / (elmt_rP01_elmt_K1 + elmt_P0))
	elmt_rP12 =  ((elmt_CYTOPLASM * elmt_rP12_elmt_V3 * elmt_P1) / (elmt_rP12_elmt_K3 + elmt_P1))
	elmt_rVd =  ((elmt_CYTOPLASM * elmt_rVd_elmt_Vd * elmt_P2) / (elmt_rVd_elmt_Kd + elmt_P2))
	elmt_rP10 =  ((elmt_CYTOPLASM * elmt_rP10_elmt_V2 * elmt_P1) / (elmt_rP10_elmt_K2 + elmt_P1))
	elmt_rP21 =  ((elmt_CYTOPLASM * elmt_rP21_elmt_V4 * elmt_P2) / (elmt_rP21_elmt_K4 + elmt_P2))
	elmt_rM =  ((elmt_default * elmt_rM_elmt_Vs * Functions.pow(elmt_rM_elmt_KI, elmt_rM_elmt_n)) / (Functions.pow(elmt_rM_elmt_KI, elmt_rM_elmt_n) + Functions.pow(elmt_Pn, elmt_rM_elmt_n)))
	elmt_rmRNAd =  ((elmt_rmRNAd_elmt_Vm * elmt_M * elmt_CYTOPLASM) / (elmt_rmRNAd_elmt_Km + elmt_M))
	elmt_rP2n =  (elmt_rP2n_elmt_k1 * elmt_P2 * elmt_CYTOPLASM)
	elmt_rTL =  (elmt_rTL_elmt_ks * elmt_M * elmt_default)
	der(elmt_product9) =  0
	der(elmt_reactant2) =  0
	der(elmt_reactant4) =  0
	der(elmt_product7) =  0
	der(elmt_reactant6) =  0
	der(elmt_product11) =  0
	der(elmt_reactant8) =  0
	der(elmt_reactant14) =  0
	der(elmt_product1) =  0
	der(elmt_reactant16) =  0
	der(elmt_product5) =  0
	der(elmt_reactant10) =  0
	der(elmt_reactant0) =  0
	der(elmt_reactant12) =  0
	der(elmt_product3) =  0
	der(elmt_reactant18) =  0
	der(elmt_product15) =  0
	der(elmt_product13) =  0
	der(elmt_product19) =  0
	der(elmt_product17) =  0
)
