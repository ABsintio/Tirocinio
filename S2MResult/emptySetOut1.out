
template<class Precision> __forceinline__ __device__ void PerThread_OdeFunction(
	int tid, int NT, \
	Precision*    F, Precision*    X, Precision     T, \
	Precision* cPAR, Precision* sPAR, int*      sPARi, Precision* ACC, int* ACCi  		
) {
	X[0] = cPAR[2] * sPAR[14] - cPAR[9] * sPAR[9];
	X[1] = cPAR[6] * sPAR[3] + cPAR[5] * sPAR[0] - cPAR[10] * sPAR[15];
	X[2] = cPAR[3] * sPAR[11] + (-cPAR[4]) * sPAR[4] - cPAR[5] * sPAR[6];
	X[3] = cPAR[7] * sPAR[17] + (-cPAR[8]) * sPAR[7] - cPAR[5] * sPAR[5];
	X[4] = cPAR[4] * sPAR[1] + cPAR[2] * sPAR[8] - cPAR[3] * sPAR[2];
	X[5] = cPAR[10] * sPAR[18] + (-cPAR[6]) * sPAR[10] - cPAR[2] * sPAR[13];

}


template<class Precision> __forceinline__ __device__ void PerThread_ActionAfterSuccessfulTimeStep(
    int tid, int NT, int& UDT, \
    Precision&    T, Precision&   dT, Precision*    TD, Precision*   X, \
    Precision* cPAR, Precision* sPAR, int*       sPARi, Precision* ACC, int* ACCi
) {
	ACC[0] = X[5]/sPAR[20];
	ACC[1] = cPAR[1]/sPAR[20];
	ACC[2] = X[4]/sPAR[20];
	ACC[3] = X[3]/sPAR[20];
	ACC[4] = elmt_cell.elmt_EmptySet_amount/sPAR[20];
	ACC[5] = X[2]/sPAR[20];
	ACC[6] = X[1]/sPAR[20];
	ACC[7] = cPAR[0]/sPAR[20];
	ACC[8] = X[0]/sPAR[20];
	cPAR[0] = (ACC[3] + ACC[8] + ACC[0] + ACC[6]) * sPAR[20];
	cPAR[1] = (ACC[2] + ACC[5] + ACC[0] + ACC[6]) * sPAR[20];
	cPAR[2] = sPAR[20] * sPAR[30] * ACC[0];
	cPAR[3] = sPAR[20] * ACC[2] * sPAR[29];
	cPAR[4] = sPAR[20] * ACC[5] * sPAR[28];
	cPAR[5] = sPAR[20] * ACC[5] * sPAR[27] * ACC[3];
	cPAR[6] = sPAR[20] * sPAR[26] * ACC[0];
	cPAR[7] = sPAR[20] * sPAR[25];
	cPAR[8] = sPAR[20] * sPAR[24] * ACC[3];
	cPAR[9] = sPAR[20] * sPAR[23] * ACC[8];
	cPAR[10] = sPAR[20] * ACC[6] * (sPAR[21] + sPAR[22] * pow(ACC[0] / ACC[1], 2.0));

}

