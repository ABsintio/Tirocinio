within BIOMD128;
class Parameters

    input Real elmt_cAMP;
    input Real elmt_cer;
    input Real elmt_c;

    input Boolean elmt_event_0000001;
    input Real assign_elmt_IP3;
    input Real assign_elmt_girk;
    input Real assign_elmt_ETswitch;


    Real elmt_minf(unit = "") "";
    Real elmt_o(unit = "") "";
    Real elmt_n(unit = "") "delayed rectifier activation";
    Real elmt_h(unit = "") "";
    Real elmt_f(unit = "") "";
    Real elmt_igirk(unit = "") "";
    Real elmt_ainf(unit = "") "";
    Real elmt_perl_inf(unit = "") "";
    Real elmt_V(unit = "") "voltage";
    Real elmt_jmemtot(unit = "") "";
    Real elmt_cAMPlow(unit = "") "";
    Real elmt_ninf(unit = "") "";
    Real elmt_vca(unit = "") "";
    Real elmt_ik(unit = "") "";
    Real elmt_jerp(unit = "") "";
    Real elmt_binf(unit = "") "";
    Real elmt_inh(unit = "") "variable for direct inhibition of secretion";
    Real elmt_tauh(unit = "") "";
    Real elmt_IP3(unit = "") "";
    Real elmt_taun(unit = "") "";
    Real elmt_jerip3(unit = "") "";
    Real elmt_lambda(unit = "") "";
    Real elmt_sigmav(unit = "") "";
    Real elmt_jerleak(unit = "") "";
    Real elmt_jertot(unit = "") "";
    Real elmt_girk(unit = "") "";
    Real elmt_vk(unit = "") "";
    Real elmt_ica(unit = "") "";
    Real elmt_gca(unit = "") "";
    Real elmt_vh(unit = "") "";
    Real elmt_alpha(unit = "") "";
    Real elmt_ETswitch(unit = "") "";
    Real elmt_vm(unit = "") "";
    Real elmt_dact(unit = "") "";
    Real elmt_vn(unit = "") "";
    Real elmt_gk(unit = "") "";
    Real elmt_fer(unit = "") "";
    Real elmt_perl(unit = "") "";
    Real elmt_taudir(unit = "") "";
    Real elmt_kserca(unit = "") "";
    Real elmt_hinf(unit = "") "";
    Real elmt_cm(unit = "") "";
    Real elmt_sh(unit = "") "";
    Real elmt_dinh(unit = "") "";
    Real elmt_hinfer(unit = "") "";
    Real elmt_dip3(unit = "") "";
    Real elmt_ki(unit = "") "";
    Real elmt_sn(unit = "") "";
    Real elmt_sm(unit = "") "";
    Real elmt_kc(unit = "") "";


    initial equation
        elmt_n = 0.0;
        elmt_h = 0.0;
        elmt_f = 0.01;
        elmt_V = (-60.0);
        elmt_cAMPlow = 0.2;
        elmt_vca = 25.0;
        elmt_inh = 1.0;
        elmt_tauh = 20.0;
        elmt_IP3 = 0.0;
        elmt_taun = 20.0;
        elmt_lambda = 1.25;
        elmt_sigmav = 10.0;
        elmt_girk = 1000.0;
        elmt_vk = (-75.0);
        elmt_gca = 2000.0;
        elmt_vh = (-20.0);
        elmt_alpha = 4.5E-6;
        elmt_ETswitch = 0.0;
        elmt_vm = (-20.0);
        elmt_dact = 0.35;
        elmt_vn = (-16.0);
        elmt_gk = 3500.0;
        elmt_fer = 0.01;
        elmt_perl = 5.0E-4;
        elmt_taudir = 20000.0;
        elmt_kserca = 0.4;
        elmt_cm = 5300.0;
        elmt_sh = 70.0;
        elmt_dinh = 0.4;
        elmt_dip3 = 0.5;
        elmt_ki = 0.5;
        elmt_sn = 5.0;
        elmt_sm = 12.0;
        elmt_kc = 0.15;


    equation
        elmt_minf = (1.0 / (1.0 + exp(((elmt_vm - elmt_V) / elmt_sm))));
        elmt_o = (Functions.pow(elmt_ainf, 3.0) * Functions.pow(elmt_binf, 3.0) * Functions.pow(elmt_hinfer, 3.0));
        der(elmt_n) = ((elmt_lambda * (elmt_ninf - elmt_n)) / elmt_taun);
        der(elmt_h) = ((elmt_hinf - elmt_h) / elmt_tauh);
        der(elmt_f) = 0;
        elmt_igirk = (elmt_girk * elmt_h * (elmt_V - elmt_vk));
        elmt_ainf = (1.0 / (1.0 + (elmt_dact / elmt_c)));
        elmt_perl_inf = ((elmt_inh * elmt_cAMP * Functions.pow(elmt_c, 4.0)) / (Functions.pow(elmt_ki, 4.0) + Functions.pow(elmt_c, 4.0)));
        der(elmt_V) = ((((- elmt_ica) - elmt_ik) - elmt_igirk) / elmt_cm);
        elmt_jmemtot = (- ((elmt_alpha * elmt_ica) + (elmt_kc * elmt_c)));
        der(elmt_cAMPlow) = 0;
        elmt_ninf = (1.0 / (1.0 + exp(((elmt_vn - elmt_V) / elmt_sn))));
        der(elmt_vca) = 0;
        elmt_ik = (elmt_gk * elmt_n * (elmt_V - elmt_vk));
        elmt_jerp = (elmt_kserca * elmt_c);
        elmt_binf = (elmt_IP3 / (elmt_IP3 + elmt_dip3));
        der(elmt_inh) = (elmt_ETswitch * ((0.2 - elmt_inh) / elmt_taudir));
        der(elmt_tauh) = 0;
        der(elmt_IP3) = 0.0;
        der(elmt_taun) = 0;
        elmt_jerip3 = (elmt_o * (elmt_cer - elmt_c));
        der(elmt_lambda) = 0;
        der(elmt_sigmav) = 0;
        elmt_jerleak = (elmt_perl * (elmt_cer - elmt_c));
        elmt_jertot = ((elmt_jerleak + elmt_jerip3) - elmt_jerp);
        der(elmt_girk) = 0.0;
        der(elmt_vk) = 0;
        elmt_ica = (elmt_gca * elmt_minf * (elmt_V - elmt_vca));
        der(elmt_gca) = 0;
        der(elmt_vh) = 0;
        der(elmt_alpha) = 0;
        der(elmt_ETswitch) = 0.0;
        der(elmt_vm) = 0;
        der(elmt_dact) = 0;
        der(elmt_vn) = 0;
        der(elmt_gk) = 0;
        der(elmt_fer) = 0;
        der(elmt_perl) = 0;
        der(elmt_taudir) = 0;
        der(elmt_kserca) = 0;
        elmt_hinf = (1.0 / (1.0 + exp(((elmt_vh - elmt_V) / elmt_sh))));
        der(elmt_cm) = 0;
        der(elmt_sh) = 0;
        der(elmt_dinh) = 0;
        elmt_hinfer = (1.0 / (1.0 + (elmt_c / elmt_dinh)));
        der(elmt_dip3) = 0;
        der(elmt_ki) = 0;
        der(elmt_sn) = 0;
        der(elmt_sm) = 0;
        der(elmt_kc) = 0;

        when elmt_event_0000001 then
            reinit(elmt_IP3, assign_elmt_IP3);
            reinit(elmt_girk, assign_elmt_girk);
            reinit(elmt_ETswitch, assign_elmt_ETswitch);
        end when;
end Parameters;
